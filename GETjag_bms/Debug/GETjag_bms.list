
GETjag_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fad8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800fca8  0800fca8  00010ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102a0  080102a0  000120d8  2**0
                  CONTENTS
  4 .ARM          00000008  080102a0  080102a0  000112a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102a8  080102a8  000120d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102a8  080102a8  000112a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080102ac  080102ac  000112ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  080102b0  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014a8c  200000d8  08010388  000120d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014b64  08010388  00012b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000120d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002231f  00000000  00000000  00012108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000504c  00000000  00000000  00034427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fe0  00000000  00000000  00039478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018ea  00000000  00000000  0003b458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028904  00000000  00000000  0003cd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000262ad  00000000  00000000  00065646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee35b  00000000  00000000  0008b8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179c4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009488  00000000  00000000  00179c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0018311c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fc90 	.word	0x0800fc90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	0800fc90 	.word	0x0800fc90

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20013440 	.word	0x20013440

080002a4 <strcmp>:
 80002a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	bf28      	it	cs
 80002b0:	429a      	cmpcs	r2, r3
 80002b2:	d0f7      	beq.n	80002a4 <strcmp>
 80002b4:	1ad0      	subs	r0, r2, r3
 80002b6:	4770      	bx	lr

080002b8 <strlen>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d1fb      	bne.n	80002ba <strlen+0x2>
 80002c2:	1a18      	subs	r0, r3, r0
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	@ 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2uiz>:
 8000c48:	004a      	lsls	r2, r1, #1
 8000c4a:	d211      	bcs.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c50:	d211      	bcs.n	8000c76 <__aeabi_d2uiz+0x2e>
 8000c52:	d50d      	bpl.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d40e      	bmi.n	8000c7c <__aeabi_d2uiz+0x34>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c7a:	d102      	bne.n	8000c82 <__aeabi_d2uiz+0x3a>
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c80:	4770      	bx	lr
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2f>:
 8000c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c90:	bf24      	itt	cs
 8000c92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c9a:	d90d      	bls.n	8000cb8 <__aeabi_d2f+0x30>
 8000c9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ca0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ca8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000cac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cbc:	d121      	bne.n	8000d02 <__aeabi_d2f+0x7a>
 8000cbe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000cc2:	bfbc      	itt	lt
 8000cc4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000cc8:	4770      	bxlt	lr
 8000cca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cd2:	f1c2 0218 	rsb	r2, r2, #24
 8000cd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cde:	fa20 f002 	lsr.w	r0, r0, r2
 8000ce2:	bf18      	it	ne
 8000ce4:	f040 0001 	orrne.w	r0, r0, #1
 8000ce8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf4:	ea40 000c 	orr.w	r0, r0, ip
 8000cf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d00:	e7cc      	b.n	8000c9c <__aeabi_d2f+0x14>
 8000d02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d06:	d107      	bne.n	8000d18 <__aeabi_d2f+0x90>
 8000d08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d16:	4770      	bxne	lr
 8000d18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d3c:	f000 b96a 	b.w	8001014 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	460c      	mov	r4, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14e      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d64:	4694      	mov	ip, r2
 8000d66:	458c      	cmp	ip, r1
 8000d68:	4686      	mov	lr, r0
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	d962      	bls.n	8000e36 <__udivmoddi4+0xde>
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0320 	rsb	r3, r2, #32
 8000d76:	4091      	lsls	r1, r2
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	4319      	orrs	r1, r3
 8000d82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f f68c 	uxth.w	r6, ip
 8000d8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d96:	fb07 1114 	mls	r1, r7, r4, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb04 f106 	mul.w	r1, r4, r6
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dae:	f080 8112 	bcs.w	8000fd6 <__udivmoddi4+0x27e>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 810f 	bls.w	8000fd6 <__udivmoddi4+0x27e>
 8000db8:	3c02      	subs	r4, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	fa1f f38e 	uxth.w	r3, lr
 8000dc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f606 	mul.w	r6, r0, r6
 8000dd2:	429e      	cmp	r6, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x94>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dde:	f080 80fc 	bcs.w	8000fda <__udivmoddi4+0x282>
 8000de2:	429e      	cmp	r6, r3
 8000de4:	f240 80f9 	bls.w	8000fda <__udivmoddi4+0x282>
 8000de8:	4463      	add	r3, ip
 8000dea:	3802      	subs	r0, #2
 8000dec:	1b9b      	subs	r3, r3, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	b11d      	cbz	r5, 8000dfe <__udivmoddi4+0xa6>
 8000df6:	40d3      	lsrs	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d905      	bls.n	8000e12 <__udivmoddi4+0xba>
 8000e06:	b10d      	cbz	r5, 8000e0c <__udivmoddi4+0xb4>
 8000e08:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e7f5      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e12:	fab3 f183 	clz	r1, r3
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d146      	bne.n	8000ea8 <__udivmoddi4+0x150>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d302      	bcc.n	8000e24 <__udivmoddi4+0xcc>
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f0c0 80f0 	bcc.w	8001004 <__udivmoddi4+0x2ac>
 8000e24:	1a86      	subs	r6, r0, r2
 8000e26:	eb64 0303 	sbc.w	r3, r4, r3
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d0e6      	beq.n	8000dfe <__udivmoddi4+0xa6>
 8000e30:	e9c5 6300 	strd	r6, r3, [r5]
 8000e34:	e7e3      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	f040 8090 	bne.w	8000f5c <__udivmoddi4+0x204>
 8000e3c:	eba1 040c 	sub.w	r4, r1, ip
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e52:	fb08 4416 	mls	r4, r8, r6, r4
 8000e56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5a:	fb07 f006 	mul.w	r0, r7, r6
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x11c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x11a>
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	f200 80cd 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e72:	4626      	mov	r6, r4
 8000e74:	1a1c      	subs	r4, r3, r0
 8000e76:	fa1f f38e 	uxth.w	r3, lr
 8000e7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb00 f707 	mul.w	r7, r0, r7
 8000e8a:	429f      	cmp	r7, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x148>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x146>
 8000e98:	429f      	cmp	r7, r3
 8000e9a:	f200 80b0 	bhi.w	8000ffe <__udivmoddi4+0x2a6>
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	1bdb      	subs	r3, r3, r7
 8000ea2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0x9c>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ebc:	ea43 030c 	orr.w	r3, r3, ip
 8000ec0:	40f4      	lsrs	r4, r6
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	0c38      	lsrs	r0, r7, #16
 8000ec8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ecc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000edc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ee0:	45a1      	cmp	r9, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	d90a      	bls.n	8000efe <__udivmoddi4+0x1a6>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eee:	f080 8084 	bcs.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef2:	45a1      	cmp	r9, r4
 8000ef4:	f240 8081 	bls.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d907      	bls.n	8000f2a <__udivmoddi4+0x1d2>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f20:	d267      	bcs.n	8000ff2 <__udivmoddi4+0x29a>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d965      	bls.n	8000ff2 <__udivmoddi4+0x29a>
 8000f26:	3b02      	subs	r3, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f32:	eba4 040c 	sub.w	r4, r4, ip
 8000f36:	429c      	cmp	r4, r3
 8000f38:	46ce      	mov	lr, r9
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	d351      	bcc.n	8000fe2 <__udivmoddi4+0x28a>
 8000f3e:	d04e      	beq.n	8000fde <__udivmoddi4+0x286>
 8000f40:	b155      	cbz	r5, 8000f58 <__udivmoddi4+0x200>
 8000f42:	ebb8 030e 	subs.w	r3, r8, lr
 8000f46:	eb64 040c 	sbc.w	r4, r4, ip
 8000f4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4e:	40cb      	lsrs	r3, r1
 8000f50:	431e      	orrs	r6, r3
 8000f52:	40cc      	lsrs	r4, r1
 8000f54:	e9c5 6400 	strd	r6, r4, [r5]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e750      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000f5c:	f1c2 0320 	rsb	r3, r2, #32
 8000f60:	fa20 f103 	lsr.w	r1, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa24 f303 	lsr.w	r3, r4, r3
 8000f6c:	4094      	lsls	r4, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f78:	fa1f f78c 	uxth.w	r7, ip
 8000f7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f80:	fb08 3110 	mls	r1, r8, r0, r3
 8000f84:	0c23      	lsrs	r3, r4, #16
 8000f86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f8a:	fb00 f107 	mul.w	r1, r0, r7
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x24c>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f9a:	d22c      	bcs.n	8000ff6 <__udivmoddi4+0x29e>
 8000f9c:	4299      	cmp	r1, r3
 8000f9e:	d92a      	bls.n	8000ff6 <__udivmoddi4+0x29e>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fac:	fb08 3311 	mls	r3, r8, r1, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb01 f307 	mul.w	r3, r1, r7
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x276>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fc4:	d213      	bcs.n	8000fee <__udivmoddi4+0x296>
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	d911      	bls.n	8000fee <__udivmoddi4+0x296>
 8000fca:	3902      	subs	r1, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	1ae4      	subs	r4, r4, r3
 8000fd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd4:	e739      	b.n	8000e4a <__udivmoddi4+0xf2>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	e6f0      	b.n	8000dbc <__udivmoddi4+0x64>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e706      	b.n	8000dec <__udivmoddi4+0x94>
 8000fde:	45c8      	cmp	r8, r9
 8000fe0:	d2ae      	bcs.n	8000f40 <__udivmoddi4+0x1e8>
 8000fe2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fea:	3801      	subs	r0, #1
 8000fec:	e7a8      	b.n	8000f40 <__udivmoddi4+0x1e8>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	e7ed      	b.n	8000fce <__udivmoddi4+0x276>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	e799      	b.n	8000f2a <__udivmoddi4+0x1d2>
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	e7d4      	b.n	8000fa4 <__udivmoddi4+0x24c>
 8000ffa:	46d6      	mov	lr, sl
 8000ffc:	e77f      	b.n	8000efe <__udivmoddi4+0x1a6>
 8000ffe:	4463      	add	r3, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e74d      	b.n	8000ea0 <__udivmoddi4+0x148>
 8001004:	4606      	mov	r6, r0
 8001006:	4623      	mov	r3, r4
 8001008:	4608      	mov	r0, r1
 800100a:	e70f      	b.n	8000e2c <__udivmoddi4+0xd4>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	e730      	b.n	8000e74 <__udivmoddi4+0x11c>
 8001012:	bf00      	nop

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <Checksum>:
  }
}

unsigned char Checksum(unsigned char *ptr, unsigned char len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
  unsigned char i;
  unsigned char checksum = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < len; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e009      	b.n	8001042 <Checksum+0x2a>
    checksum += ptr[i];
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	4413      	add	r3, r2
 800103a:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < len; i++)
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	3301      	adds	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3f1      	bcc.n	800102e <Checksum+0x16>

  checksum = 0xff & ~checksum;
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	43db      	mvns	r3, r3
 800104e:	73bb      	strb	r3, [r7, #14]

  return (checksum);
 8001050:	7bbb      	ldrb	r3, [r7, #14]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <I2C_WriteReg>:
  }
  return (crc);
}

void I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af04      	add	r7, sp, #16
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	4613      	mov	r3, r2
 800106e:	71bb      	strb	r3, [r7, #6]
  uint8_t TX_Buffer[MAX_BUFFER_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001070:	4a0c      	ldr	r2, [pc, #48]	@ (80010a4 <I2C_WriteReg+0x44>)
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	ca07      	ldmia	r2, {r0, r1, r2}
 8001078:	c303      	stmia	r3!, {r0, r1}
 800107a:	801a      	strh	r2, [r3, #0]
      j = j + 1;
    }
    HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, TX_Buffer, crc_count, 1000);
  }
#else
  HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	b29a      	uxth	r2, r3
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	b29b      	uxth	r3, r3
 8001084:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001088:	9102      	str	r1, [sp, #8]
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	2110      	movs	r1, #16
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <I2C_WriteReg+0x48>)
 8001096:	f005 f89f 	bl	80061d8 <HAL_I2C_Mem_Write>
#endif
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0800fca8 	.word	0x0800fca8
 80010a8:	20000154 	.word	0x20000154

080010ac <I2C_ReadReg>:

int I2C_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af04      	add	r7, sp, #16
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
  unsigned int RX_CRC_Fail = 0; // reset to 0. If in CRC Mode and CRC fails, this will be incremented.
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  uint8_t RX_Buffer[MAX_BUFFER_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80010c0:	4a0c      	ldr	r2, [pc, #48]	@ (80010f4 <I2C_ReadReg+0x48>)
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010c8:	c303      	stmia	r3!, {r0, r1}
 80010ca:	801a      	strh	r2, [r3, #0]
      j = j + 1;
    }
    CopyArray(RX_Buffer, reg_data, crc_count);
  }
#else
  HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010d8:	9102      	str	r1, [sp, #8]
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	2110      	movs	r1, #16
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <I2C_ReadReg+0x4c>)
 80010e6:	f005 f971 	bl	80063cc <HAL_I2C_Mem_Read>
#endif
  return 0;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	0800fca8 	.word	0x0800fca8
 80010f8:	20000154 	.word	0x20000154

080010fc <BQ769x2_SetRegister>:

void BQ769x2_SetRegister(uint16_t reg_addr, uint32_t reg_data, uint8_t datalen)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	80fb      	strh	r3, [r7, #6]
 8001108:	4613      	mov	r3, r2
 800110a:	717b      	strb	r3, [r7, #5]
  uint8_t TX_Buffer[2] = {0x00, 0x00};
 800110c:	2300      	movs	r3, #0
 800110e:	82bb      	strh	r3, [r7, #20]
  uint8_t TX_RegData[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001110:	4a62      	ldr	r2, [pc, #392]	@ (800129c <BQ769x2_SetRegister+0x1a0>)
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111a:	6018      	str	r0, [r3, #0]
 800111c:	3304      	adds	r3, #4
 800111e:	8019      	strh	r1, [r3, #0]

  // TX_RegData in little endian format
  TX_RegData[0] = reg_addr & 0xff;
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	733b      	strb	r3, [r7, #12]
  TX_RegData[1] = (reg_addr >> 8) & 0xff;
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	737b      	strb	r3, [r7, #13]
  TX_RegData[2] = reg_data & 0xff; // 1st byte of data
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	73bb      	strb	r3, [r7, #14]

  switch (datalen)
 8001136:	797b      	ldrb	r3, [r7, #5]
 8001138:	2b04      	cmp	r3, #4
 800113a:	d07d      	beq.n	8001238 <BQ769x2_SetRegister+0x13c>
 800113c:	2b04      	cmp	r3, #4
 800113e:	f300 80a8 	bgt.w	8001292 <BQ769x2_SetRegister+0x196>
 8001142:	2b01      	cmp	r3, #1
 8001144:	d002      	beq.n	800114c <BQ769x2_SetRegister+0x50>
 8001146:	2b02      	cmp	r3, #2
 8001148:	d039      	beq.n	80011be <BQ769x2_SetRegister+0xc2>
    TX_Buffer[1] = 0x08;              // combined length of register address and data
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
    delayUS(2000);
    break;
  }
}
 800114a:	e0a2      	b.n	8001292 <BQ769x2_SetRegister+0x196>
    I2C_WriteReg(0x3E, TX_RegData, 3);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2203      	movs	r2, #3
 8001152:	4619      	mov	r1, r3
 8001154:	203e      	movs	r0, #62	@ 0x3e
 8001156:	f7ff ff83 	bl	8001060 <I2C_WriteReg>
    delayUS(2000);
 800115a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800115e:	f000 fcef 	bl	8001b40 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 3);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	2103      	movs	r1, #3
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff55 	bl	8001018 <Checksum>
 800116e:	4603      	mov	r3, r0
 8001170:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x05; // combined length of register address and data
 8001172:	2305      	movs	r3, #5
 8001174:	757b      	strb	r3, [r7, #21]
    uint8_t statusLow = 0xFF;
 8001176:	23ff      	movs	r3, #255	@ 0xff
 8001178:	72fb      	strb	r3, [r7, #11]
    uint8_t statusHigh = 0xFF;
 800117a:	23ff      	movs	r3, #255	@ 0xff
 800117c:	72bb      	strb	r3, [r7, #10]
      I2C_ReadReg(0x3E, &statusLow, 1);
 800117e:	f107 030b 	add.w	r3, r7, #11
 8001182:	2201      	movs	r2, #1
 8001184:	4619      	mov	r1, r3
 8001186:	203e      	movs	r0, #62	@ 0x3e
 8001188:	f7ff ff90 	bl	80010ac <I2C_ReadReg>
      I2C_ReadReg(0x3F, &statusHigh, 1);
 800118c:	f107 030a 	add.w	r3, r7, #10
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	203f      	movs	r0, #63	@ 0x3f
 8001196:	f7ff ff89 	bl	80010ac <I2C_ReadReg>
    } while (statusLow == 0xFF && statusHigh == 0xFF);
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	2bff      	cmp	r3, #255	@ 0xff
 800119e:	d102      	bne.n	80011a6 <BQ769x2_SetRegister+0xaa>
 80011a0:	7abb      	ldrb	r3, [r7, #10]
 80011a2:	2bff      	cmp	r3, #255	@ 0xff
 80011a4:	d0eb      	beq.n	800117e <BQ769x2_SetRegister+0x82>
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2202      	movs	r2, #2
 80011ac:	4619      	mov	r1, r3
 80011ae:	2060      	movs	r0, #96	@ 0x60
 80011b0:	f7ff ff56 	bl	8001060 <I2C_WriteReg>
    delayUS(2000);
 80011b4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011b8:	f000 fcc2 	bl	8001b40 <delayUS>
    break;
 80011bc:	e069      	b.n	8001292 <BQ769x2_SetRegister+0x196>
    TX_RegData[3] = (reg_data >> 8) & 0xff;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	73fb      	strb	r3, [r7, #15]
    I2C_WriteReg(0x3E, TX_RegData, 4);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2204      	movs	r2, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	203e      	movs	r0, #62	@ 0x3e
 80011d0:	f7ff ff46 	bl	8001060 <I2C_WriteReg>
    delayUS(2000);
 80011d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011d8:	f000 fcb2 	bl	8001b40 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 4);
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2104      	movs	r1, #4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff18 	bl	8001018 <Checksum>
 80011e8:	4603      	mov	r3, r0
 80011ea:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x06; // combined length of register address and data
 80011ec:	2306      	movs	r3, #6
 80011ee:	757b      	strb	r3, [r7, #21]
    statusLow = 0xFF;
 80011f0:	23ff      	movs	r3, #255	@ 0xff
 80011f2:	72fb      	strb	r3, [r7, #11]
    statusHigh = 0xFF;
 80011f4:	23ff      	movs	r3, #255	@ 0xff
 80011f6:	72bb      	strb	r3, [r7, #10]
      I2C_ReadReg(0x3E, &statusLow, 1);
 80011f8:	f107 030b 	add.w	r3, r7, #11
 80011fc:	2201      	movs	r2, #1
 80011fe:	4619      	mov	r1, r3
 8001200:	203e      	movs	r0, #62	@ 0x3e
 8001202:	f7ff ff53 	bl	80010ac <I2C_ReadReg>
      I2C_ReadReg(0x3F, &statusHigh, 1);
 8001206:	f107 030a 	add.w	r3, r7, #10
 800120a:	2201      	movs	r2, #1
 800120c:	4619      	mov	r1, r3
 800120e:	203f      	movs	r0, #63	@ 0x3f
 8001210:	f7ff ff4c 	bl	80010ac <I2C_ReadReg>
    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8001214:	7afb      	ldrb	r3, [r7, #11]
 8001216:	2bff      	cmp	r3, #255	@ 0xff
 8001218:	d102      	bne.n	8001220 <BQ769x2_SetRegister+0x124>
 800121a:	7abb      	ldrb	r3, [r7, #10]
 800121c:	2bff      	cmp	r3, #255	@ 0xff
 800121e:	d0eb      	beq.n	80011f8 <BQ769x2_SetRegister+0xfc>
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2202      	movs	r2, #2
 8001226:	4619      	mov	r1, r3
 8001228:	2060      	movs	r0, #96	@ 0x60
 800122a:	f7ff ff19 	bl	8001060 <I2C_WriteReg>
    delayUS(2000);
 800122e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001232:	f000 fc85 	bl	8001b40 <delayUS>
    break;
 8001236:	e02c      	b.n	8001292 <BQ769x2_SetRegister+0x196>
    TX_RegData[3] = (reg_data >> 8) & 0xff;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	0a1b      	lsrs	r3, r3, #8
 800123c:	b2db      	uxtb	r3, r3
 800123e:	73fb      	strb	r3, [r7, #15]
    TX_RegData[4] = (reg_data >> 16) & 0xff;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	b2db      	uxtb	r3, r3
 8001246:	743b      	strb	r3, [r7, #16]
    TX_RegData[5] = (reg_data >> 24) & 0xff;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	0e1b      	lsrs	r3, r3, #24
 800124c:	b2db      	uxtb	r3, r3
 800124e:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x3E, TX_RegData, 6);
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2206      	movs	r2, #6
 8001256:	4619      	mov	r1, r3
 8001258:	203e      	movs	r0, #62	@ 0x3e
 800125a:	f7ff ff01 	bl	8001060 <I2C_WriteReg>
    delayUS(2000);
 800125e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001262:	f000 fc6d 	bl	8001b40 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 6);
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2106      	movs	r1, #6
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fed3 	bl	8001018 <Checksum>
 8001272:	4603      	mov	r3, r0
 8001274:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x08;              // combined length of register address and data
 8001276:	2308      	movs	r3, #8
 8001278:	757b      	strb	r3, [r7, #21]
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	2202      	movs	r2, #2
 8001280:	4619      	mov	r1, r3
 8001282:	2060      	movs	r0, #96	@ 0x60
 8001284:	f7ff feec 	bl	8001060 <I2C_WriteReg>
    delayUS(2000);
 8001288:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800128c:	f000 fc58 	bl	8001b40 <delayUS>
    break;
 8001290:	bf00      	nop
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	0800fcb4 	.word	0x0800fcb4

080012a0 <BQ769x2_ReadRegister>:

uint16_t BQ769x2_ReadRegister(uint16_t reg_addr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  uint8_t TX_RegAddr[2] = {0}; // Array to hold the register address
 80012aa:	2300      	movs	r3, #0
 80012ac:	82bb      	strh	r3, [r7, #20]
  uint8_t RX_Buffer[2] = {0};  // Array to hold the received data
 80012ae:	2300      	movs	r3, #0
 80012b0:	823b      	strh	r3, [r7, #16]

  // Populate the TX_RegAddr array with the register address
  TX_RegAddr[0] = reg_addr & 0xFF;        // Lower byte of register address
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	753b      	strb	r3, [r7, #20]
  TX_RegAddr[1] = (reg_addr >> 8) & 0xFF; // Upper byte of register address
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	b29b      	uxth	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	757b      	strb	r3, [r7, #21]

  // Write the register address to the 0x3E register
  I2C_WriteReg(0x3E, TX_RegAddr, 2);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2202      	movs	r2, #2
 80012c8:	4619      	mov	r1, r3
 80012ca:	203e      	movs	r0, #62	@ 0x3e
 80012cc:	f7ff fec8 	bl	8001060 <I2C_WriteReg>
  delayUS(2000); // Delay to allow time for the write to complete
 80012d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012d4:	f000 fc34 	bl	8001b40 <delayUS>

  // Poll the 0x3E register until it no longer returns 0xFF
  uint8_t statusLow = 0xFF;
 80012d8:	23ff      	movs	r3, #255	@ 0xff
 80012da:	73fb      	strb	r3, [r7, #15]
  uint8_t statusHigh = 0xFF;
 80012dc:	23ff      	movs	r3, #255	@ 0xff
 80012de:	73bb      	strb	r3, [r7, #14]
  do
  {
    I2C_ReadReg(0x3E, &statusLow, 1);
 80012e0:	f107 030f 	add.w	r3, r7, #15
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	203e      	movs	r0, #62	@ 0x3e
 80012ea:	f7ff fedf 	bl	80010ac <I2C_ReadReg>
    I2C_ReadReg(0x3F, &statusHigh, 1);
 80012ee:	f107 030e 	add.w	r3, r7, #14
 80012f2:	2201      	movs	r2, #1
 80012f4:	4619      	mov	r1, r3
 80012f6:	203f      	movs	r0, #63	@ 0x3f
 80012f8:	f7ff fed8 	bl	80010ac <I2C_ReadReg>
  } while (statusLow == 0xFF && statusHigh == 0xFF);
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2bff      	cmp	r3, #255	@ 0xff
 8001300:	d102      	bne.n	8001308 <BQ769x2_ReadRegister+0x68>
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	2bff      	cmp	r3, #255	@ 0xff
 8001306:	d0eb      	beq.n	80012e0 <BQ769x2_ReadRegister+0x40>

  // HAL_Delay(200);
  //  Read the data from the buffer starting at 0x40
  I2C_ReadReg(0x40, RX_Buffer, 2);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2202      	movs	r2, #2
 800130e:	4619      	mov	r1, r3
 8001310:	2040      	movs	r0, #64	@ 0x40
 8001312:	f7ff fecb 	bl	80010ac <I2C_ReadReg>

  // Combine the received bytes into a single 16-bit value
  RX_data[0] = RX_Buffer[0];
 8001316:	7c3a      	ldrb	r2, [r7, #16]
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <BQ769x2_ReadRegister+0x9c>)
 800131a:	701a      	strb	r2, [r3, #0]
  RX_data[1] = RX_Buffer[1];
 800131c:	7c7a      	ldrb	r2, [r7, #17]
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <BQ769x2_ReadRegister+0x9c>)
 8001320:	705a      	strb	r2, [r3, #1]
  uint16_t reg_data = (RX_Buffer[1] << 8) | RX_Buffer[0];
 8001322:	7c7b      	ldrb	r3, [r7, #17]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21a      	sxth	r2, r3
 8001328:	7c3b      	ldrb	r3, [r7, #16]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	82fb      	strh	r3, [r7, #22]

  return reg_data;
 8001332:	8afb      	ldrh	r3, [r7, #22]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000f4 	.word	0x200000f4

08001340 <CommandSubcommands>:
  I2C_WriteReg(0x3E, TX_RegData, datalen + 2);
}

void CommandSubcommands(uint16_t command) // For Command only Subcommands
// See the TRM or the BQ76952 header file for a full list of Command-only subcommands
{ // For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]

  uint8_t TX_Reg[2] = {0x00, 0x00};
 800134a:	2300      	movs	r3, #0
 800134c:	81bb      	strh	r3, [r7, #12]

  // TX_Reg in little endian format
  TX_Reg[0] = command & 0xff;
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	733b      	strb	r3, [r7, #12]
  TX_Reg[1] = (command >> 8) & 0xff;
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	b29b      	uxth	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	737b      	strb	r3, [r7, #13]

  I2C_WriteReg(0x3E, TX_Reg, 2);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2202      	movs	r2, #2
 8001364:	4619      	mov	r1, r3
 8001366:	203e      	movs	r0, #62	@ 0x3e
 8001368:	f7ff fe7a 	bl	8001060 <I2C_WriteReg>
  delayUS(2000);
 800136c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001370:	f000 fbe6 	bl	8001b40 <delayUS>
}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <Subcommands>:

void Subcommands(uint16_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Subcommands
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
 8001386:	460b      	mov	r3, r1
 8001388:	80bb      	strh	r3, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	70fb      	strb	r3, [r7, #3]
  // security keys and Manu_data writes dont work with this function (reading these commands works)
  // max readback size is 32 bytes i.e. DASTATUS, CUV/COV snapshot
  uint8_t TX_Reg[4] = {0x00, 0x00, 0x00, 0x00};
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  uint8_t TX_Buffer[2] = {0x00, 0x00};
 8001392:	2300      	movs	r3, #0
 8001394:	823b      	strh	r3, [r7, #16]
  uint8_t lowByte;
  uint8_t highByte;

  I2C_ReadReg(0x3E, &lowByte, 1);
 8001396:	f107 030f 	add.w	r3, r7, #15
 800139a:	2201      	movs	r2, #1
 800139c:	4619      	mov	r1, r3
 800139e:	203e      	movs	r0, #62	@ 0x3e
 80013a0:	f7ff fe84 	bl	80010ac <I2C_ReadReg>
  I2C_ReadReg(0x3F, &highByte, 1);
 80013a4:	f107 030e 	add.w	r3, r7, #14
 80013a8:	2201      	movs	r2, #1
 80013aa:	4619      	mov	r1, r3
 80013ac:	203f      	movs	r0, #63	@ 0x3f
 80013ae:	f7ff fe7d 	bl	80010ac <I2C_ReadReg>
  // TX_Reg in little endian format
  TX_Reg[0] = command & 0xff;
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	753b      	strb	r3, [r7, #20]
  TX_Reg[1] = (command >> 8) & 0xff;
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	757b      	strb	r3, [r7, #21]

  if (type == R)
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d120      	bne.n	800140a <Subcommands+0x8e>
  { // read
    I2C_WriteReg(0x3E, TX_Reg, 2);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2202      	movs	r2, #2
 80013ce:	4619      	mov	r1, r3
 80013d0:	203e      	movs	r0, #62	@ 0x3e
 80013d2:	f7ff fe45 	bl	8001060 <I2C_WriteReg>
    do
    {
      I2C_ReadReg(0x3E, &lowByte, 1);
 80013d6:	f107 030f 	add.w	r3, r7, #15
 80013da:	2201      	movs	r2, #1
 80013dc:	4619      	mov	r1, r3
 80013de:	203e      	movs	r0, #62	@ 0x3e
 80013e0:	f7ff fe64 	bl	80010ac <I2C_ReadReg>
      I2C_ReadReg(0x3F, &highByte, 1);
 80013e4:	f107 030e 	add.w	r3, r7, #14
 80013e8:	2201      	movs	r2, #1
 80013ea:	4619      	mov	r1, r3
 80013ec:	203f      	movs	r0, #63	@ 0x3f
 80013ee:	f7ff fe5d 	bl	80010ac <I2C_ReadReg>
    } while (lowByte == 0xFF && highByte == 0xFF);
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	2bff      	cmp	r3, #255	@ 0xff
 80013f6:	d102      	bne.n	80013fe <Subcommands+0x82>
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	2bff      	cmp	r3, #255	@ 0xff
 80013fc:	d0eb      	beq.n	80013d6 <Subcommands+0x5a>

    // delayUS(100000);

    I2C_ReadReg(0x40, RX_32Byte, 32); // RX_32Byte is a global variable
 80013fe:	2220      	movs	r2, #32
 8001400:	492d      	ldr	r1, [pc, #180]	@ (80014b8 <Subcommands+0x13c>)
 8001402:	2040      	movs	r0, #64	@ 0x40
 8001404:	f7ff fe52 	bl	80010ac <I2C_ReadReg>
    TX_Buffer[0] = Checksum(TX_Reg, 4);
    TX_Buffer[1] = 0x06; // combined length of registers address and data
    I2C_WriteReg(0x60, TX_Buffer, 2);
    delayUS(1000);
  }
}
 8001408:	e051      	b.n	80014ae <Subcommands+0x132>
  else if (type == W)
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d123      	bne.n	8001458 <Subcommands+0xdc>
    TX_Reg[2] = data & 0xff;
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	75bb      	strb	r3, [r7, #22]
    I2C_WriteReg(0x3E, TX_Reg, 3);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2203      	movs	r2, #3
 800141c:	4619      	mov	r1, r3
 800141e:	203e      	movs	r0, #62	@ 0x3e
 8001420:	f7ff fe1e 	bl	8001060 <I2C_WriteReg>
    delayUS(1000);
 8001424:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001428:	f000 fb8a 	bl	8001b40 <delayUS>
    TX_Buffer[0] = Checksum(TX_Reg, 3);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2103      	movs	r1, #3
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fdf0 	bl	8001018 <Checksum>
 8001438:	4603      	mov	r3, r0
 800143a:	743b      	strb	r3, [r7, #16]
    TX_Buffer[1] = 0x05; // combined length of registers address and data
 800143c:	2305      	movs	r3, #5
 800143e:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x60, TX_Buffer, 2);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	2202      	movs	r2, #2
 8001446:	4619      	mov	r1, r3
 8001448:	2060      	movs	r0, #96	@ 0x60
 800144a:	f7ff fe09 	bl	8001060 <I2C_WriteReg>
    delayUS(1000);
 800144e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001452:	f000 fb75 	bl	8001b40 <delayUS>
}
 8001456:	e02a      	b.n	80014ae <Subcommands+0x132>
  else if (type == W2)
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d127      	bne.n	80014ae <Subcommands+0x132>
    TX_Reg[2] = data & 0xff;
 800145e:	88bb      	ldrh	r3, [r7, #4]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	75bb      	strb	r3, [r7, #22]
    TX_Reg[3] = (data >> 8) & 0xff;
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	b29b      	uxth	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	75fb      	strb	r3, [r7, #23]
    I2C_WriteReg(0x3E, TX_Reg, 4);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	2204      	movs	r2, #4
 8001474:	4619      	mov	r1, r3
 8001476:	203e      	movs	r0, #62	@ 0x3e
 8001478:	f7ff fdf2 	bl	8001060 <I2C_WriteReg>
    delayUS(1000);
 800147c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001480:	f000 fb5e 	bl	8001b40 <delayUS>
    TX_Buffer[0] = Checksum(TX_Reg, 4);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2104      	movs	r1, #4
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fdc4 	bl	8001018 <Checksum>
 8001490:	4603      	mov	r3, r0
 8001492:	743b      	strb	r3, [r7, #16]
    TX_Buffer[1] = 0x06; // combined length of registers address and data
 8001494:	2306      	movs	r3, #6
 8001496:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x60, TX_Buffer, 2);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	2202      	movs	r2, #2
 800149e:	4619      	mov	r1, r3
 80014a0:	2060      	movs	r0, #96	@ 0x60
 80014a2:	f7ff fddd 	bl	8001060 <I2C_WriteReg>
    delayUS(1000);
 80014a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014aa:	f000 fb49 	bl	8001b40 <delayUS>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200000f8 	.word	0x200000f8

080014bc <DirectCommands>:

void DirectCommands(uint8_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Direct Commands
{ // type: R = read, W = write
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
 80014c6:	460b      	mov	r3, r1
 80014c8:	80bb      	strh	r3, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	71bb      	strb	r3, [r7, #6]
  uint8_t TX_data[2] = {0x00, 0x00};
 80014ce:	2300      	movs	r3, #0
 80014d0:	81bb      	strh	r3, [r7, #12]

  // little endian format
  TX_data[0] = data & 0xff;
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	733b      	strb	r3, [r7, #12]
  TX_data[1] = (data >> 8) & 0xff;
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	737b      	strb	r3, [r7, #13]

  if (type == R)
 80014e2:	79bb      	ldrb	r3, [r7, #6]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <DirectCommands+0x40>
  {                                   // Read
    I2C_ReadReg(command, RX_data, 2); // RX_data is a global variable
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2202      	movs	r2, #2
 80014ec:	490c      	ldr	r1, [pc, #48]	@ (8001520 <DirectCommands+0x64>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fddc 	bl	80010ac <I2C_ReadReg>
    delayUS(2000);
 80014f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014f8:	f000 fb22 	bl	8001b40 <delayUS>
  }
  if (type == W)
 80014fc:	79bb      	ldrb	r3, [r7, #6]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d10a      	bne.n	8001518 <DirectCommands+0x5c>
  { // write
    // Control_status, alarm_status, alarm_enable all 2 bytes long
    I2C_WriteReg(command, TX_data, 2);
 8001502:	f107 010c 	add.w	r1, r7, #12
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2202      	movs	r2, #2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fda8 	bl	8001060 <I2C_WriteReg>
    delayUS(2000);
 8001510:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001514:	f000 fb14 	bl	8001b40 <delayUS>
  }
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200000f4 	.word	0x200000f4

08001524 <BQ769x2_Init>:

void BQ769x2_Init()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  // Configures all parameters in device RAM

  // Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
  // See TRM for full description of CONFIG_UPDATE mode
  CommandSubcommands(SET_CFGUPDATE);
 8001528:	2090      	movs	r0, #144	@ 0x90
 800152a:	f7ff ff09 	bl	8001340 <CommandSubcommands>
  // a full description of the register and the bits will pop up on the screen.

  // 'Power Config' - 0x9234 = 0x2D80
  // Setting the DSLP_LDO bit allows the LDOs to remain active when the device goes into Deep Sleep mode
  // Set wake speed bits to 00 for best performance
  BQ769x2_SetRegister(PowerConfig, 0x2D80, 2);
 800152e:	2202      	movs	r2, #2
 8001530:	f44f 5136 	mov.w	r1, #11648	@ 0x2d80
 8001534:	f249 2034 	movw	r0, #37428	@ 0x9234
 8001538:	f7ff fde0 	bl	80010fc <BQ769x2_SetRegister>

  // 'REG0 Config' - set REG0_EN bit to enable pre-regulator
  BQ769x2_SetRegister(REG0Config, 0x01, 1);
 800153c:	2201      	movs	r2, #1
 800153e:	2101      	movs	r1, #1
 8001540:	f249 2037 	movw	r0, #37431	@ 0x9237
 8001544:	f7ff fdda 	bl	80010fc <BQ769x2_SetRegister>

  // 'REG12 Config' - Enable REG1 with 3.3V output (0x0D for 3.3V, 0x0F for 5V)
  BQ769x2_SetRegister(REG12Config, 0x0D, 1);
 8001548:	2201      	movs	r2, #1
 800154a:	210d      	movs	r1, #13
 800154c:	f249 2036 	movw	r0, #37430	@ 0x9236
 8001550:	f7ff fdd4 	bl	80010fc <BQ769x2_SetRegister>
  // BQ769x2_SetRegister(DFETOFFPinConfig, 0x42, 1);

  // Set up ALERT Pin - 0x92FC = 0x2A
  // This configures the ALERT pin to drive high (REG1 voltage) when enabled.
  // The ALERT pin can be used as an interrupt to the MCU when a protection has triggered or new measurements are available
  BQ769x2_SetRegister(ALERTPinConfig, 0xAA, 1);
 8001554:	2201      	movs	r2, #1
 8001556:	21aa      	movs	r1, #170	@ 0xaa
 8001558:	f249 20fc 	movw	r0, #37628	@ 0x92fc
 800155c:	f7ff fdce 	bl	80010fc <BQ769x2_SetRegister>

  // Set TS1 to measure Cell Temperature - 0x92FD = 0x07
  BQ769x2_SetRegister(TS1Config, 0x07, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	2107      	movs	r1, #7
 8001564:	f249 20fd 	movw	r0, #37629	@ 0x92fd
 8001568:	f7ff fdc8 	bl	80010fc <BQ769x2_SetRegister>

  // Set TS3 to measure FET Temperature - 0x92FF = 0x0F
  BQ769x2_SetRegister(TS3Config, 0x07, 1);
 800156c:	2201      	movs	r2, #1
 800156e:	2107      	movs	r1, #7
 8001570:	f249 20ff 	movw	r0, #37631	@ 0x92ff
 8001574:	f7ff fdc2 	bl	80010fc <BQ769x2_SetRegister>

  // Set HDQ to measure Cell Temperature - 0x9300 = 0x07
  BQ769x2_SetRegister(HDQPinConfig, 0x00, 1); // No thermistor installed on EVM HDQ pin, so set to 0x00
 8001578:	2201      	movs	r2, #1
 800157a:	2100      	movs	r1, #0
 800157c:	f44f 4013 	mov.w	r0, #37632	@ 0x9300
 8001580:	f7ff fdbc 	bl	80010fc <BQ769x2_SetRegister>

  // 'VCell Mode' - Enable 16 cells - 0x9304 = 0x0000; Writing 0x0000 sets the default of 16 cells
  BQ769x2_SetRegister(VCellMode, 0x801F, 2); // default 0x0000
 8001584:	2202      	movs	r2, #2
 8001586:	f248 011f 	movw	r1, #32799	@ 0x801f
 800158a:	f249 3004 	movw	r0, #37636	@ 0x9304
 800158e:	f7ff fdb5 	bl	80010fc <BQ769x2_SetRegister>

  // Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
  // Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
  // COV (over-voltage), CUV (under-voltage)
  BQ769x2_SetRegister(EnabledProtectionsA, 0xBC, 1);
 8001592:	2201      	movs	r2, #1
 8001594:	21bc      	movs	r1, #188	@ 0xbc
 8001596:	f249 2061 	movw	r0, #37473	@ 0x9261
 800159a:	f7ff fdaf 	bl	80010fc <BQ769x2_SetRegister>

  // Enable all protections in 'Enabled Protections B' 0x9262 = 0xF7
  // Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
  // OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
  BQ769x2_SetRegister(EnabledProtectionsB, 0xF7, 1);
 800159e:	2201      	movs	r2, #1
 80015a0:	21f7      	movs	r1, #247	@ 0xf7
 80015a2:	f249 2062 	movw	r0, #37474	@ 0x9262
 80015a6:	f7ff fda9 	bl	80010fc <BQ769x2_SetRegister>

  // 'Default Alarm Mask' - 0x..82 Enables the FullScan and ADScan bits, default value = 0xF800
  BQ769x2_SetRegister(DefaultAlarmMask, 0xFFFF, 2);
 80015aa:	2202      	movs	r2, #2
 80015ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80015b0:	f249 206d 	movw	r0, #37485	@ 0x926d
 80015b4:	f7ff fda2 	bl	80010fc <BQ769x2_SetRegister>
  // Set up CUV (under-voltage) Threshold - 0x9275 = 0x31 (2479 mV)
  // CUV Threshold is this value multiplied by 50.6mV

  // BQ769x2_SetRegister(CUVThreshold, 0x14, 1);

  BQ769x2_SetRegister(CUVThreshold, 0x31, 1);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2131      	movs	r1, #49	@ 0x31
 80015bc:	f249 2075 	movw	r0, #37493	@ 0x9275
 80015c0:	f7ff fd9c 	bl	80010fc <BQ769x2_SetRegister>

  // Set up COV (over-voltage) Threshold - 0x9278 = 0x55 (4301 mV)
  // COV Threshold is this value multiplied by 50.6mV
  // BQ769x2_SetRegister(COVThreshold, 0x55, 1);

  BQ769x2_SetRegister(COVThreshold, 0x55, 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2155      	movs	r1, #85	@ 0x55
 80015c8:	f249 2078 	movw	r0, #37496	@ 0x9278
 80015cc:	f7ff fd96 	bl	80010fc <BQ769x2_SetRegister>

  // Set up OCC (over-current in charge) Threshold - 0x9280 = 0x05 (10 mV = 10A across 1mOhm sense resistor) Units in 2mV
  BQ769x2_SetRegister(OCCThreshold, 0x05, 1);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2105      	movs	r1, #5
 80015d4:	f249 2080 	movw	r0, #37504	@ 0x9280
 80015d8:	f7ff fd90 	bl	80010fc <BQ769x2_SetRegister>

  // Set up OCD1 Threshold - 0x9282 = 0x0A (20 mV = 20A across 1mOhm sense resistor) units of 2mV
  BQ769x2_SetRegister(OCD1Threshold, 0x0A, 1);
 80015dc:	2201      	movs	r2, #1
 80015de:	210a      	movs	r1, #10
 80015e0:	f249 2082 	movw	r0, #37506	@ 0x9282
 80015e4:	f7ff fd8a 	bl	80010fc <BQ769x2_SetRegister>

  // Set up SCD Threshold - 0x9286 = 0x05 (100 mV = 100A across 1mOhm sense resistor)  0x05=100mV
  BQ769x2_SetRegister(SCDThreshold, 0x01, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2101      	movs	r1, #1
 80015ec:	f249 2086 	movw	r0, #37510	@ 0x9286
 80015f0:	f7ff fd84 	bl	80010fc <BQ769x2_SetRegister>

  // Set up SCD Delay - 0x9287 = 0x03 (30 us) Enabled with a delay of (value - 1) * 15 µs; min value of 1
  BQ769x2_SetRegister(SCDDelay, 0x03, 1);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2103      	movs	r1, #3
 80015f8:	f249 2087 	movw	r0, #37511	@ 0x9287
 80015fc:	f7ff fd7e 	bl	80010fc <BQ769x2_SetRegister>

  // Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
  // If this is not set, then SCD will recover based on time (SCD Recovery Time parameter).
  BQ769x2_SetRegister(SCDLLatchLimit, 0x01, 1);
 8001600:	2201      	movs	r2, #1
 8001602:	2101      	movs	r1, #1
 8001604:	f249 2095 	movw	r0, #37525	@ 0x9295
 8001608:	f7ff fd78 	bl	80010fc <BQ769x2_SetRegister>

  BQ769x2_SetRegister(MfgStatusInit, 0x0050, 2); // disable test mode
 800160c:	2202      	movs	r2, #2
 800160e:	2150      	movs	r1, #80	@ 0x50
 8001610:	f249 3043 	movw	r0, #37699	@ 0x9343
 8001614:	f7ff fd72 	bl	80010fc <BQ769x2_SetRegister>

  BQ769x2_SetRegister(FETOptions, 0x3F, 1); // 0x3F
 8001618:	2201      	movs	r2, #1
 800161a:	213f      	movs	r1, #63	@ 0x3f
 800161c:	f249 3008 	movw	r0, #37640	@ 0x9308
 8001620:	f7ff fd6c 	bl	80010fc <BQ769x2_SetRegister>

  // BQ769x2_SetRegister(TS1Config, 0x0B, 1);
  //  Exit CONFIGUPDATE mode  - Subcommand 0x0092

  // BQ769x2_SetRegister(CCGain, 0x41C9C800, 4);
  BQ769x2_SetRegister(DAConfiguration, 0x05, 1); // set user Amps to 1mA
 8001624:	2201      	movs	r2, #1
 8001626:	2105      	movs	r1, #5
 8001628:	f249 3003 	movw	r0, #37635	@ 0x9303
 800162c:	f7ff fd66 	bl	80010fc <BQ769x2_SetRegister>

  Subcommands(FET_CONTROL, 0x03, W);
 8001630:	2201      	movs	r2, #1
 8001632:	2103      	movs	r1, #3
 8001634:	2097      	movs	r0, #151	@ 0x97
 8001636:	f7ff fea1 	bl	800137c <Subcommands>

  CommandSubcommands(EXIT_CFGUPDATE);
 800163a:	2092      	movs	r0, #146	@ 0x92
 800163c:	f7ff fe80 	bl	8001340 <CommandSubcommands>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <BQ769x2_ReadAlarmStatus>:
// ********************************* End of BQ769x2 Power Commands   *****************************************

// ********************************* BQ769x2 Status and Fault Commands   *****************************************

uint16_t BQ769x2_ReadAlarmStatus()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  // Read this register to find out why the ALERT pin was asserted
  DirectCommands(AlarmStatus, 0x00, R);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2062      	movs	r0, #98	@ 0x62
 800164e:	f7ff ff35 	bl	80014bc <DirectCommands>
  return (RX_data[1] * 256 + RX_data[0]);
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <BQ769x2_ReadAlarmStatus+0x24>)
 8001654:	785b      	ldrb	r3, [r3, #1]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b29b      	uxth	r3, r3
 800165a:	4a03      	ldr	r2, [pc, #12]	@ (8001668 <BQ769x2_ReadAlarmStatus+0x24>)
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	4413      	add	r3, r2
 8001660:	b29b      	uxth	r3, r3
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200000f4 	.word	0x200000f4

0800166c <BQ769x2_ReadSafetyStatus>:

void BQ769x2_ReadSafetyStatus()
{ // good example functions
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  // Read Safety Status A/B/C and find which bits are set
  // This shows which primary protections have been triggered
  DirectCommands(SafetyStatusA, 0x00, R);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	2003      	movs	r0, #3
 8001676:	f7ff ff21 	bl	80014bc <DirectCommands>
  value_SafetyStatusA = (RX_data[1] * 256 + RX_data[0]);
 800167a:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <BQ769x2_ReadSafetyStatus+0xac>)
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	4b27      	ldr	r3, [pc, #156]	@ (800171c <BQ769x2_ReadSafetyStatus+0xb0>)
 8001680:	701a      	strb	r2, [r3, #0]
  // Example Fault Flags
  UV_Fault = ((0x4 & RX_data[0]) >> 2);
 8001682:	4b25      	ldr	r3, [pc, #148]	@ (8001718 <BQ769x2_ReadSafetyStatus+0xac>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <BQ769x2_ReadSafetyStatus+0xb4>)
 8001692:	701a      	strb	r2, [r3, #0]
  OV_Fault = ((0x8 & RX_data[0]) >> 3);
 8001694:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <BQ769x2_ReadSafetyStatus+0xac>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	08db      	lsrs	r3, r3, #3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <BQ769x2_ReadSafetyStatus+0xb8>)
 80016a4:	701a      	strb	r2, [r3, #0]
  SCD_Fault = ((0x8 & RX_data[1]) >> 3);
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <BQ769x2_ReadSafetyStatus+0xac>)
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <BQ769x2_ReadSafetyStatus+0xbc>)
 80016b6:	701a      	strb	r2, [r3, #0]
  OCD_Fault = ((0x2 & RX_data[1]) >> 1);
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <BQ769x2_ReadSafetyStatus+0xac>)
 80016ba:	785b      	ldrb	r3, [r3, #1]
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b19      	ldr	r3, [pc, #100]	@ (800172c <BQ769x2_ReadSafetyStatus+0xc0>)
 80016c8:	701a      	strb	r2, [r3, #0]
  DirectCommands(SafetyStatusB, 0x00, R);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2005      	movs	r0, #5
 80016d0:	f7ff fef4 	bl	80014bc <DirectCommands>
  value_SafetyStatusB = (RX_data[1] * 256 + RX_data[0]);
 80016d4:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <BQ769x2_ReadSafetyStatus+0xac>)
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <BQ769x2_ReadSafetyStatus+0xc4>)
 80016da:	701a      	strb	r2, [r3, #0]
  DirectCommands(SafetyStatusC, 0x00, R);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	2007      	movs	r0, #7
 80016e2:	f7ff feeb 	bl	80014bc <DirectCommands>
  value_SafetyStatusC = (RX_data[1] * 256 + RX_data[0]);
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <BQ769x2_ReadSafetyStatus+0xac>)
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <BQ769x2_ReadSafetyStatus+0xc8>)
 80016ec:	701a      	strb	r2, [r3, #0]
  if ((value_SafetyStatusA + value_SafetyStatusB + value_SafetyStatusC) > 1)
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <BQ769x2_ReadSafetyStatus+0xb0>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <BQ769x2_ReadSafetyStatus+0xc4>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001734 <BQ769x2_ReadSafetyStatus+0xc8>)
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	2b01      	cmp	r3, #1
 8001702:	dd03      	ble.n	800170c <BQ769x2_ReadSafetyStatus+0xa0>
  {
    ProtectionsTriggered = 1;
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <BQ769x2_ReadSafetyStatus+0xcc>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    ProtectionsTriggered = 0;
  }
}
 800170a:	e002      	b.n	8001712 <BQ769x2_ReadSafetyStatus+0xa6>
    ProtectionsTriggered = 0;
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <BQ769x2_ReadSafetyStatus+0xcc>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200000f4 	.word	0x200000f4
 800171c:	2000013a 	.word	0x2000013a
 8001720:	2000013d 	.word	0x2000013d
 8001724:	2000013e 	.word	0x2000013e
 8001728:	2000013f 	.word	0x2000013f
 800172c:	20000140 	.word	0x20000140
 8001730:	2000013b 	.word	0x2000013b
 8001734:	2000013c 	.word	0x2000013c
 8001738:	20000141 	.word	0x20000141

0800173c <BQ769x2_ReadVoltage>:

// ********************************* BQ769x2 Measurement Commands   *****************************************

uint16_t BQ769x2_ReadVoltage(uint8_t command, bms_context *bms)
// This function can be used to read a specific cell voltage or stack / pack / LD voltage
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  // RX_data is global var
  DirectCommands(command, 0x00, R);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff feb4 	bl	80014bc <DirectCommands>
  if (command >= Cell1Voltage && command <= Cell16Voltage)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b13      	cmp	r3, #19
 8001758:	d90b      	bls.n	8001772 <BQ769x2_ReadVoltage+0x36>
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b32      	cmp	r3, #50	@ 0x32
 800175e:	d808      	bhi.n	8001772 <BQ769x2_ReadVoltage+0x36>
  {                                         // Cells 1 through 16 (0x14 to 0x32)
    return (RX_data[1] * 256 + RX_data[0]); // voltage is reported in mV
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <BQ769x2_ReadVoltage+0x58>)
 8001762:	785b      	ldrb	r3, [r3, #1]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b29b      	uxth	r3, r3
 8001768:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <BQ769x2_ReadVoltage+0x58>)
 800176a:	7812      	ldrb	r2, [r2, #0]
 800176c:	4413      	add	r3, r2
 800176e:	b29b      	uxth	r3, r3
 8001770:	e00b      	b.n	800178a <BQ769x2_ReadVoltage+0x4e>
  }
  else
  {                                              // stack, Pack, LD
    return 10 * (RX_data[1] * 256 + RX_data[0]); // voltage is reported in 0.01V units
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <BQ769x2_ReadVoltage+0x58>)
 8001774:	785b      	ldrb	r3, [r3, #1]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	4a06      	ldr	r2, [pc, #24]	@ (8001794 <BQ769x2_ReadVoltage+0x58>)
 800177a:	7812      	ldrb	r2, [r2, #0]
 800177c:	4413      	add	r3, r2
 800177e:	b29b      	uxth	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	4413      	add	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	b29b      	uxth	r3, r3
  }
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200000f4 	.word	0x200000f4

08001798 <BQ769x2_ReadAllVoltages>:

void BQ769x2_ReadAllVoltages(bms_context *bms)
// Reads all cell voltages, Stack voltage, PACK pin voltage, and LD pin voltage
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  int cellvoltageholder = Cell1Voltage; // Cell1Voltage is 0x14
 80017a0:	2314      	movs	r3, #20
 80017a2:	60fb      	str	r3, [r7, #12]
  for (int x = 0; x < 16; x++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	e011      	b.n	80017ce <BQ769x2_ReadAllVoltages+0x36>
  { // Reads all cell voltages
    CellVoltage[x] = BQ769x2_ReadVoltage(cellvoltageholder, bms);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ffc3 	bl	800173c <BQ769x2_ReadVoltage>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4619      	mov	r1, r3
 80017ba:	4a14      	ldr	r2, [pc, #80]	@ (800180c <BQ769x2_ReadAllVoltages+0x74>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    cellvoltageholder = cellvoltageholder + 2;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3302      	adds	r3, #2
 80017c6:	60fb      	str	r3, [r7, #12]
  for (int x = 0; x < 16; x++)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3301      	adds	r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	ddea      	ble.n	80017aa <BQ769x2_ReadAllVoltages+0x12>
  }
  bms->Stack_Voltage = BQ769x2_ReadVoltage(StackVoltage, bms);
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	2034      	movs	r0, #52	@ 0x34
 80017d8:	f7ff ffb0 	bl	800173c <BQ769x2_ReadVoltage>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	821a      	strh	r2, [r3, #16]
  bms->Pack_Voltage = BQ769x2_ReadVoltage(PACKPinVoltage, bms);
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	2036      	movs	r0, #54	@ 0x36
 80017e8:	f7ff ffa8 	bl	800173c <BQ769x2_ReadVoltage>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	825a      	strh	r2, [r3, #18]
  bms->LD_Voltage = BQ769x2_ReadVoltage(LDPinVoltage, bms);
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	2038      	movs	r0, #56	@ 0x38
 80017f8:	f7ff ffa0 	bl	800173c <BQ769x2_ReadVoltage>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	829a      	strh	r2, [r3, #20]
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000118 	.word	0x20000118

08001810 <BQ769x2_ReadCurrent>:

uint16_t BQ769x2_ReadCurrent()
// Reads PACK current
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  DirectCommands(CC2Current, 0x00, R);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	203a      	movs	r0, #58	@ 0x3a
 800181a:	f7ff fe4f 	bl	80014bc <DirectCommands>
  return (RX_data[1] * 256 + RX_data[0]); // current is reported in mA
 800181e:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <BQ769x2_ReadCurrent+0x24>)
 8001820:	785b      	ldrb	r3, [r3, #1]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	b29b      	uxth	r3, r3
 8001826:	4a03      	ldr	r2, [pc, #12]	@ (8001834 <BQ769x2_ReadCurrent+0x24>)
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	4413      	add	r3, r2
 800182c:	b29b      	uxth	r3, r3
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200000f4 	.word	0x200000f4

08001838 <BQ769x2_ReadPassQ>:
  DirectCommands(command, 0x00, R);
  // RX_data is a global var
  return (0.1 * (float)(RX_data[1] * 256 + RX_data[0])) - 273.15; // converts from 0.1K to Celcius
}

float BQ769x2_ReadPassQ(){ // Read Accumulated Charge and Time from DASTATUS6
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

		Subcommands(DASTATUS6, 0x00, R);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	2076      	movs	r0, #118	@ 0x76
 8001844:	f7ff fd9a 	bl	800137c <Subcommands>

		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 8001848:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 800184a:	78db      	ldrb	r3, [r3, #3]
 800184c:	061a      	lsls	r2, r3, #24
 800184e:	4b28      	ldr	r3, [pc, #160]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 8001850:	789b      	ldrb	r3, [r3, #2]
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	431a      	orrs	r2, r3
	                            ((uint32_t)RX_32Byte[1] << 8) | RX_32Byte[0];
 8001856:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	021b      	lsls	r3, r3, #8
		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 800185c:	4313      	orrs	r3, r2
	                            ((uint32_t)RX_32Byte[1] << 8) | RX_32Byte[0];
 800185e:	4a24      	ldr	r2, [pc, #144]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 8001860:	7812      	ldrb	r2, [r2, #0]
 8001862:	4313      	orrs	r3, r2
 8001864:	461a      	mov	r2, r3
		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <BQ769x2_ReadPassQ+0xbc>)
 8001868:	601a      	str	r2, [r3, #0]
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 800186a:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 800186c:	79db      	ldrb	r3, [r3, #7]
 800186e:	061a      	lsls	r2, r3, #24
 8001870:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 8001872:	799b      	ldrb	r3, [r3, #6]
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	431a      	orrs	r2, r3
	                             ((uint32_t)RX_32Byte[5] << 8) | RX_32Byte[4];
 8001878:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 800187a:	795b      	ldrb	r3, [r3, #5]
 800187c:	021b      	lsls	r3, r3, #8
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 800187e:	4313      	orrs	r3, r2
	                             ((uint32_t)RX_32Byte[5] << 8) | RX_32Byte[4];
 8001880:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 8001882:	7912      	ldrb	r2, [r2, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	461a      	mov	r2, r3
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <BQ769x2_ReadPassQ+0xc0>)
 800188a:	601a      	str	r2, [r3, #0]
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 800188c:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 800188e:	7adb      	ldrb	r3, [r3, #11]
 8001890:	061a      	lsls	r2, r3, #24
 8001892:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 8001894:	7a9b      	ldrb	r3, [r3, #10]
 8001896:	041b      	lsls	r3, r3, #16
 8001898:	431a      	orrs	r2, r3
	                             ((uint32_t)RX_32Byte[9] << 8) | RX_32Byte[8];
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 800189c:	7a5b      	ldrb	r3, [r3, #9]
 800189e:	021b      	lsls	r3, r3, #8
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 80018a0:	4313      	orrs	r3, r2
	                             ((uint32_t)RX_32Byte[9] << 8) | RX_32Byte[8];
 80018a2:	4a13      	ldr	r2, [pc, #76]	@ (80018f0 <BQ769x2_ReadPassQ+0xb8>)
 80018a4:	7a12      	ldrb	r2, [r2, #8]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	461a      	mov	r2, r3
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <BQ769x2_ReadPassQ+0xc4>)
 80018ac:	601a      	str	r2, [r3, #0]
//	    else{
//	    	charge = AccumulatedCharge_Int;
//	    }

	    //charge = 0xFFFFFFFF - AccumulatedCharge_Int;
	    float totalAccumulatedCharge_mAh = (float)AccumulatedCharge_Int + ((float)AccumulatedCharge_Frac / FRAC_DIVISOR);
 80018ae:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <BQ769x2_ReadPassQ+0xbc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <BQ769x2_ReadPassQ+0xc0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018c6:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 8001900 <BQ769x2_ReadPassQ+0xc8>
 80018ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d2:	edc7 7a01 	vstr	s15, [r7, #4]
	    //float totalAccumulatedCharge_Ah = totalAccumulatedCharge_mAh / 1000.0f;

	    coulumbs = totalAccumulatedCharge_mAh;
 80018d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001904 <BQ769x2_ReadPassQ+0xcc>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6013      	str	r3, [r2, #0]
	    return coulumbs;
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <BQ769x2_ReadPassQ+0xcc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	ee07 3a90 	vmov	s15, r3
}
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200000f8 	.word	0x200000f8
 80018f4:	20000144 	.word	0x20000144
 80018f8:	20000148 	.word	0x20000148
 80018fc:	2000014c 	.word	0x2000014c
 8001900:	4f800000 	.word	0x4f800000
 8001904:	20000150 	.word	0x20000150

08001908 <bms_charge_error>:
}

// ********************************* End of BQ769x2 Measurement Commands   *****************************************

bool bms_charge_error()
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ProtectionsTriggered && (OV_Fault || SCD_Fault || OCD_Fault);
 800190c:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <bms_charge_error+0x3c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00d      	beq.n	8001930 <bms_charge_error+0x28>
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <bms_charge_error+0x40>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d107      	bne.n	800192c <bms_charge_error+0x24>
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <bms_charge_error+0x44>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d103      	bne.n	800192c <bms_charge_error+0x24>
 8001924:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <bms_charge_error+0x48>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <bms_charge_error+0x28>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <bms_charge_error+0x2a>
 8001930:	2300      	movs	r3, #0
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	b2db      	uxtb	r3, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000141 	.word	0x20000141
 8001948:	2000013e 	.word	0x2000013e
 800194c:	2000013f 	.word	0x2000013f
 8001950:	20000140 	.word	0x20000140

08001954 <bms_discharge_error>:

bool bms_discharge_error()
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ProtectionsTriggered && (UV_Fault || SCD_Fault || OCD_Fault);
 8001958:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <bms_discharge_error+0x3c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <bms_discharge_error+0x28>
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <bms_discharge_error+0x40>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d107      	bne.n	8001978 <bms_discharge_error+0x24>
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <bms_discharge_error+0x44>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d103      	bne.n	8001978 <bms_discharge_error+0x24>
 8001970:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <bms_discharge_error+0x48>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <bms_discharge_error+0x28>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <bms_discharge_error+0x2a>
 800197c:	2300      	movs	r3, #0
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000141 	.word	0x20000141
 8001994:	2000013d 	.word	0x2000013d
 8001998:	2000013f 	.word	0x2000013f
 800199c:	20000140 	.word	0x20000140

080019a0 <bms_charge_allowed>:

bool bms_charge_allowed(bms_context *bms)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  return !bms->battery_full && !bms_charge_error() && bms->charge_enable;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	78db      	ldrb	r3, [r3, #3]
 80019ac:	f083 0301 	eor.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00d      	beq.n	80019d2 <bms_charge_allowed+0x32>
 80019b6:	f7ff ffa7 	bl	8001908 <bms_charge_error>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f083 0301 	eor.w	r3, r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <bms_charge_allowed+0x32>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	785b      	ldrb	r3, [r3, #1]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <bms_charge_allowed+0x32>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <bms_charge_allowed+0x34>
 80019d2:	2300      	movs	r3, #0
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <bms_discharge_allowed>:

bool bms_discharge_allowed(bms_context *bms)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  // Use logical AND (&&) for combining boolean conditions
  return !bms->battery_empty && !bms_discharge_error() && bms->discharge_enable;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	f083 0301 	eor.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <bms_discharge_allowed+0x32>
 80019f8:	f7ff ffac 	bl	8001954 <bms_discharge_error>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f083 0301 	eor.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <bms_discharge_allowed+0x32>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	789b      	ldrb	r3, [r3, #2]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <bms_discharge_allowed+0x32>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <bms_discharge_allowed+0x34>
 8001a14:	2300      	movs	r3, #0
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	b2db      	uxtb	r3, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <bms_state_machine>:

void bms_state_machine(bms_context *bms)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	BQ769x2_ReadSafetyStatus();
 8001a2c:	f7ff fe1e 	bl	800166c <BQ769x2_ReadSafetyStatus>
  switch (bms->bms_state)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d87e      	bhi.n	8001b36 <bms_state_machine+0x112>
 8001a38:	a201      	add	r2, pc, #4	@ (adr r2, 8001a40 <bms_state_machine+0x1c>)
 8001a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3e:	bf00      	nop
 8001a40:	08001a55 	.word	0x08001a55
 8001a44:	08001a89 	.word	0x08001a89
 8001a48:	08001abd 	.word	0x08001abd
 8001a4c:	08001af1 	.word	0x08001af1
 8001a50:	08001b25 	.word	0x08001b25
  {
  case BMS_STATE_OFF:
    if (bms_discharge_allowed(bms))
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ffc4 	bl	80019e2 <bms_discharge_allowed>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <bms_state_machine+0x4a>
    {
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_DIS, true);
      CommandSubcommands(ALL_FETS_ON);
 8001a60:	2096      	movs	r0, #150	@ 0x96
 8001a62:	f7ff fc6d 	bl	8001340 <CommandSubcommands>
      bms->bms_state = BMS_STATE_DIS;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	701a      	strb	r2, [r3, #0]
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_CHG, true);
      CommandSubcommands(ALL_FETS_ON);
      bms->bms_state = BMS_STATE_CHG;
      // LOG_INF("OFF -> CHG (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 8001a6c:	e05c      	b.n	8001b28 <bms_state_machine+0x104>
    else if (bms_charge_allowed(bms))
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ff96 	bl	80019a0 <bms_charge_allowed>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d056      	beq.n	8001b28 <bms_state_machine+0x104>
      CommandSubcommands(ALL_FETS_ON);
 8001a7a:	2096      	movs	r0, #150	@ 0x96
 8001a7c:	f7ff fc60 	bl	8001340 <CommandSubcommands>
      bms->bms_state = BMS_STATE_CHG;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
    break;
 8001a86:	e04f      	b.n	8001b28 <bms_state_machine+0x104>

  case BMS_STATE_CHG:
    if (!bms_charge_allowed(bms))
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff89 	bl	80019a0 <bms_charge_allowed>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f083 0301 	eor.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <bms_state_machine+0x7e>
    {
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_CHG, false);
      /* DIS switch may be on on because of ideal diode control */
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_DIS, false);
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_OFF;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
    {
      CommandSubcommands(ALL_FETS_ON);
      bms->bms_state = BMS_STATE_NORMAL;
      // LOG_INF("CHG -> NORMAL (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 8001aa0:	e044      	b.n	8001b2c <bms_state_machine+0x108>
    else if (bms_discharge_allowed(bms))
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff9d 	bl	80019e2 <bms_discharge_allowed>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d03e      	beq.n	8001b2c <bms_state_machine+0x108>
      CommandSubcommands(ALL_FETS_ON);
 8001aae:	2096      	movs	r0, #150	@ 0x96
 8001ab0:	f7ff fc46 	bl	8001340 <CommandSubcommands>
      bms->bms_state = BMS_STATE_NORMAL;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	701a      	strb	r2, [r3, #0]
    break;
 8001aba:	e037      	b.n	8001b2c <bms_state_machine+0x108>

  case BMS_STATE_DIS:
    if (!bms_discharge_allowed(bms))
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff90 	bl	80019e2 <bms_discharge_allowed>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f083 0301 	eor.w	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <bms_state_machine+0xb2>
    {
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_OFF;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
    {
      CommandSubcommands(ALL_FETS_ON);
      bms->bms_state = BMS_STATE_NORMAL;
      // LOG_INF("DIS -> NORMAL (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 8001ad4:	e02c      	b.n	8001b30 <bms_state_machine+0x10c>
    else if (bms_charge_allowed(bms))
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ff62 	bl	80019a0 <bms_charge_allowed>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d026      	beq.n	8001b30 <bms_state_machine+0x10c>
      CommandSubcommands(ALL_FETS_ON);
 8001ae2:	2096      	movs	r0, #150	@ 0x96
 8001ae4:	f7ff fc2c 	bl	8001340 <CommandSubcommands>
      bms->bms_state = BMS_STATE_NORMAL;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2203      	movs	r2, #3
 8001aec:	701a      	strb	r2, [r3, #0]
    break;
 8001aee:	e01f      	b.n	8001b30 <bms_state_machine+0x10c>

  case BMS_STATE_NORMAL:
    if (!bms_discharge_allowed(bms))
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff76 	bl	80019e2 <bms_discharge_allowed>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f083 0301 	eor.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <bms_state_machine+0xe6>
    {
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_CHG;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
    {
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_DIS;
      // LOG_INF("NORMAL -> DIS (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 8001b08:	e014      	b.n	8001b34 <bms_state_machine+0x110>
    else if (!bms_charge_allowed(bms))
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ff48 	bl	80019a0 <bms_charge_allowed>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f083 0301 	eor.w	r3, r3, #1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00b      	beq.n	8001b34 <bms_state_machine+0x110>
      bms->bms_state = BMS_STATE_DIS;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	701a      	strb	r2, [r3, #0]
    break;
 8001b22:	e007      	b.n	8001b34 <bms_state_machine+0x110>

  case BMS_STATE_SHUTDOWN:
    /* do nothing and wait until shutdown is completed */
    break;
 8001b24:	bf00      	nop
 8001b26:	e006      	b.n	8001b36 <bms_state_machine+0x112>
    break;
 8001b28:	bf00      	nop
 8001b2a:	e004      	b.n	8001b36 <bms_state_machine+0x112>
    break;
 8001b2c:	bf00      	nop
 8001b2e:	e002      	b.n	8001b36 <bms_state_machine+0x112>
    break;
 8001b30:	bf00      	nop
 8001b32:	e000      	b.n	8001b36 <bms_state_machine+0x112>
    break;
 8001b34:	bf00      	nop
  }
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop

08001b40 <delayUS>:
static void soc_task(void *parameters);
static void read_voltage_task(void *parameters);
static void bms_state_machine_task(void *parameters);

void delayUS(uint32_t us)
{                                    // Sets the delay in microseconds.
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim10, 0); // set the counter value a 0
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <delayUS+0x2c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim10) < us)
 8001b50:	bf00      	nop
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <delayUS+0x2c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d8f9      	bhi.n	8001b52 <delayUS+0x12>
    ; // wait for the counter to reach the us input in the parameter
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	200002c0 	.word	0x200002c0

08001b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b08f      	sub	sp, #60	@ 0x3c
 8001b74:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8001b76:	4ba2      	ldr	r3, [pc, #648]	@ (8001e00 <main+0x290>)
 8001b78:	f107 0408 	add.w	r4, r7, #8
 8001b7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b82:	f003 fbeb 	bl	800535c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b86:	f000 f96f 	bl	8001e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b8a:	f000 fadd 	bl	8002148 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b8e:	f000 fab3 	bl	80020f8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001b92:	f000 fa5d 	bl	8002050 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001b96:	f000 fa01 	bl	8001f9c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001b9a:	f000 fa83 	bl	80020a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001b9e:	f000 f9cf 	bl	8001f40 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001ba2:	f000 fa31 	bl	8002008 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // Enable cycle count for STM32

  DWT_CTRL |= (1 << 0);
 8001ba6:	4b97      	ldr	r3, [pc, #604]	@ (8001e04 <main+0x294>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a96      	ldr	r2, [pc, #600]	@ (8001e04 <main+0x294>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8001bb2:	f00a fa45 	bl	800c040 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8001bb6:	f00b fab1 	bl	800d11c <SEGGER_SYSVIEW_Start>

  // Reset wiznet module
  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2108      	movs	r1, #8
 8001bbe:	4892      	ldr	r0, [pc, #584]	@ (8001e08 <main+0x298>)
 8001bc0:	f004 f992 	bl	8005ee8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001bc4:	2064      	movs	r0, #100	@ 0x64
 8001bc6:	f003 fc0b 	bl	80053e0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2108      	movs	r1, #8
 8001bce:	488e      	ldr	r0, [pc, #568]	@ (8001e08 <main+0x298>)
 8001bd0:	f004 f98a 	bl	8005ee8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001bd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bd8:	f003 fc02 	bl	80053e0 <HAL_Delay>

  /* SPI Read & Write callback function */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8001bdc:	498b      	ldr	r1, [pc, #556]	@ (8001e0c <main+0x29c>)
 8001bde:	488c      	ldr	r0, [pc, #560]	@ (8001e10 <main+0x2a0>)
 8001be0:	f002 fe7a 	bl	80048d8 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8001be4:	498b      	ldr	r1, [pc, #556]	@ (8001e14 <main+0x2a4>)
 8001be6:	488c      	ldr	r0, [pc, #560]	@ (8001e18 <main+0x2a8>)
 8001be8:	f002 fe9c 	bl	8004924 <reg_wizchip_spi_cbfunc>

  ////////////////////////////////////////////////////////////////////////
  /* WIZCHIP SOCKET Buffer initialize */
  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f002 fec2 	bl	800497c <ctlwizchip>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bfe:	d101      	bne.n	8001c04 <main+0x94>
  {

    while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <main+0x90>
      ;
  }

  /* Network initialization */
  network_init();
 8001c04:	f000 fe16 	bl	8002834 <network_init>
  wizchip_setnetinfo(&gWIZNETINFO);
 8001c08:	4884      	ldr	r0, [pc, #528]	@ (8001e1c <main+0x2ac>)
 8001c0a:	f003 fa91 	bl	8005130 <wizchip_setnetinfo>
  // PRINT_NETINFO(gWIZNETINFO);

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8001c0e:	4983      	ldr	r1, [pc, #524]	@ (8001e1c <main+0x2ac>)
 8001c10:	2000      	movs	r0, #0
 8001c12:	f002 ff93 	bl	8004b3c <ctlnetwork>
  // so that user can use any model w5500 board
  // else the PINs on the board configure it, which may
  // lead to different configurations in different boards.
  wiz_PhyConf phyconf;

  phyconf.by = PHY_CONFBY_SW;
 8001c16:	2301      	movs	r3, #1
 8001c18:	713b      	strb	r3, [r7, #4]
  phyconf.duplex = PHY_DUPLEX_FULL;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	71fb      	strb	r3, [r7, #7]
  phyconf.speed = PHY_SPEED_10;     // 10MBps Ethernet link speed
 8001c1e:	2300      	movs	r3, #0
 8001c20:	71bb      	strb	r3, [r7, #6]
  phyconf.mode = PHY_MODE_AUTONEGO; // best to go with auto-negotiation
 8001c22:	2301      	movs	r3, #1
 8001c24:	717b      	strb	r3, [r7, #5]

  ctlwizchip(CW_SET_PHYCONF, (void *)&phyconf); // PHY Configuration Command
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	200a      	movs	r0, #10
 8001c2c:	f002 fea6 	bl	800497c <ctlwizchip>
  //*** End Phy Configuration
  // Init Timer
  HAL_TIM_Base_Start(&htim10);
 8001c30:	487b      	ldr	r0, [pc, #492]	@ (8001e20 <main+0x2b0>)
 8001c32:	f006 fb2f 	bl	8008294 <HAL_TIM_Base_Start>
  delayUS(10000);
 8001c36:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001c3a:	f7ff ff81 	bl	8001b40 <delayUS>

  // init bms

  bms1.battery_full = 1;
 8001c3e:	4b79      	ldr	r3, [pc, #484]	@ (8001e24 <main+0x2b4>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	70da      	strb	r2, [r3, #3]
  bms1.charge_enable = 1;
 8001c44:	4b77      	ldr	r3, [pc, #476]	@ (8001e24 <main+0x2b4>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	705a      	strb	r2, [r3, #1]
  bms1.discharge_enable = 1;
 8001c4a:	4b76      	ldr	r3, [pc, #472]	@ (8001e24 <main+0x2b4>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	709a      	strb	r2, [r3, #2]

  // BQ hard and soft reset
  HAL_GPIO_WritePin(BQ_RESET_GPIO_Port, BQ_RESET_Pin, GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c56:	4874      	ldr	r0, [pc, #464]	@ (8001e28 <main+0x2b8>)
 8001c58:	f004 f946 	bl	8005ee8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001c5c:	200a      	movs	r0, #10
 8001c5e:	f003 fbbf 	bl	80053e0 <HAL_Delay>
  HAL_GPIO_WritePin(BQ_RESET_GPIO_Port, BQ_RESET_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c68:	486f      	ldr	r0, [pc, #444]	@ (8001e28 <main+0x2b8>)
 8001c6a:	f004 f93d 	bl	8005ee8 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8001c6e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c72:	f003 fbb5 	bl	80053e0 <HAL_Delay>
  CommandSubcommands(BQ769x2_RESET); // Resets the BQ769x2 registers
 8001c76:	2012      	movs	r0, #18
 8001c78:	f7ff fb62 	bl	8001340 <CommandSubcommands>
  HAL_Delay(1200);
 8001c7c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001c80:	f003 fbae 	bl	80053e0 <HAL_Delay>
  BQ769x2_Init(); // Configure all of the BQ769x2 register settings
 8001c84:	f7ff fc4e 	bl	8001524 <BQ769x2_Init>
  delayUS(10000);
 8001c88:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001c8c:	f7ff ff58 	bl	8001b40 <delayUS>
  CommandSubcommands(SLEEP_DISABLE); // Sleep mode is enabled by default. For this example, Sleep is disabled to
 8001c90:	209a      	movs	r0, #154	@ 0x9a
 8001c92:	f7ff fb55 	bl	8001340 <CommandSubcommands>
                                     // demonstrate full-speed measurements in Normal mode.

  delayUS(60000);
 8001c96:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001c9a:	f7ff ff51 	bl	8001b40 <delayUS>
  delayUS(60000);
 8001c9e:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001ca2:	f7ff ff4d 	bl	8001b40 <delayUS>
  delayUS(60000);
 8001ca6:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001caa:	f7ff ff49 	bl	8001b40 <delayUS>
  delayUS(60000);
 8001cae:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001cb2:	f7ff ff45 	bl	8001b40 <delayUS>

  uint16_t manuStatus = BQ769x2_ReadRegister(MANUFACTURINGSTATUS);
 8001cb6:	2057      	movs	r0, #87	@ 0x57
 8001cb8:	f7ff faf2 	bl	80012a0 <BQ769x2_ReadRegister>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  uint16_t manuInit = BQ769x2_ReadRegister(MfgStatusInit);
 8001cc0:	f249 3043 	movw	r0, #37699	@ 0x9343
 8001cc4:	f7ff faec 	bl	80012a0 <BQ769x2_ReadRegister>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint16_t manuData = BQ769x2_ReadRegister(MANU_DATA);
 8001ccc:	2070      	movs	r0, #112	@ 0x70
 8001cce:	f7ff fae7 	bl	80012a0 <BQ769x2_ReadRegister>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t FET_options = BQ769x2_ReadRegister(FETOptions);
 8001cd6:	f249 3008 	movw	r0, #37640	@ 0x9308
 8001cda:	f7ff fae1 	bl	80012a0 <BQ769x2_ReadRegister>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	853b      	strh	r3, [r7, #40]	@ 0x28

  AlarmBits = BQ769x2_ReadAlarmStatus();
 8001ce2:	f7ff fcaf 	bl	8001644 <BQ769x2_ReadAlarmStatus>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b50      	ldr	r3, [pc, #320]	@ (8001e2c <main+0x2bc>)
 8001cec:	801a      	strh	r2, [r3, #0]
  // CommandSubcommands(RESET_PASSQ);
  //CommandSubcommands(ALL_FETS_ON);
  data_ready_semaphore = xSemaphoreCreateBinary();
 8001cee:	2203      	movs	r2, #3
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f007 fb00 	bl	80092f8 <xQueueGenericCreate>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a4d      	ldr	r2, [pc, #308]	@ (8001e30 <main+0x2c0>)
 8001cfc:	6013      	str	r3, [r2, #0]
  data_ready_semaphore = xSemaphoreCreateBinary();
 8001cfe:	2203      	movs	r2, #3
 8001d00:	2100      	movs	r1, #0
 8001d02:	2001      	movs	r0, #1
 8001d04:	f007 faf8 	bl	80092f8 <xQueueGenericCreate>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4a49      	ldr	r2, [pc, #292]	@ (8001e30 <main+0x2c0>)
 8001d0c:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(modbus_comm_task, "modbus_comm_task", 200, NULL, 2, &modbus_task_handle);
 8001d0e:	4b49      	ldr	r3, [pc, #292]	@ (8001e34 <main+0x2c4>)
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	2302      	movs	r3, #2
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2300      	movs	r3, #0
 8001d18:	22c8      	movs	r2, #200	@ 0xc8
 8001d1a:	4947      	ldr	r1, [pc, #284]	@ (8001e38 <main+0x2c8>)
 8001d1c:	4847      	ldr	r0, [pc, #284]	@ (8001e3c <main+0x2cc>)
 8001d1e:	f008 f945 	bl	8009fac <xTaskCreate>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4a46      	ldr	r2, [pc, #280]	@ (8001e40 <main+0x2d0>)
 8001d26:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001d28:	4b45      	ldr	r3, [pc, #276]	@ (8001e40 <main+0x2d0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d00b      	beq.n	8001d48 <main+0x1d8>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d34:	f383 8811 	msr	BASEPRI, r3
 8001d38:	f3bf 8f6f 	isb	sy
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <main+0x1d4>

  status = xTaskCreate(soc_task, "soc_handle", 200, NULL, 3, &soc_task_handle);
 8001d48:	4b3e      	ldr	r3, [pc, #248]	@ (8001e44 <main+0x2d4>)
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2300      	movs	r3, #0
 8001d52:	22c8      	movs	r2, #200	@ 0xc8
 8001d54:	493c      	ldr	r1, [pc, #240]	@ (8001e48 <main+0x2d8>)
 8001d56:	483d      	ldr	r0, [pc, #244]	@ (8001e4c <main+0x2dc>)
 8001d58:	f008 f928 	bl	8009fac <xTaskCreate>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4a38      	ldr	r2, [pc, #224]	@ (8001e40 <main+0x2d0>)
 8001d60:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001d62:	4b37      	ldr	r3, [pc, #220]	@ (8001e40 <main+0x2d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d00b      	beq.n	8001d82 <main+0x212>
        __asm volatile
 8001d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d6e:	f383 8811 	msr	BASEPRI, r3
 8001d72:	f3bf 8f6f 	isb	sy
 8001d76:	f3bf 8f4f 	dsb	sy
 8001d7a:	623b      	str	r3, [r7, #32]
    }
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	e7fd      	b.n	8001d7e <main+0x20e>

  status = xTaskCreate(read_voltage_task, "read_voltage_task", 200, NULL, 2, &read_voltage_task_handle);
 8001d82:	4b33      	ldr	r3, [pc, #204]	@ (8001e50 <main+0x2e0>)
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2302      	movs	r3, #2
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	22c8      	movs	r2, #200	@ 0xc8
 8001d8e:	4931      	ldr	r1, [pc, #196]	@ (8001e54 <main+0x2e4>)
 8001d90:	4831      	ldr	r0, [pc, #196]	@ (8001e58 <main+0x2e8>)
 8001d92:	f008 f90b 	bl	8009fac <xTaskCreate>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4a29      	ldr	r2, [pc, #164]	@ (8001e40 <main+0x2d0>)
 8001d9a:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001d9c:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <main+0x2d0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d00b      	beq.n	8001dbc <main+0x24c>
        __asm volatile
 8001da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001da8:	f383 8811 	msr	BASEPRI, r3
 8001dac:	f3bf 8f6f 	isb	sy
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	61fb      	str	r3, [r7, #28]
    }
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <main+0x248>

  status = xTaskCreate(bms_state_machine_task, "bms_state machine_task", 200, (void *)&bms1, 3, &bms_state_machine_handle);
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <main+0x2ec>)
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <main+0x2b4>)
 8001dc6:	22c8      	movs	r2, #200	@ 0xc8
 8001dc8:	4925      	ldr	r1, [pc, #148]	@ (8001e60 <main+0x2f0>)
 8001dca:	4826      	ldr	r0, [pc, #152]	@ (8001e64 <main+0x2f4>)
 8001dcc:	f008 f8ee 	bl	8009fac <xTaskCreate>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e40 <main+0x2d0>)
 8001dd4:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <main+0x2d0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d00b      	beq.n	8001df6 <main+0x286>
        __asm volatile
 8001dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001de2:	f383 8811 	msr	BASEPRI, r3
 8001de6:	f3bf 8f6f 	isb	sy
 8001dea:	f3bf 8f4f 	dsb	sy
 8001dee:	61bb      	str	r3, [r7, #24]
    }
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	e7fd      	b.n	8001df2 <main+0x282>


  vTaskStartScheduler();
 8001df6:	f008 fa77 	bl	800a2e8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dfa:	bf00      	nop
 8001dfc:	e7fd      	b.n	8001dfa <main+0x28a>
 8001dfe:	bf00      	nop
 8001e00:	0800fd08 	.word	0x0800fd08
 8001e04:	e0001000 	.word	0xe0001000
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	080027f1 	.word	0x080027f1
 8001e10:	080027d9 	.word	0x080027d9
 8001e14:	08002809 	.word	0x08002809
 8001e18:	08002823 	.word	0x08002823
 8001e1c:	20000004 	.word	0x20000004
 8001e20:	200002c0 	.word	0x200002c0
 8001e24:	2000049c 	.word	0x2000049c
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	20000138 	.word	0x20000138
 8001e30:	20000570 	.word	0x20000570
 8001e34:	2000055c 	.word	0x2000055c
 8001e38:	0800fcbc 	.word	0x0800fcbc
 8001e3c:	08002281 	.word	0x08002281
 8001e40:	2000056c 	.word	0x2000056c
 8001e44:	20000560 	.word	0x20000560
 8001e48:	0800fcd0 	.word	0x0800fcd0
 8001e4c:	08002565 	.word	0x08002565
 8001e50:	20000564 	.word	0x20000564
 8001e54:	0800fcdc 	.word	0x0800fcdc
 8001e58:	0800264d 	.word	0x0800264d
 8001e5c:	20000568 	.word	0x20000568
 8001e60:	0800fcf0 	.word	0x0800fcf0
 8001e64:	0800261d 	.word	0x0800261d

08001e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b094      	sub	sp, #80	@ 0x50
 8001e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	2234      	movs	r2, #52	@ 0x34
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f00c f948 	bl	800e10c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	4b29      	ldr	r3, [pc, #164]	@ (8001f38 <SystemClock_Config+0xd0>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	4a28      	ldr	r2, [pc, #160]	@ (8001f38 <SystemClock_Config+0xd0>)
 8001e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9c:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <SystemClock_Config+0xd0>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <SystemClock_Config+0xd4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a22      	ldr	r2, [pc, #136]	@ (8001f3c <SystemClock_Config+0xd4>)
 8001eb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <SystemClock_Config+0xd4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ec8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ecc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ed2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001edc:	23a8      	movs	r3, #168	@ 0xa8
 8001ede:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f005 fbcb 	bl	800768c <HAL_RCC_OscConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001efc:	f000 fd2e 	bl	800295c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f00:	230f      	movs	r3, #15
 8001f02:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f04:	2302      	movs	r3, #2
 8001f06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f16:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	2105      	movs	r1, #5
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f005 f83a 	bl	8006f98 <HAL_RCC_ClockConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f2a:	f000 fd17 	bl	800295c <Error_Handler>
  }
}
 8001f2e:	bf00      	nop
 8001f30:	3750      	adds	r7, #80	@ 0x50
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40007000 	.word	0x40007000

08001f40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f46:	4a13      	ldr	r2, [pc, #76]	@ (8001f94 <MX_I2C1_Init+0x54>)
 8001f48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f4c:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <MX_I2C1_Init+0x58>)
 8001f4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f70:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f7c:	4804      	ldr	r0, [pc, #16]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f7e:	f003 ffe7 	bl	8005f50 <HAL_I2C_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f88:	f000 fce8 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000154 	.word	0x20000154
 8001f94:	40005400 	.word	0x40005400
 8001f98:	000186a0 	.word	0x000186a0

08001f9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fa0:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fa2:	4a18      	ldr	r2, [pc, #96]	@ (8002004 <MX_SPI1_Init+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fa6:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fae:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fba:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fce:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fe8:	220a      	movs	r2, #10
 8001fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fec:	4804      	ldr	r0, [pc, #16]	@ (8002000 <MX_SPI1_Init+0x64>)
 8001fee:	f005 fdeb 	bl	8007bc8 <HAL_SPI_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ff8:	f000 fcb0 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000268 	.word	0x20000268
 8002004:	40013000 	.word	0x40013000

08002008 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <MX_TIM10_Init+0x40>)
 800200e:	4a0f      	ldr	r2, [pc, #60]	@ (800204c <MX_TIM10_Init+0x44>)
 8002010:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002012:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <MX_TIM10_Init+0x40>)
 8002014:	2200      	movs	r2, #0
 8002016:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <MX_TIM10_Init+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <MX_TIM10_Init+0x40>)
 8002020:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002024:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002026:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <MX_TIM10_Init+0x40>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <MX_TIM10_Init+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002032:	4805      	ldr	r0, [pc, #20]	@ (8002048 <MX_TIM10_Init+0x40>)
 8002034:	f006 f8de 	bl	80081f4 <HAL_TIM_Base_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800203e:	f000 fc8d 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200002c0 	.word	0x200002c0
 800204c:	40014400 	.word	0x40014400

08002050 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <MX_USART1_UART_Init+0x50>)
 8002058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 800205c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b08      	ldr	r3, [pc, #32]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002086:	4805      	ldr	r0, [pc, #20]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002088:	f006 fbb4 	bl	80087f4 <HAL_UART_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002092:	f000 fc63 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000308 	.word	0x20000308
 80020a0:	40011000 	.word	0x40011000

080020a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	@ (80020f4 <MX_USART2_UART_Init+0x50>)
 80020ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ae:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020c8:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020ca:	220c      	movs	r2, #12
 80020cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020dc:	f006 fbda 	bl	8008894 <HAL_HalfDuplex_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020e6:	f000 fc39 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000350 	.word	0x20000350
 80020f4:	40004400 	.word	0x40004400

080020f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <MX_DMA_Init+0x4c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	4a0f      	ldr	r2, [pc, #60]	@ (8002144 <MX_DMA_Init+0x4c>)
 8002108:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800210c:	6313      	str	r3, [r2, #48]	@ 0x30
 800210e:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <MX_DMA_Init+0x4c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	200b      	movs	r0, #11
 8002120:	f003 fa3a 	bl	8005598 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002124:	200b      	movs	r0, #11
 8002126:	f003 fa53 	bl	80055d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2011      	movs	r0, #17
 8002130:	f003 fa32 	bl	8005598 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002134:	2011      	movs	r0, #17
 8002136:	f003 fa4b 	bl	80055d0 <HAL_NVIC_EnableIRQ>

}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	@ 0x28
 800214c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	4b43      	ldr	r3, [pc, #268]	@ (8002270 <MX_GPIO_Init+0x128>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a42      	ldr	r2, [pc, #264]	@ (8002270 <MX_GPIO_Init+0x128>)
 8002168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b40      	ldr	r3, [pc, #256]	@ (8002270 <MX_GPIO_Init+0x128>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b3c      	ldr	r3, [pc, #240]	@ (8002270 <MX_GPIO_Init+0x128>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	4a3b      	ldr	r2, [pc, #236]	@ (8002270 <MX_GPIO_Init+0x128>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	@ 0x30
 800218a:	4b39      	ldr	r3, [pc, #228]	@ (8002270 <MX_GPIO_Init+0x128>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	4b35      	ldr	r3, [pc, #212]	@ (8002270 <MX_GPIO_Init+0x128>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4a34      	ldr	r2, [pc, #208]	@ (8002270 <MX_GPIO_Init+0x128>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4b32      	ldr	r3, [pc, #200]	@ (8002270 <MX_GPIO_Init+0x128>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002270 <MX_GPIO_Init+0x128>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002270 <MX_GPIO_Init+0x128>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <MX_GPIO_Init+0x128>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_W5500_RESET_Pin|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2118      	movs	r1, #24
 80021d2:	4828      	ldr	r0, [pc, #160]	@ (8002274 <MX_GPIO_Init+0x12c>)
 80021d4:	f003 fe88 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|SPI_INT_Pin, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	f248 0103 	movw	r1, #32771	@ 0x8003
 80021de:	4826      	ldr	r0, [pc, #152]	@ (8002278 <MX_GPIO_Init+0x130>)
 80021e0:	f003 fe82 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BQ_RESET_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80021e4:	2200      	movs	r2, #0
 80021e6:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 80021ea:	4824      	ldr	r0, [pc, #144]	@ (800227c <MX_GPIO_Init+0x134>)
 80021ec:	f003 fe7c 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_W5500_RESET_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_W5500_RESET_Pin|GPIO_W5500_CS_Pin;
 80021f0:	2318      	movs	r3, #24
 80021f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f4:	2301      	movs	r3, #1
 80021f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	481b      	ldr	r0, [pc, #108]	@ (8002274 <MX_GPIO_Init+0x12c>)
 8002208:	f003 fcda 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin SPI_INT_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|SPI_INT_Pin;
 800220c:	f248 0303 	movw	r3, #32771	@ 0x8003
 8002210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002212:	2301      	movs	r3, #1
 8002214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	4814      	ldr	r0, [pc, #80]	@ (8002278 <MX_GPIO_Init+0x130>)
 8002226:	f003 fccb 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BQ_RESET_Pin */
  GPIO_InitStruct.Pin = BQ_RESET_Pin;
 800222a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800222e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002230:	2301      	movs	r3, #1
 8002232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002234:	2302      	movs	r3, #2
 8002236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BQ_RESET_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	480e      	ldr	r0, [pc, #56]	@ (800227c <MX_GPIO_Init+0x134>)
 8002244:	f003 fcbc 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002248:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800224c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224e:	2301      	movs	r3, #1
 8002250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	4806      	ldr	r0, [pc, #24]	@ (800227c <MX_GPIO_Init+0x134>)
 8002262:	f003 fcad 	bl	8005bc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	@ 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800

08002280 <modbus_comm_task>:

/* USER CODE BEGIN 4 */

void modbus_comm_task(void *parameters)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	@ 0x30
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    bool start_modbus = false;
 8002288:	2300      	movs	r3, #0
 800228a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    TickType_t retry_delay = pdMS_TO_TICKS(500); // Delay before retrying in case of failures
 800228e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24

    PRINT_STR("MODBUS WHILE LOOP\r\n");
 8002294:	2364      	movs	r3, #100	@ 0x64
 8002296:	2213      	movs	r2, #19
 8002298:	499a      	ldr	r1, [pc, #616]	@ (8002504 <modbus_comm_task+0x284>)
 800229a:	489b      	ldr	r0, [pc, #620]	@ (8002508 <modbus_comm_task+0x288>)
 800229c:	f006 fb52 	bl	8008944 <HAL_UART_Transmit>

    // Keep checking for Ethernet connection before starting Modbus communication
    while (!start_modbus)
 80022a0:	e010      	b.n	80022c4 <modbus_comm_task+0x44>
    {
        if (PHYStatusCheck() == Ethernet_OK)
 80022a2:	f000 fad9 	bl	8002858 <PHYStatusCheck>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <modbus_comm_task+0x38>
        {
            PrintPHYConf();      // Print Ethernet PHY configuration
 80022ac:	f000 fb00 	bl	80028b0 <PrintPHYConf>
            start_modbus = true; // Set flag to true to start Modbus communication
 80022b0:	2301      	movs	r3, #1
 80022b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80022b6:	e005      	b.n	80022c4 <modbus_comm_task+0x44>
        }
        else
        {
            printf("Waiting for Ethernet connection...\r\n");
 80022b8:	4894      	ldr	r0, [pc, #592]	@ (800250c <modbus_comm_task+0x28c>)
 80022ba:	f00b fe37 	bl	800df2c <puts>
            vTaskDelay(retry_delay); // Delay 1 second before rechecking
 80022be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022c0:	f007 ffd8 	bl	800a274 <vTaskDelay>
    while (!start_modbus)
 80022c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022c8:	f083 0301 	eor.w	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e7      	bne.n	80022a2 <modbus_comm_task+0x22>
    }

    // Modbus communication task starts after Ethernet is connected
    while (1)
    {
        printf("\r\nInitializing server socket\r\n");
 80022d2:	488f      	ldr	r0, [pc, #572]	@ (8002510 <modbus_comm_task+0x290>)
 80022d4:	f00b fe2a 	bl	800df2c <puts>

        int socket_id = socket(1, Sn_MR_TCP, LISTEN_PORT, 0);
 80022d8:	2300      	movs	r3, #0
 80022da:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 80022de:	2101      	movs	r1, #1
 80022e0:	2001      	movs	r0, #1
 80022e2:	f001 fdd7 	bl	8003e94 <socket>
 80022e6:	4603      	mov	r3, r0
 80022e8:	623b      	str	r3, [r7, #32]
        if (socket_id < 0) // Check if socket creation failed
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	da06      	bge.n	80022fe <modbus_comm_task+0x7e>
        {
            printf("Cannot create Socket! Retrying...\r\n");
 80022f0:	4888      	ldr	r0, [pc, #544]	@ (8002514 <modbus_comm_task+0x294>)
 80022f2:	f00b fe1b 	bl	800df2c <puts>
            vTaskDelay(retry_delay);
 80022f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022f8:	f007 ffbc 	bl	800a274 <vTaskDelay>
            continue;
 80022fc:	e100      	b.n	8002500 <modbus_comm_task+0x280>
        }

        printf("Socket Created Successfully with ID: %d\r\n", socket_id);
 80022fe:	6a39      	ldr	r1, [r7, #32]
 8002300:	4885      	ldr	r0, [pc, #532]	@ (8002518 <modbus_comm_task+0x298>)
 8002302:	f00b fdab 	bl	800de5c <iprintf>

        // Set socket to non-blocking mode
        uint8_t socket_io_mode = SOCK_IO_NONBLOCK;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
        if (ctlsocket(socket_id, CS_SET_IOMODE, &socket_io_mode) != SOCK_OK)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f107 020f 	add.w	r2, r7, #15
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f002 f9bb 	bl	8004690 <ctlsocket>
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	d00b      	beq.n	8002338 <modbus_comm_task+0xb8>
        {
            printf("Failed to set socket to non-blocking I/O mode\r\n");
 8002320:	487e      	ldr	r0, [pc, #504]	@ (800251c <modbus_comm_task+0x29c>)
 8002322:	f00b fe03 	bl	800df2c <puts>
            disconnect(socket_id);
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f001 ff8e 	bl	800424c <disconnect>
            vTaskDelay(retry_delay);
 8002330:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002332:	f007 ff9f 	bl	800a274 <vTaskDelay>
            continue;
 8002336:	e0e3      	b.n	8002500 <modbus_comm_task+0x280>
        }

        // Set up socket to listen for client connections
        if (listen(socket_id) != SOCK_OK)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	f001 ff2b 	bl	8004198 <listen>
 8002342:	4603      	mov	r3, r0
 8002344:	2b01      	cmp	r3, #1
 8002346:	d00d      	beq.n	8002364 <modbus_comm_task+0xe4>
        {
            printf("Cannot listen on port %d! Retrying...\r\n", LISTEN_PORT);
 8002348:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 800234c:	4874      	ldr	r0, [pc, #464]	@ (8002520 <modbus_comm_task+0x2a0>)
 800234e:	f00b fd85 	bl	800de5c <iprintf>
            disconnect(socket_id);
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f001 ff78 	bl	800424c <disconnect>
            vTaskDelay(retry_delay);
 800235c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800235e:	f007 ff89 	bl	800a274 <vTaskDelay>
            continue;
 8002362:	e0cd      	b.n	8002500 <modbus_comm_task+0x280>
        }

        printf("Listening on port %d, waiting for client connection...\r\n", LISTEN_PORT);
 8002364:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8002368:	486e      	ldr	r0, [pc, #440]	@ (8002524 <modbus_comm_task+0x2a4>)
 800236a:	f00b fd77 	bl	800de5c <iprintf>

        TickType_t xTimeOut = xTaskGetTickCount() + pdMS_TO_TICKS(5000);
 800236e:	f008 f8cd 	bl	800a50c <xTaskGetTickCount>
 8002372:	4603      	mov	r3, r0
 8002374:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8002378:	3308      	adds	r3, #8
 800237a:	61fb      	str	r3, [r7, #28]
        while (getSn_SR(socket_id) != SOCK_ESTABLISHED && xTaskGetTickCount() < xTimeOut)
 800237c:	e002      	b.n	8002384 <modbus_comm_task+0x104>
        {
            vTaskDelay(pdMS_TO_TICKS(100));
 800237e:	2064      	movs	r0, #100	@ 0x64
 8002380:	f007 ff78 	bl	800a274 <vTaskDelay>
        while (getSn_SR(socket_id) != SOCK_ESTABLISHED && xTaskGetTickCount() < xTimeOut)
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	3301      	adds	r3, #1
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002390:	4618      	mov	r0, r3
 8002392:	f001 fadf 	bl	8003954 <WIZCHIP_READ>
 8002396:	4603      	mov	r3, r0
 8002398:	2b17      	cmp	r3, #23
 800239a:	d005      	beq.n	80023a8 <modbus_comm_task+0x128>
 800239c:	f008 f8b6 	bl	800a50c <xTaskGetTickCount>
 80023a0:	4602      	mov	r2, r0
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d8ea      	bhi.n	800237e <modbus_comm_task+0xfe>
        }

        if (getSn_SR(socket_id) != SOCK_ESTABLISHED)
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	3301      	adds	r3, #1
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80023b4:	4618      	mov	r0, r3
 80023b6:	f001 facd 	bl	8003954 <WIZCHIP_READ>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b17      	cmp	r3, #23
 80023be:	d00b      	beq.n	80023d8 <modbus_comm_task+0x158>
        {
            printf("Failed to establish client connection! Retrying...\r\n");
 80023c0:	4859      	ldr	r0, [pc, #356]	@ (8002528 <modbus_comm_task+0x2a8>)
 80023c2:	f00b fdb3 	bl	800df2c <puts>
            disconnect(socket_id);
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 ff3e 	bl	800424c <disconnect>
            vTaskDelay(retry_delay);
 80023d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023d2:	f007 ff4f 	bl	800a274 <vTaskDelay>
            continue;
 80023d6:	e093      	b.n	8002500 <modbus_comm_task+0x280>
        }

        printf("Client connected on socket %d!\r\n", socket_id);
 80023d8:	6a39      	ldr	r1, [r7, #32]
 80023da:	4854      	ldr	r0, [pc, #336]	@ (800252c <modbus_comm_task+0x2ac>)
 80023dc:	f00b fd3e 	bl	800de5c <iprintf>

        // Client is connected, enter communication loop
        while (getSn_SR(socket_id) == SOCK_ESTABLISHED)
 80023e0:	e079      	b.n	80024d6 <modbus_comm_task+0x256>
        {
            int len = recv(socket_id, RX_buffer, RX_buffer_length);
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2280      	movs	r2, #128	@ 0x80
 80023e8:	4951      	ldr	r1, [pc, #324]	@ (8002530 <modbus_comm_task+0x2b0>)
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 f89c 	bl	8004528 <recv>
 80023f0:	61b8      	str	r0, [r7, #24]
            if (len <= 0)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	dc0c      	bgt.n	8002412 <modbus_comm_task+0x192>
            {
                if (len == SOCKERR_SOCKSTATUS)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	f113 0f07 	cmn.w	r3, #7
 80023fe:	d103      	bne.n	8002408 <modbus_comm_task+0x188>
                {
                    printf("Client disconnected. Session over.\r\n");
 8002400:	484c      	ldr	r0, [pc, #304]	@ (8002534 <modbus_comm_task+0x2b4>)
 8002402:	f00b fd93 	bl	800df2c <puts>
                    break;
 8002406:	e073      	b.n	80024f0 <modbus_comm_task+0x270>
                }
                printf("Socket error: %d. Retrying...\r\n", len);
 8002408:	69b9      	ldr	r1, [r7, #24]
 800240a:	484b      	ldr	r0, [pc, #300]	@ (8002538 <modbus_comm_task+0x2b8>)
 800240c:	f00b fd26 	bl	800de5c <iprintf>
                break;
 8002410:	e06e      	b.n	80024f0 <modbus_comm_task+0x270>
            }

            RX_buffer[len] = '\0';
 8002412:	4a47      	ldr	r2, [pc, #284]	@ (8002530 <modbus_comm_task+0x2b0>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	4413      	add	r3, r2
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
            printf("Received %d bytes: %s\r\n", len, RX_buffer);
 800241c:	4a44      	ldr	r2, [pc, #272]	@ (8002530 <modbus_comm_task+0x2b0>)
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	4846      	ldr	r0, [pc, #280]	@ (800253c <modbus_comm_task+0x2bc>)
 8002422:	f00b fd1b 	bl	800de5c <iprintf>

            // Prepare response
            memset(TX_buffer, 0, sizeof(TX_buffer));
 8002426:	2280      	movs	r2, #128	@ 0x80
 8002428:	2100      	movs	r1, #0
 800242a:	4845      	ldr	r0, [pc, #276]	@ (8002540 <modbus_comm_task+0x2c0>)
 800242c:	f00b fe6e 	bl	800e10c <memset>
            if (xSemaphoreTake(data_ready_semaphore, portMAX_DELAY) == pdTRUE)
 8002430:	4b44      	ldr	r3, [pc, #272]	@ (8002544 <modbus_comm_task+0x2c4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002438:	4618      	mov	r0, r3
 800243a:	f007 fae9 	bl	8009a10 <xQueueSemaphoreTake>
 800243e:	4603      	mov	r3, r0
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <modbus_comm_task+0x1d0>
            {
                modbus_receive(RX_buffer, TX_buffer, len, holding_register);
 8002444:	4b40      	ldr	r3, [pc, #256]	@ (8002548 <modbus_comm_task+0x2c8>)
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	493d      	ldr	r1, [pc, #244]	@ (8002540 <modbus_comm_task+0x2c0>)
 800244a:	4839      	ldr	r0, [pc, #228]	@ (8002530 <modbus_comm_task+0x2b0>)
 800244c:	f000 fabe 	bl	80029cc <modbus_receive>
            }

            int total_sent = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28
            int data_len = strlen((char *)TX_buffer);
 8002454:	483a      	ldr	r0, [pc, #232]	@ (8002540 <modbus_comm_task+0x2c0>)
 8002456:	f7fd ff2f 	bl	80002b8 <strlen>
 800245a:	4603      	mov	r3, r0
 800245c:	617b      	str	r3, [r7, #20]

            while (total_sent < data_len)
 800245e:	e024      	b.n	80024aa <modbus_comm_task+0x22a>
            {
                int sent = send(socket_id, TX_buffer + total_sent, data_len - total_sent);
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	b2d8      	uxtb	r0, r3
 8002464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002466:	4a36      	ldr	r2, [pc, #216]	@ (8002540 <modbus_comm_task+0x2c0>)
 8002468:	1899      	adds	r1, r3, r2
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	b29a      	uxth	r2, r3
 800246e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002470:	b29b      	uxth	r3, r3
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	f001 ff5e 	bl	8004338 <send>
 800247c:	6138      	str	r0, [r7, #16]
                if (sent < 0)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	da0e      	bge.n	80024a2 <modbus_comm_task+0x222>
                {
                    if (sent == SOCK_BUSY)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <modbus_comm_task+0x218>
                    {
                        printf("Socket is busy, retrying send...\r\n");
 800248a:	4830      	ldr	r0, [pc, #192]	@ (800254c <modbus_comm_task+0x2cc>)
 800248c:	f00b fd4e 	bl	800df2c <puts>
                        vTaskDelay(pdMS_TO_TICKS(100));
 8002490:	2064      	movs	r0, #100	@ 0x64
 8002492:	f007 feef 	bl	800a274 <vTaskDelay>
                        continue;
 8002496:	e008      	b.n	80024aa <modbus_comm_task+0x22a>
                    }
                    else
                    {
                        printf("Failed to send data, error: %d\r\n", sent);
 8002498:	6939      	ldr	r1, [r7, #16]
 800249a:	482d      	ldr	r0, [pc, #180]	@ (8002550 <modbus_comm_task+0x2d0>)
 800249c:	f00b fcde 	bl	800de5c <iprintf>
                        break;
 80024a0:	e007      	b.n	80024b2 <modbus_comm_task+0x232>
                    }
                }
                total_sent += sent;
 80024a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (total_sent < data_len)
 80024aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	dbd6      	blt.n	8002460 <modbus_comm_task+0x1e0>
            }

            printf("Response sent back to client\r\n");
 80024b2:	4828      	ldr	r0, [pc, #160]	@ (8002554 <modbus_comm_task+0x2d4>)
 80024b4:	f00b fd3a 	bl	800df2c <puts>

            if (strcmp((char *)RX_buffer, "QUIT") == 0)
 80024b8:	4927      	ldr	r1, [pc, #156]	@ (8002558 <modbus_comm_task+0x2d8>)
 80024ba:	481d      	ldr	r0, [pc, #116]	@ (8002530 <modbus_comm_task+0x2b0>)
 80024bc:	f7fd fef2 	bl	80002a4 <strcmp>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <modbus_comm_task+0x24e>
            {
                printf("Received QUIT command from client. Disconnecting...\r\n");
 80024c6:	4825      	ldr	r0, [pc, #148]	@ (800255c <modbus_comm_task+0x2dc>)
 80024c8:	f00b fd30 	bl	800df2c <puts>
                break;
 80024cc:	e010      	b.n	80024f0 <modbus_comm_task+0x270>
            }

            vTaskDelay(pdMS_TO_TICKS(500));
 80024ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024d2:	f007 fecf 	bl	800a274 <vTaskDelay>
        while (getSn_SR(socket_id) == SOCK_ESTABLISHED)
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	3301      	adds	r3, #1
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80024e2:	4618      	mov	r0, r3
 80024e4:	f001 fa36 	bl	8003954 <WIZCHIP_READ>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b17      	cmp	r3, #23
 80024ec:	f43f af79 	beq.w	80023e2 <modbus_comm_task+0x162>
        }

        disconnect(socket_id);
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 fea9 	bl	800424c <disconnect>
        printf("*** SESSION OVER ***\r\n");
 80024fa:	4819      	ldr	r0, [pc, #100]	@ (8002560 <modbus_comm_task+0x2e0>)
 80024fc:	f00b fd16 	bl	800df2c <puts>
    {
 8002500:	e6e7      	b.n	80022d2 <modbus_comm_task+0x52>
 8002502:	bf00      	nop
 8002504:	0800fd18 	.word	0x0800fd18
 8002508:	20000350 	.word	0x20000350
 800250c:	0800fd2c 	.word	0x0800fd2c
 8002510:	0800fd50 	.word	0x0800fd50
 8002514:	0800fd70 	.word	0x0800fd70
 8002518:	0800fd94 	.word	0x0800fd94
 800251c:	0800fdc0 	.word	0x0800fdc0
 8002520:	0800fdf0 	.word	0x0800fdf0
 8002524:	0800fe18 	.word	0x0800fe18
 8002528:	0800fe54 	.word	0x0800fe54
 800252c:	0800fe88 	.word	0x0800fe88
 8002530:	20000418 	.word	0x20000418
 8002534:	0800feac 	.word	0x0800feac
 8002538:	0800fed0 	.word	0x0800fed0
 800253c:	0800fef0 	.word	0x0800fef0
 8002540:	20000398 	.word	0x20000398
 8002544:	20000570 	.word	0x20000570
 8002548:	200004dc 	.word	0x200004dc
 800254c:	0800ff08 	.word	0x0800ff08
 8002550:	0800ff2c 	.word	0x0800ff2c
 8002554:	0800ff50 	.word	0x0800ff50
 8002558:	0800ff70 	.word	0x0800ff70
 800255c:	0800ff78 	.word	0x0800ff78
 8002560:	0800ffb0 	.word	0x0800ffb0

08002564 <soc_task>:
    }
}


static void soc_task(void *parameters)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	bool start_soc = false;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
	if (xSemaphoreTake(data_ready_semaphore, portMAX_DELAY) == pdTRUE)
 8002570:	4b22      	ldr	r3, [pc, #136]	@ (80025fc <soc_task+0x98>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002578:	4618      	mov	r0, r3
 800257a:	f007 fa49 	bl	8009a10 <xQueueSemaphoreTake>
 800257e:	4603      	mov	r3, r0
 8002580:	2b01      	cmp	r3, #1
 8002582:	d132      	bne.n	80025ea <soc_task+0x86>
	{
		BQ769x2_ReadAllVoltages(&bms1);
 8002584:	481e      	ldr	r0, [pc, #120]	@ (8002600 <soc_task+0x9c>)
 8002586:	f7ff f907 	bl	8001798 <BQ769x2_ReadAllVoltages>
		get_initial_soc();
 800258a:	f000 fb99 	bl	8002cc0 <get_initial_soc>
		CommandSubcommands(RESET_PASSQ);
 800258e:	2082      	movs	r0, #130	@ 0x82
 8002590:	f7fe fed6 	bl	8001340 <CommandSubcommands>
		start_soc = true;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
	}

  while (start_soc)
 8002598:	e027      	b.n	80025ea <soc_task+0x86>
  {
	soc_ready = false;
 800259a:	4b1a      	ldr	r3, [pc, #104]	@ (8002604 <soc_task+0xa0>)
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
    PRINT_STR("TASK2 WHILE LOOP\r\n");
 80025a0:	2364      	movs	r3, #100	@ 0x64
 80025a2:	2212      	movs	r2, #18
 80025a4:	4918      	ldr	r1, [pc, #96]	@ (8002608 <soc_task+0xa4>)
 80025a6:	4819      	ldr	r0, [pc, #100]	@ (800260c <soc_task+0xa8>)
 80025a8:	f006 f9cc 	bl	8008944 <HAL_UART_Transmit>
    uint16_t soc = soc_k_update_get(coulumbs);
 80025ac:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <soc_task+0xac>)
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	eeb0 0a67 	vmov.f32	s0, s15
 80025b6:	f000 fc5b 	bl	8002e70 <soc_k_update_get>
 80025ba:	4603      	mov	r3, r0
 80025bc:	81bb      	strh	r3, [r7, #12]
    holding_register[21] = soc;
 80025be:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <soc_task+0xb0>)
 80025c0:	89bb      	ldrh	r3, [r7, #12]
 80025c2:	8553      	strh	r3, [r2, #42]	@ 0x2a
    holding_register[22] = coulumbs;
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <soc_task+0xac>)
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ce:	ee17 3a90 	vmov	r3, s15
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <soc_task+0xb0>)
 80025d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    BQ769x2_ReadPassQ();
 80025d8:	f7ff f92e 	bl	8001838 <BQ769x2_ReadPassQ>
    //xSemaphoreGive(soc_ready_semaphore);
    HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80025dc:	2102      	movs	r1, #2
 80025de:	480e      	ldr	r0, [pc, #56]	@ (8002618 <soc_task+0xb4>)
 80025e0:	f003 fc9b 	bl	8005f1a <HAL_GPIO_TogglePin>
    vTaskDelay(pdMS_TO_TICKS(100));
 80025e4:	2064      	movs	r0, #100	@ 0x64
 80025e6:	f007 fe45 	bl	800a274 <vTaskDelay>
  while (start_soc)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1d4      	bne.n	800259a <soc_task+0x36>
    // HAL_Delay(500);

    // taskYIELD();
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000570 	.word	0x20000570
 8002600:	2000049c 	.word	0x2000049c
 8002604:	20000498 	.word	0x20000498
 8002608:	0800ffc8 	.word	0x0800ffc8
 800260c:	20000350 	.word	0x20000350
 8002610:	20000150 	.word	0x20000150
 8002614:	200004dc 	.word	0x200004dc
 8002618:	40020400 	.word	0x40020400

0800261c <bms_state_machine_task>:

static void bms_state_machine_task(void *parameters)

{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  bms_context *bms = (bms_context *)parameters;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	60fb      	str	r3, [r7, #12]
  bms->bms_state = BMS_STATE_OFF;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    bms_state_machine(&bms1);
 800262e:	4806      	ldr	r0, [pc, #24]	@ (8002648 <bms_state_machine_task+0x2c>)
 8002630:	f7ff f9f8 	bl	8001a24 <bms_state_machine>
    uint16_t current = BQ769x2_ReadCurrent();
 8002634:	f7ff f8ec 	bl	8001810 <BQ769x2_ReadCurrent>
 8002638:	4603      	mov	r3, r0
 800263a:	817b      	strh	r3, [r7, #10]
    vTaskDelay(pdMS_TO_TICKS(100));
 800263c:	2064      	movs	r0, #100	@ 0x64
 800263e:	f007 fe19 	bl	800a274 <vTaskDelay>
  {
 8002642:	bf00      	nop
 8002644:	e7f3      	b.n	800262e <bms_state_machine_task+0x12>
 8002646:	bf00      	nop
 8002648:	2000049c 	.word	0x2000049c

0800264c <read_voltage_task>:
    // taskYIELD();
  }
}

static void read_voltage_task(void *parameters)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
    uint16_t counter = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	81fb      	strh	r3, [r7, #14]
    uint16_t alarm_status;
    uint16_t stackVoltage, current;

    while (1)
    {
        BQ769x2_ReadAllVoltages(&bms1);
 8002658:	4850      	ldr	r0, [pc, #320]	@ (800279c <read_voltage_task+0x150>)
 800265a:	f7ff f89d 	bl	8001798 <BQ769x2_ReadAllVoltages>
        alarm_status = BQ769x2_ReadAlarmStatus();
 800265e:	f7fe fff1 	bl	8001644 <BQ769x2_ReadAlarmStatus>
 8002662:	4603      	mov	r3, r0
 8002664:	81bb      	strh	r3, [r7, #12]

        if (alarm_status & 0x80) // FULLSCAN bit check
 8002666:	89bb      	ldrh	r3, [r7, #12]
 8002668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 808f 	beq.w	8002790 <read_voltage_task+0x144>
        {
            if(counter < 0){
            	counter += 1;
            }
            else{
            	counter = 3;
 8002672:	2303      	movs	r3, #3
 8002674:	81fb      	strh	r3, [r7, #14]
            }

            // Read voltages and update holding register for percentages
            for (int i = 0; i < 8; i++) {
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e01d      	b.n	80026b8 <read_voltage_task+0x6c>
                if (CellVoltage[i] > 4500) {
 800267c:	4a48      	ldr	r2, [pc, #288]	@ (80027a0 <read_voltage_task+0x154>)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002684:	f241 1294 	movw	r2, #4500	@ 0x1194
 8002688:	4293      	cmp	r3, r2
 800268a:	d905      	bls.n	8002698 <read_voltage_task+0x4c>
                    holding_register[i] = 0; // Assign 0 if the cell voltage is > 4500
 800268c:	4a45      	ldr	r2, [pc, #276]	@ (80027a4 <read_voltage_task+0x158>)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2100      	movs	r1, #0
 8002692:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002696:	e00c      	b.n	80026b2 <read_voltage_task+0x66>
                } else {
                    holding_register[i] = voltage_to_percentage(CellVoltage[i]);
 8002698:	4a41      	ldr	r2, [pc, #260]	@ (80027a0 <read_voltage_task+0x154>)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fd03 	bl	80030ac <voltage_to_percentage>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4619      	mov	r1, r3
 80026aa:	4a3e      	ldr	r2, [pc, #248]	@ (80027a4 <read_voltage_task+0x158>)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (int i = 0; i < 8; i++) {
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3301      	adds	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b07      	cmp	r3, #7
 80026bc:	ddde      	ble.n	800267c <read_voltage_task+0x30>
                }
            }
            if (CellVoltage[15] > 4500) {
 80026be:	4b38      	ldr	r3, [pc, #224]	@ (80027a0 <read_voltage_task+0x154>)
 80026c0:	8bdb      	ldrh	r3, [r3, #30]
 80026c2:	f241 1294 	movw	r2, #4500	@ 0x1194
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d903      	bls.n	80026d2 <read_voltage_task+0x86>
                holding_register[8] = 0; // Assign 0 if CellVoltage[15] is > 4500
 80026ca:	4b36      	ldr	r3, [pc, #216]	@ (80027a4 <read_voltage_task+0x158>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	821a      	strh	r2, [r3, #16]
 80026d0:	e008      	b.n	80026e4 <read_voltage_task+0x98>
            } else {
                holding_register[8] = voltage_to_percentage(CellVoltage[15]);
 80026d2:	4b33      	ldr	r3, [pc, #204]	@ (80027a0 <read_voltage_task+0x154>)
 80026d4:	8bdb      	ldrh	r3, [r3, #30]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fce8 	bl	80030ac <voltage_to_percentage>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	4b30      	ldr	r3, [pc, #192]	@ (80027a4 <read_voltage_task+0x158>)
 80026e2:	821a      	strh	r2, [r3, #16]
            }

            // Update holding registers for raw cell voltages
            for (int i = 0; i < 8; i++) {
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	e01a      	b.n	8002720 <read_voltage_task+0xd4>
                if (CellVoltage[i] > 4500) {
 80026ea:	4a2d      	ldr	r2, [pc, #180]	@ (80027a0 <read_voltage_task+0x154>)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026f2:	f241 1294 	movw	r2, #4500	@ 0x1194
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d906      	bls.n	8002708 <read_voltage_task+0xbc>
                    holding_register[9 + i] = 0; // Assign 0 if the cell voltage is > 4500
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	3309      	adds	r3, #9
 80026fe:	4a29      	ldr	r2, [pc, #164]	@ (80027a4 <read_voltage_task+0x158>)
 8002700:	2100      	movs	r1, #0
 8002702:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002706:	e008      	b.n	800271a <read_voltage_task+0xce>
                } else {
                    holding_register[9 + i] = CellVoltage[i];
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	3309      	adds	r3, #9
 800270c:	4924      	ldr	r1, [pc, #144]	@ (80027a0 <read_voltage_task+0x154>)
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002714:	4a23      	ldr	r2, [pc, #140]	@ (80027a4 <read_voltage_task+0x158>)
 8002716:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (int i = 0; i < 8; i++) {
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	3301      	adds	r3, #1
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b07      	cmp	r3, #7
 8002724:	dde1      	ble.n	80026ea <read_voltage_task+0x9e>
                }
            }
            if (CellVoltage[15] > 4500) {
 8002726:	4b1e      	ldr	r3, [pc, #120]	@ (80027a0 <read_voltage_task+0x154>)
 8002728:	8bdb      	ldrh	r3, [r3, #30]
 800272a:	f241 1294 	movw	r2, #4500	@ 0x1194
 800272e:	4293      	cmp	r3, r2
 8002730:	d903      	bls.n	800273a <read_voltage_task+0xee>
                holding_register[17] = 0; // Assign 0 if CellVoltage[15] is > 4500
 8002732:	4b1c      	ldr	r3, [pc, #112]	@ (80027a4 <read_voltage_task+0x158>)
 8002734:	2200      	movs	r2, #0
 8002736:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002738:	e003      	b.n	8002742 <read_voltage_task+0xf6>
            } else {
                holding_register[17] = CellVoltage[15];
 800273a:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <read_voltage_task+0x154>)
 800273c:	8bda      	ldrh	r2, [r3, #30]
 800273e:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <read_voltage_task+0x158>)
 8002740:	845a      	strh	r2, [r3, #34]	@ 0x22
            }

            // Read stack voltage
            stackVoltage = BQ769x2_ReadVoltage(StackVoltage, &bms1);
 8002742:	4916      	ldr	r1, [pc, #88]	@ (800279c <read_voltage_task+0x150>)
 8002744:	2034      	movs	r0, #52	@ 0x34
 8002746:	f7fe fff9 	bl	800173c <BQ769x2_ReadVoltage>
 800274a:	4603      	mov	r3, r0
 800274c:	817b      	strh	r3, [r7, #10]
            holding_register[18] = stackVoltage;
 800274e:	4a15      	ldr	r2, [pc, #84]	@ (80027a4 <read_voltage_task+0x158>)
 8002750:	897b      	ldrh	r3, [r7, #10]
 8002752:	8493      	strh	r3, [r2, #36]	@ 0x24

            // Read current and pack voltage
            current = BQ769x2_ReadCurrent();
 8002754:	f7ff f85c 	bl	8001810 <BQ769x2_ReadCurrent>
 8002758:	4603      	mov	r3, r0
 800275a:	813b      	strh	r3, [r7, #8]
            holding_register[19] = current;
 800275c:	4a11      	ldr	r2, [pc, #68]	@ (80027a4 <read_voltage_task+0x158>)
 800275e:	893b      	ldrh	r3, [r7, #8]
 8002760:	84d3      	strh	r3, [r2, #38]	@ 0x26
            holding_register[20] = BQ769x2_ReadVoltage(PACKPinVoltage, &bms1);
 8002762:	490e      	ldr	r1, [pc, #56]	@ (800279c <read_voltage_task+0x150>)
 8002764:	2036      	movs	r0, #54	@ 0x36
 8002766:	f7fe ffe9 	bl	800173c <BQ769x2_ReadVoltage>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <read_voltage_task+0x158>)
 8002770:	851a      	strh	r2, [r3, #40]	@ 0x28

            // Clear FULLSCAN bit
            DirectCommands(AlarmStatus, 0x0080, W);
 8002772:	2201      	movs	r2, #1
 8002774:	2180      	movs	r1, #128	@ 0x80
 8002776:	2062      	movs	r0, #98	@ 0x62
 8002778:	f7fe fea0 	bl	80014bc <DirectCommands>

            // Signal data is ready after every third iteration
            if (counter > 2){
 800277c:	89fb      	ldrh	r3, [r7, #14]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d906      	bls.n	8002790 <read_voltage_task+0x144>
                xSemaphoreGive(data_ready_semaphore);
 8002782:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <read_voltage_task+0x15c>)
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	2300      	movs	r3, #0
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	f006 fe40 	bl	8009410 <xQueueGenericSend>
            }
        }

        // Delay 1 second between loops
        vTaskDelay(pdMS_TO_TICKS(1000));
 8002790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002794:	f007 fd6e 	bl	800a274 <vTaskDelay>
        BQ769x2_ReadAllVoltages(&bms1);
 8002798:	e75e      	b.n	8002658 <read_voltage_task+0xc>
 800279a:	bf00      	nop
 800279c:	2000049c 	.word	0x2000049c
 80027a0:	20000118 	.word	0x20000118
 80027a4:	200004dc 	.word	0x200004dc
 80027a8:	20000570 	.word	0x20000570

080027ac <W5500_rxtx>:
{
  DelayIncCnt();
}

uint8_t W5500_rxtx(uint8_t data)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  uint8_t rxdata;

  HAL_SPI_TransmitReceive(&hspi1, &data, &rxdata, 1, 50);
 80027b6:	f107 020f 	add.w	r2, r7, #15
 80027ba:	1df9      	adds	r1, r7, #7
 80027bc:	2332      	movs	r3, #50	@ 0x32
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2301      	movs	r3, #1
 80027c2:	4804      	ldr	r0, [pc, #16]	@ (80027d4 <W5500_rxtx+0x28>)
 80027c4:	f005 fa89 	bl	8007cda <HAL_SPI_TransmitReceive>

  return (rxdata);
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000268 	.word	0x20000268

080027d8 <wizchip_select>:

void wizchip_select(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  W5500_select();
 80027dc:	2200      	movs	r2, #0
 80027de:	2110      	movs	r1, #16
 80027e0:	4802      	ldr	r0, [pc, #8]	@ (80027ec <wizchip_select+0x14>)
 80027e2:	f003 fb81 	bl	8005ee8 <HAL_GPIO_WritePin>
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40020000 	.word	0x40020000

080027f0 <wizchip_deselect>:

void wizchip_deselect(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  W5500_release();
 80027f4:	2201      	movs	r2, #1
 80027f6:	2110      	movs	r1, #16
 80027f8:	4802      	ldr	r0, [pc, #8]	@ (8002804 <wizchip_deselect+0x14>)
 80027fa:	f003 fb75 	bl	8005ee8 <HAL_GPIO_WritePin>
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40020000 	.word	0x40020000

08002808 <wizchip_write>:

void wizchip_write(uint8_t wb)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  W5500_tx(wb);
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ffc9 	bl	80027ac <W5500_rxtx>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <wizchip_read>:

uint8_t wizchip_read()
{
 8002822:	b580      	push	{r7, lr}
 8002824:	af00      	add	r7, sp, #0
  return W5500_rx();
 8002826:	20ff      	movs	r0, #255	@ 0xff
 8002828:	f7ff ffc0 	bl	80027ac <W5500_rxtx>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
  uint8_t tmpstr[6];

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 800283a:	4906      	ldr	r1, [pc, #24]	@ (8002854 <network_init+0x20>)
 800283c:	2000      	movs	r0, #0
 800283e:	f002 f97d 	bl	8004b3c <ctlnetwork>

  ctlwizchip(CW_GET_ID, (void *)tmpstr);
 8002842:	463b      	mov	r3, r7
 8002844:	4619      	mov	r1, r3
 8002846:	2008      	movs	r0, #8
 8002848:	f002 f898 	bl	800497c <ctlwizchip>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000004 	.word	0x20000004

08002858 <PHYStatusCheck>:
  UWriteData(ch);
  return ch;
}

ErrorState PHYStatusCheck(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  uint8_t tmp;

  do
  {
    printf("\r\nChecking Ethernet Cable Presence ...");
 800285e:	4810      	ldr	r0, [pc, #64]	@ (80028a0 <PHYStatusCheck+0x48>)
 8002860:	f00b fafc 	bl	800de5c <iprintf>
    ctlwizchip(CW_GET_PHYLINK, (void *)&tmp);
 8002864:	1dfb      	adds	r3, r7, #7
 8002866:	4619      	mov	r1, r3
 8002868:	200f      	movs	r0, #15
 800286a:	f002 f887 	bl	800497c <ctlwizchip>

    if (tmp == PHY_LINK_OFF)
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <PHYStatusCheck+0x32>
    {
      printf("NO Cable Connected!");
 8002874:	480b      	ldr	r0, [pc, #44]	@ (80028a4 <PHYStatusCheck+0x4c>)
 8002876:	f00b faf1 	bl	800de5c <iprintf>

      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 800287a:	2201      	movs	r2, #1
 800287c:	2102      	movs	r1, #2
 800287e:	480a      	ldr	r0, [pc, #40]	@ (80028a8 <PHYStatusCheck+0x50>)
 8002880:	f003 fb32 	bl	8005ee8 <HAL_GPIO_WritePin>
      HAL_Delay(200);
 8002884:	20c8      	movs	r0, #200	@ 0xc8
 8002886:	f002 fdab 	bl	80053e0 <HAL_Delay>
      // HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
      // HAL_Delay(200);
    }
  } while (tmp == PHY_LINK_OFF);
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0e6      	beq.n	800285e <PHYStatusCheck+0x6>

  printf("Good! Cable got connected!");
 8002890:	4806      	ldr	r0, [pc, #24]	@ (80028ac <PHYStatusCheck+0x54>)
 8002892:	f00b fae3 	bl	800de5c <iprintf>

  return Ethernet_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	0800ffdc 	.word	0x0800ffdc
 80028a4:	08010004 	.word	0x08010004
 80028a8:	40020400 	.word	0x40020400
 80028ac:	08010018 	.word	0x08010018

080028b0 <PrintPHYConf>:

void PrintPHYConf(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
  wiz_PhyConf phyconf;

  ctlwizchip(CW_GET_PHYCONF, (void *)&phyconf);
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	200b      	movs	r0, #11
 80028bc:	f002 f85e 	bl	800497c <ctlwizchip>

  if (phyconf.by == PHY_CONFBY_HW)
 80028c0:	793b      	ldrb	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d103      	bne.n	80028ce <PrintPHYConf+0x1e>
  {
    printf("\r\nPHY Configured by Hardware Pins");
 80028c6:	4814      	ldr	r0, [pc, #80]	@ (8002918 <PrintPHYConf+0x68>)
 80028c8:	f00b fac8 	bl	800de5c <iprintf>
 80028cc:	e002      	b.n	80028d4 <PrintPHYConf+0x24>
  }
  else
  {
    printf("\r\nPHY Configured by Registers");
 80028ce:	4813      	ldr	r0, [pc, #76]	@ (800291c <PrintPHYConf+0x6c>)
 80028d0:	f00b fac4 	bl	800de5c <iprintf>
  }

  if (phyconf.mode == PHY_MODE_AUTONEGO)
 80028d4:	797b      	ldrb	r3, [r7, #5]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d103      	bne.n	80028e2 <PrintPHYConf+0x32>
  {
    printf("\r\nAutonegotiation Enabled");
 80028da:	4811      	ldr	r0, [pc, #68]	@ (8002920 <PrintPHYConf+0x70>)
 80028dc:	f00b fabe 	bl	800de5c <iprintf>
 80028e0:	e002      	b.n	80028e8 <PrintPHYConf+0x38>
  }
  else
  {
    printf("\r\nAutonegotiation NOT Enabled");
 80028e2:	4810      	ldr	r0, [pc, #64]	@ (8002924 <PrintPHYConf+0x74>)
 80028e4:	f00b faba 	bl	800de5c <iprintf>
  }

  if (phyconf.duplex == PHY_DUPLEX_FULL)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d103      	bne.n	80028f6 <PrintPHYConf+0x46>
  {
    printf("\r\nDuplex Mode: Full");
 80028ee:	480e      	ldr	r0, [pc, #56]	@ (8002928 <PrintPHYConf+0x78>)
 80028f0:	f00b fab4 	bl	800de5c <iprintf>
 80028f4:	e002      	b.n	80028fc <PrintPHYConf+0x4c>
  }
  else
  {
    printf("\r\nDuplex Mode: Half");
 80028f6:	480d      	ldr	r0, [pc, #52]	@ (800292c <PrintPHYConf+0x7c>)
 80028f8:	f00b fab0 	bl	800de5c <iprintf>
  }

  if (phyconf.speed == PHY_SPEED_10)
 80028fc:	79bb      	ldrb	r3, [r7, #6]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d103      	bne.n	800290a <PrintPHYConf+0x5a>
  {
    printf("\r\nSpeed: 10Mbps");
 8002902:	480b      	ldr	r0, [pc, #44]	@ (8002930 <PrintPHYConf+0x80>)
 8002904:	f00b faaa 	bl	800de5c <iprintf>
  }
  else
  {
    printf("\r\nSpeed: 100Mbps");
  }
}
 8002908:	e002      	b.n	8002910 <PrintPHYConf+0x60>
    printf("\r\nSpeed: 100Mbps");
 800290a:	480a      	ldr	r0, [pc, #40]	@ (8002934 <PrintPHYConf+0x84>)
 800290c:	f00b faa6 	bl	800de5c <iprintf>
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	08010034 	.word	0x08010034
 800291c:	08010058 	.word	0x08010058
 8002920:	08010078 	.word	0x08010078
 8002924:	08010094 	.word	0x08010094
 8002928:	080100b4 	.word	0x080100b4
 800292c:	080100c8 	.word	0x080100c8
 8002930:	080100dc 	.word	0x080100dc
 8002934:	080100ec 	.word	0x080100ec

08002938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a04      	ldr	r2, [pc, #16]	@ (8002958 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800294a:	f002 fd29 	bl	80053a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40001000 	.word	0x40001000

0800295c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002960:	b672      	cpsid	i
}
 8002962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002964:	bf00      	nop
 8002966:	e7fd      	b.n	8002964 <Error_Handler+0x8>

08002968 <get_HB_LB>:

unsigned char low_byte = 0x00;
unsigned char high_byte = 0x00;

void get_HB_LB(uint16_t value, unsigned char *HB, unsigned char *LB)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	81fb      	strh	r3, [r7, #14]
	*LB = (value & 0x00FF);
 8002976:	89fb      	ldrh	r3, [r7, #14]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	701a      	strb	r2, [r3, #0]
	*HB = ((value & 0xFF00) >> 0x08);
 800297e:	89fb      	ldrh	r3, [r7, #14]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	b29b      	uxth	r3, r3
 8002984:	b2da      	uxtb	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	701a      	strb	r2, [r3, #0]
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <make_word>:

uint16_t make_word(unsigned char HB, unsigned char LB)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	460a      	mov	r2, r1
 80029a0:	71fb      	strb	r3, [r7, #7]
 80029a2:	4613      	mov	r3, r2
 80029a4:	71bb      	strb	r3, [r7, #6]
	uint16_t tmp = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	81fb      	strh	r3, [r7, #14]

	tmp = HB;
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	81fb      	strh	r3, [r7, #14]
	tmp <<= 8;
 80029ae:	89fb      	ldrh	r3, [r7, #14]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	81fb      	strh	r3, [r7, #14]
	tmp |= LB;
 80029b4:	79bb      	ldrb	r3, [r7, #6]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	89fb      	ldrh	r3, [r7, #14]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	81fb      	strh	r3, [r7, #14]

	return tmp;
 80029be:	89fb      	ldrh	r3, [r7, #14]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <modbus_receive>:

void modbus_receive(uint8_t *rx_buffer, uint8_t *tx_buffer, int recv_lenght, uint16_t *read_registers)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b08b      	sub	sp, #44	@ 0x2c
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]

	uint16_t temp1 = 0x0000;
 80029da:	2300      	movs	r3, #0
 80029dc:	83fb      	strh	r3, [r7, #30]
	uint16_t temp2 = 0x0000;
 80029de:	2300      	movs	r3, #0
 80029e0:	83bb      	strh	r3, [r7, #28]
	uint16_t temp3 = 0x0000;
 80029e2:	2300      	movs	r3, #0
 80029e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t temp4 = 0x0000;
 80029e6:	2300      	movs	r3, #0
 80029e8:	837b      	strh	r3, [r7, #26]
	uint16_t temp5 = 0x0000;
 80029ea:	2300      	movs	r3, #0
 80029ec:	833b      	strh	r3, [r7, #24]
	uint16_t temp6 = 0x0000;
 80029ee:	2300      	movs	r3, #0
 80029f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t temp7 = 0x0000;
 80029f2:	2300      	movs	r3, #0
 80029f4:	82fb      	strh	r3, [r7, #22]

	// memset(tx_buffer,0,sizeof(tx_buffer));

	// send(1,rx_buffer,recv_lenght);// the data

	if (rx_buffer[id_byte] == Slave_ID)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3306      	adds	r3, #6
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 814d 	bne.w	8002c9c <modbus_receive+0x2d0>
	{
		tx_buffer[id_byte] = rx_buffer[id_byte];
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	3306      	adds	r3, #6
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	7992      	ldrb	r2, [r2, #6]
 8002a0a:	701a      	strb	r2, [r3, #0]
		tx_buffer[function_code_byte] = rx_buffer[function_code_byte];
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	3307      	adds	r3, #7
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	79d2      	ldrb	r2, [r2, #7]
 8002a14:	701a      	strb	r2, [r3, #0]

		tx_buffer[protocol_nr_high_byte] = 0;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3302      	adds	r3, #2
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
		tx_buffer[protocol_nr_low_byte] = 0;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3303      	adds	r3, #3
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]

		switch (rx_buffer[function_code_byte])
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3307      	adds	r3, #7
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	f000 809e 	beq.w	8002b6e <modbus_receive+0x1a2>
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	f300 812e 	bgt.w	8002c94 <modbus_receive+0x2c8>
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d003      	beq.n	8002a44 <modbus_receive+0x78>
 8002a3c:	2b06      	cmp	r3, #6
 8002a3e:	f000 8125 	beq.w	8002c8c <modbus_receive+0x2c0>
 8002a42:	e127      	b.n	8002c94 <modbus_receive+0x2c8>
		{

		case FC_read_holding_registers:
		{
			// Start address to read from
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3308      	adds	r3, #8
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3309      	adds	r3, #9
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f7ff ff9f 	bl	8002996 <make_word>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	83fb      	strh	r3, [r7, #30]

			if ((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 8002a5c:	8bfb      	ldrh	r3, [r7, #30]
 8002a5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a60:	d87e      	bhi.n	8002b60 <modbus_receive+0x194>
			{
				// Number of consecutive addresses to read from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	330a      	adds	r3, #10
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	330b      	adds	r3, #11
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f7ff ff90 	bl	8002996 <make_word>
 8002a76:	4603      	mov	r3, r0
 8002a78:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 8002a7a:	8bbb      	ldrh	r3, [r7, #28]
 8002a7c:	2b40      	cmp	r3, #64	@ 0x40
 8002a7e:	d86b      	bhi.n	8002b58 <modbus_receive+0x18c>
 8002a80:	8bba      	ldrh	r2, [r7, #28]
 8002a82:	8bfb      	ldrh	r3, [r7, #30]
 8002a84:	4413      	add	r3, r2
 8002a86:	2b40      	cmp	r3, #64	@ 0x40
 8002a88:	dc66      	bgt.n	8002b58 <modbus_receive+0x18c>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	3301      	adds	r3, #1
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	7852      	ldrb	r2, [r2, #1]
 8002a9a:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = (temp2 * 2) + 3;  // No of requested bytes  + slave addr(1B) + function code (1B)) + Bytes till end of message (1B)
 8002a9c:	8bbb      	ldrh	r3, [r7, #28]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3305      	adds	r3, #5
 8002aa8:	3203      	adds	r2, #3
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]
					tx_buffer[tx_bytes_till_message_end] = (temp2 * 2); // Bytes till end of message
 8002aae:	8bbb      	ldrh	r3, [r7, #28]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	0052      	lsls	r2, r2, #1
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]


					if (temp2 > 1)
 8002abc:	8bbb      	ldrh	r3, [r7, #28]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d92b      	bls.n	8002b1a <modbus_receive+0x14e>
					{
						int i = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	623b      	str	r3, [r7, #32]

						//Fill transmit buffer with request data
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8002ac6:	8bfb      	ldrh	r3, [r7, #30]
 8002ac8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002aca:	e021      	b.n	8002b10 <modbus_receive+0x144>
						{
							get_HB_LB(read_registers[((temp1 - addr_holding_reg_start) + temp3)], &high_byte, &low_byte);
 8002acc:	8bfa      	ldrh	r2, [r7, #30]
 8002ace:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ad0:	4413      	add	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	4a72      	ldr	r2, [pc, #456]	@ (8002ca4 <modbus_receive+0x2d8>)
 8002adc:	4972      	ldr	r1, [pc, #456]	@ (8002ca8 <modbus_receive+0x2dc>)
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff42 	bl	8002968 <get_HB_LB>
							tx_buffer[tx_start_data_high_byte + i] = high_byte;
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	3309      	adds	r3, #9
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4413      	add	r3, r2
 8002aee:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca8 <modbus_receive+0x2dc>)
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	701a      	strb	r2, [r3, #0]
							tx_buffer[tx_start_data_low_byte + i] = low_byte;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	330a      	adds	r3, #10
 8002af8:	461a      	mov	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4413      	add	r3, r2
 8002afe:	4a69      	ldr	r2, [pc, #420]	@ (8002ca4 <modbus_receive+0x2d8>)
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	701a      	strb	r2, [r3, #0]
							i += 2;
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	3302      	adds	r3, #2
 8002b08:	623b      	str	r3, [r7, #32]
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8002b0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b10:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002b12:	8bbb      	ldrh	r3, [r7, #28]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d3d9      	bcc.n	8002acc <modbus_receive+0x100>
 8002b18:	e013      	b.n	8002b42 <modbus_receive+0x176>
						}
					}

					else
					{
						get_HB_LB(read_registers[(temp1 - addr_holding_reg_start)], &high_byte, &low_byte);
 8002b1a:	8bfb      	ldrh	r3, [r7, #30]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	4413      	add	r3, r2
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca4 <modbus_receive+0x2d8>)
 8002b26:	4960      	ldr	r1, [pc, #384]	@ (8002ca8 <modbus_receive+0x2dc>)
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff1d 	bl	8002968 <get_HB_LB>
						tx_buffer[1] = high_byte;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3301      	adds	r3, #1
 8002b32:	4a5d      	ldr	r2, [pc, #372]	@ (8002ca8 <modbus_receive+0x2dc>)
 8002b34:	7812      	ldrb	r2, [r2, #0]
 8002b36:	701a      	strb	r2, [r3, #0]
						tx_buffer[2] = low_byte;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	4a59      	ldr	r2, [pc, #356]	@ (8002ca4 <modbus_receive+0x2d8>)
 8002b3e:	7812      	ldrb	r2, [r2, #0]
 8002b40:	701a      	strb	r2, [r3, #0]
					}
					send(1, tx_buffer, ((temp2 * 2) + 9));
 8002b42:	8bbb      	ldrh	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3309      	adds	r3, #9
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	2001      	movs	r0, #1
 8002b52:	f001 fbf1 	bl	8004338 <send>
 8002b56:	e006      	b.n	8002b66 <modbus_receive+0x19a>
				}

				else
				{
					error_flag = 1;
 8002b58:	4b54      	ldr	r3, [pc, #336]	@ (8002cac <modbus_receive+0x2e0>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	e002      	b.n	8002b66 <modbus_receive+0x19a>
				}
			}

			else
			{
				error_flag = 1;
 8002b60:	4b52      	ldr	r3, [pc, #328]	@ (8002cac <modbus_receive+0x2e0>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
			}
			printf("You entered 1.\n");
 8002b66:	4852      	ldr	r0, [pc, #328]	@ (8002cb0 <modbus_receive+0x2e4>)
 8002b68:	f00b f9e0 	bl	800df2c <puts>
			break;
 8002b6c:	e096      	b.n	8002c9c <modbus_receive+0x2d0>
		}

		case FC_write_multiple_registers:
		{
			//Start address to write
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3308      	adds	r3, #8
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3309      	adds	r3, #9
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	f7ff ff0a 	bl	8002996 <make_word>
 8002b82:	4603      	mov	r3, r0
 8002b84:	83fb      	strh	r3, [r7, #30]

			if((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 8002b86:	8bfb      	ldrh	r3, [r7, #30]
 8002b88:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b8a:	d878      	bhi.n	8002c7e <modbus_receive+0x2b2>
			{
				// Number of consecutive addresses to write from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	330a      	adds	r3, #10
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	330b      	adds	r3, #11
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	f7ff fefb 	bl	8002996 <make_word>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 8002ba4:	8bbb      	ldrh	r3, [r7, #28]
 8002ba6:	2b40      	cmp	r3, #64	@ 0x40
 8002ba8:	d865      	bhi.n	8002c76 <modbus_receive+0x2aa>
 8002baa:	8bba      	ldrh	r2, [r7, #28]
 8002bac:	8bfb      	ldrh	r3, [r7, #30]
 8002bae:	4413      	add	r3, r2
 8002bb0:	2b40      	cmp	r3, #64	@ 0x40
 8002bb2:	dc60      	bgt.n	8002c76 <modbus_receive+0x2aa>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	7852      	ldrb	r2, [r2, #1]
 8002bc4:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = 6;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3305      	adds	r3, #5
 8002bca:	2206      	movs	r2, #6
 8002bcc:	701a      	strb	r2, [r3, #0]

					temp5 = (temp1 - addr_holding_reg_start);
 8002bce:	8bfb      	ldrh	r3, [r7, #30]
 8002bd0:	833b      	strh	r3, [r7, #24]
					temp3 = rx_write_fc_first_high_byte;
 8002bd2:	230d      	movs	r3, #13
 8002bd4:	84fb      	strh	r3, [r7, #38]	@ 0x26

					if(temp2 == 1)
 8002bd6:	8bbb      	ldrh	r3, [r7, #28]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d111      	bne.n	8002c00 <modbus_receive+0x234>
					{
						read_registers[temp1] = make_word(rx_buffer[temp3], rx_buffer[temp3+1]);
 8002bdc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	7818      	ldrb	r0, [r3, #0]
 8002be4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002be6:	3301      	adds	r3, #1
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	7819      	ldrb	r1, [r3, #0]
 8002bee:	8bfb      	ldrh	r3, [r7, #30]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	18d4      	adds	r4, r2, r3
 8002bf6:	f7ff fece 	bl	8002996 <make_word>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	8023      	strh	r3, [r4, #0]
 8002bfe:	e020      	b.n	8002c42 <modbus_receive+0x276>

					}
					else
					{
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8002c00:	8b3b      	ldrh	r3, [r7, #24]
 8002c02:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002c04:	e017      	b.n	8002c36 <modbus_receive+0x26a>
						{
							read_registers[temp6] = make_word(rx_buffer[temp3], rx_buffer[1 + temp3]);
 8002c06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	7818      	ldrb	r0, [r3, #0]
 8002c0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c10:	3301      	adds	r3, #1
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	7819      	ldrb	r1, [r3, #0]
 8002c1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	18d4      	adds	r4, r2, r3
 8002c22:	f7ff feb8 	bl	8002996 <make_word>
 8002c26:	4603      	mov	r3, r0
 8002c28:	8023      	strh	r3, [r4, #0]
							temp3 += 2;
 8002c2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8002c30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c32:	3301      	adds	r3, #1
 8002c34:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002c36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c38:	8bb9      	ldrh	r1, [r7, #28]
 8002c3a:	8b3b      	ldrh	r3, [r7, #24]
 8002c3c:	440b      	add	r3, r1
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	dbe1      	blt.n	8002c06 <modbus_receive+0x23a>
						}

					}
					tx_buffer[location_start_high_byte] = rx_buffer[location_start_high_byte];
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3308      	adds	r3, #8
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	7a12      	ldrb	r2, [r2, #8]
 8002c4a:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_start_low_byte] = rx_buffer[location_start_low_byte];
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	3309      	adds	r3, #9
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	7a52      	ldrb	r2, [r2, #9]
 8002c54:	701a      	strb	r2, [r3, #0]

					tx_buffer[location_end_high_byte] = rx_buffer[location_end_high_byte];
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	330a      	adds	r3, #10
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	7a92      	ldrb	r2, [r2, #10]
 8002c5e:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_end_low_byte] = rx_buffer[location_end_low_byte];
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	330b      	adds	r3, #11
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	7ad2      	ldrb	r2, [r2, #11]
 8002c68:	701a      	strb	r2, [r3, #0]

					send(1, tx_buffer,12);
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f001 fb62 	bl	8004338 <send>
 8002c74:	e006      	b.n	8002c84 <modbus_receive+0x2b8>
				}
				else
				{
					error_flag = 1;
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <modbus_receive+0x2e0>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e002      	b.n	8002c84 <modbus_receive+0x2b8>
				}

			}
			else
			{
				error_flag = 1;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <modbus_receive+0x2e0>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
			}

			// Code to execute if choice is 3
			printf("You entered 3.\n");
 8002c84:	480b      	ldr	r0, [pc, #44]	@ (8002cb4 <modbus_receive+0x2e8>)
 8002c86:	f00b f951 	bl	800df2c <puts>
			break;
 8002c8a:	e007      	b.n	8002c9c <modbus_receive+0x2d0>
		}

		case FC_write_single_register:
			// Code to execute if choice is 2
			printf("You entered 2.\n");
 8002c8c:	480a      	ldr	r0, [pc, #40]	@ (8002cb8 <modbus_receive+0x2ec>)
 8002c8e:	f00b f94d 	bl	800df2c <puts>
			break;
 8002c92:	e003      	b.n	8002c9c <modbus_receive+0x2d0>

		default:
			// Code to execute if choice doesn't match any case
			printf("Invalid choice.\n");
 8002c94:	4809      	ldr	r0, [pc, #36]	@ (8002cbc <modbus_receive+0x2f0>)
 8002c96:	f00b f949 	bl	800df2c <puts>
			break;
 8002c9a:	bf00      	nop
		}
	}
}
 8002c9c:	bf00      	nop
 8002c9e:	372c      	adds	r7, #44	@ 0x2c
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd90      	pop	{r4, r7, pc}
 8002ca4:	20000575 	.word	0x20000575
 8002ca8:	20000576 	.word	0x20000576
 8002cac:	20000574 	.word	0x20000574
 8002cb0:	08010100 	.word	0x08010100
 8002cb4:	08010110 	.word	0x08010110
 8002cb8:	08010120 	.word	0x08010120
 8002cbc:	08010130 	.word	0x08010130

08002cc0 <get_initial_soc>:
uint16_t pack_current;
bool count_init = true;
float difference, difference, previous_count;
// Function definition for get_initial_soc
void get_initial_soc(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
    // Read cell measurements
    uint16_t releasable_capacity = 0; // Initialize releasable capacity
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	81fb      	strh	r3, [r7, #14]
    get_min_max_vcell();              // Get min and max voltage
 8002cca:	f000 f99b 	bl	8003004 <get_min_max_vcell>

    //printf("Debug: Minimum Cell Voltage (mV): %u\n", min_vcell);
    //printf("Debug: Initial SOC: %f\n", initial_soc);

    /* Get initial SOC estimation */
    if (initial_soc < 0)
 8002cce:	4b60      	ldr	r3, [pc, #384]	@ (8002e50 <get_initial_soc+0x190>)
 8002cd0:	edd3 7a00 	vldr	s15, [r3]
 8002cd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cdc:	d542      	bpl.n	8002d64 <get_initial_soc+0xa4>
        // Calculate LUT value based on min voltage
        //uint16_t lut_value = get_val_lookup_table(g_ocv_q_released_mah_table, NUM_CELLS, (uint16_t)round(min_vcell));
        //printf("Debug: LUT Value from Lookup Table: %u\n", lut_value);
    	// Ensure capacity is within the bounds of uint16_t

    	double capacity = (CELL_NOMINAL_CAPACITY_MAH * ( soc_from_ocv(min_vcell)/100));
 8002cde:	4b5d      	ldr	r3, [pc, #372]	@ (8002e54 <get_initial_soc+0x194>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fa28 	bl	8003138 <soc_from_ocv>
 8002ce8:	ec51 0b10 	vmov	r0, r1, d0
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	4b59      	ldr	r3, [pc, #356]	@ (8002e58 <get_initial_soc+0x198>)
 8002cf2:	f7fd fe23 	bl	800093c <__aeabi_ddiv>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	a350      	add	r3, pc, #320	@ (adr r3, 8002e40 <get_initial_soc+0x180>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fcf0 	bl	80006e8 <__aeabi_dmul>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	e9c7 2300 	strd	r2, r3, [r7]

		if (capacity < 0) {
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d1c:	f7fd ff56 	bl	8000bcc <__aeabi_dcmplt>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <get_initial_soc+0x6c>
			lut_value = 0;  // Set to minimum if capacity is negative
 8002d26:	2300      	movs	r3, #0
 8002d28:	81bb      	strh	r3, [r7, #12]
 8002d2a:	e013      	b.n	8002d54 <get_initial_soc+0x94>
		} else if (capacity > UINT16_MAX) {
 8002d2c:	a346      	add	r3, pc, #280	@ (adr r3, 8002e48 <get_initial_soc+0x188>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d36:	f7fd ff67 	bl	8000c08 <__aeabi_dcmpgt>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <get_initial_soc+0x88>
			lut_value = UINT16_MAX;  // Set to maximum if capacity exceeds uint16_t range
 8002d40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d44:	81bb      	strh	r3, [r7, #12]
 8002d46:	e005      	b.n	8002d54 <get_initial_soc+0x94>
		} else {
			lut_value = (uint16_t)capacity;  // Cast the capacity to uint16_t
 8002d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d4c:	f7fd ff7c 	bl	8000c48 <__aeabi_d2uiz>
 8002d50:	4603      	mov	r3, r0
 8002d52:	81bb      	strh	r3, [r7, #12]
		}

        if (lut_value < CELL_NOMINAL_CAPACITY_MAH)
 8002d54:	89bb      	ldrh	r3, [r7, #12]
 8002d56:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d820      	bhi.n	8002da0 <get_initial_soc+0xe0>
        {
            //releasable_capacity = CELL_NOMINAL_CAPACITY_MAH - lut_value;
            //printf("Debug: Releasable Capacity Calculated: %u\n", releasable_capacity);
        	releasable_capacity = lut_value;
 8002d5e:	89bb      	ldrh	r3, [r7, #12]
 8002d60:	81fb      	strh	r3, [r7, #14]
 8002d62:	e01d      	b.n	8002da0 <get_initial_soc+0xe0>
        }
    }
    else
    {
        // Calculate releasable capacity based on initial SOC
        float aux_q = (float)CELL_NOMINAL_CAPACITY_MAH * (initial_soc / 100.0f);
 8002d64:	4b3a      	ldr	r3, [pc, #232]	@ (8002e50 <get_initial_soc+0x190>)
 8002d66:	ed93 7a00 	vldr	s14, [r3]
 8002d6a:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8002e5c <get_initial_soc+0x19c>
 8002d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d72:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8002e60 <get_initial_soc+0x1a0>
 8002d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d7a:	edc7 7a02 	vstr	s15, [r7, #8]
        releasable_capacity = (uint16_t)round(aux_q);
 8002d7e:	68b8      	ldr	r0, [r7, #8]
 8002d80:	f7fd fc5a 	bl	8000638 <__aeabi_f2d>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	ec43 2b10 	vmov	d0, r2, r3
 8002d8c:	f00c f848 	bl	800ee20 <round>
 8002d90:	ec53 2b10 	vmov	r2, r3, d0
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7fd ff56 	bl	8000c48 <__aeabi_d2uiz>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	81fb      	strh	r3, [r7, #14]
    }

    // You might want to return or further use releasable_capacity here
    //printf("Debug: Final Releasable Capacity: %u\n", releasable_capacity);

    soc_coulomb_count_init.Q_max = CELL_NOMINAL_CAPACITY_MAH;
 8002da0:	4b30      	ldr	r3, [pc, #192]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da6:	849a      	strh	r2, [r3, #36]	@ 0x24
    soc_coulomb_count_init.Q_rated = CELL_NOMINAL_CAPACITY_MAH;
 8002da8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	841a      	strh	r2, [r3, #32]
    soc_coulomb_count_init.Q_releasable = releasable_capacity;
 8002db0:	4a2c      	ldr	r2, [pc, #176]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	8453      	strh	r3, [r2, #34]	@ 0x22

    soc_coulomb_count_init.soc = ((float)soc_coulomb_count_init.Q_releasable / (float)soc_coulomb_count_init.Q_rated) * 100.0f;
 8002db6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002db8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc2:	4b28      	ldr	r3, [pc, #160]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002dc4:	8c1b      	ldrh	r3, [r3, #32]
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dd2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002e5c <get_initial_soc+0x19c>
 8002dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dda:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002ddc:	edc3 7a00 	vstr	s15, [r3]
    //printf("Debug: SOC calculated as: %.2f%%\n", soc_coulomb_count_init.soc);

    soc_coulomb_count_init.soh = (float)((float)soc_coulomb_count_init.Q_max / (float)soc_coulomb_count_init.Q_rated) * 100.0f;
 8002de0:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002de2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dec:	4b1d      	ldr	r3, [pc, #116]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002dee:	8c1b      	ldrh	r3, [r3, #32]
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dfc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002e5c <get_initial_soc+0x19c>
 8002e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e04:	4b17      	ldr	r3, [pc, #92]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002e06:	edc3 7a01 	vstr	s15, [r3, #4]
    soc_coulomb_count_init.dod = soc_coulomb_count_init.soh - soc_coulomb_count_init.soc;
 8002e0a:	4b16      	ldr	r3, [pc, #88]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002e0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e10:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1a:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002e1c:	edc3 7a02 	vstr	s15, [r3, #8]
    soc_coulomb_count_init.charge_efficiency = CHARGE_EFFICIENCY;
 8002e20:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002e22:	4a11      	ldr	r2, [pc, #68]	@ (8002e68 <get_initial_soc+0x1a8>)
 8002e24:	611a      	str	r2, [r3, #16]
    soc_coulomb_count_init.discharge_efficiency = DISCHARGE_EFFICIENCY;
 8002e26:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002e28:	4a0f      	ldr	r2, [pc, #60]	@ (8002e68 <get_initial_soc+0x1a8>)
 8002e2a:	615a      	str	r2, [r3, #20]
    soc_coulomb_count_init.coulomb_count = 0;
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e64 <get_initial_soc+0x1a4>)
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
    //printf("Updated: dod before calculated as: %.2f%%\n", soc_coulomb_count_init.dod);
}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	f3af 8000 	nop.w
 8002e40:	00000000 	.word	0x00000000
 8002e44:	40b38800 	.word	0x40b38800
 8002e48:	00000000 	.word	0x00000000
 8002e4c:	40efffe0 	.word	0x40efffe0
 8002e50:	2000001c 	.word	0x2000001c
 8002e54:	20000578 	.word	0x20000578
 8002e58:	40590000 	.word	0x40590000
 8002e5c:	42c80000 	.word	0x42c80000
 8002e60:	459c4000 	.word	0x459c4000
 8002e64:	200004b4 	.word	0x200004b4
 8002e68:	3f733333 	.word	0x3f733333
 8002e6c:	00000000 	.word	0x00000000

08002e70 <soc_k_update_get>:


uint16_t soc_k_update_get(float coulombs_count)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	ed87 0a01 	vstr	s0, [r7, #4]
//    //printf("Updated: dod calculated as: %.2f%%\n", soc_coulomb_count_init.dod);
//
//    return (uint16_t)soc_coulomb_count_init.soc; // Return the updated SOC as an integer
	// Calculate the delta DOD based on the given coulombs_count and the rated capacity

	if (count_init) {
 8002e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff0 <soc_k_update_get+0x180>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <soc_k_update_get+0x26>
		        // For the first reading, return it itself as the difference
		        previous_count = coulombs_count;
 8002e82:	4a5c      	ldr	r2, [pc, #368]	@ (8002ff4 <soc_k_update_get+0x184>)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6013      	str	r3, [r2, #0]
		        count_init = false;
 8002e88:	4b59      	ldr	r3, [pc, #356]	@ (8002ff0 <soc_k_update_get+0x180>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
		        difference = coulombs_count;
 8002e8e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff8 <soc_k_update_get+0x188>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e00c      	b.n	8002eb0 <soc_k_update_get+0x40>
		    } else {
		        // Calculate the difference for consecutive readings
		        difference = coulombs_count - previous_count;
 8002e96:	4b57      	ldr	r3, [pc, #348]	@ (8002ff4 <soc_k_update_get+0x184>)
 8002e98:	edd3 7a00 	vldr	s15, [r3]
 8002e9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea4:	4b54      	ldr	r3, [pc, #336]	@ (8002ff8 <soc_k_update_get+0x188>)
 8002ea6:	edc3 7a00 	vstr	s15, [r3]

		        // Update the previous count for next calculations
		        previous_count = coulombs_count;
 8002eaa:	4a52      	ldr	r2, [pc, #328]	@ (8002ff4 <soc_k_update_get+0x184>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6013      	str	r3, [r2, #0]


	    //printf("Updated: difference calculated as: %.2f\n",  difference);

	    // Calculate the delta DOD based on the given coulombs_count and the rated capacity
	    soc_coulomb_count_init.delta_dod = (-1.0f) * (float)difference / (float)soc_coulomb_count_init.Q_rated * 100.0f;
 8002eb0:	4b51      	ldr	r3, [pc, #324]	@ (8002ff8 <soc_k_update_get+0x188>)
 8002eb2:	edd3 7a00 	vldr	s15, [r3]
 8002eb6:	eef1 6a67 	vneg.f32	s13, s15
 8002eba:	4b50      	ldr	r3, [pc, #320]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002ebc:	8c1b      	ldrh	r3, [r3, #32]
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eca:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003000 <soc_k_update_get+0x190>
 8002ece:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002ed4:	edc3 7a03 	vstr	s15, [r3, #12]
	    //soc_coulomb_count_init.cummulative_dod = soc_coulomb_count_init.dod + soc_coulomb_count_init.charge_efficiency * soc_coulomb_count_init.delta_dod;
	    // Update SOC based on the coulombs_count
	    if (difference > 0)
 8002ed8:	4b47      	ldr	r3, [pc, #284]	@ (8002ff8 <soc_k_update_get+0x188>)
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	dd10      	ble.n	8002f0a <soc_k_update_get+0x9a>
	    {
	        // Positive coulombs_count indicates charging, which increases SOC

	        soc_coulomb_count_init.dod += soc_coulomb_count_init.charge_efficiency * soc_coulomb_count_init.delta_dod;
 8002ee8:	4b44      	ldr	r3, [pc, #272]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002eea:	ed93 7a02 	vldr	s14, [r3, #8]
 8002eee:	4b43      	ldr	r3, [pc, #268]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002ef0:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ef4:	4b41      	ldr	r3, [pc, #260]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002ef6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f02:	4b3e      	ldr	r3, [pc, #248]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002f04:	edc3 7a02 	vstr	s15, [r3, #8]
 8002f08:	e017      	b.n	8002f3a <soc_k_update_get+0xca>
	    }
	    else if(difference < 0)
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff8 <soc_k_update_get+0x188>)
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	d50f      	bpl.n	8002f3a <soc_k_update_get+0xca>
	    {
	        // Negative coulombs_count indicates discharging, which decreases SOC
	        //soc_coulomb_count_init.cummulative_dod = soc_coulomb_count_init.dod - soc_coulomb_count_init.discharge_efficiency * soc_coulomb_count_init.delta_dod;
	        soc_coulomb_count_init.dod += soc_coulomb_count_init.discharge_efficiency * soc_coulomb_count_init.delta_dod;
 8002f1a:	4b38      	ldr	r3, [pc, #224]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002f1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f20:	4b36      	ldr	r3, [pc, #216]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002f22:	edd3 6a05 	vldr	s13, [r3, #20]
 8002f26:	4b35      	ldr	r3, [pc, #212]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002f28:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	4b31      	ldr	r3, [pc, #196]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002f36:	edc3 7a02 	vstr	s15, [r3, #8]
	    }

	    // Calculate the updated SOC
	    soc_coulomb_count_init.soc = soc_coulomb_count_init.soh - soc_coulomb_count_init.dod;
 8002f3a:	4b30      	ldr	r3, [pc, #192]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002f3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f40:	4b2e      	ldr	r3, [pc, #184]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002f42:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002f4c:	edc3 7a00 	vstr	s15, [r3]
	    soc_coulomb_count_init.soc = fmax(0.0f, fminf(100.0f, soc_coulomb_count_init.soc));
 8002f50:	4b2a      	ldr	r3, [pc, #168]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8003000 <soc_k_update_get+0x190>
 8002f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f5e:	f00b ff25 	bl	800edac <fminf>
 8002f62:	ee10 3a10 	vmov	r3, s0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fb66 	bl	8000638 <__aeabi_f2d>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8002fe8 <soc_k_update_get+0x178>
 8002f74:	ec43 2b10 	vmov	d0, r2, r3
 8002f78:	f00b fec3 	bl	800ed02 <fmax>
 8002f7c:	ec53 2b10 	vmov	r2, r3, d0
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f7fd fe80 	bl	8000c88 <__aeabi_d2f>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002f8c:	6013      	str	r3, [r2, #0]
	    soc_coulomb_count_init.dod = fmax(0.0f, fminf(100.0f, soc_coulomb_count_init.dod));
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002f90:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f94:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8003000 <soc_k_update_get+0x190>
 8002f98:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9c:	f00b ff06 	bl	800edac <fminf>
 8002fa0:	ee10 3a10 	vmov	r3, s0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fb47 	bl	8000638 <__aeabi_f2d>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 8002fe8 <soc_k_update_get+0x178>
 8002fb2:	ec43 2b10 	vmov	d0, r2, r3
 8002fb6:	f00b fea4 	bl	800ed02 <fmax>
 8002fba:	ec53 2b10 	vmov	r2, r3, d0
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f7fd fe61 	bl	8000c88 <__aeabi_d2f>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002fca:	6093      	str	r3, [r2, #8]
	    //printf("Updated: SOC calculated as: %.2f%%\n", soc_coulomb_count_init.soc);
	    //printf("Updated: dod calculated as: %.2f%%\n", soc_coulomb_count_init.dod);

	    return (uint16_t)soc_coulomb_count_init.soc; // Return the updated SOC as an integer
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <soc_k_update_get+0x18c>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fd6:	ee17 3a90 	vmov	r3, s15
 8002fda:	b29b      	uxth	r3, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	f3af 8000 	nop.w
	...
 8002ff0:	20000020 	.word	0x20000020
 8002ff4:	20000580 	.word	0x20000580
 8002ff8:	2000057c 	.word	0x2000057c
 8002ffc:	200004b4 	.word	0x200004b4
 8003000:	42c80000 	.word	0x42c80000

08003004 <get_min_max_vcell>:
    soc_coulomb_count_init.soc = 0.0f;
    soc_coulomb_count_init.dod = 100.0f;
}
// Function to find the minimum and maximum cell voltages
void get_min_max_vcell(void)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
    // Initialize min and max to the first element of the array
    min_vcell = CellVoltage[0];
 800300a:	4b24      	ldr	r3, [pc, #144]	@ (800309c <get_min_max_vcell+0x98>)
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	4b24      	ldr	r3, [pc, #144]	@ (80030a0 <get_min_max_vcell+0x9c>)
 8003010:	801a      	strh	r2, [r3, #0]
    max_vcell = CellVoltage[0];
 8003012:	4b22      	ldr	r3, [pc, #136]	@ (800309c <get_min_max_vcell+0x98>)
 8003014:	881a      	ldrh	r2, [r3, #0]
 8003016:	4b23      	ldr	r3, [pc, #140]	@ (80030a4 <get_min_max_vcell+0xa0>)
 8003018:	801a      	strh	r2, [r3, #0]

    // Initialize index for min and max
    uint8_t min_index = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	71bb      	strb	r3, [r7, #6]
    uint8_t max_index = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	717b      	strb	r3, [r7, #5]

    // Iterate through the array of cell voltages
    for (uint8_t i = 0; i < NUM_CELLS; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	71fb      	strb	r3, [r7, #7]
 8003026:	e02e      	b.n	8003086 <get_min_max_vcell+0x82>
    {
        // Check if the current cell is selected
        if ((selected_cells.value & (0x01 << i)) == 0)
 8003028:	4b1f      	ldr	r3, [pc, #124]	@ (80030a8 <get_min_max_vcell+0xa4>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	fa42 f303 	asr.w	r3, r2, r3
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <get_min_max_vcell+0x7a>
        {
            continue; // Skip this iteration if the cell is not selected
        }

        // Update minimum voltage if the current voltage is lower
        if (CellVoltage[i] < min_vcell)
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	4a17      	ldr	r2, [pc, #92]	@ (800309c <get_min_max_vcell+0x98>)
 8003040:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003044:	4b16      	ldr	r3, [pc, #88]	@ (80030a0 <get_min_max_vcell+0x9c>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d207      	bcs.n	800305c <get_min_max_vcell+0x58>
        {
            min_vcell = CellVoltage[i];
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	4a13      	ldr	r2, [pc, #76]	@ (800309c <get_min_max_vcell+0x98>)
 8003050:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003054:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <get_min_max_vcell+0x9c>)
 8003056:	801a      	strh	r2, [r3, #0]
            min_index = i; // Update the index of the minimum value
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	71bb      	strb	r3, [r7, #6]
        }

        // Update maximum voltage if the current voltage is higher
        if (CellVoltage[i] > max_vcell)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	4a0f      	ldr	r2, [pc, #60]	@ (800309c <get_min_max_vcell+0x98>)
 8003060:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003064:	4b0f      	ldr	r3, [pc, #60]	@ (80030a4 <get_min_max_vcell+0xa0>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d909      	bls.n	8003080 <get_min_max_vcell+0x7c>
        {
            max_vcell = CellVoltage[i];
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	4a0b      	ldr	r2, [pc, #44]	@ (800309c <get_min_max_vcell+0x98>)
 8003070:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <get_min_max_vcell+0xa0>)
 8003076:	801a      	strh	r2, [r3, #0]
            max_index = i; // Update the index of the maximum value
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	717b      	strb	r3, [r7, #5]
 800307c:	e000      	b.n	8003080 <get_min_max_vcell+0x7c>
            continue; // Skip this iteration if the cell is not selected
 800307e:	bf00      	nop
    for (uint8_t i = 0; i < NUM_CELLS; i++)
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	3301      	adds	r3, #1
 8003084:	71fb      	strb	r3, [r7, #7]
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	2b0f      	cmp	r3, #15
 800308a:	d9cd      	bls.n	8003028 <get_min_max_vcell+0x24>
    }

    // Output the results including the indices
    //printf("Min Voltage: %u mV at index %u\n", min_vcell, min_index);
    //printf("Max Voltage: %u mV at index %u\n", max_vcell, max_index);
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000118 	.word	0x20000118
 80030a0:	20000578 	.word	0x20000578
 80030a4:	2000057a 	.word	0x2000057a
 80030a8:	20000000 	.word	0x20000000

080030ac <voltage_to_percentage>:


uint8_t voltage_to_percentage(uint16_t voltage)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
    // Define the lower and upper limits of the voltage range in mV
    const uint16_t min_voltage = 3000;
 80030b6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80030ba:	82fb      	strh	r3, [r7, #22]
    const uint16_t max_voltage = 4300;
 80030bc:	f241 03cc 	movw	r3, #4300	@ 0x10cc
 80030c0:	82bb      	strh	r3, [r7, #20]
    const uint16_t error_voltage = 4500;
 80030c2:	f241 1394 	movw	r3, #4500	@ 0x1194
 80030c6:	827b      	strh	r3, [r7, #18]

    // Guard: If the voltage is below 3000 mV, return 0%
    if ((voltage < min_voltage) || (voltage > error_voltage))
 80030c8:	88fa      	ldrh	r2, [r7, #6]
 80030ca:	8afb      	ldrh	r3, [r7, #22]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d303      	bcc.n	80030d8 <voltage_to_percentage+0x2c>
 80030d0:	88fa      	ldrh	r2, [r7, #6]
 80030d2:	8a7b      	ldrh	r3, [r7, #18]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d901      	bls.n	80030dc <voltage_to_percentage+0x30>
    {
        return 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	e023      	b.n	8003124 <voltage_to_percentage+0x78>
    }

    // Guard: If the voltage is above 4300 mV, return 100%
    if (voltage > max_voltage)
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	8abb      	ldrh	r3, [r7, #20]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d901      	bls.n	80030e8 <voltage_to_percentage+0x3c>
    {
        return 100;
 80030e4:	2364      	movs	r3, #100	@ 0x64
 80030e6:	e01d      	b.n	8003124 <voltage_to_percentage+0x78>
    }

    // Calculate the SoC percentage for voltages within the valid range
    float soc_percentage = ((float)(voltage - min_voltage) / (float)(max_voltage - min_voltage)) * 100.0f;
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	8afb      	ldrh	r3, [r7, #22]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030f6:	8aba      	ldrh	r2, [r7, #20]
 80030f8:	8afb      	ldrh	r3, [r7, #22]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003108:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003130 <voltage_to_percentage+0x84>
 800310c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003110:	edc7 7a03 	vstr	s15, [r7, #12]

    // Return the calculated SoC percentage as an integer
    return (uint16_t)soc_percentage;
 8003114:	edd7 7a03 	vldr	s15, [r7, #12]
 8003118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800311c:	ee17 3a90 	vmov	r3, s15
 8003120:	b29b      	uxth	r3, r3
 8003122:	b2db      	uxtb	r3, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	42c80000 	.word	0x42c80000
 8003134:	00000000 	.word	0x00000000

08003138 <soc_from_ocv>:

double soc_from_ocv(uint16_t ocv_min_milivolts){
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b096      	sub	sp, #88	@ 0x58
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	80fb      	strh	r3, [r7, #6]

	// Convert millivolts to volts
	    double ocv = ocv_min_milivolts / 1000.0;
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd fa65 	bl	8000614 <__aeabi_i2d>
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	4b94      	ldr	r3, [pc, #592]	@ (80033a0 <soc_from_ocv+0x268>)
 8003150:	f7fd fbf4 	bl	800093c <__aeabi_ddiv>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	// Polynomial coefficients
	   double a1 = 268.4970355259198;   // Coefficient for OCV^8
 800315c:	a370      	add	r3, pc, #448	@ (adr r3, 8003320 <soc_from_ocv+0x1e8>)
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	   double a2 = -6879.270367122276;  // Coefficient for OCV^7
 8003166:	a370      	add	r3, pc, #448	@ (adr r3, 8003328 <soc_from_ocv+0x1f0>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	   double a3 = 76716.49575172913;   // Coefficient for OCV^6
 8003170:	a36f      	add	r3, pc, #444	@ (adr r3, 8003330 <soc_from_ocv+0x1f8>)
 8003172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003176:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	   double a4 = -486365.6733759814;  // Coefficient for OCV^5
 800317a:	a36f      	add	r3, pc, #444	@ (adr r3, 8003338 <soc_from_ocv+0x200>)
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	   double a5 = 1917287.1707991716;  // Coefficient for OCV^4
 8003184:	a36e      	add	r3, pc, #440	@ (adr r3, 8003340 <soc_from_ocv+0x208>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	   double a6 = -4812471.06572991;   // Coefficient for OCV^3
 800318e:	a36e      	add	r3, pc, #440	@ (adr r3, 8003348 <soc_from_ocv+0x210>)
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	e9c7 2308 	strd	r2, r3, [r7, #32]
	   double a7 = 7511312.300797121;   // Coefficient for OCV^2
 8003198:	a36d      	add	r3, pc, #436	@ (adr r3, 8003350 <soc_from_ocv+0x218>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	   double a8 = -6665390.783393391;  // Coefficient for OCV^1
 80031a2:	a36d      	add	r3, pc, #436	@ (adr r3, 8003358 <soc_from_ocv+0x220>)
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	   double a9 = 2574719.229612701;   // Constant term
 80031ac:	a36c      	add	r3, pc, #432	@ (adr r3, 8003360 <soc_from_ocv+0x228>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	   // Return the polynomial evaluated for the given OCV
	   return (a1 * pow(ocv, 8)) + (a2 * pow(ocv, 7)) + (a3 * pow(ocv, 6)) +
 80031b6:	ed9f 1b6c 	vldr	d1, [pc, #432]	@ 8003368 <soc_from_ocv+0x230>
 80031ba:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 80031be:	f00b fd25 	bl	800ec0c <pow>
 80031c2:	ec51 0b10 	vmov	r0, r1, d0
 80031c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031ca:	f7fd fa8d 	bl	80006e8 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4614      	mov	r4, r2
 80031d4:	461d      	mov	r5, r3
 80031d6:	ed9f 1b66 	vldr	d1, [pc, #408]	@ 8003370 <soc_from_ocv+0x238>
 80031da:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 80031de:	f00b fd15 	bl	800ec0c <pow>
 80031e2:	ec51 0b10 	vmov	r0, r1, d0
 80031e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031ea:	f7fd fa7d 	bl	80006e8 <__aeabi_dmul>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4620      	mov	r0, r4
 80031f4:	4629      	mov	r1, r5
 80031f6:	f7fd f8c1 	bl	800037c <__adddf3>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4614      	mov	r4, r2
 8003200:	461d      	mov	r5, r3
 8003202:	ed9f 1b5d 	vldr	d1, [pc, #372]	@ 8003378 <soc_from_ocv+0x240>
 8003206:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 800320a:	f00b fcff 	bl	800ec0c <pow>
 800320e:	ec51 0b10 	vmov	r0, r1, d0
 8003212:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003216:	f7fd fa67 	bl	80006e8 <__aeabi_dmul>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4620      	mov	r0, r4
 8003220:	4629      	mov	r1, r5
 8003222:	f7fd f8ab 	bl	800037c <__adddf3>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4614      	mov	r4, r2
 800322c:	461d      	mov	r5, r3
			  (a4 * pow(ocv, 5)) + (a5 * pow(ocv, 4)) + (a6 * pow(ocv, 3)) +
 800322e:	ed9f 1b54 	vldr	d1, [pc, #336]	@ 8003380 <soc_from_ocv+0x248>
 8003232:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8003236:	f00b fce9 	bl	800ec0c <pow>
 800323a:	ec51 0b10 	vmov	r0, r1, d0
 800323e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003242:	f7fd fa51 	bl	80006e8 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
	   return (a1 * pow(ocv, 8)) + (a2 * pow(ocv, 7)) + (a3 * pow(ocv, 6)) +
 800324a:	4620      	mov	r0, r4
 800324c:	4629      	mov	r1, r5
 800324e:	f7fd f895 	bl	800037c <__adddf3>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4614      	mov	r4, r2
 8003258:	461d      	mov	r5, r3
			  (a4 * pow(ocv, 5)) + (a5 * pow(ocv, 4)) + (a6 * pow(ocv, 3)) +
 800325a:	ed9f 1b4b 	vldr	d1, [pc, #300]	@ 8003388 <soc_from_ocv+0x250>
 800325e:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8003262:	f00b fcd3 	bl	800ec0c <pow>
 8003266:	ec51 0b10 	vmov	r0, r1, d0
 800326a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800326e:	f7fd fa3b 	bl	80006e8 <__aeabi_dmul>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4620      	mov	r0, r4
 8003278:	4629      	mov	r1, r5
 800327a:	f7fd f87f 	bl	800037c <__adddf3>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4614      	mov	r4, r2
 8003284:	461d      	mov	r5, r3
 8003286:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8003390 <soc_from_ocv+0x258>
 800328a:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 800328e:	f00b fcbd 	bl	800ec0c <pow>
 8003292:	ec51 0b10 	vmov	r0, r1, d0
 8003296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800329a:	f7fd fa25 	bl	80006e8 <__aeabi_dmul>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4620      	mov	r0, r4
 80032a4:	4629      	mov	r1, r5
 80032a6:	f7fd f869 	bl	800037c <__adddf3>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4614      	mov	r4, r2
 80032b0:	461d      	mov	r5, r3
			  (a7 * pow(ocv, 2)) + (a8 * ocv) + a9;
 80032b2:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 8003398 <soc_from_ocv+0x260>
 80032b6:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 80032ba:	f00b fca7 	bl	800ec0c <pow>
 80032be:	ec51 0b10 	vmov	r0, r1, d0
 80032c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c6:	f7fd fa0f 	bl	80006e8 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
			  (a4 * pow(ocv, 5)) + (a5 * pow(ocv, 4)) + (a6 * pow(ocv, 3)) +
 80032ce:	4620      	mov	r0, r4
 80032d0:	4629      	mov	r1, r5
 80032d2:	f7fd f853 	bl	800037c <__adddf3>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4614      	mov	r4, r2
 80032dc:	461d      	mov	r5, r3
			  (a7 * pow(ocv, 2)) + (a8 * ocv) + a9;
 80032de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032e6:	f7fd f9ff 	bl	80006e8 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4620      	mov	r0, r4
 80032f0:	4629      	mov	r1, r5
 80032f2:	f7fd f843 	bl	800037c <__adddf3>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003302:	f7fd f83b 	bl	800037c <__adddf3>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	ec43 2b17 	vmov	d7, r2, r3

}
 800330e:	eeb0 0a47 	vmov.f32	s0, s14
 8003312:	eef0 0a67 	vmov.f32	s1, s15
 8003316:	3758      	adds	r7, #88	@ 0x58
 8003318:	46bd      	mov	sp, r7
 800331a:	bdb0      	pop	{r4, r5, r7, pc}
 800331c:	f3af 8000 	nop.w
 8003320:	db860c69 	.word	0xdb860c69
 8003324:	4070c7f3 	.word	0x4070c7f3
 8003328:	36c79c17 	.word	0x36c79c17
 800332c:	c0badf45 	.word	0xc0badf45
 8003330:	ee995d79 	.word	0xee995d79
 8003334:	40f2bac7 	.word	0x40f2bac7
 8003338:	b1897928 	.word	0xb1897928
 800333c:	c11daf76 	.word	0xc11daf76
 8003340:	2bb97e98 	.word	0x2bb97e98
 8003344:	413d4167 	.word	0x413d4167
 8003348:	c434eb39 	.word	0xc434eb39
 800334c:	c1525bad 	.word	0xc1525bad
 8003350:	13404291 	.word	0x13404291
 8003354:	415ca744 	.word	0x415ca744
 8003358:	b2231e09 	.word	0xb2231e09
 800335c:	c1596d2b 	.word	0xc1596d2b
 8003360:	9d63f2f1 	.word	0x9d63f2f1
 8003364:	4143a4bf 	.word	0x4143a4bf
 8003368:	00000000 	.word	0x00000000
 800336c:	40200000 	.word	0x40200000
 8003370:	00000000 	.word	0x00000000
 8003374:	401c0000 	.word	0x401c0000
 8003378:	00000000 	.word	0x00000000
 800337c:	40180000 	.word	0x40180000
 8003380:	00000000 	.word	0x00000000
 8003384:	40140000 	.word	0x40140000
 8003388:	00000000 	.word	0x00000000
 800338c:	40100000 	.word	0x40100000
 8003390:	00000000 	.word	0x00000000
 8003394:	40080000 	.word	0x40080000
 8003398:	00000000 	.word	0x00000000
 800339c:	40000000 	.word	0x40000000
 80033a0:	408f4000 	.word	0x408f4000

080033a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	4b10      	ldr	r3, [pc, #64]	@ (80033f0 <HAL_MspInit+0x4c>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	4a0f      	ldr	r2, [pc, #60]	@ (80033f0 <HAL_MspInit+0x4c>)
 80033b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ba:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <HAL_MspInit+0x4c>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <HAL_MspInit+0x4c>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	4a08      	ldr	r2, [pc, #32]	@ (80033f0 <HAL_MspInit+0x4c>)
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_MspInit+0x4c>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80033e2:	f008 fa6b 	bl	800b8bc <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800

080033f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	@ 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a48      	ldr	r2, [pc, #288]	@ (8003534 <HAL_I2C_MspInit+0x140>)
 8003412:	4293      	cmp	r3, r2
 8003414:	f040 8089 	bne.w	800352a <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003418:	2300      	movs	r3, #0
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	4b46      	ldr	r3, [pc, #280]	@ (8003538 <HAL_I2C_MspInit+0x144>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	4a45      	ldr	r2, [pc, #276]	@ (8003538 <HAL_I2C_MspInit+0x144>)
 8003422:	f043 0302 	orr.w	r3, r3, #2
 8003426:	6313      	str	r3, [r2, #48]	@ 0x30
 8003428:	4b43      	ldr	r3, [pc, #268]	@ (8003538 <HAL_I2C_MspInit+0x144>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003434:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800343a:	2312      	movs	r3, #18
 800343c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003442:	2303      	movs	r3, #3
 8003444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003446:	2304      	movs	r3, #4
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	4619      	mov	r1, r3
 8003450:	483a      	ldr	r0, [pc, #232]	@ (800353c <HAL_I2C_MspInit+0x148>)
 8003452:	f002 fbb5 	bl	8005bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	4b37      	ldr	r3, [pc, #220]	@ (8003538 <HAL_I2C_MspInit+0x144>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	4a36      	ldr	r2, [pc, #216]	@ (8003538 <HAL_I2C_MspInit+0x144>)
 8003460:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003464:	6413      	str	r3, [r2, #64]	@ 0x40
 8003466:	4b34      	ldr	r3, [pc, #208]	@ (8003538 <HAL_I2C_MspInit+0x144>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003472:	4b33      	ldr	r3, [pc, #204]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 8003474:	4a33      	ldr	r2, [pc, #204]	@ (8003544 <HAL_I2C_MspInit+0x150>)
 8003476:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003478:	4b31      	ldr	r3, [pc, #196]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 800347a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800347e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003480:	4b2f      	ldr	r3, [pc, #188]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003486:	4b2e      	ldr	r3, [pc, #184]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 8003488:	2200      	movs	r2, #0
 800348a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800348c:	4b2c      	ldr	r3, [pc, #176]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 800348e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003492:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003494:	4b2a      	ldr	r3, [pc, #168]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 8003496:	2200      	movs	r2, #0
 8003498:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800349a:	4b29      	ldr	r3, [pc, #164]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 800349c:	2200      	movs	r2, #0
 800349e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80034a0:	4b27      	ldr	r3, [pc, #156]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034a6:	4b26      	ldr	r3, [pc, #152]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ac:	4b24      	ldr	r3, [pc, #144]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80034b2:	4823      	ldr	r0, [pc, #140]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 80034b4:	f002 f89a 	bl	80055ec <HAL_DMA_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80034be:	f7ff fa4d 	bl	800295c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 80034c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80034c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003540 <HAL_I2C_MspInit+0x14c>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80034ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 80034d0:	4a1e      	ldr	r2, [pc, #120]	@ (800354c <HAL_I2C_MspInit+0x158>)
 80034d2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80034d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 80034d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 80034de:	2240      	movs	r2, #64	@ 0x40
 80034e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e2:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034e8:	4b17      	ldr	r3, [pc, #92]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 80034ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034f0:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034f6:	4b14      	ldr	r3, [pc, #80]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80034fc:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 80034fe:	2200      	movs	r2, #0
 8003500:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003502:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 8003504:	2200      	movs	r2, #0
 8003506:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003508:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 800350a:	2200      	movs	r2, #0
 800350c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800350e:	480e      	ldr	r0, [pc, #56]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 8003510:	f002 f86c 	bl	80055ec <HAL_DMA_Init>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800351a:	f7ff fa1f 	bl	800295c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a09      	ldr	r2, [pc, #36]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 8003522:	635a      	str	r2, [r3, #52]	@ 0x34
 8003524:	4a08      	ldr	r2, [pc, #32]	@ (8003548 <HAL_I2C_MspInit+0x154>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800352a:	bf00      	nop
 800352c:	3728      	adds	r7, #40	@ 0x28
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40005400 	.word	0x40005400
 8003538:	40023800 	.word	0x40023800
 800353c:	40020400 	.word	0x40020400
 8003540:	200001a8 	.word	0x200001a8
 8003544:	40026010 	.word	0x40026010
 8003548:	20000208 	.word	0x20000208
 800354c:	400260a0 	.word	0x400260a0

08003550 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a19      	ldr	r2, [pc, #100]	@ (80035d4 <HAL_SPI_MspInit+0x84>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d12b      	bne.n	80035ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	4b18      	ldr	r3, [pc, #96]	@ (80035d8 <HAL_SPI_MspInit+0x88>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	4a17      	ldr	r2, [pc, #92]	@ (80035d8 <HAL_SPI_MspInit+0x88>)
 800357c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003580:	6453      	str	r3, [r2, #68]	@ 0x44
 8003582:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <HAL_SPI_MspInit+0x88>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b11      	ldr	r3, [pc, #68]	@ (80035d8 <HAL_SPI_MspInit+0x88>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	4a10      	ldr	r2, [pc, #64]	@ (80035d8 <HAL_SPI_MspInit+0x88>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6313      	str	r3, [r2, #48]	@ 0x30
 800359e:	4b0e      	ldr	r3, [pc, #56]	@ (80035d8 <HAL_SPI_MspInit+0x88>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035aa:	23e0      	movs	r3, #224	@ 0xe0
 80035ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b6:	2303      	movs	r3, #3
 80035b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035ba:	2305      	movs	r3, #5
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	4619      	mov	r1, r3
 80035c4:	4805      	ldr	r0, [pc, #20]	@ (80035dc <HAL_SPI_MspInit+0x8c>)
 80035c6:	f002 fafb 	bl	8005bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035ca:	bf00      	nop
 80035cc:	3728      	adds	r7, #40	@ 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40013000 	.word	0x40013000
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40020000 	.word	0x40020000

080035e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0b      	ldr	r2, [pc, #44]	@ (800361c <HAL_TIM_Base_MspInit+0x3c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10d      	bne.n	800360e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003620 <HAL_TIM_Base_MspInit+0x40>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	4a09      	ldr	r2, [pc, #36]	@ (8003620 <HAL_TIM_Base_MspInit+0x40>)
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003600:	6453      	str	r3, [r2, #68]	@ 0x44
 8003602:	4b07      	ldr	r3, [pc, #28]	@ (8003620 <HAL_TIM_Base_MspInit+0x40>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40014400 	.word	0x40014400
 8003620:	40023800 	.word	0x40023800

08003624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	@ 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	f107 031c 	add.w	r3, r7, #28
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a32      	ldr	r2, [pc, #200]	@ (800370c <HAL_UART_MspInit+0xe8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d12c      	bne.n	80036a0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	4b31      	ldr	r3, [pc, #196]	@ (8003710 <HAL_UART_MspInit+0xec>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	4a30      	ldr	r2, [pc, #192]	@ (8003710 <HAL_UART_MspInit+0xec>)
 8003650:	f043 0310 	orr.w	r3, r3, #16
 8003654:	6453      	str	r3, [r2, #68]	@ 0x44
 8003656:	4b2e      	ldr	r3, [pc, #184]	@ (8003710 <HAL_UART_MspInit+0xec>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	4b2a      	ldr	r3, [pc, #168]	@ (8003710 <HAL_UART_MspInit+0xec>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	4a29      	ldr	r2, [pc, #164]	@ (8003710 <HAL_UART_MspInit+0xec>)
 800366c:	f043 0302 	orr.w	r3, r3, #2
 8003670:	6313      	str	r3, [r2, #48]	@ 0x30
 8003672:	4b27      	ldr	r3, [pc, #156]	@ (8003710 <HAL_UART_MspInit+0xec>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800367e:	23c0      	movs	r3, #192	@ 0xc0
 8003680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368a:	2303      	movs	r3, #3
 800368c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800368e:	2307      	movs	r3, #7
 8003690:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003692:	f107 031c 	add.w	r3, r7, #28
 8003696:	4619      	mov	r1, r3
 8003698:	481e      	ldr	r0, [pc, #120]	@ (8003714 <HAL_UART_MspInit+0xf0>)
 800369a:	f002 fa91 	bl	8005bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800369e:	e030      	b.n	8003702 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003718 <HAL_UART_MspInit+0xf4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d12b      	bne.n	8003702 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	4b18      	ldr	r3, [pc, #96]	@ (8003710 <HAL_UART_MspInit+0xec>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	4a17      	ldr	r2, [pc, #92]	@ (8003710 <HAL_UART_MspInit+0xec>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ba:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <HAL_UART_MspInit+0xec>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	4b11      	ldr	r3, [pc, #68]	@ (8003710 <HAL_UART_MspInit+0xec>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	4a10      	ldr	r2, [pc, #64]	@ (8003710 <HAL_UART_MspInit+0xec>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003710 <HAL_UART_MspInit+0xec>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036e2:	2304      	movs	r3, #4
 80036e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036e6:	2312      	movs	r3, #18
 80036e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036f2:	2307      	movs	r3, #7
 80036f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	f107 031c 	add.w	r3, r7, #28
 80036fa:	4619      	mov	r1, r3
 80036fc:	4807      	ldr	r0, [pc, #28]	@ (800371c <HAL_UART_MspInit+0xf8>)
 80036fe:	f002 fa5f 	bl	8005bc0 <HAL_GPIO_Init>
}
 8003702:	bf00      	nop
 8003704:	3730      	adds	r7, #48	@ 0x30
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40011000 	.word	0x40011000
 8003710:	40023800 	.word	0x40023800
 8003714:	40020400 	.word	0x40020400
 8003718:	40004400 	.word	0x40004400
 800371c:	40020000 	.word	0x40020000

08003720 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08e      	sub	sp, #56	@ 0x38
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	4b33      	ldr	r3, [pc, #204]	@ (8003804 <HAL_InitTick+0xe4>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	4a32      	ldr	r2, [pc, #200]	@ (8003804 <HAL_InitTick+0xe4>)
 800373a:	f043 0310 	orr.w	r3, r3, #16
 800373e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003740:	4b30      	ldr	r3, [pc, #192]	@ (8003804 <HAL_InitTick+0xe4>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800374c:	f107 0210 	add.w	r2, r7, #16
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f003 fd38 	bl	80071cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003766:	f003 fd09 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 800376a:	6378      	str	r0, [r7, #52]	@ 0x34
 800376c:	e004      	b.n	8003778 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800376e:	f003 fd05 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8003772:	4603      	mov	r3, r0
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800377a:	4a23      	ldr	r2, [pc, #140]	@ (8003808 <HAL_InitTick+0xe8>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	0c9b      	lsrs	r3, r3, #18
 8003782:	3b01      	subs	r3, #1
 8003784:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003786:	4b21      	ldr	r3, [pc, #132]	@ (800380c <HAL_InitTick+0xec>)
 8003788:	4a21      	ldr	r2, [pc, #132]	@ (8003810 <HAL_InitTick+0xf0>)
 800378a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800378c:	4b1f      	ldr	r3, [pc, #124]	@ (800380c <HAL_InitTick+0xec>)
 800378e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003792:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003794:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <HAL_InitTick+0xec>)
 8003796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003798:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800379a:	4b1c      	ldr	r3, [pc, #112]	@ (800380c <HAL_InitTick+0xec>)
 800379c:	2200      	movs	r2, #0
 800379e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a0:	4b1a      	ldr	r3, [pc, #104]	@ (800380c <HAL_InitTick+0xec>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a6:	4b19      	ldr	r3, [pc, #100]	@ (800380c <HAL_InitTick+0xec>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80037ac:	4817      	ldr	r0, [pc, #92]	@ (800380c <HAL_InitTick+0xec>)
 80037ae:	f004 fd21 	bl	80081f4 <HAL_TIM_Base_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80037b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d11b      	bne.n	80037f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80037c0:	4812      	ldr	r0, [pc, #72]	@ (800380c <HAL_InitTick+0xec>)
 80037c2:	f004 fdcf 	bl	8008364 <HAL_TIM_Base_Start_IT>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80037cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d111      	bne.n	80037f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037d4:	2036      	movs	r0, #54	@ 0x36
 80037d6:	f001 fefb 	bl	80055d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b0f      	cmp	r3, #15
 80037de:	d808      	bhi.n	80037f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80037e0:	2200      	movs	r2, #0
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	2036      	movs	r0, #54	@ 0x36
 80037e6:	f001 fed7 	bl	8005598 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003814 <HAL_InitTick+0xf4>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	e002      	b.n	80037f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80037f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3738      	adds	r7, #56	@ 0x38
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	431bde83 	.word	0x431bde83
 800380c:	20000584 	.word	0x20000584
 8003810:	40001000 	.word	0x40001000
 8003814:	20000058 	.word	0x20000058

08003818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800381c:	bf00      	nop
 800381e:	e7fd      	b.n	800381c <NMI_Handler+0x4>

08003820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003824:	bf00      	nop
 8003826:	e7fd      	b.n	8003824 <HardFault_Handler+0x4>

08003828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800382c:	bf00      	nop
 800382e:	e7fd      	b.n	800382c <MemManage_Handler+0x4>

08003830 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003834:	bf00      	nop
 8003836:	e7fd      	b.n	8003834 <BusFault_Handler+0x4>

08003838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800383c:	bf00      	nop
 800383e:	e7fd      	b.n	800383c <UsageFault_Handler+0x4>

08003840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003854:	4802      	ldr	r0, [pc, #8]	@ (8003860 <DMA1_Stream0_IRQHandler+0x10>)
 8003856:	f001 ff77 	bl	8005748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	200001a8 	.word	0x200001a8

08003864 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003868:	4802      	ldr	r0, [pc, #8]	@ (8003874 <DMA1_Stream6_IRQHandler+0x10>)
 800386a:	f001 ff6d 	bl	8005748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000208 	.word	0x20000208

08003878 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800387c:	4802      	ldr	r0, [pc, #8]	@ (8003888 <TIM6_DAC_IRQHandler+0x10>)
 800387e:	f004 fde1 	bl	8008444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000584 	.word	0x20000584

0800388c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e00a      	b.n	80038b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800389e:	f3af 8000 	nop.w
 80038a2:	4601      	mov	r1, r0
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	60ba      	str	r2, [r7, #8]
 80038aa:	b2ca      	uxtb	r2, r1
 80038ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	3301      	adds	r3, #1
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	dbf0      	blt.n	800389e <_read+0x12>
  }

  return len;
 80038bc:	687b      	ldr	r3, [r7, #4]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038ee:	605a      	str	r2, [r3, #4]
  return 0;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <_isatty>:

int _isatty(int file)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003906:	2301      	movs	r3, #1
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003934:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <SystemInit+0x20>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393a:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <SystemInit+0x20>)
 800393c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800395c:	4b22      	ldr	r3, [pc, #136]	@ (80039e8 <WIZCHIP_READ+0x94>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003962:	4b21      	ldr	r3, [pc, #132]	@ (80039e8 <WIZCHIP_READ+0x94>)
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003968:	4b1f      	ldr	r3, [pc, #124]	@ (80039e8 <WIZCHIP_READ+0x94>)
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <WIZCHIP_READ+0x24>
 8003970:	4b1d      	ldr	r3, [pc, #116]	@ (80039e8 <WIZCHIP_READ+0x94>)
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	2b00      	cmp	r3, #0
 8003976:	d114      	bne.n	80039a2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003978:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <WIZCHIP_READ+0x94>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	0c12      	lsrs	r2, r2, #16
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	4610      	mov	r0, r2
 8003984:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003986:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <WIZCHIP_READ+0x94>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	0a12      	lsrs	r2, r2, #8
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	4610      	mov	r0, r2
 8003992:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003994:	4b14      	ldr	r3, [pc, #80]	@ (80039e8 <WIZCHIP_READ+0x94>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	4610      	mov	r0, r2
 800399e:	4798      	blx	r3
 80039a0:	e011      	b.n	80039c6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80039b8:	4b0b      	ldr	r3, [pc, #44]	@ (80039e8 <WIZCHIP_READ+0x94>)
 80039ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039bc:	f107 020c 	add.w	r2, r7, #12
 80039c0:	2103      	movs	r1, #3
 80039c2:	4610      	mov	r0, r2
 80039c4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80039c6:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <WIZCHIP_READ+0x94>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	4798      	blx	r3
 80039cc:	4603      	mov	r3, r0
 80039ce:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80039d0:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <WIZCHIP_READ+0x94>)
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80039d6:	4b04      	ldr	r3, [pc, #16]	@ (80039e8 <WIZCHIP_READ+0x94>)
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	4798      	blx	r3
   return ret;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	2000002c 	.word	0x2000002c

080039ec <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80039f8:	4b22      	ldr	r3, [pc, #136]	@ (8003a84 <WIZCHIP_WRITE+0x98>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80039fe:	4b21      	ldr	r3, [pc, #132]	@ (8003a84 <WIZCHIP_WRITE+0x98>)
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f043 0304 	orr.w	r3, r3, #4
 8003a0a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a84 <WIZCHIP_WRITE+0x98>)
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d119      	bne.n	8003a48 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003a14:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <WIZCHIP_WRITE+0x98>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	0c12      	lsrs	r2, r2, #16
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	4610      	mov	r0, r2
 8003a20:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003a22:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <WIZCHIP_WRITE+0x98>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	0a12      	lsrs	r2, r2, #8
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003a30:	4b14      	ldr	r3, [pc, #80]	@ (8003a84 <WIZCHIP_WRITE+0x98>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003a3c:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <WIZCHIP_WRITE+0x98>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	4610      	mov	r0, r2
 8003a44:	4798      	blx	r3
 8003a46:	e013      	b.n	8003a70 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003a62:	4b08      	ldr	r3, [pc, #32]	@ (8003a84 <WIZCHIP_WRITE+0x98>)
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	f107 020c 	add.w	r2, r7, #12
 8003a6a:	2104      	movs	r1, #4
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <WIZCHIP_WRITE+0x98>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003a76:	4b03      	ldr	r3, [pc, #12]	@ (8003a84 <WIZCHIP_WRITE+0x98>)
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	4798      	blx	r3
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	2000002c 	.word	0x2000002c

08003a88 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003a96:	4b2b      	ldr	r3, [pc, #172]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003a9c:	4b29      	ldr	r3, [pc, #164]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003aa2:	4b28      	ldr	r3, [pc, #160]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <WIZCHIP_READ_BUF+0x2a>
 8003aaa:	4b26      	ldr	r3, [pc, #152]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d126      	bne.n	8003b00 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003ab2:	4b24      	ldr	r3, [pc, #144]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	0c12      	lsrs	r2, r2, #16
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	4610      	mov	r0, r2
 8003abe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003ac0:	4b20      	ldr	r3, [pc, #128]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	0a12      	lsrs	r2, r2, #8
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	4610      	mov	r0, r2
 8003acc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003ace:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	82fb      	strh	r3, [r7, #22]
 8003ade:	e00a      	b.n	8003af6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003ae0:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	8afa      	ldrh	r2, [r7, #22]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	188c      	adds	r4, r1, r2
 8003aea:	4798      	blx	r3
 8003aec:	4603      	mov	r3, r0
 8003aee:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003af0:	8afb      	ldrh	r3, [r7, #22]
 8003af2:	3301      	adds	r3, #1
 8003af4:	82fb      	strh	r3, [r7, #22]
 8003af6:	8afa      	ldrh	r2, [r7, #22]
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d3f0      	bcc.n	8003ae0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003afe:	e017      	b.n	8003b30 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	0c1b      	lsrs	r3, r3, #16
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1a:	f107 0210 	add.w	r2, r7, #16
 8003b1e:	2103      	movs	r1, #3
 8003b20:	4610      	mov	r0, r2
 8003b22:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003b24:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	68b8      	ldr	r0, [r7, #8]
 8003b2e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003b30:	4b04      	ldr	r3, [pc, #16]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003b36:	4b03      	ldr	r3, [pc, #12]	@ (8003b44 <WIZCHIP_READ_BUF+0xbc>)
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	4798      	blx	r3
}
 8003b3c:	bf00      	nop
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd90      	pop	{r4, r7, pc}
 8003b44:	2000002c 	.word	0x2000002c

08003b48 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003b56:	4b2b      	ldr	r3, [pc, #172]	@ (8003c04 <WIZCHIP_WRITE_BUF+0xbc>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003b5c:	4b29      	ldr	r3, [pc, #164]	@ (8003c04 <WIZCHIP_WRITE_BUF+0xbc>)
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f043 0304 	orr.w	r3, r3, #4
 8003b68:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003b6a:	4b26      	ldr	r3, [pc, #152]	@ (8003c04 <WIZCHIP_WRITE_BUF+0xbc>)
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d126      	bne.n	8003bc0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003b72:	4b24      	ldr	r3, [pc, #144]	@ (8003c04 <WIZCHIP_WRITE_BUF+0xbc>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	0c12      	lsrs	r2, r2, #16
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003b80:	4b20      	ldr	r3, [pc, #128]	@ (8003c04 <WIZCHIP_WRITE_BUF+0xbc>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	0a12      	lsrs	r2, r2, #8
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c04 <WIZCHIP_WRITE_BUF+0xbc>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	4610      	mov	r0, r2
 8003b98:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	82fb      	strh	r3, [r7, #22]
 8003b9e:	e00a      	b.n	8003bb6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003ba0:	4b18      	ldr	r3, [pc, #96]	@ (8003c04 <WIZCHIP_WRITE_BUF+0xbc>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	8afa      	ldrh	r2, [r7, #22]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	440a      	add	r2, r1
 8003baa:	7812      	ldrb	r2, [r2, #0]
 8003bac:	4610      	mov	r0, r2
 8003bae:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003bb0:	8afb      	ldrh	r3, [r7, #22]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	82fb      	strh	r3, [r7, #22]
 8003bb6:	8afa      	ldrh	r2, [r7, #22]
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d3f0      	bcc.n	8003ba0 <WIZCHIP_WRITE_BUF+0x58>
 8003bbe:	e017      	b.n	8003bf0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <WIZCHIP_WRITE_BUF+0xbc>)
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	f107 0210 	add.w	r2, r7, #16
 8003bde:	2103      	movs	r1, #3
 8003be0:	4610      	mov	r0, r2
 8003be2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003be4:	4b07      	ldr	r3, [pc, #28]	@ (8003c04 <WIZCHIP_WRITE_BUF+0xbc>)
 8003be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	4611      	mov	r1, r2
 8003bec:	68b8      	ldr	r0, [r7, #8]
 8003bee:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003bf0:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <WIZCHIP_WRITE_BUF+0xbc>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003bf6:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <WIZCHIP_WRITE_BUF+0xbc>)
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	4798      	blx	r3
}
 8003bfc:	bf00      	nop
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	2000002c 	.word	0x2000002c

08003c08 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	81fb      	strh	r3, [r7, #14]
 8003c16:	2300      	movs	r3, #0
 8003c18:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	3301      	adds	r3, #1
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fe94 	bl	8003954 <WIZCHIP_READ>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003c30:	89bb      	ldrh	r3, [r7, #12]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	b29c      	uxth	r4, r3
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fe86 	bl	8003954 <WIZCHIP_READ>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4423      	add	r3, r4
 8003c4c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003c4e:	89bb      	ldrh	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d019      	beq.n	8003c88 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	3301      	adds	r3, #1
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fe77 	bl	8003954 <WIZCHIP_READ>
 8003c66:	4603      	mov	r3, r0
 8003c68:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003c6a:	89fb      	ldrh	r3, [r7, #14]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	b29c      	uxth	r4, r3
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	3301      	adds	r3, #1
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fe69 	bl	8003954 <WIZCHIP_READ>
 8003c82:	4603      	mov	r3, r0
 8003c84:	4423      	add	r3, r4
 8003c86:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003c88:	89fa      	ldrh	r2, [r7, #14]
 8003c8a:	89bb      	ldrh	r3, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d1c4      	bne.n	8003c1a <getSn_TX_FSR+0x12>
   return val;
 8003c90:	89fb      	ldrh	r3, [r7, #14]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd90      	pop	{r4, r7, pc}

08003c9a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003c9a:	b590      	push	{r4, r7, lr}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	81fb      	strh	r3, [r7, #14]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fe4b 	bl	8003954 <WIZCHIP_READ>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003cc2:	89bb      	ldrh	r3, [r7, #12]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	b29c      	uxth	r4, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	3301      	adds	r3, #1
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fe3d 	bl	8003954 <WIZCHIP_READ>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4423      	add	r3, r4
 8003cde:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003ce0:	89bb      	ldrh	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d019      	beq.n	8003d1a <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	3301      	adds	r3, #1
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fe2e 	bl	8003954 <WIZCHIP_READ>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003cfc:	89fb      	ldrh	r3, [r7, #14]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	b29c      	uxth	r4, r3
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	3301      	adds	r3, #1
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fe20 	bl	8003954 <WIZCHIP_READ>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4423      	add	r3, r4
 8003d18:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003d1a:	89fa      	ldrh	r2, [r7, #14]
 8003d1c:	89bb      	ldrh	r3, [r7, #12]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d1c4      	bne.n	8003cac <getSn_RX_RSR+0x12>
   return val;
 8003d22:	89fb      	ldrh	r3, [r7, #14]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd90      	pop	{r4, r7, pc}

08003d2c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003d2c:	b590      	push	{r4, r7, lr}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	71fb      	strb	r3, [r7, #7]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003d44:	88bb      	ldrh	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d046      	beq.n	8003dd8 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	3301      	adds	r3, #1
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fdfc 	bl	8003954 <WIZCHIP_READ>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	b29c      	uxth	r4, r3
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	3301      	adds	r3, #1
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fdf0 	bl	8003954 <WIZCHIP_READ>
 8003d74:	4603      	mov	r3, r0
 8003d76:	4423      	add	r3, r4
 8003d78:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003d7a:	89fb      	ldrh	r3, [r7, #14]
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	79fa      	ldrb	r2, [r7, #7]
 8003d80:	0092      	lsls	r2, r2, #2
 8003d82:	3202      	adds	r2, #2
 8003d84:	00d2      	lsls	r2, r2, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003d8a:	88bb      	ldrh	r3, [r7, #4]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	6839      	ldr	r1, [r7, #0]
 8003d90:	68b8      	ldr	r0, [r7, #8]
 8003d92:	f7ff fed9 	bl	8003b48 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003d96:	89fa      	ldrh	r2, [r7, #14]
 8003d98:	88bb      	ldrh	r3, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	3301      	adds	r3, #1
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003daa:	461a      	mov	r2, r3
 8003dac:	89fb      	ldrh	r3, [r7, #14]
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f7ff fe18 	bl	80039ec <WIZCHIP_WRITE>
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003dc8:	461a      	mov	r2, r3
 8003dca:	89fb      	ldrh	r3, [r7, #14]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	f7ff fe0b 	bl	80039ec <WIZCHIP_WRITE>
 8003dd6:	e000      	b.n	8003dda <wiz_send_data+0xae>
   if(len == 0)  return;
 8003dd8:	bf00      	nop
}
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd90      	pop	{r4, r7, pc}

08003de0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	6039      	str	r1, [r7, #0]
 8003dea:	71fb      	strb	r3, [r7, #7]
 8003dec:	4613      	mov	r3, r2
 8003dee:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003df8:	88bb      	ldrh	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d046      	beq.n	8003e8c <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	3301      	adds	r3, #1
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fda2 	bl	8003954 <WIZCHIP_READ>
 8003e10:	4603      	mov	r3, r0
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	b29c      	uxth	r4, r3
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fd96 	bl	8003954 <WIZCHIP_READ>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4423      	add	r3, r4
 8003e2c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003e2e:	89fb      	ldrh	r3, [r7, #14]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	79fa      	ldrb	r2, [r7, #7]
 8003e34:	0092      	lsls	r2, r2, #2
 8003e36:	3203      	adds	r2, #3
 8003e38:	00d2      	lsls	r2, r2, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003e3e:	88bb      	ldrh	r3, [r7, #4]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6839      	ldr	r1, [r7, #0]
 8003e44:	68b8      	ldr	r0, [r7, #8]
 8003e46:	f7ff fe1f 	bl	8003a88 <WIZCHIP_READ_BUF>
   ptr += len;
 8003e4a:	89fa      	ldrh	r2, [r7, #14]
 8003e4c:	88bb      	ldrh	r3, [r7, #4]
 8003e4e:	4413      	add	r3, r2
 8003e50:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	3301      	adds	r3, #1
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003e5e:	461a      	mov	r2, r3
 8003e60:	89fb      	ldrh	r3, [r7, #14]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f7ff fdbe 	bl	80039ec <WIZCHIP_WRITE>
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	3301      	adds	r3, #1
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	89fb      	ldrh	r3, [r7, #14]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7ff fdb1 	bl	80039ec <WIZCHIP_WRITE>
 8003e8a:	e000      	b.n	8003e8e <wiz_recv_data+0xae>
   if(len == 0) return;
 8003e8c:	bf00      	nop
}
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd90      	pop	{r4, r7, pc}

08003e94 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	71fb      	strb	r3, [r7, #7]
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71bb      	strb	r3, [r7, #6]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	80bb      	strh	r3, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d902      	bls.n	8003ebe <socket+0x2a>
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ebc:	e0f0      	b.n	80040a0 <socket+0x20c>
	switch(protocol)
 8003ebe:	79bb      	ldrb	r3, [r7, #6]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d005      	beq.n	8003ed0 <socket+0x3c>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	dd11      	ble.n	8003eec <socket+0x58>
 8003ec8:	3b02      	subs	r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d80e      	bhi.n	8003eec <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003ece:	e011      	b.n	8003ef4 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8003ed0:	f107 030c 	add.w	r3, r7, #12
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003edc:	f7ff fdd4 	bl	8003a88 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d105      	bne.n	8003ef2 <socket+0x5e>
 8003ee6:	f06f 0302 	mvn.w	r3, #2
 8003eea:	e0d9      	b.n	80040a0 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003eec:	f06f 0304 	mvn.w	r3, #4
 8003ef0:	e0d6      	b.n	80040a0 <socket+0x20c>
	    break;
 8003ef2:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <socket+0x70>
 8003efe:	f06f 0305 	mvn.w	r3, #5
 8003f02:	e0cd      	b.n	80040a0 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d028      	beq.n	8003f5c <socket+0xc8>
	{
   	switch(protocol)
 8003f0a:	79bb      	ldrb	r3, [r7, #6]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d002      	beq.n	8003f16 <socket+0x82>
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d008      	beq.n	8003f26 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003f14:	e022      	b.n	8003f5c <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d11a      	bne.n	8003f56 <socket+0xc2>
 8003f20:	f06f 0305 	mvn.w	r3, #5
 8003f24:	e0bc      	b.n	80040a0 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d006      	beq.n	8003f3e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db02      	blt.n	8003f3e <socket+0xaa>
 8003f38:	f06f 0305 	mvn.w	r3, #5
 8003f3c:	e0b0      	b.n	80040a0 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	db04      	blt.n	8003f5a <socket+0xc6>
 8003f50:	f06f 0305 	mvn.w	r3, #5
 8003f54:	e0a4      	b.n	80040a0 <socket+0x20c>
   	      break;
 8003f56:	bf00      	nop
 8003f58:	e000      	b.n	8003f5c <socket+0xc8>
   	      break;
 8003f5a:	bf00      	nop
   	}
   }
	close(sn);
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f8ac 	bl	80040bc <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	3301      	adds	r3, #1
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f72:	f023 030f 	bic.w	r3, r3, #15
 8003f76:	b25a      	sxtb	r2, r3
 8003f78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	4619      	mov	r1, r3
 8003f84:	f7ff fd32 	bl	80039ec <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003f88:	88bb      	ldrh	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d110      	bne.n	8003fb0 <socket+0x11c>
	{
	   port = sock_any_port++;
 8003f8e:	4b46      	ldr	r3, [pc, #280]	@ (80040a8 <socket+0x214>)
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	b291      	uxth	r1, r2
 8003f96:	4a44      	ldr	r2, [pc, #272]	@ (80040a8 <socket+0x214>)
 8003f98:	8011      	strh	r1, [r2, #0]
 8003f9a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003f9c:	4b42      	ldr	r3, [pc, #264]	@ (80040a8 <socket+0x214>)
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d103      	bne.n	8003fb0 <socket+0x11c>
 8003fa8:	4b3f      	ldr	r3, [pc, #252]	@ (80040a8 <socket+0x214>)
 8003faa:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8003fae:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	88bb      	ldrh	r3, [r7, #4]
 8003fc0:	0a1b      	lsrs	r3, r3, #8
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f7ff fd0f 	bl	80039ec <WIZCHIP_WRITE>
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fda:	461a      	mov	r2, r3
 8003fdc:	88bb      	ldrh	r3, [r7, #4]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f7ff fd02 	bl	80039ec <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	3301      	adds	r3, #1
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fcf8 	bl	80039ec <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003ffc:	bf00      	nop
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	3301      	adds	r3, #1
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fca2 	bl	8003954 <WIZCHIP_READ>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f3      	bne.n	8003ffe <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	2201      	movs	r2, #1
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	b21b      	sxth	r3, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	b21a      	sxth	r2, r3
 8004024:	4b21      	ldr	r3, [pc, #132]	@ (80040ac <socket+0x218>)
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	b21b      	sxth	r3, r3
 800402a:	4013      	ands	r3, r2
 800402c:	b21b      	sxth	r3, r3
 800402e:	b29a      	uxth	r2, r3
 8004030:	4b1e      	ldr	r3, [pc, #120]	@ (80040ac <socket+0x218>)
 8004032:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	f003 0201 	and.w	r2, r3, #1
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	b21a      	sxth	r2, r3
 8004042:	4b1a      	ldr	r3, [pc, #104]	@ (80040ac <socket+0x218>)
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b21b      	sxth	r3, r3
 8004048:	4313      	orrs	r3, r2
 800404a:	b21b      	sxth	r3, r3
 800404c:	b29a      	uxth	r2, r3
 800404e:	4b17      	ldr	r3, [pc, #92]	@ (80040ac <socket+0x218>)
 8004050:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	2201      	movs	r2, #1
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	b21b      	sxth	r3, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	b21a      	sxth	r2, r3
 8004060:	4b13      	ldr	r3, [pc, #76]	@ (80040b0 <socket+0x21c>)
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b21b      	sxth	r3, r3
 8004066:	4013      	ands	r3, r2
 8004068:	b21b      	sxth	r3, r3
 800406a:	b29a      	uxth	r2, r3
 800406c:	4b10      	ldr	r3, [pc, #64]	@ (80040b0 <socket+0x21c>)
 800406e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	4a10      	ldr	r2, [pc, #64]	@ (80040b4 <socket+0x220>)
 8004074:	2100      	movs	r1, #0
 8004076:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	4a0e      	ldr	r2, [pc, #56]	@ (80040b8 <socket+0x224>)
 800407e:	2100      	movs	r1, #0
 8004080:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004082:	bf00      	nop
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	3301      	adds	r3, #1
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fc5f 	bl	8003954 <WIZCHIP_READ>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f3      	beq.n	8004084 <socket+0x1f0>
   return (int8_t)sn;
 800409c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd90      	pop	{r4, r7, pc}
 80040a8:	20000028 	.word	0x20000028
 80040ac:	200005cc 	.word	0x200005cc
 80040b0:	200005ce 	.word	0x200005ce
 80040b4:	200005d0 	.word	0x200005d0
 80040b8:	200005e0 	.word	0x200005e0

080040bc <close>:

int8_t close(uint8_t sn)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d902      	bls.n	80040d2 <close+0x16>
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040d0:	e055      	b.n	800417e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	3301      	adds	r3, #1
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80040de:	2110      	movs	r1, #16
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fc83 	bl	80039ec <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80040e6:	bf00      	nop
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	3301      	adds	r3, #1
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fc2d 	bl	8003954 <WIZCHIP_READ>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f3      	bne.n	80040e8 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	3301      	adds	r3, #1
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800410c:	211f      	movs	r1, #31
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fc6c 	bl	80039ec <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	2201      	movs	r2, #1
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	b21b      	sxth	r3, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	b21a      	sxth	r2, r3
 8004122:	4b19      	ldr	r3, [pc, #100]	@ (8004188 <close+0xcc>)
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b21b      	sxth	r3, r3
 8004128:	4013      	ands	r3, r2
 800412a:	b21b      	sxth	r3, r3
 800412c:	b29a      	uxth	r2, r3
 800412e:	4b16      	ldr	r3, [pc, #88]	@ (8004188 <close+0xcc>)
 8004130:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	2201      	movs	r2, #1
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	b21b      	sxth	r3, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	b21a      	sxth	r2, r3
 8004140:	4b12      	ldr	r3, [pc, #72]	@ (800418c <close+0xd0>)
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b21b      	sxth	r3, r3
 8004146:	4013      	ands	r3, r2
 8004148:	b21b      	sxth	r3, r3
 800414a:	b29a      	uxth	r2, r3
 800414c:	4b0f      	ldr	r3, [pc, #60]	@ (800418c <close+0xd0>)
 800414e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	4a0f      	ldr	r2, [pc, #60]	@ (8004190 <close+0xd4>)
 8004154:	2100      	movs	r1, #0
 8004156:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	4a0d      	ldr	r2, [pc, #52]	@ (8004194 <close+0xd8>)
 800415e:	2100      	movs	r1, #0
 8004160:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004162:	bf00      	nop
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	3301      	adds	r3, #1
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fbef 	bl	8003954 <WIZCHIP_READ>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f3      	bne.n	8004164 <close+0xa8>
	return SOCK_OK;
 800417c:	2301      	movs	r3, #1
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200005cc 	.word	0x200005cc
 800418c:	200005ce 	.word	0x200005ce
 8004190:	200005d0 	.word	0x200005d0
 8004194:	200005e0 	.word	0x200005e0

08004198 <listen>:

int8_t listen(uint8_t sn)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d902      	bls.n	80041ae <listen+0x16>
 80041a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041ac:	e049      	b.n	8004242 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	3301      	adds	r3, #1
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fbcc 	bl	8003954 <WIZCHIP_READ>
 80041bc:	4603      	mov	r3, r0
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d002      	beq.n	80041cc <listen+0x34>
 80041c6:	f06f 0304 	mvn.w	r3, #4
 80041ca:	e03a      	b.n	8004242 <listen+0xaa>
	CHECK_SOCKINIT();
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	3301      	adds	r3, #1
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fbbb 	bl	8003954 <WIZCHIP_READ>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b13      	cmp	r3, #19
 80041e2:	d002      	beq.n	80041ea <listen+0x52>
 80041e4:	f06f 0302 	mvn.w	r3, #2
 80041e8:	e02b      	b.n	8004242 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	3301      	adds	r3, #1
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80041f6:	2102      	movs	r1, #2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fbf7 	bl	80039ec <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80041fe:	bf00      	nop
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	3301      	adds	r3, #1
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fba1 	bl	8003954 <WIZCHIP_READ>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f3      	bne.n	8004200 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004218:	e006      	b.n	8004228 <listen+0x90>
   {
         close(sn);
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff4d 	bl	80040bc <close>
         return SOCKERR_SOCKCLOSED;
 8004222:	f06f 0303 	mvn.w	r3, #3
 8004226:	e00c      	b.n	8004242 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	3301      	adds	r3, #1
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fb8d 	bl	8003954 <WIZCHIP_READ>
 800423a:	4603      	mov	r3, r0
 800423c:	2b14      	cmp	r3, #20
 800423e:	d1ec      	bne.n	800421a <listen+0x82>
   }
   return SOCK_OK;
 8004240:	2301      	movs	r3, #1
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d902      	bls.n	8004262 <disconnect+0x16>
 800425c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004260:	e062      	b.n	8004328 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	3301      	adds	r3, #1
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fb72 	bl	8003954 <WIZCHIP_READ>
 8004270:	4603      	mov	r3, r0
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	2b01      	cmp	r3, #1
 8004278:	d002      	beq.n	8004280 <disconnect+0x34>
 800427a:	f06f 0304 	mvn.w	r3, #4
 800427e:	e053      	b.n	8004328 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	3301      	adds	r3, #1
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800428c:	2108      	movs	r1, #8
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fbac 	bl	80039ec <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004294:	bf00      	nop
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	3301      	adds	r3, #1
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fb56 	bl	8003954 <WIZCHIP_READ>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f3      	bne.n	8004296 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	2201      	movs	r2, #1
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	b21b      	sxth	r3, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	b21a      	sxth	r2, r3
 80042bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004330 <disconnect+0xe4>)
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b21b      	sxth	r3, r3
 80042c2:	4013      	ands	r3, r2
 80042c4:	b21b      	sxth	r3, r3
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <disconnect+0xe4>)
 80042ca:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80042cc:	4b19      	ldr	r3, [pc, #100]	@ (8004334 <disconnect+0xe8>)
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	fa42 f303 	asr.w	r3, r2, r3
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d016      	beq.n	800430e <disconnect+0xc2>
 80042e0:	2300      	movs	r3, #0
 80042e2:	e021      	b.n	8004328 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	3301      	adds	r3, #1
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fb2f 	bl	8003954 <WIZCHIP_READ>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d006      	beq.n	800430e <disconnect+0xc2>
	   {
	      close(sn);
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff feda 	bl	80040bc <close>
	      return SOCKERR_TIMEOUT;
 8004308:	f06f 030c 	mvn.w	r3, #12
 800430c:	e00c      	b.n	8004328 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	3301      	adds	r3, #1
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fb1a 	bl	8003954 <WIZCHIP_READ>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1de      	bne.n	80042e4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8004326:	2301      	movs	r3, #1
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	200005ce 	.word	0x200005ce
 8004334:	200005cc 	.word	0x200005cc

08004338 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	6039      	str	r1, [r7, #0]
 8004342:	71fb      	strb	r3, [r7, #7]
 8004344:	4613      	mov	r3, r2
 8004346:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800434c:	2300      	movs	r3, #0
 800434e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	2b08      	cmp	r3, #8
 8004354:	d902      	bls.n	800435c <send+0x24>
 8004356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800435a:	e0dd      	b.n	8004518 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	3301      	adds	r3, #1
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff faf5 	bl	8003954 <WIZCHIP_READ>
 800436a:	4603      	mov	r3, r0
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	2b01      	cmp	r3, #1
 8004372:	d002      	beq.n	800437a <send+0x42>
 8004374:	f06f 0304 	mvn.w	r3, #4
 8004378:	e0ce      	b.n	8004518 <send+0x1e0>
   CHECK_SOCKDATA();
 800437a:	88bb      	ldrh	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <send+0x4e>
 8004380:	f06f 030d 	mvn.w	r3, #13
 8004384:	e0c8      	b.n	8004518 <send+0x1e0>
   tmp = getSn_SR(sn);
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	3301      	adds	r3, #1
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fade 	bl	8003954 <WIZCHIP_READ>
 8004398:	4603      	mov	r3, r0
 800439a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b17      	cmp	r3, #23
 80043a0:	d005      	beq.n	80043ae <send+0x76>
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	2b1c      	cmp	r3, #28
 80043a6:	d002      	beq.n	80043ae <send+0x76>
 80043a8:	f06f 0306 	mvn.w	r3, #6
 80043ac:	e0b4      	b.n	8004518 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 80043ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004520 <send+0x1e8>)
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	fa42 f303 	asr.w	r3, r2, r3
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d039      	beq.n	8004436 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	3301      	adds	r3, #1
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fac0 	bl	8003954 <WIZCHIP_READ>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d019      	beq.n	800441a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	3301      	adds	r3, #1
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80043f2:	2110      	movs	r1, #16
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff faf9 	bl	80039ec <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	2201      	movs	r2, #1
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	b21b      	sxth	r3, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	b21a      	sxth	r2, r3
 8004408:	4b45      	ldr	r3, [pc, #276]	@ (8004520 <send+0x1e8>)
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b21b      	sxth	r3, r3
 800440e:	4013      	ands	r3, r2
 8004410:	b21b      	sxth	r3, r3
 8004412:	b29a      	uxth	r2, r3
 8004414:	4b42      	ldr	r3, [pc, #264]	@ (8004520 <send+0x1e8>)
 8004416:	801a      	strh	r2, [r3, #0]
 8004418:	e00d      	b.n	8004436 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d006      	beq.n	8004432 <send+0xfa>
      {
         close(sn);
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fe48 	bl	80040bc <close>
         return SOCKERR_TIMEOUT;
 800442c:	f06f 030c 	mvn.w	r3, #12
 8004430:	e072      	b.n	8004518 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8004432:	2300      	movs	r3, #0
 8004434:	e070      	b.n	8004518 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	3301      	adds	r3, #1
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fa86 	bl	8003954 <WIZCHIP_READ>
 8004448:	4603      	mov	r3, r0
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800444e:	88ba      	ldrh	r2, [r7, #4]
 8004450:	89bb      	ldrh	r3, [r7, #12]
 8004452:	429a      	cmp	r2, r3
 8004454:	d901      	bls.n	800445a <send+0x122>
 8004456:	89bb      	ldrh	r3, [r7, #12]
 8004458:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fbd3 	bl	8003c08 <getSn_TX_FSR>
 8004462:	4603      	mov	r3, r0
 8004464:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	3301      	adds	r3, #1
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fa6e 	bl	8003954 <WIZCHIP_READ>
 8004478:	4603      	mov	r3, r0
 800447a:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b17      	cmp	r3, #23
 8004480:	d009      	beq.n	8004496 <send+0x15e>
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	2b1c      	cmp	r3, #28
 8004486:	d006      	beq.n	8004496 <send+0x15e>
      {
         close(sn);
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fe16 	bl	80040bc <close>
         return SOCKERR_SOCKSTATUS;
 8004490:	f06f 0306 	mvn.w	r3, #6
 8004494:	e040      	b.n	8004518 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004496:	4b23      	ldr	r3, [pc, #140]	@ (8004524 <send+0x1ec>)
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	fa42 f303 	asr.w	r3, r2, r3
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <send+0x17e>
 80044aa:	88ba      	ldrh	r2, [r7, #4]
 80044ac:	89bb      	ldrh	r3, [r7, #12]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d901      	bls.n	80044b6 <send+0x17e>
 80044b2:	2300      	movs	r3, #0
 80044b4:	e030      	b.n	8004518 <send+0x1e0>
      if(len <= freesize) break;
 80044b6:	88ba      	ldrh	r2, [r7, #4]
 80044b8:	89bb      	ldrh	r3, [r7, #12]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d900      	bls.n	80044c0 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 80044be:	e7cc      	b.n	800445a <send+0x122>
      if(len <= freesize) break;
 80044c0:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80044c2:	88ba      	ldrh	r2, [r7, #4]
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	6839      	ldr	r1, [r7, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fc2f 	bl	8003d2c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	3301      	adds	r3, #1
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80044da:	2120      	movs	r1, #32
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fa85 	bl	80039ec <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80044e2:	bf00      	nop
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	3301      	adds	r3, #1
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fa2f 	bl	8003954 <WIZCHIP_READ>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f3      	bne.n	80044e4 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	b21a      	sxth	r2, r3
 8004506:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <send+0x1e8>)
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b21b      	sxth	r3, r3
 800450c:	4313      	orrs	r3, r2
 800450e:	b21b      	sxth	r3, r3
 8004510:	b29a      	uxth	r2, r3
 8004512:	4b03      	ldr	r3, [pc, #12]	@ (8004520 <send+0x1e8>)
 8004514:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004516:	88bb      	ldrh	r3, [r7, #4]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	200005ce 	.word	0x200005ce
 8004524:	200005cc 	.word	0x200005cc

08004528 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004528:	b590      	push	{r4, r7, lr}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	71fb      	strb	r3, [r7, #7]
 8004534:	4613      	mov	r3, r2
 8004536:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	2b08      	cmp	r3, #8
 8004544:	d902      	bls.n	800454c <recv+0x24>
 8004546:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800454a:	e09b      	b.n	8004684 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800454c:	79fb      	ldrb	r3, [r7, #7]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	3301      	adds	r3, #1
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff f9fd 	bl	8003954 <WIZCHIP_READ>
 800455a:	4603      	mov	r3, r0
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	2b01      	cmp	r3, #1
 8004562:	d002      	beq.n	800456a <recv+0x42>
 8004564:	f06f 0304 	mvn.w	r3, #4
 8004568:	e08c      	b.n	8004684 <recv+0x15c>
   CHECK_SOCKDATA();
 800456a:	88bb      	ldrh	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d102      	bne.n	8004576 <recv+0x4e>
 8004570:	f06f 030d 	mvn.w	r3, #13
 8004574:	e086      	b.n	8004684 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	3301      	adds	r3, #1
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f9e6 	bl	8003954 <WIZCHIP_READ>
 8004588:	4603      	mov	r3, r0
 800458a:	029b      	lsls	r3, r3, #10
 800458c:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800458e:	89ba      	ldrh	r2, [r7, #12]
 8004590:	88bb      	ldrh	r3, [r7, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d201      	bcs.n	800459a <recv+0x72>
 8004596:	89bb      	ldrh	r3, [r7, #12]
 8004598:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fb7c 	bl	8003c9a <getSn_RX_RSR>
 80045a2:	4603      	mov	r3, r0
 80045a4:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	3301      	adds	r3, #1
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff f9ce 	bl	8003954 <WIZCHIP_READ>
 80045b8:	4603      	mov	r3, r0
 80045ba:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b17      	cmp	r3, #23
 80045c0:	d026      	beq.n	8004610 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b1c      	cmp	r3, #28
 80045c6:	d11c      	bne.n	8004602 <recv+0xda>
            {
               if(recvsize != 0) break;
 80045c8:	89bb      	ldrh	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d133      	bne.n	8004636 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fb19 	bl	8003c08 <getSn_TX_FSR>
 80045d6:	4603      	mov	r3, r0
 80045d8:	461c      	mov	r4, r3
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	3301      	adds	r3, #1
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff f9b4 	bl	8003954 <WIZCHIP_READ>
 80045ec:	4603      	mov	r3, r0
 80045ee:	029b      	lsls	r3, r3, #10
 80045f0:	429c      	cmp	r4, r3
 80045f2:	d10d      	bne.n	8004610 <recv+0xe8>
               {
                  close(sn);
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fd60 	bl	80040bc <close>
                  return SOCKERR_SOCKSTATUS;
 80045fc:	f06f 0306 	mvn.w	r3, #6
 8004600:	e040      	b.n	8004684 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fd59 	bl	80040bc <close>
               return SOCKERR_SOCKSTATUS;
 800460a:	f06f 0306 	mvn.w	r3, #6
 800460e:	e039      	b.n	8004684 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004610:	4b1e      	ldr	r3, [pc, #120]	@ (800468c <recv+0x164>)
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	fa42 f303 	asr.w	r3, r2, r3
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <recv+0x106>
 8004624:	89bb      	ldrh	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <recv+0x106>
 800462a:	2300      	movs	r3, #0
 800462c:	e02a      	b.n	8004684 <recv+0x15c>
         if(recvsize != 0) break;
 800462e:	89bb      	ldrh	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d102      	bne.n	800463a <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8004634:	e7b1      	b.n	800459a <recv+0x72>
               if(recvsize != 0) break;
 8004636:	bf00      	nop
 8004638:	e000      	b.n	800463c <recv+0x114>
         if(recvsize != 0) break;
 800463a:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800463c:	89ba      	ldrh	r2, [r7, #12]
 800463e:	88bb      	ldrh	r3, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d201      	bcs.n	8004648 <recv+0x120>
 8004644:	89bb      	ldrh	r3, [r7, #12]
 8004646:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8004648:	88ba      	ldrh	r2, [r7, #4]
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	6839      	ldr	r1, [r7, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fbc6 	bl	8003de0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	3301      	adds	r3, #1
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004660:	2140      	movs	r1, #64	@ 0x40
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff f9c2 	bl	80039ec <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004668:	bf00      	nop
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	3301      	adds	r3, #1
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff f96c 	bl	8003954 <WIZCHIP_READ>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f3      	bne.n	800466a <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004682:	88bb      	ldrh	r3, [r7, #4]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	bd90      	pop	{r4, r7, pc}
 800468c:	200005cc 	.word	0x200005cc

08004690 <ctlsocket>:
   return (int32_t)pack_len;
}


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	603a      	str	r2, [r7, #0]
 800469a:	71fb      	strb	r3, [r7, #7]
 800469c:	460b      	mov	r3, r1
 800469e:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d902      	bls.n	80046b0 <ctlsocket+0x20>
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046ae:	e0c0      	b.n	8004832 <ctlsocket+0x1a2>
   switch(cstype)
 80046b0:	79bb      	ldrb	r3, [r7, #6]
 80046b2:	2b07      	cmp	r3, #7
 80046b4:	f200 80b9 	bhi.w	800482a <ctlsocket+0x19a>
 80046b8:	a201      	add	r2, pc, #4	@ (adr r2, 80046c0 <ctlsocket+0x30>)
 80046ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046be:	bf00      	nop
 80046c0:	080046e1 	.word	0x080046e1
 80046c4:	08004735 	.word	0x08004735
 80046c8:	0800474f 	.word	0x0800474f
 80046cc:	0800476d 	.word	0x0800476d
 80046d0:	0800478b 	.word	0x0800478b
 80046d4:	080047bb 	.word	0x080047bb
 80046d8:	080047db 	.word	0x080047db
 80046dc:	0800480b 	.word	0x0800480b
   {
      case CS_SET_IOMODE:
         tmp = *((uint8_t*)arg);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	73fb      	strb	r3, [r7, #15]
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d10d      	bne.n	8004708 <ctlsocket+0x78>
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	2201      	movs	r2, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	b21a      	sxth	r2, r3
 80046f6:	4b51      	ldr	r3, [pc, #324]	@ (800483c <ctlsocket+0x1ac>)
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b21b      	sxth	r3, r3
 80046fc:	4313      	orrs	r3, r2
 80046fe:	b21b      	sxth	r3, r3
 8004700:	b29a      	uxth	r2, r3
 8004702:	4b4e      	ldr	r3, [pc, #312]	@ (800483c <ctlsocket+0x1ac>)
 8004704:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8004706:	e093      	b.n	8004830 <ctlsocket+0x1a0>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <ctlsocket+0x9e>
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	2201      	movs	r2, #1
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	b21b      	sxth	r3, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	b21a      	sxth	r2, r3
 800471c:	4b47      	ldr	r3, [pc, #284]	@ (800483c <ctlsocket+0x1ac>)
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b21b      	sxth	r3, r3
 8004722:	4013      	ands	r3, r2
 8004724:	b21b      	sxth	r3, r3
 8004726:	b29a      	uxth	r2, r3
 8004728:	4b44      	ldr	r3, [pc, #272]	@ (800483c <ctlsocket+0x1ac>)
 800472a:	801a      	strh	r2, [r3, #0]
         break;
 800472c:	e080      	b.n	8004830 <ctlsocket+0x1a0>
         else return SOCKERR_ARG;
 800472e:	f06f 0309 	mvn.w	r3, #9
 8004732:	e07e      	b.n	8004832 <ctlsocket+0x1a2>
      case CS_GET_IOMODE:   
         //M20140501 : implict type casting -> explict type casting
         //*((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 8004734:	4b41      	ldr	r3, [pc, #260]	@ (800483c <ctlsocket+0x1ac>)
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	fa42 f303 	asr.w	r3, r2, r3
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	b2da      	uxtb	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	701a      	strb	r2, [r3, #0]
         //
         break;
 800474c:	e070      	b.n	8004830 <ctlsocket+0x1a0>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	3301      	adds	r3, #1
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff f8fa 	bl	8003954 <WIZCHIP_READ>
 8004760:	4603      	mov	r3, r0
 8004762:	029b      	lsls	r3, r3, #10
 8004764:	b29a      	uxth	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	801a      	strh	r2, [r3, #0]
         break;
 800476a:	e061      	b.n	8004830 <ctlsocket+0x1a0>
      case CS_GET_MAXRXBUF:    
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	3301      	adds	r3, #1
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff f8eb 	bl	8003954 <WIZCHIP_READ>
 800477e:	4603      	mov	r3, r0
 8004780:	029b      	lsls	r3, r3, #10
 8004782:	b29a      	uxth	r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	801a      	strh	r2, [r3, #0]
         break;
 8004788:	e052      	b.n	8004830 <ctlsocket+0x1a0>
      case CS_CLR_INTERRUPT:
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b1f      	cmp	r3, #31
 8004790:	d902      	bls.n	8004798 <ctlsocket+0x108>
 8004792:	f06f 0309 	mvn.w	r3, #9
 8004796:	e04c      	b.n	8004832 <ctlsocket+0x1a2>
         setSn_IR(sn,*(uint8_t*)arg);
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	3301      	adds	r3, #1
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80047a4:	461a      	mov	r2, r3
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f7ff f91a 	bl	80039ec <WIZCHIP_WRITE>
         break;
 80047b8:	e03a      	b.n	8004830 <ctlsocket+0x1a0>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	3301      	adds	r3, #1
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff f8c4 	bl	8003954 <WIZCHIP_READ>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	701a      	strb	r2, [r3, #0]
         break;
 80047d8:	e02a      	b.n	8004830 <ctlsocket+0x1a0>
   #if _WIZCHIP_ != 5100
      case CS_SET_INTMASK:  
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b1f      	cmp	r3, #31
 80047e0:	d902      	bls.n	80047e8 <ctlsocket+0x158>
 80047e2:	f06f 0309 	mvn.w	r3, #9
 80047e6:	e024      	b.n	8004832 <ctlsocket+0x1a2>
         setSn_IMR(sn,*(uint8_t*)arg);
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	3301      	adds	r3, #1
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 80047f4:	461a      	mov	r2, r3
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f7ff f8f2 	bl	80039ec <WIZCHIP_WRITE>
         break;
 8004808:	e012      	b.n	8004830 <ctlsocket+0x1a0>
      case CS_GET_INTMASK:   
         *((uint8_t*)arg) = getSn_IMR(sn);
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	3301      	adds	r3, #1
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff f89c 	bl	8003954 <WIZCHIP_READ>
 800481c:	4603      	mov	r3, r0
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	b2da      	uxtb	r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	701a      	strb	r2, [r3, #0]
         break;
 8004828:	e002      	b.n	8004830 <ctlsocket+0x1a0>
   #endif
      default:
         return SOCKERR_ARG;
 800482a:	f06f 0309 	mvn.w	r3, #9
 800482e:	e000      	b.n	8004832 <ctlsocket+0x1a2>
   }
   return SOCK_OK;
 8004830:	2301      	movs	r3, #1
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	200005cc 	.word	0x200005cc

08004840 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
 8004844:	bf00      	nop
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800484e:	b480      	push	{r7}
 8004850:	af00      	add	r7, sp, #0
 8004852:	bf00      	nop
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
 8004860:	bf00      	nop
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	70fb      	strb	r3, [r7, #3]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	2300      	movs	r3, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	71fb      	strb	r3, [r7, #7]
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
	...

080048d8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <reg_wizchip_cs_cbfunc+0x16>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80048ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <reg_wizchip_cs_cbfunc+0x40>)
 80048f0:	4a0a      	ldr	r2, [pc, #40]	@ (800491c <reg_wizchip_cs_cbfunc+0x44>)
 80048f2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80048f4:	4b08      	ldr	r3, [pc, #32]	@ (8004918 <reg_wizchip_cs_cbfunc+0x40>)
 80048f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004920 <reg_wizchip_cs_cbfunc+0x48>)
 80048f8:	619a      	str	r2, [r3, #24]
 80048fa:	e006      	b.n	800490a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80048fc:	4a06      	ldr	r2, [pc, #24]	@ (8004918 <reg_wizchip_cs_cbfunc+0x40>)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004902:	4a05      	ldr	r2, [pc, #20]	@ (8004918 <reg_wizchip_cs_cbfunc+0x40>)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6193      	str	r3, [r2, #24]
   }
}
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	2000002c 	.word	0x2000002c
 800491c:	0800485d 	.word	0x0800485d
 8004920:	0800486b 	.word	0x0800486b

08004924 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800492e:	bf00      	nop
 8004930:	4b0f      	ldr	r3, [pc, #60]	@ (8004970 <reg_wizchip_spi_cbfunc+0x4c>)
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f9      	beq.n	8004930 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <reg_wizchip_spi_cbfunc+0x24>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d106      	bne.n	8004956 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004948:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <reg_wizchip_spi_cbfunc+0x4c>)
 800494a:	4a0a      	ldr	r2, [pc, #40]	@ (8004974 <reg_wizchip_spi_cbfunc+0x50>)
 800494c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800494e:	4b08      	ldr	r3, [pc, #32]	@ (8004970 <reg_wizchip_spi_cbfunc+0x4c>)
 8004950:	4a09      	ldr	r2, [pc, #36]	@ (8004978 <reg_wizchip_spi_cbfunc+0x54>)
 8004952:	621a      	str	r2, [r3, #32]
 8004954:	e006      	b.n	8004964 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004956:	4a06      	ldr	r2, [pc, #24]	@ (8004970 <reg_wizchip_spi_cbfunc+0x4c>)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800495c:	4a04      	ldr	r2, [pc, #16]	@ (8004970 <reg_wizchip_spi_cbfunc+0x4c>)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6213      	str	r3, [r2, #32]
   }
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	2000002c 	.word	0x2000002c
 8004974:	080048b1 	.word	0x080048b1
 8004978:	080048c1 	.word	0x080048c1

0800497c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	6039      	str	r1, [r7, #0]
 8004986:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	2300      	movs	r3, #0
 8004992:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	f200 80c5 	bhi.w	8004b26 <ctlwizchip+0x1aa>
 800499c:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <ctlwizchip+0x28>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049e5 	.word	0x080049e5
 80049a8:	080049eb 	.word	0x080049eb
 80049ac:	08004a17 	.word	0x08004a17
 80049b0:	08004a0b 	.word	0x08004a0b
 80049b4:	08004a25 	.word	0x08004a25
 80049b8:	08004a31 	.word	0x08004a31
 80049bc:	08004a3f 	.word	0x08004a3f
 80049c0:	08004a65 	.word	0x08004a65
 80049c4:	08004a87 	.word	0x08004a87
 80049c8:	08004acb 	.word	0x08004acb
 80049cc:	08004ad1 	.word	0x08004ad1
 80049d0:	08004ad9 	.word	0x08004ad9
 80049d4:	08004b2d 	.word	0x08004b2d
 80049d8:	08004ae1 	.word	0x08004ae1
 80049dc:	08004aef 	.word	0x08004aef
 80049e0:	08004b0b 	.word	0x08004b0b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80049e4:	f000 f8e8 	bl	8004bb8 <wizchip_sw_reset>
         break;
 80049e8:	e0a1      	b.n	8004b2e <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3308      	adds	r3, #8
 80049f8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 f925 	bl	8004c50 <wizchip_init>
 8004a06:	4603      	mov	r3, r0
 8004a08:	e092      	b.n	8004b30 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 f9aa 	bl	8004d68 <wizchip_clrinterrupt>
         break;
 8004a14:	e08b      	b.n	8004b2e <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8004a16:	f000 f9db 	bl	8004dd0 <wizchip_getinterrupt>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	801a      	strh	r2, [r3, #0]
         break;
 8004a22:	e084      	b.n	8004b2e <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 f9f6 	bl	8004e1a <wizchip_setinterruptmask>
         break;         
 8004a2e:	e07e      	b.n	8004b2e <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004a30:	f000 fa0e 	bl	8004e50 <wizchip_getinterruptmask>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	801a      	strh	r2, [r3, #0]
         break;
 8004a3c:	e077      	b.n	8004b2e <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8004a4e:	f7fe ffcd 	bl	80039ec <WIZCHIP_WRITE>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8004a5e:	f7fe ffc5 	bl	80039ec <WIZCHIP_WRITE>
         break;
 8004a62:	e064      	b.n	8004b2e <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8004a64:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8004a68:	f7fe ff74 	bl	8003954 <WIZCHIP_READ>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	b29c      	uxth	r4, r3
 8004a72:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8004a76:	f7fe ff6d 	bl	8003954 <WIZCHIP_READ>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4423      	add	r3, r4
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	801a      	strh	r2, [r3, #0]
         break;
 8004a84:	e053      	b.n	8004b2e <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8004a86:	4b2c      	ldr	r3, [pc, #176]	@ (8004b38 <ctlwizchip+0x1bc>)
 8004a88:	789a      	ldrb	r2, [r3, #2]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	3301      	adds	r3, #1
 8004a92:	4a29      	ldr	r2, [pc, #164]	@ (8004b38 <ctlwizchip+0x1bc>)
 8004a94:	78d2      	ldrb	r2, [r2, #3]
 8004a96:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	4a26      	ldr	r2, [pc, #152]	@ (8004b38 <ctlwizchip+0x1bc>)
 8004a9e:	7912      	ldrb	r2, [r2, #4]
 8004aa0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	3303      	adds	r3, #3
 8004aa6:	4a24      	ldr	r2, [pc, #144]	@ (8004b38 <ctlwizchip+0x1bc>)
 8004aa8:	7952      	ldrb	r2, [r2, #5]
 8004aaa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	4a21      	ldr	r2, [pc, #132]	@ (8004b38 <ctlwizchip+0x1bc>)
 8004ab2:	7992      	ldrb	r2, [r2, #6]
 8004ab4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	3305      	adds	r3, #5
 8004aba:	4a1f      	ldr	r2, [pc, #124]	@ (8004b38 <ctlwizchip+0x1bc>)
 8004abc:	79d2      	ldrb	r2, [r2, #7]
 8004abe:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	3306      	adds	r3, #6
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
         break;
 8004ac8:	e031      	b.n	8004b2e <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8004aca:	f000 fa13 	bl	8004ef4 <wizphy_reset>
         break;
 8004ace:	e02e      	b.n	8004b2e <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8004ad0:	6838      	ldr	r0, [r7, #0]
 8004ad2:	f000 fa36 	bl	8004f42 <wizphy_setphyconf>
         break;
 8004ad6:	e02a      	b.n	8004b2e <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8004ad8:	6838      	ldr	r0, [r7, #0]
 8004ada:	f000 fa75 	bl	8004fc8 <wizphy_getphyconf>
         break;
 8004ade:	e026      	b.n	8004b2e <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fad9 	bl	800509c <wizphy_setphypmode>
 8004aea:	4603      	mov	r3, r0
 8004aec:	e020      	b.n	8004b30 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8004aee:	f000 f9e8 	bl	8004ec2 <wizphy_getphypmode>
 8004af2:	4603      	mov	r3, r0
 8004af4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	2bff      	cmp	r3, #255	@ 0xff
 8004afa:	d102      	bne.n	8004b02 <ctlwizchip+0x186>
 8004afc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b00:	e016      	b.n	8004b30 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	7dfa      	ldrb	r2, [r7, #23]
 8004b06:	701a      	strb	r2, [r3, #0]
         break;
 8004b08:	e011      	b.n	8004b2e <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8004b0a:	f000 f9c4 	bl	8004e96 <wizphy_getphylink>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	2bff      	cmp	r3, #255	@ 0xff
 8004b16:	d102      	bne.n	8004b1e <ctlwizchip+0x1a2>
 8004b18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b1c:	e008      	b.n	8004b30 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	7dfa      	ldrb	r2, [r7, #23]
 8004b22:	701a      	strb	r2, [r3, #0]
         break;
 8004b24:	e003      	b.n	8004b2e <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b2a:	e001      	b.n	8004b30 <ctlwizchip+0x1b4>
         break;
 8004b2c:	bf00      	nop
   }
   return 0;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd90      	pop	{r4, r7, pc}
 8004b38:	2000002c 	.word	0x2000002c

08004b3c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	6039      	str	r1, [r7, #0]
 8004b46:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d82c      	bhi.n	8004ba8 <ctlnetwork+0x6c>
 8004b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b54 <ctlnetwork+0x18>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b6d 	.word	0x08004b6d
 8004b58:	08004b75 	.word	0x08004b75
 8004b5c:	08004b7d 	.word	0x08004b7d
 8004b60:	08004b8b 	.word	0x08004b8b
 8004b64:	08004b99 	.word	0x08004b99
 8004b68:	08004ba1 	.word	0x08004ba1
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004b6c:	6838      	ldr	r0, [r7, #0]
 8004b6e:	f000 fadf 	bl	8005130 <wizchip_setnetinfo>
         break;
 8004b72:	e01c      	b.n	8004bae <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8004b74:	6838      	ldr	r0, [r7, #0]
 8004b76:	f000 fb1b 	bl	80051b0 <wizchip_getnetinfo>
         break;
 8004b7a:	e018      	b.n	8004bae <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fb55 	bl	8005230 <wizchip_setnetmode>
 8004b86:	4603      	mov	r3, r0
 8004b88:	e012      	b.n	8004bb0 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8004b8a:	f000 fb73 	bl	8005274 <wizchip_getnetmode>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	461a      	mov	r2, r3
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	701a      	strb	r2, [r3, #0]
         break;
 8004b96:	e00a      	b.n	8004bae <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8004b98:	6838      	ldr	r0, [r7, #0]
 8004b9a:	f000 fb73 	bl	8005284 <wizchip_settimeout>
         break;
 8004b9e:	e006      	b.n	8004bae <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8004ba0:	6838      	ldr	r0, [r7, #0]
 8004ba2:	f000 fb90 	bl	80052c6 <wizchip_gettimeout>
         break;
 8004ba6:	e002      	b.n	8004bae <ctlnetwork+0x72>
      default:
         return -1;
 8004ba8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bac:	e000      	b.n	8004bb0 <ctlnetwork+0x74>
   }
   return 0;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004bbe:	1d3b      	adds	r3, r7, #4
 8004bc0:	2206      	movs	r2, #6
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004bc8:	f7fe ff5e 	bl	8003a88 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004bcc:	f107 0314 	add.w	r3, r7, #20
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004bd8:	f7fe ff56 	bl	8003a88 <WIZCHIP_READ_BUF>
 8004bdc:	f107 0310 	add.w	r3, r7, #16
 8004be0:	2204      	movs	r2, #4
 8004be2:	4619      	mov	r1, r3
 8004be4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004be8:	f7fe ff4e 	bl	8003a88 <WIZCHIP_READ_BUF>
 8004bec:	f107 030c 	add.w	r3, r7, #12
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004bf8:	f7fe ff46 	bl	8003a88 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004bfc:	2180      	movs	r1, #128	@ 0x80
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f7fe fef4 	bl	80039ec <WIZCHIP_WRITE>
   getMR(); // for delay
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7fe fea5 	bl	8003954 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004c0a:	1d3b      	adds	r3, r7, #4
 8004c0c:	2206      	movs	r2, #6
 8004c0e:	4619      	mov	r1, r3
 8004c10:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004c14:	f7fe ff98 	bl	8003b48 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004c24:	f7fe ff90 	bl	8003b48 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004c28:	f107 0310 	add.w	r3, r7, #16
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	4619      	mov	r1, r3
 8004c30:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004c34:	f7fe ff88 	bl	8003b48 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004c38:	f107 030c 	add.w	r3, r7, #12
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004c44:	f7fe ff80 	bl	8003b48 <WIZCHIP_WRITE_BUF>
}
 8004c48:	bf00      	nop
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004c5e:	f7ff ffab 	bl	8004bb8 <wizchip_sw_reset>
   if(txsize)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d03b      	beq.n	8004ce0 <wizchip_init+0x90>
   {
      tmp = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	73fb      	strb	r3, [r7, #15]
 8004c70:	e015      	b.n	8004c9e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8004c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	7bbb      	ldrb	r3, [r7, #14]
 8004c7e:	4413      	add	r3, r2
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	dd02      	ble.n	8004c92 <wizchip_init+0x42>
 8004c8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c90:	e066      	b.n	8004d60 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	3301      	adds	r3, #1
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	73fb      	strb	r3, [r7, #15]
 8004c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ca2:	2b07      	cmp	r3, #7
 8004ca4:	dde5      	ble.n	8004c72 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
 8004caa:	e015      	b.n	8004cd8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f7fe fe90 	bl	80039ec <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cdc:	2b07      	cmp	r3, #7
 8004cde:	dde5      	ble.n	8004cac <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d03b      	beq.n	8004d5e <wizchip_init+0x10e>
   {
      tmp = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
 8004cee:	e015      	b.n	8004d1c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8004cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	781a      	ldrb	r2, [r3, #0]
 8004cfa:	7bbb      	ldrb	r3, [r7, #14]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004d02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	dd02      	ble.n	8004d10 <wizchip_init+0xc0>
 8004d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d0e:	e027      	b.n	8004d60 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	3301      	adds	r3, #1
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	73fb      	strb	r3, [r7, #15]
 8004d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d20:	2b07      	cmp	r3, #7
 8004d22:	dde5      	ble.n	8004cf0 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
 8004d28:	e015      	b.n	8004d56 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8004d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	3301      	adds	r3, #1
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	4413      	add	r3, r2
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	4619      	mov	r1, r3
 8004d46:	f7fe fe51 	bl	80039ec <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	3301      	adds	r3, #1
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d5a:	2b07      	cmp	r3, #7
 8004d5c:	dde5      	ble.n	8004d2a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	0a1b      	lsrs	r3, r3, #8
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	f023 030f 	bic.w	r3, r3, #15
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	4619      	mov	r1, r3
 8004d88:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004d8c:	f7fe fe2e 	bl	80039ec <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8004d90:	2300      	movs	r3, #0
 8004d92:	73fb      	strb	r3, [r7, #15]
 8004d94:	e014      	b.n	8004dc0 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8004d96:	7bba      	ldrb	r2, [r7, #14]
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	fa42 f303 	asr.w	r3, r2, r3
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <wizchip_clrinterrupt+0x52>
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	3301      	adds	r3, #1
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004db2:	211f      	movs	r1, #31
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fe fe19 	bl	80039ec <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b07      	cmp	r3, #7
 8004dc4:	d9e7      	bls.n	8004d96 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8004de2:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004de6:	f7fe fdb5 	bl	8003954 <WIZCHIP_READ>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f023 030f 	bic.w	r3, r3, #15
 8004df0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8004df2:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8004df6:	f7fe fdad 	bl	8003954 <WIZCHIP_READ>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8004dfe:	79bb      	ldrb	r3, [r7, #6]
 8004e00:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8004e02:	88bb      	ldrh	r3, [r7, #4]
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004e10:	88bb      	ldrh	r3, [r7, #4]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	4603      	mov	r3, r0
 8004e22:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	4619      	mov	r1, r3
 8004e34:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004e38:	f7fe fdd8 	bl	80039ec <WIZCHIP_WRITE>
   setSIMR(simr);
 8004e3c:	7bbb      	ldrb	r3, [r7, #14]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004e44:	f7fe fdd2 	bl	80039ec <WIZCHIP_WRITE>
#endif   
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8004e62:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004e66:	f7fe fd75 	bl	8003954 <WIZCHIP_READ>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8004e6e:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004e72:	f7fe fd6f 	bl	8003954 <WIZCHIP_READ>
 8004e76:	4603      	mov	r3, r0
 8004e78:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004e7a:	79bb      	ldrb	r3, [r7, #6]
 8004e7c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004e7e:	88bb      	ldrh	r3, [r7, #4]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004e8c:	88bb      	ldrh	r3, [r7, #4]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8004ea0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004ea4:	f7fe fd56 	bl	8003954 <WIZCHIP_READ>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8004eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004ecc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004ed0:	f7fe fd40 	bl	8003954 <WIZCHIP_READ>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eda:	2b30      	cmp	r3, #48	@ 0x30
 8004edc:	d102      	bne.n	8004ee4 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	71fb      	strb	r3, [r7, #7]
 8004ee2:	e001      	b.n	8004ee8 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004efa:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004efe:	f7fe fd29 	bl	8003954 <WIZCHIP_READ>
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f0c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	4619      	mov	r1, r3
 8004f12:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004f16:	f7fe fd69 	bl	80039ec <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004f1a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004f1e:	f7fe fd19 	bl	8003954 <WIZCHIP_READ>
 8004f22:	4603      	mov	r3, r0
 8004f24:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f2c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	4619      	mov	r1, r3
 8004f32:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004f36:	f7fe fd59 	bl	80039ec <WIZCHIP_WRITE>
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d104      	bne.n	8004f60 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f5c:	73fb      	strb	r3, [r7, #15]
 8004f5e:	e003      	b.n	8004f68 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f66:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d104      	bne.n	8004f7a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	e019      	b.n	8004fae <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	78db      	ldrb	r3, [r3, #3]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10d      	bne.n	8004f9e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	789b      	ldrb	r3, [r3, #2]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d104      	bne.n	8004f94 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	f043 0318 	orr.w	r3, r3, #24
 8004f90:	73fb      	strb	r3, [r7, #15]
 8004f92:	e00c      	b.n	8004fae <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	f043 0308 	orr.w	r3, r3, #8
 8004f9a:	73fb      	strb	r3, [r7, #15]
 8004f9c:	e007      	b.n	8004fae <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	789b      	ldrb	r3, [r3, #2]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d103      	bne.n	8004fae <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	f043 0310 	orr.w	r3, r3, #16
 8004fac:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004fb6:	f7fe fd19 	bl	80039ec <WIZCHIP_WRITE>
   wizphy_reset();
 8004fba:	f7ff ff9b 	bl	8004ef4 <wizphy_reset>
}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004fd4:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004fd8:	f7fe fcbc 	bl	8003954 <WIZCHIP_READ>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	119b      	asrs	r3, r3, #6
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d001      	beq.n	8004ffe <wizphy_getphyconf+0x36>
 8004ffa:	2b38      	cmp	r3, #56	@ 0x38
 8004ffc:	d103      	bne.n	8005006 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	705a      	strb	r2, [r3, #1]
         break;
 8005004:	e003      	b.n	800500e <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	705a      	strb	r2, [r3, #1]
         break;
 800500c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005014:	3b10      	subs	r3, #16
 8005016:	2b10      	cmp	r3, #16
 8005018:	bf8c      	ite	hi
 800501a:	2201      	movhi	r2, #1
 800501c:	2200      	movls	r2, #0
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	2a00      	cmp	r2, #0
 8005022:	d10f      	bne.n	8005044 <wizphy_getphyconf+0x7c>
 8005024:	4a1b      	ldr	r2, [pc, #108]	@ (8005094 <wizphy_getphyconf+0xcc>)
 8005026:	fa22 f303 	lsr.w	r3, r2, r3
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	bf14      	ite	ne
 8005032:	2301      	movne	r3, #1
 8005034:	2300      	moveq	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	709a      	strb	r2, [r3, #2]
         break;
 8005042:	e003      	b.n	800504c <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	709a      	strb	r2, [r3, #2]
         break;
 800504a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005052:	3b08      	subs	r3, #8
 8005054:	2b18      	cmp	r3, #24
 8005056:	bf8c      	ite	hi
 8005058:	2201      	movhi	r2, #1
 800505a:	2200      	movls	r2, #0
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	2a00      	cmp	r2, #0
 8005060:	d10f      	bne.n	8005082 <wizphy_getphyconf+0xba>
 8005062:	4a0d      	ldr	r2, [pc, #52]	@ (8005098 <wizphy_getphyconf+0xd0>)
 8005064:	fa22 f303 	lsr.w	r3, r2, r3
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	70da      	strb	r2, [r3, #3]
         break;
 8005080:	e003      	b.n	800508a <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	70da      	strb	r2, [r3, #3]
         break;
 8005088:	bf00      	nop
   }
}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	00010101 	.word	0x00010101
 8005098:	01010001 	.word	0x01010001

0800509c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80050aa:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80050ae:	f7fe fc51 	bl	8003954 <WIZCHIP_READ>
 80050b2:	4603      	mov	r3, r0
 80050b4:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d102      	bne.n	80050c6 <wizphy_setphypmode+0x2a>
 80050c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050c4:	e030      	b.n	8005128 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80050cc:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d104      	bne.n	80050de <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80050da:	73fb      	strb	r3, [r7, #15]
 80050dc:	e003      	b.n	80050e6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80050e4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	4619      	mov	r1, r3
 80050ea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80050ee:	f7fe fc7d 	bl	80039ec <WIZCHIP_WRITE>
   wizphy_reset();
 80050f2:	f7ff feff 	bl	8004ef4 <wizphy_reset>
   tmp = getPHYCFGR();
 80050f6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80050fa:	f7fe fc2b 	bl	8003954 <WIZCHIP_READ>
 80050fe:	4603      	mov	r3, r0
 8005100:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d106      	bne.n	8005116 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800510e:	2b00      	cmp	r3, #0
 8005110:	d008      	beq.n	8005124 <wizphy_setphypmode+0x88>
 8005112:	2300      	movs	r3, #0
 8005114:	e008      	b.n	8005128 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <wizphy_setphypmode+0x88>
 8005120:	2300      	movs	r3, #0
 8005122:	e001      	b.n	8005128 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8005124:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2206      	movs	r2, #6
 800513c:	4619      	mov	r1, r3
 800513e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005142:	f7fe fd01 	bl	8003b48 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	330e      	adds	r3, #14
 800514a:	2204      	movs	r2, #4
 800514c:	4619      	mov	r1, r3
 800514e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005152:	f7fe fcf9 	bl	8003b48 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	330a      	adds	r3, #10
 800515a:	2204      	movs	r2, #4
 800515c:	4619      	mov	r1, r3
 800515e:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005162:	f7fe fcf1 	bl	8003b48 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3306      	adds	r3, #6
 800516a:	2204      	movs	r2, #4
 800516c:	4619      	mov	r1, r3
 800516e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005172:	f7fe fce9 	bl	8003b48 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	7c9a      	ldrb	r2, [r3, #18]
 800517a:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <wizchip_setnetinfo+0x78>)
 800517c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	7cda      	ldrb	r2, [r3, #19]
 8005182:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <wizchip_setnetinfo+0x78>)
 8005184:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	7d1a      	ldrb	r2, [r3, #20]
 800518a:	4b07      	ldr	r3, [pc, #28]	@ (80051a8 <wizchip_setnetinfo+0x78>)
 800518c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	7d5a      	ldrb	r2, [r3, #21]
 8005192:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <wizchip_setnetinfo+0x78>)
 8005194:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	7d9a      	ldrb	r2, [r3, #22]
 800519a:	4b04      	ldr	r3, [pc, #16]	@ (80051ac <wizchip_setnetinfo+0x7c>)
 800519c:	701a      	strb	r2, [r3, #0]
}
 800519e:	bf00      	nop
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	200005e8 	.word	0x200005e8
 80051ac:	200005ec 	.word	0x200005ec

080051b0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2206      	movs	r2, #6
 80051bc:	4619      	mov	r1, r3
 80051be:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80051c2:	f7fe fc61 	bl	8003a88 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	330e      	adds	r3, #14
 80051ca:	2204      	movs	r2, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80051d2:	f7fe fc59 	bl	8003a88 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	330a      	adds	r3, #10
 80051da:	2204      	movs	r2, #4
 80051dc:	4619      	mov	r1, r3
 80051de:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80051e2:	f7fe fc51 	bl	8003a88 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3306      	adds	r3, #6
 80051ea:	2204      	movs	r2, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80051f2:	f7fe fc49 	bl	8003a88 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80051f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005228 <wizchip_getnetinfo+0x78>)
 80051f8:	781a      	ldrb	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80051fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <wizchip_getnetinfo+0x78>)
 8005200:	785a      	ldrb	r2, [r3, #1]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8005206:	4b08      	ldr	r3, [pc, #32]	@ (8005228 <wizchip_getnetinfo+0x78>)
 8005208:	789a      	ldrb	r2, [r3, #2]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800520e:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <wizchip_getnetinfo+0x78>)
 8005210:	78da      	ldrb	r2, [r3, #3]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8005216:	4b05      	ldr	r3, [pc, #20]	@ (800522c <wizchip_getnetinfo+0x7c>)
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	759a      	strb	r2, [r3, #22]
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	200005e8 	.word	0x200005e8
 800522c:	200005ec 	.word	0x200005ec

08005230 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <wizchip_setnetmode+0x1e>
 8005248:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800524c:	e00e      	b.n	800526c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800524e:	2000      	movs	r0, #0
 8005250:	f7fe fb80 	bl	8003954 <WIZCHIP_READ>
 8005254:	4603      	mov	r3, r0
 8005256:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8005258:	7bfa      	ldrb	r2, [r7, #15]
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	4313      	orrs	r3, r2
 800525e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	4619      	mov	r1, r3
 8005264:	2000      	movs	r0, #0
 8005266:	f7fe fbc1 	bl	80039ec <WIZCHIP_WRITE>
   return 0;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8005278:	2000      	movs	r0, #0
 800527a:	f7fe fb6b 	bl	8003954 <WIZCHIP_READ>
 800527e:	4603      	mov	r3, r0
}
 8005280:	4618      	mov	r0, r3
 8005282:	bd80      	pop	{r7, pc}

08005284 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8005296:	f7fe fba9 	bl	80039ec <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	885b      	ldrh	r3, [r3, #2]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	4619      	mov	r1, r3
 80052a6:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80052aa:	f7fe fb9f 	bl	80039ec <WIZCHIP_WRITE>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	885b      	ldrh	r3, [r3, #2]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	4619      	mov	r1, r3
 80052b6:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80052ba:	f7fe fb97 	bl	80039ec <WIZCHIP_WRITE>
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80052c6:	b590      	push	{r4, r7, lr}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80052ce:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80052d2:	f7fe fb3f 	bl	8003954 <WIZCHIP_READ>
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80052de:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80052e2:	f7fe fb37 	bl	8003954 <WIZCHIP_READ>
 80052e6:	4603      	mov	r3, r0
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	b29c      	uxth	r4, r3
 80052ec:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80052f0:	f7fe fb30 	bl	8003954 <WIZCHIP_READ>
 80052f4:	4603      	mov	r3, r0
 80052f6:	4423      	add	r3, r4
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	805a      	strh	r2, [r3, #2]
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bd90      	pop	{r4, r7, pc}
	...

08005308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005308:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005340 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800530c:	f7fe fb10 	bl	8003930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005310:	480c      	ldr	r0, [pc, #48]	@ (8005344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005312:	490d      	ldr	r1, [pc, #52]	@ (8005348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005314:	4a0d      	ldr	r2, [pc, #52]	@ (800534c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005318:	e002      	b.n	8005320 <LoopCopyDataInit>

0800531a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800531a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800531c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800531e:	3304      	adds	r3, #4

08005320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005324:	d3f9      	bcc.n	800531a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005326:	4a0a      	ldr	r2, [pc, #40]	@ (8005350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005328:	4c0a      	ldr	r4, [pc, #40]	@ (8005354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800532a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800532c:	e001      	b.n	8005332 <LoopFillZerobss>

0800532e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800532e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005330:	3204      	adds	r2, #4

08005332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005334:	d3fb      	bcc.n	800532e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005336:	f008 ff2b 	bl	800e190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800533a:	f7fc fc19 	bl	8001b70 <main>
  bx  lr    
 800533e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005348:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 800534c:	080102b0 	.word	0x080102b0
  ldr r2, =_sbss
 8005350:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8005354:	20014b64 	.word	0x20014b64

08005358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005358:	e7fe      	b.n	8005358 <ADC_IRQHandler>
	...

0800535c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005360:	4b0e      	ldr	r3, [pc, #56]	@ (800539c <HAL_Init+0x40>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a0d      	ldr	r2, [pc, #52]	@ (800539c <HAL_Init+0x40>)
 8005366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800536a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800536c:	4b0b      	ldr	r3, [pc, #44]	@ (800539c <HAL_Init+0x40>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <HAL_Init+0x40>)
 8005372:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005378:	4b08      	ldr	r3, [pc, #32]	@ (800539c <HAL_Init+0x40>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a07      	ldr	r2, [pc, #28]	@ (800539c <HAL_Init+0x40>)
 800537e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005384:	2003      	movs	r0, #3
 8005386:	f000 f8fc 	bl	8005582 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800538a:	200f      	movs	r0, #15
 800538c:	f7fe f9c8 	bl	8003720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005390:	f7fe f808 	bl	80033a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40023c00 	.word	0x40023c00

080053a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053a4:	4b06      	ldr	r3, [pc, #24]	@ (80053c0 <HAL_IncTick+0x20>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <HAL_IncTick+0x24>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4413      	add	r3, r2
 80053b0:	4a04      	ldr	r2, [pc, #16]	@ (80053c4 <HAL_IncTick+0x24>)
 80053b2:	6013      	str	r3, [r2, #0]
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	2000005c 	.word	0x2000005c
 80053c4:	200005f0 	.word	0x200005f0

080053c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return uwTick;
 80053cc:	4b03      	ldr	r3, [pc, #12]	@ (80053dc <HAL_GetTick+0x14>)
 80053ce:	681b      	ldr	r3, [r3, #0]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	200005f0 	.word	0x200005f0

080053e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053e8:	f7ff ffee 	bl	80053c8 <HAL_GetTick>
 80053ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053f8:	d005      	beq.n	8005406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005424 <HAL_Delay+0x44>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005406:	bf00      	nop
 8005408:	f7ff ffde 	bl	80053c8 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	429a      	cmp	r2, r3
 8005416:	d8f7      	bhi.n	8005408 <HAL_Delay+0x28>
  {
  }
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	2000005c 	.word	0x2000005c

08005428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005438:	4b0c      	ldr	r3, [pc, #48]	@ (800546c <__NVIC_SetPriorityGrouping+0x44>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005444:	4013      	ands	r3, r2
 8005446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800545a:	4a04      	ldr	r2, [pc, #16]	@ (800546c <__NVIC_SetPriorityGrouping+0x44>)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	60d3      	str	r3, [r2, #12]
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005474:	4b04      	ldr	r3, [pc, #16]	@ (8005488 <__NVIC_GetPriorityGrouping+0x18>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	0a1b      	lsrs	r3, r3, #8
 800547a:	f003 0307 	and.w	r3, r3, #7
}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	e000ed00 	.word	0xe000ed00

0800548c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549a:	2b00      	cmp	r3, #0
 800549c:	db0b      	blt.n	80054b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	f003 021f 	and.w	r2, r3, #31
 80054a4:	4907      	ldr	r1, [pc, #28]	@ (80054c4 <__NVIC_EnableIRQ+0x38>)
 80054a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	2001      	movs	r0, #1
 80054ae:	fa00 f202 	lsl.w	r2, r0, r2
 80054b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	e000e100 	.word	0xe000e100

080054c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	6039      	str	r1, [r7, #0]
 80054d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	db0a      	blt.n	80054f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	490c      	ldr	r1, [pc, #48]	@ (8005514 <__NVIC_SetPriority+0x4c>)
 80054e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e6:	0112      	lsls	r2, r2, #4
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	440b      	add	r3, r1
 80054ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054f0:	e00a      	b.n	8005508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	4908      	ldr	r1, [pc, #32]	@ (8005518 <__NVIC_SetPriority+0x50>)
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	3b04      	subs	r3, #4
 8005500:	0112      	lsls	r2, r2, #4
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	440b      	add	r3, r1
 8005506:	761a      	strb	r2, [r3, #24]
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	e000e100 	.word	0xe000e100
 8005518:	e000ed00 	.word	0xe000ed00

0800551c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800551c:	b480      	push	{r7}
 800551e:	b089      	sub	sp, #36	@ 0x24
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f1c3 0307 	rsb	r3, r3, #7
 8005536:	2b04      	cmp	r3, #4
 8005538:	bf28      	it	cs
 800553a:	2304      	movcs	r3, #4
 800553c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	3304      	adds	r3, #4
 8005542:	2b06      	cmp	r3, #6
 8005544:	d902      	bls.n	800554c <NVIC_EncodePriority+0x30>
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	3b03      	subs	r3, #3
 800554a:	e000      	b.n	800554e <NVIC_EncodePriority+0x32>
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005550:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43da      	mvns	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	401a      	ands	r2, r3
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005564:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	fa01 f303 	lsl.w	r3, r1, r3
 800556e:	43d9      	mvns	r1, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005574:	4313      	orrs	r3, r2
         );
}
 8005576:	4618      	mov	r0, r3
 8005578:	3724      	adds	r7, #36	@ 0x24
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ff4c 	bl	8005428 <__NVIC_SetPriorityGrouping>
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055aa:	f7ff ff61 	bl	8005470 <__NVIC_GetPriorityGrouping>
 80055ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	6978      	ldr	r0, [r7, #20]
 80055b6:	f7ff ffb1 	bl	800551c <NVIC_EncodePriority>
 80055ba:	4602      	mov	r2, r0
 80055bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c0:	4611      	mov	r1, r2
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff ff80 	bl	80054c8 <__NVIC_SetPriority>
}
 80055c8:	bf00      	nop
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff ff54 	bl	800548c <__NVIC_EnableIRQ>
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055f8:	f7ff fee6 	bl	80053c8 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e099      	b.n	800573c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005628:	e00f      	b.n	800564a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800562a:	f7ff fecd 	bl	80053c8 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b05      	cmp	r3, #5
 8005636:	d908      	bls.n	800564a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2203      	movs	r2, #3
 8005642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e078      	b.n	800573c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e8      	bne.n	800562a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4b38      	ldr	r3, [pc, #224]	@ (8005744 <HAL_DMA_Init+0x158>)
 8005664:	4013      	ands	r3, r2
 8005666:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800568e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d107      	bne.n	80056b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ac:	4313      	orrs	r3, r2
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f023 0307 	bic.w	r3, r3, #7
 80056ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d117      	bne.n	800570e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00e      	beq.n	800570e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f9e9 	bl	8005ac8 <DMA_CheckFifoParam>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2240      	movs	r2, #64	@ 0x40
 8005700:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800570a:	2301      	movs	r3, #1
 800570c:	e016      	b.n	800573c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f9a0 	bl	8005a5c <DMA_CalcBaseAndBitshift>
 800571c:	4603      	mov	r3, r0
 800571e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005724:	223f      	movs	r2, #63	@ 0x3f
 8005726:	409a      	lsls	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	f010803f 	.word	0xf010803f

08005748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005754:	4b8e      	ldr	r3, [pc, #568]	@ (8005990 <HAL_DMA_IRQHandler+0x248>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a8e      	ldr	r2, [pc, #568]	@ (8005994 <HAL_DMA_IRQHandler+0x24c>)
 800575a:	fba2 2303 	umull	r2, r3, r2, r3
 800575e:	0a9b      	lsrs	r3, r3, #10
 8005760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005772:	2208      	movs	r2, #8
 8005774:	409a      	lsls	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4013      	ands	r3, r2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d01a      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d013      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0204 	bic.w	r2, r2, #4
 800579a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a0:	2208      	movs	r2, #8
 80057a2:	409a      	lsls	r2, r3
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ac:	f043 0201 	orr.w	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b8:	2201      	movs	r2, #1
 80057ba:	409a      	lsls	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d012      	beq.n	80057ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d6:	2201      	movs	r2, #1
 80057d8:	409a      	lsls	r2, r3
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e2:	f043 0202 	orr.w	r2, r3, #2
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ee:	2204      	movs	r2, #4
 80057f0:	409a      	lsls	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d012      	beq.n	8005820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00b      	beq.n	8005820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580c:	2204      	movs	r2, #4
 800580e:	409a      	lsls	r2, r3
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005818:	f043 0204 	orr.w	r2, r3, #4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005824:	2210      	movs	r2, #16
 8005826:	409a      	lsls	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d043      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d03c      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005842:	2210      	movs	r2, #16
 8005844:	409a      	lsls	r2, r3
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d018      	beq.n	800588a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d108      	bne.n	8005878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d024      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
 8005876:	e01f      	b.n	80058b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01b      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	4798      	blx	r3
 8005888:	e016      	b.n	80058b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d107      	bne.n	80058a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0208 	bic.w	r2, r2, #8
 80058a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058bc:	2220      	movs	r2, #32
 80058be:	409a      	lsls	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4013      	ands	r3, r2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 808f 	beq.w	80059e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8087 	beq.w	80059e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058de:	2220      	movs	r2, #32
 80058e0:	409a      	lsls	r2, r3
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d136      	bne.n	8005960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0216 	bic.w	r2, r2, #22
 8005900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695a      	ldr	r2, [r3, #20]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d103      	bne.n	8005922 <HAL_DMA_IRQHandler+0x1da>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0208 	bic.w	r2, r2, #8
 8005930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005936:	223f      	movs	r2, #63	@ 0x3f
 8005938:	409a      	lsls	r2, r3
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005952:	2b00      	cmp	r3, #0
 8005954:	d07e      	beq.n	8005a54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4798      	blx	r3
        }
        return;
 800595e:	e079      	b.n	8005a54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01d      	beq.n	80059aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10d      	bne.n	8005998 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005980:	2b00      	cmp	r3, #0
 8005982:	d031      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	4798      	blx	r3
 800598c:	e02c      	b.n	80059e8 <HAL_DMA_IRQHandler+0x2a0>
 800598e:	bf00      	nop
 8005990:	20000024 	.word	0x20000024
 8005994:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d023      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	4798      	blx	r3
 80059a8:	e01e      	b.n	80059e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10f      	bne.n	80059d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0210 	bic.w	r2, r2, #16
 80059c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d032      	beq.n	8005a56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d022      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2205      	movs	r2, #5
 8005a00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	3301      	adds	r3, #1
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d307      	bcc.n	8005a30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f2      	bne.n	8005a14 <HAL_DMA_IRQHandler+0x2cc>
 8005a2e:	e000      	b.n	8005a32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	4798      	blx	r3
 8005a52:	e000      	b.n	8005a56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a54:	bf00      	nop
    }
  }
}
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	3b10      	subs	r3, #16
 8005a6c:	4a14      	ldr	r2, [pc, #80]	@ (8005ac0 <DMA_CalcBaseAndBitshift+0x64>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	091b      	lsrs	r3, r3, #4
 8005a74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a76:	4a13      	ldr	r2, [pc, #76]	@ (8005ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d909      	bls.n	8005a9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	1d1a      	adds	r2, r3, #4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a9c:	e007      	b.n	8005aae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	aaaaaaab 	.word	0xaaaaaaab
 8005ac4:	08010220 	.word	0x08010220

08005ac8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11f      	bne.n	8005b22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d856      	bhi.n	8005b96 <DMA_CheckFifoParam+0xce>
 8005ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8005af0 <DMA_CheckFifoParam+0x28>)
 8005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aee:	bf00      	nop
 8005af0:	08005b01 	.word	0x08005b01
 8005af4:	08005b13 	.word	0x08005b13
 8005af8:	08005b01 	.word	0x08005b01
 8005afc:	08005b97 	.word	0x08005b97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d046      	beq.n	8005b9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b10:	e043      	b.n	8005b9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b1a:	d140      	bne.n	8005b9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b20:	e03d      	b.n	8005b9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b2a:	d121      	bne.n	8005b70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d837      	bhi.n	8005ba2 <DMA_CheckFifoParam+0xda>
 8005b32:	a201      	add	r2, pc, #4	@ (adr r2, 8005b38 <DMA_CheckFifoParam+0x70>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b4f 	.word	0x08005b4f
 8005b40:	08005b49 	.word	0x08005b49
 8005b44:	08005b61 	.word	0x08005b61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4c:	e030      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d025      	beq.n	8005ba6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b5e:	e022      	b.n	8005ba6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b68:	d11f      	bne.n	8005baa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b6e:	e01c      	b.n	8005baa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d903      	bls.n	8005b7e <DMA_CheckFifoParam+0xb6>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d003      	beq.n	8005b84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b7c:	e018      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
      break;
 8005b82:	e015      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00e      	beq.n	8005bae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
      break;
 8005b94:	e00b      	b.n	8005bae <DMA_CheckFifoParam+0xe6>
      break;
 8005b96:	bf00      	nop
 8005b98:	e00a      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8005b9a:	bf00      	nop
 8005b9c:	e008      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8005b9e:	bf00      	nop
 8005ba0:	e006      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ba2:	bf00      	nop
 8005ba4:	e004      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ba6:	bf00      	nop
 8005ba8:	e002      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8005bae:	bf00      	nop
    }
  } 
  
  return status; 
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop

08005bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b089      	sub	sp, #36	@ 0x24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	e165      	b.n	8005ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bdc:	2201      	movs	r2, #1
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4013      	ands	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	f040 8154 	bne.w	8005ea2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d005      	beq.n	8005c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d130      	bne.n	8005c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c48:	2201      	movs	r2, #1
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4013      	ands	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 0201 	and.w	r2, r3, #1
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d017      	beq.n	8005cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	43db      	mvns	r3, r3
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4013      	ands	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d123      	bne.n	8005d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	08da      	lsrs	r2, r3, #3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3208      	adds	r2, #8
 8005cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	220f      	movs	r2, #15
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	08da      	lsrs	r2, r3, #3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3208      	adds	r2, #8
 8005cfe:	69b9      	ldr	r1, [r7, #24]
 8005d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	2203      	movs	r2, #3
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 0203 	and.w	r2, r3, #3
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80ae 	beq.w	8005ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8005ec0 <HAL_GPIO_Init+0x300>)
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4e:	4a5c      	ldr	r2, [pc, #368]	@ (8005ec0 <HAL_GPIO_Init+0x300>)
 8005d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d56:	4b5a      	ldr	r3, [pc, #360]	@ (8005ec0 <HAL_GPIO_Init+0x300>)
 8005d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d62:	4a58      	ldr	r2, [pc, #352]	@ (8005ec4 <HAL_GPIO_Init+0x304>)
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	089b      	lsrs	r3, r3, #2
 8005d68:	3302      	adds	r3, #2
 8005d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	220f      	movs	r2, #15
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a4f      	ldr	r2, [pc, #316]	@ (8005ec8 <HAL_GPIO_Init+0x308>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d025      	beq.n	8005dda <HAL_GPIO_Init+0x21a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a4e      	ldr	r2, [pc, #312]	@ (8005ecc <HAL_GPIO_Init+0x30c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d01f      	beq.n	8005dd6 <HAL_GPIO_Init+0x216>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a4d      	ldr	r2, [pc, #308]	@ (8005ed0 <HAL_GPIO_Init+0x310>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d019      	beq.n	8005dd2 <HAL_GPIO_Init+0x212>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a4c      	ldr	r2, [pc, #304]	@ (8005ed4 <HAL_GPIO_Init+0x314>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_GPIO_Init+0x20e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a4b      	ldr	r2, [pc, #300]	@ (8005ed8 <HAL_GPIO_Init+0x318>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00d      	beq.n	8005dca <HAL_GPIO_Init+0x20a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a4a      	ldr	r2, [pc, #296]	@ (8005edc <HAL_GPIO_Init+0x31c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d007      	beq.n	8005dc6 <HAL_GPIO_Init+0x206>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a49      	ldr	r2, [pc, #292]	@ (8005ee0 <HAL_GPIO_Init+0x320>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d101      	bne.n	8005dc2 <HAL_GPIO_Init+0x202>
 8005dbe:	2306      	movs	r3, #6
 8005dc0:	e00c      	b.n	8005ddc <HAL_GPIO_Init+0x21c>
 8005dc2:	2307      	movs	r3, #7
 8005dc4:	e00a      	b.n	8005ddc <HAL_GPIO_Init+0x21c>
 8005dc6:	2305      	movs	r3, #5
 8005dc8:	e008      	b.n	8005ddc <HAL_GPIO_Init+0x21c>
 8005dca:	2304      	movs	r3, #4
 8005dcc:	e006      	b.n	8005ddc <HAL_GPIO_Init+0x21c>
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e004      	b.n	8005ddc <HAL_GPIO_Init+0x21c>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e002      	b.n	8005ddc <HAL_GPIO_Init+0x21c>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <HAL_GPIO_Init+0x21c>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	f002 0203 	and.w	r2, r2, #3
 8005de2:	0092      	lsls	r2, r2, #2
 8005de4:	4093      	lsls	r3, r2
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dec:	4935      	ldr	r1, [pc, #212]	@ (8005ec4 <HAL_GPIO_Init+0x304>)
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	089b      	lsrs	r3, r3, #2
 8005df2:	3302      	adds	r3, #2
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8005ee4 <HAL_GPIO_Init+0x324>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	43db      	mvns	r3, r3
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	4013      	ands	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e1e:	4a31      	ldr	r2, [pc, #196]	@ (8005ee4 <HAL_GPIO_Init+0x324>)
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e24:	4b2f      	ldr	r3, [pc, #188]	@ (8005ee4 <HAL_GPIO_Init+0x324>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4013      	ands	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e48:	4a26      	ldr	r2, [pc, #152]	@ (8005ee4 <HAL_GPIO_Init+0x324>)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e4e:	4b25      	ldr	r3, [pc, #148]	@ (8005ee4 <HAL_GPIO_Init+0x324>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	43db      	mvns	r3, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e72:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee4 <HAL_GPIO_Init+0x324>)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e78:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee4 <HAL_GPIO_Init+0x324>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4013      	ands	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e9c:	4a11      	ldr	r2, [pc, #68]	@ (8005ee4 <HAL_GPIO_Init+0x324>)
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	2b0f      	cmp	r3, #15
 8005eac:	f67f ae96 	bls.w	8005bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	3724      	adds	r7, #36	@ 0x24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	40013800 	.word	0x40013800
 8005ec8:	40020000 	.word	0x40020000
 8005ecc:	40020400 	.word	0x40020400
 8005ed0:	40020800 	.word	0x40020800
 8005ed4:	40020c00 	.word	0x40020c00
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40021400 	.word	0x40021400
 8005ee0:	40021800 	.word	0x40021800
 8005ee4:	40013c00 	.word	0x40013c00

08005ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	807b      	strh	r3, [r7, #2]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ef8:	787b      	ldrb	r3, [r7, #1]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f04:	e003      	b.n	8005f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f06:	887b      	ldrh	r3, [r7, #2]
 8005f08:	041a      	lsls	r2, r3, #16
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	619a      	str	r2, [r3, #24]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f2c:	887a      	ldrh	r2, [r7, #2]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4013      	ands	r3, r2
 8005f32:	041a      	lsls	r2, r3, #16
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	43d9      	mvns	r1, r3
 8005f38:	887b      	ldrh	r3, [r7, #2]
 8005f3a:	400b      	ands	r3, r1
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	619a      	str	r2, [r3, #24]
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e12b      	b.n	80061ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fd fa3c 	bl	80033f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2224      	movs	r2, #36	@ 0x24
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0201 	bic.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fb4:	f001 f8e2 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8005fb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4a81      	ldr	r2, [pc, #516]	@ (80061c4 <HAL_I2C_Init+0x274>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d807      	bhi.n	8005fd4 <HAL_I2C_Init+0x84>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4a80      	ldr	r2, [pc, #512]	@ (80061c8 <HAL_I2C_Init+0x278>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	bf94      	ite	ls
 8005fcc:	2301      	movls	r3, #1
 8005fce:	2300      	movhi	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	e006      	b.n	8005fe2 <HAL_I2C_Init+0x92>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4a7d      	ldr	r2, [pc, #500]	@ (80061cc <HAL_I2C_Init+0x27c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	bf94      	ite	ls
 8005fdc:	2301      	movls	r3, #1
 8005fde:	2300      	movhi	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e0e7      	b.n	80061ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4a78      	ldr	r2, [pc, #480]	@ (80061d0 <HAL_I2C_Init+0x280>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	0c9b      	lsrs	r3, r3, #18
 8005ff4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	4a6a      	ldr	r2, [pc, #424]	@ (80061c4 <HAL_I2C_Init+0x274>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d802      	bhi.n	8006024 <HAL_I2C_Init+0xd4>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	3301      	adds	r3, #1
 8006022:	e009      	b.n	8006038 <HAL_I2C_Init+0xe8>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800602a:	fb02 f303 	mul.w	r3, r2, r3
 800602e:	4a69      	ldr	r2, [pc, #420]	@ (80061d4 <HAL_I2C_Init+0x284>)
 8006030:	fba2 2303 	umull	r2, r3, r2, r3
 8006034:	099b      	lsrs	r3, r3, #6
 8006036:	3301      	adds	r3, #1
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	430b      	orrs	r3, r1
 800603e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800604a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	495c      	ldr	r1, [pc, #368]	@ (80061c4 <HAL_I2C_Init+0x274>)
 8006054:	428b      	cmp	r3, r1
 8006056:	d819      	bhi.n	800608c <HAL_I2C_Init+0x13c>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	1e59      	subs	r1, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	fbb1 f3f3 	udiv	r3, r1, r3
 8006066:	1c59      	adds	r1, r3, #1
 8006068:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800606c:	400b      	ands	r3, r1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <HAL_I2C_Init+0x138>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	1e59      	subs	r1, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006080:	3301      	adds	r3, #1
 8006082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006086:	e051      	b.n	800612c <HAL_I2C_Init+0x1dc>
 8006088:	2304      	movs	r3, #4
 800608a:	e04f      	b.n	800612c <HAL_I2C_Init+0x1dc>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d111      	bne.n	80060b8 <HAL_I2C_Init+0x168>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	1e58      	subs	r0, r3, #1
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6859      	ldr	r1, [r3, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	440b      	add	r3, r1
 80060a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060a6:	3301      	adds	r3, #1
 80060a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf0c      	ite	eq
 80060b0:	2301      	moveq	r3, #1
 80060b2:	2300      	movne	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e012      	b.n	80060de <HAL_I2C_Init+0x18e>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	1e58      	subs	r0, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6859      	ldr	r1, [r3, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	0099      	lsls	r1, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ce:	3301      	adds	r3, #1
 80060d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bf0c      	ite	eq
 80060d8:	2301      	moveq	r3, #1
 80060da:	2300      	movne	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_I2C_Init+0x196>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e022      	b.n	800612c <HAL_I2C_Init+0x1dc>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10e      	bne.n	800610c <HAL_I2C_Init+0x1bc>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1e58      	subs	r0, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6859      	ldr	r1, [r3, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	440b      	add	r3, r1
 80060fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006100:	3301      	adds	r3, #1
 8006102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800610a:	e00f      	b.n	800612c <HAL_I2C_Init+0x1dc>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	1e58      	subs	r0, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6859      	ldr	r1, [r3, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	0099      	lsls	r1, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006122:	3301      	adds	r3, #1
 8006124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006128:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	6809      	ldr	r1, [r1, #0]
 8006130:	4313      	orrs	r3, r2
 8006132:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69da      	ldr	r2, [r3, #28]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800615a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6911      	ldr	r1, [r2, #16]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	68d2      	ldr	r2, [r2, #12]
 8006166:	4311      	orrs	r1, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	430b      	orrs	r3, r1
 800616e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695a      	ldr	r2, [r3, #20]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0201 	orr.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	000186a0 	.word	0x000186a0
 80061c8:	001e847f 	.word	0x001e847f
 80061cc:	003d08ff 	.word	0x003d08ff
 80061d0:	431bde83 	.word	0x431bde83
 80061d4:	10624dd3 	.word	0x10624dd3

080061d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	4603      	mov	r3, r0
 80061e8:	817b      	strh	r3, [r7, #10]
 80061ea:	460b      	mov	r3, r1
 80061ec:	813b      	strh	r3, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061f2:	f7ff f8e9 	bl	80053c8 <HAL_GetTick>
 80061f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b20      	cmp	r3, #32
 8006202:	f040 80d9 	bne.w	80063b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	2319      	movs	r3, #25
 800620c:	2201      	movs	r2, #1
 800620e:	496d      	ldr	r1, [pc, #436]	@ (80063c4 <HAL_I2C_Mem_Write+0x1ec>)
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fc8b 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800621c:	2302      	movs	r3, #2
 800621e:	e0cc      	b.n	80063ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_I2C_Mem_Write+0x56>
 800622a:	2302      	movs	r3, #2
 800622c:	e0c5      	b.n	80063ba <HAL_I2C_Mem_Write+0x1e2>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	d007      	beq.n	8006254 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006262:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2221      	movs	r2, #33	@ 0x21
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2240      	movs	r2, #64	@ 0x40
 8006270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a3a      	ldr	r2, [r7, #32]
 800627e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a4d      	ldr	r2, [pc, #308]	@ (80063c8 <HAL_I2C_Mem_Write+0x1f0>)
 8006294:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006296:	88f8      	ldrh	r0, [r7, #6]
 8006298:	893a      	ldrh	r2, [r7, #8]
 800629a:	8979      	ldrh	r1, [r7, #10]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	4603      	mov	r3, r0
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fac2 	bl	8006830 <I2C_RequestMemoryWrite>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d052      	beq.n	8006358 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e081      	b.n	80063ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fd50 	bl	8006d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00d      	beq.n	80062e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d107      	bne.n	80062de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e06b      	b.n	80063ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	781a      	ldrb	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b04      	cmp	r3, #4
 800631e:	d11b      	bne.n	8006358 <HAL_I2C_Mem_Write+0x180>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	d017      	beq.n	8006358 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1aa      	bne.n	80062b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fd43 	bl	8006df0 <I2C_WaitOnBTFFlagUntilTimeout>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00d      	beq.n	800638c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006374:	2b04      	cmp	r3, #4
 8006376:	d107      	bne.n	8006388 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006386:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e016      	b.n	80063ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800639a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e000      	b.n	80063ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80063b8:	2302      	movs	r3, #2
  }
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	00100002 	.word	0x00100002
 80063c8:	ffff0000 	.word	0xffff0000

080063cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08c      	sub	sp, #48	@ 0x30
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	817b      	strh	r3, [r7, #10]
 80063de:	460b      	mov	r3, r1
 80063e0:	813b      	strh	r3, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063e6:	f7fe ffef 	bl	80053c8 <HAL_GetTick>
 80063ea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	f040 8214 	bne.w	8006822 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	2319      	movs	r3, #25
 8006400:	2201      	movs	r2, #1
 8006402:	497b      	ldr	r1, [pc, #492]	@ (80065f0 <HAL_I2C_Mem_Read+0x224>)
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 fb91 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006410:	2302      	movs	r3, #2
 8006412:	e207      	b.n	8006824 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <HAL_I2C_Mem_Read+0x56>
 800641e:	2302      	movs	r3, #2
 8006420:	e200      	b.n	8006824 <HAL_I2C_Mem_Read+0x458>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b01      	cmp	r3, #1
 8006436:	d007      	beq.n	8006448 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006456:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2222      	movs	r2, #34	@ 0x22
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2240      	movs	r2, #64	@ 0x40
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006472:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006478:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4a5b      	ldr	r2, [pc, #364]	@ (80065f4 <HAL_I2C_Mem_Read+0x228>)
 8006488:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800648a:	88f8      	ldrh	r0, [r7, #6]
 800648c:	893a      	ldrh	r2, [r7, #8]
 800648e:	8979      	ldrh	r1, [r7, #10]
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	4603      	mov	r3, r0
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fa5e 	bl	800695c <I2C_RequestMemoryRead>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e1bc      	b.n	8006824 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d113      	bne.n	80064da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064b2:	2300      	movs	r3, #0
 80064b4:	623b      	str	r3, [r7, #32]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	623b      	str	r3, [r7, #32]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	623b      	str	r3, [r7, #32]
 80064c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	e190      	b.n	80067fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d11b      	bne.n	800651a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	e170      	b.n	80067fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800651e:	2b02      	cmp	r3, #2
 8006520:	d11b      	bne.n	800655a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006530:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006540:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006542:	2300      	movs	r3, #0
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	e150      	b.n	80067fc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006570:	e144      	b.n	80067fc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006576:	2b03      	cmp	r3, #3
 8006578:	f200 80f1 	bhi.w	800675e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006580:	2b01      	cmp	r3, #1
 8006582:	d123      	bne.n	80065cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006586:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 fc79 	bl	8006e80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e145      	b.n	8006824 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80065ca:	e117      	b.n	80067fc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d14e      	bne.n	8006672 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	2200      	movs	r2, #0
 80065dc:	4906      	ldr	r1, [pc, #24]	@ (80065f8 <HAL_I2C_Mem_Read+0x22c>)
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 faa4 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d008      	beq.n	80065fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e11a      	b.n	8006824 <HAL_I2C_Mem_Read+0x458>
 80065ee:	bf00      	nop
 80065f0:	00100002 	.word	0x00100002
 80065f4:	ffff0000 	.word	0xffff0000
 80065f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800660a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006670:	e0c4      	b.n	80067fc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006678:	2200      	movs	r2, #0
 800667a:	496c      	ldr	r1, [pc, #432]	@ (800682c <HAL_I2C_Mem_Read+0x460>)
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fa55 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e0cb      	b.n	8006824 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800669a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691a      	ldr	r2, [r3, #16]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	2200      	movs	r2, #0
 80066d6:	4955      	ldr	r1, [pc, #340]	@ (800682c <HAL_I2C_Mem_Read+0x460>)
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fa27 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e09d      	b.n	8006824 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691a      	ldr	r2, [r3, #16]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800675c:	e04e      	b.n	80067fc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800675e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006760:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fb8c 	bl	8006e80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e058      	b.n	8006824 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d124      	bne.n	80067fc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d107      	bne.n	80067ca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	f47f aeb6 	bne.w	8006572 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	e000      	b.n	8006824 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006822:	2302      	movs	r3, #2
  }
}
 8006824:	4618      	mov	r0, r3
 8006826:	3728      	adds	r7, #40	@ 0x28
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	00010004 	.word	0x00010004

08006830 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	461a      	mov	r2, r3
 800683e:	4603      	mov	r3, r0
 8006840:	817b      	strh	r3, [r7, #10]
 8006842:	460b      	mov	r3, r1
 8006844:	813b      	strh	r3, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	2200      	movs	r2, #0
 8006862:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f960 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00d      	beq.n	800688e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006880:	d103      	bne.n	800688a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006888:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e05f      	b.n	800694e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800688e:	897b      	ldrh	r3, [r7, #10]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	461a      	mov	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800689c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	6a3a      	ldr	r2, [r7, #32]
 80068a2:	492d      	ldr	r1, [pc, #180]	@ (8006958 <I2C_RequestMemoryWrite+0x128>)
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f9bb 	bl	8006c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e04c      	b.n	800694e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068cc:	6a39      	ldr	r1, [r7, #32]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 fa46 	bl	8006d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00d      	beq.n	80068f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d107      	bne.n	80068f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e02b      	b.n	800694e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d105      	bne.n	8006908 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068fc:	893b      	ldrh	r3, [r7, #8]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	611a      	str	r2, [r3, #16]
 8006906:	e021      	b.n	800694c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006908:	893b      	ldrh	r3, [r7, #8]
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	b29b      	uxth	r3, r3
 800690e:	b2da      	uxtb	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006918:	6a39      	ldr	r1, [r7, #32]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fa20 	bl	8006d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00d      	beq.n	8006942 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692a:	2b04      	cmp	r3, #4
 800692c:	d107      	bne.n	800693e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800693c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e005      	b.n	800694e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006942:	893b      	ldrh	r3, [r7, #8]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	00010002 	.word	0x00010002

0800695c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	4608      	mov	r0, r1
 8006966:	4611      	mov	r1, r2
 8006968:	461a      	mov	r2, r3
 800696a:	4603      	mov	r3, r0
 800696c:	817b      	strh	r3, [r7, #10]
 800696e:	460b      	mov	r3, r1
 8006970:	813b      	strh	r3, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006984:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	2200      	movs	r2, #0
 800699e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f8c2 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00d      	beq.n	80069ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069bc:	d103      	bne.n	80069c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e0aa      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069ca:	897b      	ldrh	r3, [r7, #10]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80069d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	4952      	ldr	r1, [pc, #328]	@ (8006b28 <I2C_RequestMemoryRead+0x1cc>)
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f91d 	bl	8006c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e097      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a08:	6a39      	ldr	r1, [r7, #32]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f9a8 	bl	8006d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d107      	bne.n	8006a2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e076      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a32:	88fb      	ldrh	r3, [r7, #6]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d105      	bne.n	8006a44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a38:	893b      	ldrh	r3, [r7, #8]
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	611a      	str	r2, [r3, #16]
 8006a42:	e021      	b.n	8006a88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a44:	893b      	ldrh	r3, [r7, #8]
 8006a46:	0a1b      	lsrs	r3, r3, #8
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a54:	6a39      	ldr	r1, [r7, #32]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f982 	bl	8006d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00d      	beq.n	8006a7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d107      	bne.n	8006a7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e050      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a7e:	893b      	ldrh	r3, [r7, #8]
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a8a:	6a39      	ldr	r1, [r7, #32]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f967 	bl	8006d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00d      	beq.n	8006ab4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d107      	bne.n	8006ab0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e035      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ac2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f82b 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00d      	beq.n	8006af8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aea:	d103      	bne.n	8006af4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006af2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e013      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006af8:	897b      	ldrh	r3, [r7, #10]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	f043 0301 	orr.w	r3, r3, #1
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	6a3a      	ldr	r2, [r7, #32]
 8006b0c:	4906      	ldr	r1, [pc, #24]	@ (8006b28 <I2C_RequestMemoryRead+0x1cc>)
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f886 	bl	8006c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	00010002 	.word	0x00010002

08006b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b3c:	e048      	b.n	8006bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b44:	d044      	beq.n	8006bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b46:	f7fe fc3f 	bl	80053c8 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d139      	bne.n	8006bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	0c1b      	lsrs	r3, r3, #16
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d10d      	bne.n	8006b82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	43da      	mvns	r2, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	4013      	ands	r3, r2
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bf0c      	ite	eq
 8006b78:	2301      	moveq	r3, #1
 8006b7a:	2300      	movne	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	e00c      	b.n	8006b9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	43da      	mvns	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d116      	bne.n	8006bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbc:	f043 0220 	orr.w	r2, r3, #32
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e023      	b.n	8006c18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	0c1b      	lsrs	r3, r3, #16
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d10d      	bne.n	8006bf6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	43da      	mvns	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4013      	ands	r3, r2
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	bf0c      	ite	eq
 8006bec:	2301      	moveq	r3, #1
 8006bee:	2300      	movne	r3, #0
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	e00c      	b.n	8006c10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	43da      	mvns	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	4013      	ands	r3, r2
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	bf0c      	ite	eq
 8006c08:	2301      	moveq	r3, #1
 8006c0a:	2300      	movne	r3, #0
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	461a      	mov	r2, r3
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d093      	beq.n	8006b3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c2e:	e071      	b.n	8006d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c3e:	d123      	bne.n	8006c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c74:	f043 0204 	orr.w	r2, r3, #4
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e067      	b.n	8006d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c8e:	d041      	beq.n	8006d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c90:	f7fe fb9a 	bl	80053c8 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d302      	bcc.n	8006ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d136      	bne.n	8006d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	0c1b      	lsrs	r3, r3, #16
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d10c      	bne.n	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	43da      	mvns	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bf14      	ite	ne
 8006cc2:	2301      	movne	r3, #1
 8006cc4:	2300      	moveq	r3, #0
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	e00b      	b.n	8006ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	43da      	mvns	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bf14      	ite	ne
 8006cdc:	2301      	movne	r3, #1
 8006cde:	2300      	moveq	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d016      	beq.n	8006d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d00:	f043 0220 	orr.w	r2, r3, #32
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e021      	b.n	8006d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	0c1b      	lsrs	r3, r3, #16
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d10c      	bne.n	8006d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	43da      	mvns	r2, r3
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bf14      	ite	ne
 8006d30:	2301      	movne	r3, #1
 8006d32:	2300      	moveq	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	e00b      	b.n	8006d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	43da      	mvns	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4013      	ands	r3, r2
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bf14      	ite	ne
 8006d4a:	2301      	movne	r3, #1
 8006d4c:	2300      	moveq	r3, #0
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f47f af6d 	bne.w	8006c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d6c:	e034      	b.n	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 f8e3 	bl	8006f3a <I2C_IsAcknowledgeFailed>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e034      	b.n	8006de8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d84:	d028      	beq.n	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d86:	f7fe fb1f 	bl	80053c8 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d302      	bcc.n	8006d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d11d      	bne.n	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da6:	2b80      	cmp	r3, #128	@ 0x80
 8006da8:	d016      	beq.n	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc4:	f043 0220 	orr.w	r2, r3, #32
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e007      	b.n	8006de8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de2:	2b80      	cmp	r3, #128	@ 0x80
 8006de4:	d1c3      	bne.n	8006d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dfc:	e034      	b.n	8006e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 f89b 	bl	8006f3a <I2C_IsAcknowledgeFailed>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e034      	b.n	8006e78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e14:	d028      	beq.n	8006e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e16:	f7fe fad7 	bl	80053c8 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d302      	bcc.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d11d      	bne.n	8006e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d016      	beq.n	8006e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e54:	f043 0220 	orr.w	r2, r3, #32
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e007      	b.n	8006e78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d1c3      	bne.n	8006dfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e8c:	e049      	b.n	8006f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d119      	bne.n	8006ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0210 	mvn.w	r2, #16
 8006ea4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e030      	b.n	8006f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed0:	f7fe fa7a 	bl	80053c8 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d302      	bcc.n	8006ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d11d      	bne.n	8006f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef0:	2b40      	cmp	r3, #64	@ 0x40
 8006ef2:	d016      	beq.n	8006f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	f043 0220 	orr.w	r2, r3, #32
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e007      	b.n	8006f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2c:	2b40      	cmp	r3, #64	@ 0x40
 8006f2e:	d1ae      	bne.n	8006e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f50:	d11b      	bne.n	8006f8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f76:	f043 0204 	orr.w	r2, r3, #4
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e0cc      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fac:	4b68      	ldr	r3, [pc, #416]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 030f 	and.w	r3, r3, #15
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d90c      	bls.n	8006fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fba:	4b65      	ldr	r3, [pc, #404]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc2:	4b63      	ldr	r3, [pc, #396]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d001      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e0b8      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d020      	beq.n	8007022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fec:	4b59      	ldr	r3, [pc, #356]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	4a58      	ldr	r2, [pc, #352]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0308 	and.w	r3, r3, #8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007004:	4b53      	ldr	r3, [pc, #332]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	4a52      	ldr	r2, [pc, #328]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800700e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007010:	4b50      	ldr	r3, [pc, #320]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	494d      	ldr	r1, [pc, #308]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d044      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d107      	bne.n	8007046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007036:	4b47      	ldr	r3, [pc, #284]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d119      	bne.n	8007076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e07f      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d003      	beq.n	8007056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007052:	2b03      	cmp	r3, #3
 8007054:	d107      	bne.n	8007066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007056:	4b3f      	ldr	r3, [pc, #252]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d109      	bne.n	8007076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e06f      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007066:	4b3b      	ldr	r3, [pc, #236]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e067      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007076:	4b37      	ldr	r3, [pc, #220]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f023 0203 	bic.w	r2, r3, #3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4934      	ldr	r1, [pc, #208]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007084:	4313      	orrs	r3, r2
 8007086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007088:	f7fe f99e 	bl	80053c8 <HAL_GetTick>
 800708c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800708e:	e00a      	b.n	80070a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007090:	f7fe f99a 	bl	80053c8 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800709e:	4293      	cmp	r3, r2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e04f      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070a6:	4b2b      	ldr	r3, [pc, #172]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 020c 	and.w	r2, r3, #12
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d1eb      	bne.n	8007090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070b8:	4b25      	ldr	r3, [pc, #148]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 030f 	and.w	r3, r3, #15
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d20c      	bcs.n	80070e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070c6:	4b22      	ldr	r3, [pc, #136]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ce:	4b20      	ldr	r3, [pc, #128]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d001      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e032      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d008      	beq.n	80070fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070ec:	4b19      	ldr	r3, [pc, #100]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	4916      	ldr	r1, [pc, #88]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0308 	and.w	r3, r3, #8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800710a:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	490e      	ldr	r1, [pc, #56]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800711a:	4313      	orrs	r3, r2
 800711c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800711e:	f000 f887 	bl	8007230 <HAL_RCC_GetSysClockFreq>
 8007122:	4602      	mov	r2, r0
 8007124:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	091b      	lsrs	r3, r3, #4
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	490a      	ldr	r1, [pc, #40]	@ (8007158 <HAL_RCC_ClockConfig+0x1c0>)
 8007130:	5ccb      	ldrb	r3, [r1, r3]
 8007132:	fa22 f303 	lsr.w	r3, r2, r3
 8007136:	4a09      	ldr	r2, [pc, #36]	@ (800715c <HAL_RCC_ClockConfig+0x1c4>)
 8007138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800713a:	4b09      	ldr	r3, [pc, #36]	@ (8007160 <HAL_RCC_ClockConfig+0x1c8>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f7fc faee 	bl	8003720 <HAL_InitTick>

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40023c00 	.word	0x40023c00
 8007154:	40023800 	.word	0x40023800
 8007158:	08010208 	.word	0x08010208
 800715c:	20000024 	.word	0x20000024
 8007160:	20000058 	.word	0x20000058

08007164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007168:	4b03      	ldr	r3, [pc, #12]	@ (8007178 <HAL_RCC_GetHCLKFreq+0x14>)
 800716a:	681b      	ldr	r3, [r3, #0]
}
 800716c:	4618      	mov	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000024 	.word	0x20000024

0800717c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007180:	f7ff fff0 	bl	8007164 <HAL_RCC_GetHCLKFreq>
 8007184:	4602      	mov	r2, r0
 8007186:	4b05      	ldr	r3, [pc, #20]	@ (800719c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	0a9b      	lsrs	r3, r3, #10
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	4903      	ldr	r1, [pc, #12]	@ (80071a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007192:	5ccb      	ldrb	r3, [r1, r3]
 8007194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007198:	4618      	mov	r0, r3
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40023800 	.word	0x40023800
 80071a0:	08010218 	.word	0x08010218

080071a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071a8:	f7ff ffdc 	bl	8007164 <HAL_RCC_GetHCLKFreq>
 80071ac:	4602      	mov	r2, r0
 80071ae:	4b05      	ldr	r3, [pc, #20]	@ (80071c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	0b5b      	lsrs	r3, r3, #13
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	4903      	ldr	r1, [pc, #12]	@ (80071c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071ba:	5ccb      	ldrb	r3, [r1, r3]
 80071bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	40023800 	.word	0x40023800
 80071c8:	08010218 	.word	0x08010218

080071cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	220f      	movs	r2, #15
 80071da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80071dc:	4b12      	ldr	r3, [pc, #72]	@ (8007228 <HAL_RCC_GetClockConfig+0x5c>)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 0203 	and.w	r2, r3, #3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80071e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007228 <HAL_RCC_GetClockConfig+0x5c>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80071f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <HAL_RCC_GetClockConfig+0x5c>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007200:	4b09      	ldr	r3, [pc, #36]	@ (8007228 <HAL_RCC_GetClockConfig+0x5c>)
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	08db      	lsrs	r3, r3, #3
 8007206:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800720e:	4b07      	ldr	r3, [pc, #28]	@ (800722c <HAL_RCC_GetClockConfig+0x60>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 020f 	and.w	r2, r3, #15
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	601a      	str	r2, [r3, #0]
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40023800 	.word	0x40023800
 800722c:	40023c00 	.word	0x40023c00

08007230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007234:	b0ae      	sub	sp, #184	@ 0xb8
 8007236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007256:	4bcb      	ldr	r3, [pc, #812]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x354>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 030c 	and.w	r3, r3, #12
 800725e:	2b0c      	cmp	r3, #12
 8007260:	f200 8204 	bhi.w	800766c <HAL_RCC_GetSysClockFreq+0x43c>
 8007264:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726a:	bf00      	nop
 800726c:	080072a1 	.word	0x080072a1
 8007270:	0800766d 	.word	0x0800766d
 8007274:	0800766d 	.word	0x0800766d
 8007278:	0800766d 	.word	0x0800766d
 800727c:	080072a9 	.word	0x080072a9
 8007280:	0800766d 	.word	0x0800766d
 8007284:	0800766d 	.word	0x0800766d
 8007288:	0800766d 	.word	0x0800766d
 800728c:	080072b1 	.word	0x080072b1
 8007290:	0800766d 	.word	0x0800766d
 8007294:	0800766d 	.word	0x0800766d
 8007298:	0800766d 	.word	0x0800766d
 800729c:	080074a1 	.word	0x080074a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072a0:	4bb9      	ldr	r3, [pc, #740]	@ (8007588 <HAL_RCC_GetSysClockFreq+0x358>)
 80072a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80072a6:	e1e5      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072a8:	4bb7      	ldr	r3, [pc, #732]	@ (8007588 <HAL_RCC_GetSysClockFreq+0x358>)
 80072aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80072ae:	e1e1      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072b0:	4bb4      	ldr	r3, [pc, #720]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x354>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072bc:	4bb1      	ldr	r3, [pc, #708]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x354>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d071      	beq.n	80073ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072c8:	4bae      	ldr	r3, [pc, #696]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x354>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	099b      	lsrs	r3, r3, #6
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072d4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80072d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072e4:	2300      	movs	r3, #0
 80072e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80072ee:	4622      	mov	r2, r4
 80072f0:	462b      	mov	r3, r5
 80072f2:	f04f 0000 	mov.w	r0, #0
 80072f6:	f04f 0100 	mov.w	r1, #0
 80072fa:	0159      	lsls	r1, r3, #5
 80072fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007300:	0150      	lsls	r0, r2, #5
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4621      	mov	r1, r4
 8007308:	1a51      	subs	r1, r2, r1
 800730a:	6439      	str	r1, [r7, #64]	@ 0x40
 800730c:	4629      	mov	r1, r5
 800730e:	eb63 0301 	sbc.w	r3, r3, r1
 8007312:	647b      	str	r3, [r7, #68]	@ 0x44
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007320:	4649      	mov	r1, r9
 8007322:	018b      	lsls	r3, r1, #6
 8007324:	4641      	mov	r1, r8
 8007326:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800732a:	4641      	mov	r1, r8
 800732c:	018a      	lsls	r2, r1, #6
 800732e:	4641      	mov	r1, r8
 8007330:	1a51      	subs	r1, r2, r1
 8007332:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007334:	4649      	mov	r1, r9
 8007336:	eb63 0301 	sbc.w	r3, r3, r1
 800733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007348:	4649      	mov	r1, r9
 800734a:	00cb      	lsls	r3, r1, #3
 800734c:	4641      	mov	r1, r8
 800734e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007352:	4641      	mov	r1, r8
 8007354:	00ca      	lsls	r2, r1, #3
 8007356:	4610      	mov	r0, r2
 8007358:	4619      	mov	r1, r3
 800735a:	4603      	mov	r3, r0
 800735c:	4622      	mov	r2, r4
 800735e:	189b      	adds	r3, r3, r2
 8007360:	633b      	str	r3, [r7, #48]	@ 0x30
 8007362:	462b      	mov	r3, r5
 8007364:	460a      	mov	r2, r1
 8007366:	eb42 0303 	adc.w	r3, r2, r3
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007378:	4629      	mov	r1, r5
 800737a:	028b      	lsls	r3, r1, #10
 800737c:	4621      	mov	r1, r4
 800737e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007382:	4621      	mov	r1, r4
 8007384:	028a      	lsls	r2, r1, #10
 8007386:	4610      	mov	r0, r2
 8007388:	4619      	mov	r1, r3
 800738a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800738e:	2200      	movs	r2, #0
 8007390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007394:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007398:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800739c:	f7f9 fcc4 	bl	8000d28 <__aeabi_uldivmod>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4613      	mov	r3, r2
 80073a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073aa:	e067      	b.n	800747c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073ac:	4b75      	ldr	r3, [pc, #468]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x354>)
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	099b      	lsrs	r3, r3, #6
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073b8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80073bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073c6:	2300      	movs	r3, #0
 80073c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80073ce:	4622      	mov	r2, r4
 80073d0:	462b      	mov	r3, r5
 80073d2:	f04f 0000 	mov.w	r0, #0
 80073d6:	f04f 0100 	mov.w	r1, #0
 80073da:	0159      	lsls	r1, r3, #5
 80073dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073e0:	0150      	lsls	r0, r2, #5
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4621      	mov	r1, r4
 80073e8:	1a51      	subs	r1, r2, r1
 80073ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80073ec:	4629      	mov	r1, r5
 80073ee:	eb63 0301 	sbc.w	r3, r3, r1
 80073f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007400:	4649      	mov	r1, r9
 8007402:	018b      	lsls	r3, r1, #6
 8007404:	4641      	mov	r1, r8
 8007406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800740a:	4641      	mov	r1, r8
 800740c:	018a      	lsls	r2, r1, #6
 800740e:	4641      	mov	r1, r8
 8007410:	ebb2 0a01 	subs.w	sl, r2, r1
 8007414:	4649      	mov	r1, r9
 8007416:	eb63 0b01 	sbc.w	fp, r3, r1
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007426:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800742a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800742e:	4692      	mov	sl, r2
 8007430:	469b      	mov	fp, r3
 8007432:	4623      	mov	r3, r4
 8007434:	eb1a 0303 	adds.w	r3, sl, r3
 8007438:	623b      	str	r3, [r7, #32]
 800743a:	462b      	mov	r3, r5
 800743c:	eb4b 0303 	adc.w	r3, fp, r3
 8007440:	627b      	str	r3, [r7, #36]	@ 0x24
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800744e:	4629      	mov	r1, r5
 8007450:	028b      	lsls	r3, r1, #10
 8007452:	4621      	mov	r1, r4
 8007454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007458:	4621      	mov	r1, r4
 800745a:	028a      	lsls	r2, r1, #10
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
 8007460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007464:	2200      	movs	r2, #0
 8007466:	673b      	str	r3, [r7, #112]	@ 0x70
 8007468:	677a      	str	r2, [r7, #116]	@ 0x74
 800746a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800746e:	f7f9 fc5b 	bl	8000d28 <__aeabi_uldivmod>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4613      	mov	r3, r2
 8007478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800747c:	4b41      	ldr	r3, [pc, #260]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x354>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	0c1b      	lsrs	r3, r3, #16
 8007482:	f003 0303 	and.w	r3, r3, #3
 8007486:	3301      	adds	r3, #1
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800748e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007496:	fbb2 f3f3 	udiv	r3, r2, r3
 800749a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800749e:	e0e9      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074a0:	4b38      	ldr	r3, [pc, #224]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x354>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074ac:	4b35      	ldr	r3, [pc, #212]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x354>)
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d069      	beq.n	800758c <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074b8:	4b32      	ldr	r3, [pc, #200]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x354>)
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	099b      	lsrs	r3, r3, #6
 80074be:	2200      	movs	r2, #0
 80074c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80074cc:	2300      	movs	r3, #0
 80074ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80074d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80074d4:	4622      	mov	r2, r4
 80074d6:	462b      	mov	r3, r5
 80074d8:	f04f 0000 	mov.w	r0, #0
 80074dc:	f04f 0100 	mov.w	r1, #0
 80074e0:	0159      	lsls	r1, r3, #5
 80074e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074e6:	0150      	lsls	r0, r2, #5
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4621      	mov	r1, r4
 80074ee:	1a51      	subs	r1, r2, r1
 80074f0:	61b9      	str	r1, [r7, #24]
 80074f2:	4629      	mov	r1, r5
 80074f4:	eb63 0301 	sbc.w	r3, r3, r1
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	f04f 0300 	mov.w	r3, #0
 8007502:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007506:	4659      	mov	r1, fp
 8007508:	018b      	lsls	r3, r1, #6
 800750a:	4651      	mov	r1, sl
 800750c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007510:	4651      	mov	r1, sl
 8007512:	018a      	lsls	r2, r1, #6
 8007514:	4651      	mov	r1, sl
 8007516:	ebb2 0801 	subs.w	r8, r2, r1
 800751a:	4659      	mov	r1, fp
 800751c:	eb63 0901 	sbc.w	r9, r3, r1
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800752c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007530:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007534:	4690      	mov	r8, r2
 8007536:	4699      	mov	r9, r3
 8007538:	4623      	mov	r3, r4
 800753a:	eb18 0303 	adds.w	r3, r8, r3
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	462b      	mov	r3, r5
 8007542:	eb49 0303 	adc.w	r3, r9, r3
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007554:	4629      	mov	r1, r5
 8007556:	028b      	lsls	r3, r1, #10
 8007558:	4621      	mov	r1, r4
 800755a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800755e:	4621      	mov	r1, r4
 8007560:	028a      	lsls	r2, r1, #10
 8007562:	4610      	mov	r0, r2
 8007564:	4619      	mov	r1, r3
 8007566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800756a:	2200      	movs	r2, #0
 800756c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800756e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007570:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007574:	f7f9 fbd8 	bl	8000d28 <__aeabi_uldivmod>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4613      	mov	r3, r2
 800757e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007582:	e063      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x41c>
 8007584:	40023800 	.word	0x40023800
 8007588:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800758c:	4b3d      	ldr	r3, [pc, #244]	@ (8007684 <HAL_RCC_GetSysClockFreq+0x454>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	099b      	lsrs	r3, r3, #6
 8007592:	2200      	movs	r2, #0
 8007594:	4618      	mov	r0, r3
 8007596:	4611      	mov	r1, r2
 8007598:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800759c:	653b      	str	r3, [r7, #80]	@ 0x50
 800759e:	2300      	movs	r3, #0
 80075a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80075a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80075a6:	4642      	mov	r2, r8
 80075a8:	464b      	mov	r3, r9
 80075aa:	f04f 0000 	mov.w	r0, #0
 80075ae:	f04f 0100 	mov.w	r1, #0
 80075b2:	0159      	lsls	r1, r3, #5
 80075b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075b8:	0150      	lsls	r0, r2, #5
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4641      	mov	r1, r8
 80075c0:	1a51      	subs	r1, r2, r1
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	4649      	mov	r1, r9
 80075c6:	eb63 0301 	sbc.w	r3, r3, r1
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80075d8:	4659      	mov	r1, fp
 80075da:	018b      	lsls	r3, r1, #6
 80075dc:	4651      	mov	r1, sl
 80075de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80075e2:	4651      	mov	r1, sl
 80075e4:	018a      	lsls	r2, r1, #6
 80075e6:	4651      	mov	r1, sl
 80075e8:	1a54      	subs	r4, r2, r1
 80075ea:	4659      	mov	r1, fp
 80075ec:	eb63 0501 	sbc.w	r5, r3, r1
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	00eb      	lsls	r3, r5, #3
 80075fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075fe:	00e2      	lsls	r2, r4, #3
 8007600:	4614      	mov	r4, r2
 8007602:	461d      	mov	r5, r3
 8007604:	4643      	mov	r3, r8
 8007606:	18e3      	adds	r3, r4, r3
 8007608:	603b      	str	r3, [r7, #0]
 800760a:	464b      	mov	r3, r9
 800760c:	eb45 0303 	adc.w	r3, r5, r3
 8007610:	607b      	str	r3, [r7, #4]
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	f04f 0300 	mov.w	r3, #0
 800761a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800761e:	4629      	mov	r1, r5
 8007620:	028b      	lsls	r3, r1, #10
 8007622:	4621      	mov	r1, r4
 8007624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007628:	4621      	mov	r1, r4
 800762a:	028a      	lsls	r2, r1, #10
 800762c:	4610      	mov	r0, r2
 800762e:	4619      	mov	r1, r3
 8007630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007634:	2200      	movs	r2, #0
 8007636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007638:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800763a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800763e:	f7f9 fb73 	bl	8000d28 <__aeabi_uldivmod>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	4613      	mov	r3, r2
 8007648:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800764c:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <HAL_RCC_GetSysClockFreq+0x454>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	0f1b      	lsrs	r3, r3, #28
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800765a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800765e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007662:	fbb2 f3f3 	udiv	r3, r2, r3
 8007666:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800766a:	e003      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800766c:	4b06      	ldr	r3, [pc, #24]	@ (8007688 <HAL_RCC_GetSysClockFreq+0x458>)
 800766e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007672:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007674:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007678:	4618      	mov	r0, r3
 800767a:	37b8      	adds	r7, #184	@ 0xb8
 800767c:	46bd      	mov	sp, r7
 800767e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007682:	bf00      	nop
 8007684:	40023800 	.word	0x40023800
 8007688:	00f42400 	.word	0x00f42400

0800768c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e28d      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8083 	beq.w	80077b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80076ac:	4b94      	ldr	r3, [pc, #592]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 030c 	and.w	r3, r3, #12
 80076b4:	2b04      	cmp	r3, #4
 80076b6:	d019      	beq.n	80076ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80076b8:	4b91      	ldr	r3, [pc, #580]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d106      	bne.n	80076d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80076c4:	4b8e      	ldr	r3, [pc, #568]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076d0:	d00c      	beq.n	80076ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076d2:	4b8b      	ldr	r3, [pc, #556]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80076da:	2b0c      	cmp	r3, #12
 80076dc:	d112      	bne.n	8007704 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076de:	4b88      	ldr	r3, [pc, #544]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076ea:	d10b      	bne.n	8007704 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076ec:	4b84      	ldr	r3, [pc, #528]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d05b      	beq.n	80077b0 <HAL_RCC_OscConfig+0x124>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d157      	bne.n	80077b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e25a      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800770c:	d106      	bne.n	800771c <HAL_RCC_OscConfig+0x90>
 800770e:	4b7c      	ldr	r3, [pc, #496]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a7b      	ldr	r2, [pc, #492]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	e01d      	b.n	8007758 <HAL_RCC_OscConfig+0xcc>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007724:	d10c      	bne.n	8007740 <HAL_RCC_OscConfig+0xb4>
 8007726:	4b76      	ldr	r3, [pc, #472]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a75      	ldr	r2, [pc, #468]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 800772c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	4b73      	ldr	r3, [pc, #460]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a72      	ldr	r2, [pc, #456]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	e00b      	b.n	8007758 <HAL_RCC_OscConfig+0xcc>
 8007740:	4b6f      	ldr	r3, [pc, #444]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a6e      	ldr	r2, [pc, #440]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	4b6c      	ldr	r3, [pc, #432]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a6b      	ldr	r2, [pc, #428]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d013      	beq.n	8007788 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007760:	f7fd fe32 	bl	80053c8 <HAL_GetTick>
 8007764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007766:	e008      	b.n	800777a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007768:	f7fd fe2e 	bl	80053c8 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b64      	cmp	r3, #100	@ 0x64
 8007774:	d901      	bls.n	800777a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e21f      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800777a:	4b61      	ldr	r3, [pc, #388]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0f0      	beq.n	8007768 <HAL_RCC_OscConfig+0xdc>
 8007786:	e014      	b.n	80077b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007788:	f7fd fe1e 	bl	80053c8 <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800778e:	e008      	b.n	80077a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007790:	f7fd fe1a 	bl	80053c8 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b64      	cmp	r3, #100	@ 0x64
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e20b      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077a2:	4b57      	ldr	r3, [pc, #348]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1f0      	bne.n	8007790 <HAL_RCC_OscConfig+0x104>
 80077ae:	e000      	b.n	80077b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d06f      	beq.n	800789e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80077be:	4b50      	ldr	r3, [pc, #320]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f003 030c 	and.w	r3, r3, #12
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d017      	beq.n	80077fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80077ca:	4b4d      	ldr	r3, [pc, #308]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	d105      	bne.n	80077e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80077d6:	4b4a      	ldr	r3, [pc, #296]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00b      	beq.n	80077fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077e2:	4b47      	ldr	r3, [pc, #284]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80077ea:	2b0c      	cmp	r3, #12
 80077ec:	d11c      	bne.n	8007828 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077ee:	4b44      	ldr	r3, [pc, #272]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d116      	bne.n	8007828 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077fa:	4b41      	ldr	r3, [pc, #260]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d005      	beq.n	8007812 <HAL_RCC_OscConfig+0x186>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d001      	beq.n	8007812 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e1d3      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007812:	4b3b      	ldr	r3, [pc, #236]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	4937      	ldr	r1, [pc, #220]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007822:	4313      	orrs	r3, r2
 8007824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007826:	e03a      	b.n	800789e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d020      	beq.n	8007872 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007830:	4b34      	ldr	r3, [pc, #208]	@ (8007904 <HAL_RCC_OscConfig+0x278>)
 8007832:	2201      	movs	r2, #1
 8007834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007836:	f7fd fdc7 	bl	80053c8 <HAL_GetTick>
 800783a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800783c:	e008      	b.n	8007850 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800783e:	f7fd fdc3 	bl	80053c8 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b02      	cmp	r3, #2
 800784a:	d901      	bls.n	8007850 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e1b4      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007850:	4b2b      	ldr	r3, [pc, #172]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0f0      	beq.n	800783e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800785c:	4b28      	ldr	r3, [pc, #160]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	4925      	ldr	r1, [pc, #148]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 800786c:	4313      	orrs	r3, r2
 800786e:	600b      	str	r3, [r1, #0]
 8007870:	e015      	b.n	800789e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007872:	4b24      	ldr	r3, [pc, #144]	@ (8007904 <HAL_RCC_OscConfig+0x278>)
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007878:	f7fd fda6 	bl	80053c8 <HAL_GetTick>
 800787c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800787e:	e008      	b.n	8007892 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007880:	f7fd fda2 	bl	80053c8 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e193      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007892:	4b1b      	ldr	r3, [pc, #108]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1f0      	bne.n	8007880 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d036      	beq.n	8007918 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d016      	beq.n	80078e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078b2:	4b15      	ldr	r3, [pc, #84]	@ (8007908 <HAL_RCC_OscConfig+0x27c>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b8:	f7fd fd86 	bl	80053c8 <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078c0:	f7fd fd82 	bl	80053c8 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e173      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007900 <HAL_RCC_OscConfig+0x274>)
 80078d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0f0      	beq.n	80078c0 <HAL_RCC_OscConfig+0x234>
 80078de:	e01b      	b.n	8007918 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078e0:	4b09      	ldr	r3, [pc, #36]	@ (8007908 <HAL_RCC_OscConfig+0x27c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e6:	f7fd fd6f 	bl	80053c8 <HAL_GetTick>
 80078ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078ec:	e00e      	b.n	800790c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078ee:	f7fd fd6b 	bl	80053c8 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d907      	bls.n	800790c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e15c      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
 8007900:	40023800 	.word	0x40023800
 8007904:	42470000 	.word	0x42470000
 8007908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800790c:	4b8a      	ldr	r3, [pc, #552]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 800790e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1ea      	bne.n	80078ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8097 	beq.w	8007a54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800792a:	4b83      	ldr	r3, [pc, #524]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 800792c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10f      	bne.n	8007956 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007936:	2300      	movs	r3, #0
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	4b7f      	ldr	r3, [pc, #508]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 800793c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793e:	4a7e      	ldr	r2, [pc, #504]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 8007940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007944:	6413      	str	r3, [r2, #64]	@ 0x40
 8007946:	4b7c      	ldr	r3, [pc, #496]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 8007948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800794e:	60bb      	str	r3, [r7, #8]
 8007950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007956:	4b79      	ldr	r3, [pc, #484]	@ (8007b3c <HAL_RCC_OscConfig+0x4b0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800795e:	2b00      	cmp	r3, #0
 8007960:	d118      	bne.n	8007994 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007962:	4b76      	ldr	r3, [pc, #472]	@ (8007b3c <HAL_RCC_OscConfig+0x4b0>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a75      	ldr	r2, [pc, #468]	@ (8007b3c <HAL_RCC_OscConfig+0x4b0>)
 8007968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800796c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800796e:	f7fd fd2b 	bl	80053c8 <HAL_GetTick>
 8007972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007974:	e008      	b.n	8007988 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007976:	f7fd fd27 	bl	80053c8 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	2b02      	cmp	r3, #2
 8007982:	d901      	bls.n	8007988 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e118      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007988:	4b6c      	ldr	r3, [pc, #432]	@ (8007b3c <HAL_RCC_OscConfig+0x4b0>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0f0      	beq.n	8007976 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d106      	bne.n	80079aa <HAL_RCC_OscConfig+0x31e>
 800799c:	4b66      	ldr	r3, [pc, #408]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 800799e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a0:	4a65      	ldr	r2, [pc, #404]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 80079a2:	f043 0301 	orr.w	r3, r3, #1
 80079a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80079a8:	e01c      	b.n	80079e4 <HAL_RCC_OscConfig+0x358>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	d10c      	bne.n	80079cc <HAL_RCC_OscConfig+0x340>
 80079b2:	4b61      	ldr	r3, [pc, #388]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 80079b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b6:	4a60      	ldr	r2, [pc, #384]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 80079b8:	f043 0304 	orr.w	r3, r3, #4
 80079bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80079be:	4b5e      	ldr	r3, [pc, #376]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c2:	4a5d      	ldr	r2, [pc, #372]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 80079c4:	f043 0301 	orr.w	r3, r3, #1
 80079c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80079ca:	e00b      	b.n	80079e4 <HAL_RCC_OscConfig+0x358>
 80079cc:	4b5a      	ldr	r3, [pc, #360]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 80079ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d0:	4a59      	ldr	r2, [pc, #356]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 80079d2:	f023 0301 	bic.w	r3, r3, #1
 80079d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80079d8:	4b57      	ldr	r3, [pc, #348]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 80079da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079dc:	4a56      	ldr	r2, [pc, #344]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 80079de:	f023 0304 	bic.w	r3, r3, #4
 80079e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d015      	beq.n	8007a18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ec:	f7fd fcec 	bl	80053c8 <HAL_GetTick>
 80079f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f2:	e00a      	b.n	8007a0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f4:	f7fd fce8 	bl	80053c8 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e0d7      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0ee      	beq.n	80079f4 <HAL_RCC_OscConfig+0x368>
 8007a16:	e014      	b.n	8007a42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a18:	f7fd fcd6 	bl	80053c8 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a1e:	e00a      	b.n	8007a36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a20:	f7fd fcd2 	bl	80053c8 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e0c1      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a36:	4b40      	ldr	r3, [pc, #256]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1ee      	bne.n	8007a20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d105      	bne.n	8007a54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a48:	4b3b      	ldr	r3, [pc, #236]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4c:	4a3a      	ldr	r2, [pc, #232]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 8007a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 80ad 	beq.w	8007bb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a5e:	4b36      	ldr	r3, [pc, #216]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 030c 	and.w	r3, r3, #12
 8007a66:	2b08      	cmp	r3, #8
 8007a68:	d060      	beq.n	8007b2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d145      	bne.n	8007afe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a72:	4b33      	ldr	r3, [pc, #204]	@ (8007b40 <HAL_RCC_OscConfig+0x4b4>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a78:	f7fd fca6 	bl	80053c8 <HAL_GetTick>
 8007a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a80:	f7fd fca2 	bl	80053c8 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e093      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a92:	4b29      	ldr	r3, [pc, #164]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f0      	bne.n	8007a80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	69da      	ldr	r2, [r3, #28]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aac:	019b      	lsls	r3, r3, #6
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab4:	085b      	lsrs	r3, r3, #1
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	041b      	lsls	r3, r3, #16
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac0:	061b      	lsls	r3, r3, #24
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac8:	071b      	lsls	r3, r3, #28
 8007aca:	491b      	ldr	r1, [pc, #108]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8007b40 <HAL_RCC_OscConfig+0x4b4>)
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad6:	f7fd fc77 	bl	80053c8 <HAL_GetTick>
 8007ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007adc:	e008      	b.n	8007af0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ade:	f7fd fc73 	bl	80053c8 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d901      	bls.n	8007af0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e064      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af0:	4b11      	ldr	r3, [pc, #68]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0f0      	beq.n	8007ade <HAL_RCC_OscConfig+0x452>
 8007afc:	e05c      	b.n	8007bb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007afe:	4b10      	ldr	r3, [pc, #64]	@ (8007b40 <HAL_RCC_OscConfig+0x4b4>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b04:	f7fd fc60 	bl	80053c8 <HAL_GetTick>
 8007b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b0a:	e008      	b.n	8007b1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b0c:	f7fd fc5c 	bl	80053c8 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d901      	bls.n	8007b1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e04d      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b1e:	4b06      	ldr	r3, [pc, #24]	@ (8007b38 <HAL_RCC_OscConfig+0x4ac>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1f0      	bne.n	8007b0c <HAL_RCC_OscConfig+0x480>
 8007b2a:	e045      	b.n	8007bb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d107      	bne.n	8007b44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e040      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
 8007b38:	40023800 	.word	0x40023800
 8007b3c:	40007000 	.word	0x40007000
 8007b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b44:	4b1f      	ldr	r3, [pc, #124]	@ (8007bc4 <HAL_RCC_OscConfig+0x538>)
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d030      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d129      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d122      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b74:	4013      	ands	r3, r2
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d119      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8a:	085b      	lsrs	r3, r3, #1
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d10f      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d107      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d001      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	40023800 	.word	0x40023800

08007bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e07b      	b.n	8007cd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d108      	bne.n	8007bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bea:	d009      	beq.n	8007c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	61da      	str	r2, [r3, #28]
 8007bf2:	e005      	b.n	8007c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fb fc98 	bl	8003550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c70:	431a      	orrs	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c84:	ea42 0103 	orr.w	r1, r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	f003 0104 	and.w	r1, r3, #4
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca6:	f003 0210 	and.w	r2, r3, #16
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69da      	ldr	r2, [r3, #28]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b08c      	sub	sp, #48	@ 0x30
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	607a      	str	r2, [r7, #4]
 8007ce6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <HAL_SPI_TransmitReceive+0x26>
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e198      	b.n	8008032 <HAL_SPI_TransmitReceive+0x358>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d08:	f7fd fb5e 	bl	80053c8 <HAL_GetTick>
 8007d0c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d1e:	887b      	ldrh	r3, [r7, #2]
 8007d20:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d00f      	beq.n	8007d4a <HAL_SPI_TransmitReceive+0x70>
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d30:	d107      	bne.n	8007d42 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d103      	bne.n	8007d42 <HAL_SPI_TransmitReceive+0x68>
 8007d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d003      	beq.n	8007d4a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d42:	2302      	movs	r3, #2
 8007d44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007d48:	e16d      	b.n	8008026 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <HAL_SPI_TransmitReceive+0x82>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <HAL_SPI_TransmitReceive+0x82>
 8007d56:	887b      	ldrh	r3, [r7, #2]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007d62:	e160      	b.n	8008026 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d003      	beq.n	8007d78 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2205      	movs	r2, #5
 8007d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	887a      	ldrh	r2, [r7, #2]
 8007d88:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	887a      	ldrh	r2, [r7, #2]
 8007d8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	887a      	ldrh	r2, [r7, #2]
 8007d9a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	887a      	ldrh	r2, [r7, #2]
 8007da0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db8:	2b40      	cmp	r3, #64	@ 0x40
 8007dba:	d007      	beq.n	8007dcc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dd4:	d17c      	bne.n	8007ed0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <HAL_SPI_TransmitReceive+0x10a>
 8007dde:	8b7b      	ldrh	r3, [r7, #26]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d16a      	bne.n	8007eba <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de8:	881a      	ldrh	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df4:	1c9a      	adds	r2, r3, #2
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e08:	e057      	b.n	8007eba <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d11b      	bne.n	8007e50 <HAL_SPI_TransmitReceive+0x176>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d016      	beq.n	8007e50 <HAL_SPI_TransmitReceive+0x176>
 8007e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d113      	bne.n	8007e50 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e2c:	881a      	ldrh	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e38:	1c9a      	adds	r2, r3, #2
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d119      	bne.n	8007e92 <HAL_SPI_TransmitReceive+0x1b8>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d014      	beq.n	8007e92 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e72:	b292      	uxth	r2, r2
 8007e74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7a:	1c9a      	adds	r2, r3, #2
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e92:	f7fd fa99 	bl	80053c8 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d80b      	bhi.n	8007eba <HAL_SPI_TransmitReceive+0x1e0>
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ea8:	d007      	beq.n	8007eba <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007eb8:	e0b5      	b.n	8008026 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1a2      	bne.n	8007e0a <HAL_SPI_TransmitReceive+0x130>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d19d      	bne.n	8007e0a <HAL_SPI_TransmitReceive+0x130>
 8007ece:	e080      	b.n	8007fd2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <HAL_SPI_TransmitReceive+0x204>
 8007ed8:	8b7b      	ldrh	r3, [r7, #26]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d16f      	bne.n	8007fbe <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	330c      	adds	r3, #12
 8007ee8:	7812      	ldrb	r2, [r2, #0]
 8007eea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f04:	e05b      	b.n	8007fbe <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d11c      	bne.n	8007f4e <HAL_SPI_TransmitReceive+0x274>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d017      	beq.n	8007f4e <HAL_SPI_TransmitReceive+0x274>
 8007f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d114      	bne.n	8007f4e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	7812      	ldrb	r2, [r2, #0]
 8007f30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	3b01      	subs	r3, #1
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d119      	bne.n	8007f90 <HAL_SPI_TransmitReceive+0x2b6>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d014      	beq.n	8007f90 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68da      	ldr	r2, [r3, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f90:	f7fd fa1a 	bl	80053c8 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d803      	bhi.n	8007fa8 <HAL_SPI_TransmitReceive+0x2ce>
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fa6:	d102      	bne.n	8007fae <HAL_SPI_TransmitReceive+0x2d4>
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d107      	bne.n	8007fbe <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007fbc:	e033      	b.n	8008026 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d19e      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x22c>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d199      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 f8b8 	bl	800814c <SPI_EndRxTxTransaction>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d006      	beq.n	8007ff0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007fee:	e01a      	b.n	8008026 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801c:	e003      	b.n	8008026 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800802e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008032:	4618      	mov	r0, r3
 8008034:	3730      	adds	r7, #48	@ 0x30
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	4613      	mov	r3, r2
 800804a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800804c:	f7fd f9bc 	bl	80053c8 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	4413      	add	r3, r2
 800805a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800805c:	f7fd f9b4 	bl	80053c8 <HAL_GetTick>
 8008060:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008062:	4b39      	ldr	r3, [pc, #228]	@ (8008148 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	015b      	lsls	r3, r3, #5
 8008068:	0d1b      	lsrs	r3, r3, #20
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	fb02 f303 	mul.w	r3, r2, r3
 8008070:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008072:	e054      	b.n	800811e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800807a:	d050      	beq.n	800811e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800807c:	f7fd f9a4 	bl	80053c8 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	429a      	cmp	r2, r3
 800808a:	d902      	bls.n	8008092 <SPI_WaitFlagStateUntilTimeout+0x56>
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d13d      	bne.n	800810e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80080a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080aa:	d111      	bne.n	80080d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080b4:	d004      	beq.n	80080c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080be:	d107      	bne.n	80080d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080d8:	d10f      	bne.n	80080fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e017      	b.n	800813e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	3b01      	subs	r3, #1
 800811c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4013      	ands	r3, r2
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	429a      	cmp	r2, r3
 800812c:	bf0c      	ite	eq
 800812e:	2301      	moveq	r3, #1
 8008130:	2300      	movne	r3, #0
 8008132:	b2db      	uxtb	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	429a      	cmp	r2, r3
 800813a:	d19b      	bne.n	8008074 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3720      	adds	r7, #32
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20000024 	.word	0x20000024

0800814c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af02      	add	r7, sp, #8
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2201      	movs	r2, #1
 8008160:	2102      	movs	r1, #2
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff ff6a 	bl	800803c <SPI_WaitFlagStateUntilTimeout>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d007      	beq.n	800817e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008172:	f043 0220 	orr.w	r2, r3, #32
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e032      	b.n	80081e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800817e:	4b1b      	ldr	r3, [pc, #108]	@ (80081ec <SPI_EndRxTxTransaction+0xa0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a1b      	ldr	r2, [pc, #108]	@ (80081f0 <SPI_EndRxTxTransaction+0xa4>)
 8008184:	fba2 2303 	umull	r2, r3, r2, r3
 8008188:	0d5b      	lsrs	r3, r3, #21
 800818a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800818e:	fb02 f303 	mul.w	r3, r2, r3
 8008192:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800819c:	d112      	bne.n	80081c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2200      	movs	r2, #0
 80081a6:	2180      	movs	r1, #128	@ 0x80
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f7ff ff47 	bl	800803c <SPI_WaitFlagStateUntilTimeout>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d016      	beq.n	80081e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b8:	f043 0220 	orr.w	r2, r3, #32
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e00f      	b.n	80081e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081da:	2b80      	cmp	r3, #128	@ 0x80
 80081dc:	d0f2      	beq.n	80081c4 <SPI_EndRxTxTransaction+0x78>
 80081de:	e000      	b.n	80081e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80081e0:	bf00      	nop
  }

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20000024 	.word	0x20000024
 80081f0:	165e9f81 	.word	0x165e9f81

080081f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e041      	b.n	800828a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7fb f9e0 	bl	80035e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3304      	adds	r3, #4
 8008230:	4619      	mov	r1, r3
 8008232:	4610      	mov	r0, r2
 8008234:	f000 fa1e 	bl	8008674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d001      	beq.n	80082ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e046      	b.n	800833a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a23      	ldr	r2, [pc, #140]	@ (8008348 <HAL_TIM_Base_Start+0xb4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d022      	beq.n	8008304 <HAL_TIM_Base_Start+0x70>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c6:	d01d      	beq.n	8008304 <HAL_TIM_Base_Start+0x70>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a1f      	ldr	r2, [pc, #124]	@ (800834c <HAL_TIM_Base_Start+0xb8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d018      	beq.n	8008304 <HAL_TIM_Base_Start+0x70>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008350 <HAL_TIM_Base_Start+0xbc>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d013      	beq.n	8008304 <HAL_TIM_Base_Start+0x70>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008354 <HAL_TIM_Base_Start+0xc0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00e      	beq.n	8008304 <HAL_TIM_Base_Start+0x70>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008358 <HAL_TIM_Base_Start+0xc4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d009      	beq.n	8008304 <HAL_TIM_Base_Start+0x70>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a19      	ldr	r2, [pc, #100]	@ (800835c <HAL_TIM_Base_Start+0xc8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <HAL_TIM_Base_Start+0x70>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a18      	ldr	r2, [pc, #96]	@ (8008360 <HAL_TIM_Base_Start+0xcc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d111      	bne.n	8008328 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b06      	cmp	r3, #6
 8008314:	d010      	beq.n	8008338 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f042 0201 	orr.w	r2, r2, #1
 8008324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008326:	e007      	b.n	8008338 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f042 0201 	orr.w	r2, r2, #1
 8008336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	40010000 	.word	0x40010000
 800834c:	40000400 	.word	0x40000400
 8008350:	40000800 	.word	0x40000800
 8008354:	40000c00 	.word	0x40000c00
 8008358:	40010400 	.word	0x40010400
 800835c:	40014000 	.word	0x40014000
 8008360:	40001800 	.word	0x40001800

08008364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b01      	cmp	r3, #1
 8008376:	d001      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e04e      	b.n	800841a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0201 	orr.w	r2, r2, #1
 8008392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a23      	ldr	r2, [pc, #140]	@ (8008428 <HAL_TIM_Base_Start_IT+0xc4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d022      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x80>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a6:	d01d      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x80>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1f      	ldr	r2, [pc, #124]	@ (800842c <HAL_TIM_Base_Start_IT+0xc8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d018      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x80>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008430 <HAL_TIM_Base_Start_IT+0xcc>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d013      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x80>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008434 <HAL_TIM_Base_Start_IT+0xd0>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00e      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x80>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008438 <HAL_TIM_Base_Start_IT+0xd4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d009      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x80>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a19      	ldr	r2, [pc, #100]	@ (800843c <HAL_TIM_Base_Start_IT+0xd8>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d004      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x80>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a18      	ldr	r2, [pc, #96]	@ (8008440 <HAL_TIM_Base_Start_IT+0xdc>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d111      	bne.n	8008408 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b06      	cmp	r3, #6
 80083f4:	d010      	beq.n	8008418 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f042 0201 	orr.w	r2, r2, #1
 8008404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008406:	e007      	b.n	8008418 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f042 0201 	orr.w	r2, r2, #1
 8008416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	40010000 	.word	0x40010000
 800842c:	40000400 	.word	0x40000400
 8008430:	40000800 	.word	0x40000800
 8008434:	40000c00 	.word	0x40000c00
 8008438:	40010400 	.word	0x40010400
 800843c:	40014000 	.word	0x40014000
 8008440:	40001800 	.word	0x40001800

08008444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f003 0302 	and.w	r3, r3, #2
 8008462:	2b00      	cmp	r3, #0
 8008464:	d020      	beq.n	80084a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01b      	beq.n	80084a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0202 	mvn.w	r2, #2
 8008478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f8d2 	bl	8008638 <HAL_TIM_IC_CaptureCallback>
 8008494:	e005      	b.n	80084a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f8c4 	bl	8008624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f8d5 	bl	800864c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f003 0304 	and.w	r3, r3, #4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d020      	beq.n	80084f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d01b      	beq.n	80084f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f06f 0204 	mvn.w	r2, #4
 80084c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2202      	movs	r2, #2
 80084ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f8ac 	bl	8008638 <HAL_TIM_IC_CaptureCallback>
 80084e0:	e005      	b.n	80084ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f89e 	bl	8008624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f8af 	bl	800864c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f003 0308 	and.w	r3, r3, #8
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d020      	beq.n	8008540 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f003 0308 	and.w	r3, r3, #8
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01b      	beq.n	8008540 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0208 	mvn.w	r2, #8
 8008510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2204      	movs	r2, #4
 8008516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f886 	bl	8008638 <HAL_TIM_IC_CaptureCallback>
 800852c:	e005      	b.n	800853a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f878 	bl	8008624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f889 	bl	800864c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f003 0310 	and.w	r3, r3, #16
 8008546:	2b00      	cmp	r3, #0
 8008548:	d020      	beq.n	800858c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f003 0310 	and.w	r3, r3, #16
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01b      	beq.n	800858c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f06f 0210 	mvn.w	r2, #16
 800855c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2208      	movs	r2, #8
 8008562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f860 	bl	8008638 <HAL_TIM_IC_CaptureCallback>
 8008578:	e005      	b.n	8008586 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f852 	bl	8008624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f863 	bl	800864c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00c      	beq.n	80085b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	d007      	beq.n	80085b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f06f 0201 	mvn.w	r2, #1
 80085a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7fa f9c4 	bl	8002938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00c      	beq.n	80085d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d007      	beq.n	80085d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80085cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f906 	bl	80087e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00c      	beq.n	80085f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d007      	beq.n	80085f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f834 	bl	8008660 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00c      	beq.n	800861c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b00      	cmp	r3, #0
 800860a:	d007      	beq.n	800861c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f06f 0220 	mvn.w	r2, #32
 8008614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f8d8 	bl	80087cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800861c:	bf00      	nop
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a46      	ldr	r2, [pc, #280]	@ (80087a0 <TIM_Base_SetConfig+0x12c>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d013      	beq.n	80086b4 <TIM_Base_SetConfig+0x40>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008692:	d00f      	beq.n	80086b4 <TIM_Base_SetConfig+0x40>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a43      	ldr	r2, [pc, #268]	@ (80087a4 <TIM_Base_SetConfig+0x130>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d00b      	beq.n	80086b4 <TIM_Base_SetConfig+0x40>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a42      	ldr	r2, [pc, #264]	@ (80087a8 <TIM_Base_SetConfig+0x134>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d007      	beq.n	80086b4 <TIM_Base_SetConfig+0x40>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a41      	ldr	r2, [pc, #260]	@ (80087ac <TIM_Base_SetConfig+0x138>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d003      	beq.n	80086b4 <TIM_Base_SetConfig+0x40>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a40      	ldr	r2, [pc, #256]	@ (80087b0 <TIM_Base_SetConfig+0x13c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d108      	bne.n	80086c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a35      	ldr	r2, [pc, #212]	@ (80087a0 <TIM_Base_SetConfig+0x12c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d02b      	beq.n	8008726 <TIM_Base_SetConfig+0xb2>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d4:	d027      	beq.n	8008726 <TIM_Base_SetConfig+0xb2>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a32      	ldr	r2, [pc, #200]	@ (80087a4 <TIM_Base_SetConfig+0x130>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d023      	beq.n	8008726 <TIM_Base_SetConfig+0xb2>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a31      	ldr	r2, [pc, #196]	@ (80087a8 <TIM_Base_SetConfig+0x134>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d01f      	beq.n	8008726 <TIM_Base_SetConfig+0xb2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a30      	ldr	r2, [pc, #192]	@ (80087ac <TIM_Base_SetConfig+0x138>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d01b      	beq.n	8008726 <TIM_Base_SetConfig+0xb2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a2f      	ldr	r2, [pc, #188]	@ (80087b0 <TIM_Base_SetConfig+0x13c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d017      	beq.n	8008726 <TIM_Base_SetConfig+0xb2>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a2e      	ldr	r2, [pc, #184]	@ (80087b4 <TIM_Base_SetConfig+0x140>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d013      	beq.n	8008726 <TIM_Base_SetConfig+0xb2>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a2d      	ldr	r2, [pc, #180]	@ (80087b8 <TIM_Base_SetConfig+0x144>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d00f      	beq.n	8008726 <TIM_Base_SetConfig+0xb2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a2c      	ldr	r2, [pc, #176]	@ (80087bc <TIM_Base_SetConfig+0x148>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00b      	beq.n	8008726 <TIM_Base_SetConfig+0xb2>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a2b      	ldr	r2, [pc, #172]	@ (80087c0 <TIM_Base_SetConfig+0x14c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d007      	beq.n	8008726 <TIM_Base_SetConfig+0xb2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a2a      	ldr	r2, [pc, #168]	@ (80087c4 <TIM_Base_SetConfig+0x150>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d003      	beq.n	8008726 <TIM_Base_SetConfig+0xb2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a29      	ldr	r2, [pc, #164]	@ (80087c8 <TIM_Base_SetConfig+0x154>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d108      	bne.n	8008738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800872c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	4313      	orrs	r3, r2
 8008736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	4313      	orrs	r3, r2
 8008744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a10      	ldr	r2, [pc, #64]	@ (80087a0 <TIM_Base_SetConfig+0x12c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d003      	beq.n	800876c <TIM_Base_SetConfig+0xf8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a12      	ldr	r2, [pc, #72]	@ (80087b0 <TIM_Base_SetConfig+0x13c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d103      	bne.n	8008774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	691a      	ldr	r2, [r3, #16]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b01      	cmp	r3, #1
 8008784:	d105      	bne.n	8008792 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	f023 0201 	bic.w	r2, r3, #1
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	611a      	str	r2, [r3, #16]
  }
}
 8008792:	bf00      	nop
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	40010000 	.word	0x40010000
 80087a4:	40000400 	.word	0x40000400
 80087a8:	40000800 	.word	0x40000800
 80087ac:	40000c00 	.word	0x40000c00
 80087b0:	40010400 	.word	0x40010400
 80087b4:	40014000 	.word	0x40014000
 80087b8:	40014400 	.word	0x40014400
 80087bc:	40014800 	.word	0x40014800
 80087c0:	40001800 	.word	0x40001800
 80087c4:	40001c00 	.word	0x40001c00
 80087c8:	40002000 	.word	0x40002000

080087cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e042      	b.n	800888c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d106      	bne.n	8008820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7fa ff02 	bl	8003624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2224      	movs	r2, #36	@ 0x24
 8008824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f9cb 	bl	8008bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800884c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	695a      	ldr	r2, [r3, #20]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800885c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68da      	ldr	r2, [r3, #12]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800886c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2220      	movs	r2, #32
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2220      	movs	r2, #32
 8008880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e04a      	b.n	800893c <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d106      	bne.n	80088c0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7fa feb2 	bl	8003624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2224      	movs	r2, #36	@ 0x24
 80088c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f97b 	bl	8008bd4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691a      	ldr	r2, [r3, #16]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	695a      	ldr	r2, [r3, #20]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80088fc:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	695a      	ldr	r2, [r3, #20]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f042 0208 	orr.w	r2, r2, #8
 800890c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800891c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2220      	movs	r2, #32
 8008928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2220      	movs	r2, #32
 8008930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	@ 0x28
 8008948:	af02      	add	r7, sp, #8
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	4613      	mov	r3, r2
 8008952:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b20      	cmp	r3, #32
 8008962:	d175      	bne.n	8008a50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <HAL_UART_Transmit+0x2c>
 800896a:	88fb      	ldrh	r3, [r7, #6]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e06e      	b.n	8008a52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2221      	movs	r2, #33	@ 0x21
 800897e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008982:	f7fc fd21 	bl	80053c8 <HAL_GetTick>
 8008986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	88fa      	ldrh	r2, [r7, #6]
 800898c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	88fa      	ldrh	r2, [r7, #6]
 8008992:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800899c:	d108      	bne.n	80089b0 <HAL_UART_Transmit+0x6c>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	e003      	b.n	80089b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089b4:	2300      	movs	r3, #0
 80089b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089b8:	e02e      	b.n	8008a18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2200      	movs	r2, #0
 80089c2:	2180      	movs	r1, #128	@ 0x80
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 f848 	bl	8008a5a <UART_WaitOnFlagUntilTimeout>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e03a      	b.n	8008a52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10b      	bne.n	80089fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	3302      	adds	r3, #2
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	e007      	b.n	8008a0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	781a      	ldrb	r2, [r3, #0]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	3301      	adds	r3, #1
 8008a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	3b01      	subs	r3, #1
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1cb      	bne.n	80089ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2140      	movs	r1, #64	@ 0x40
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 f814 	bl	8008a5a <UART_WaitOnFlagUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e006      	b.n	8008a52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e000      	b.n	8008a52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008a50:	2302      	movs	r3, #2
  }
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3720      	adds	r7, #32
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b086      	sub	sp, #24
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	603b      	str	r3, [r7, #0]
 8008a66:	4613      	mov	r3, r2
 8008a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a6a:	e03b      	b.n	8008ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a72:	d037      	beq.n	8008ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a74:	f7fc fca8 	bl	80053c8 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	6a3a      	ldr	r2, [r7, #32]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d302      	bcc.n	8008a8a <UART_WaitOnFlagUntilTimeout+0x30>
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e03a      	b.n	8008b04 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f003 0304 	and.w	r3, r3, #4
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d023      	beq.n	8008ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2b80      	cmp	r3, #128	@ 0x80
 8008aa0:	d020      	beq.n	8008ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2b40      	cmp	r3, #64	@ 0x40
 8008aa6:	d01d      	beq.n	8008ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0308 	and.w	r3, r3, #8
 8008ab2:	2b08      	cmp	r3, #8
 8008ab4:	d116      	bne.n	8008ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	617b      	str	r3, [r7, #20]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	617b      	str	r3, [r7, #20]
 8008aca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 f81d 	bl	8008b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2208      	movs	r2, #8
 8008ad6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e00f      	b.n	8008b04 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	4013      	ands	r3, r2
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	bf0c      	ite	eq
 8008af4:	2301      	moveq	r3, #1
 8008af6:	2300      	movne	r3, #0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	461a      	mov	r2, r3
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d0b4      	beq.n	8008a6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b095      	sub	sp, #84	@ 0x54
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	330c      	adds	r3, #12
 8008b32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b34:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e5      	bne.n	8008b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3314      	adds	r3, #20
 8008b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	e853 3f00 	ldrex	r3, [r3]
 8008b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	f023 0301 	bic.w	r3, r3, #1
 8008b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3314      	adds	r3, #20
 8008b66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b70:	e841 2300 	strex	r3, r2, [r1]
 8008b74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e5      	bne.n	8008b48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d119      	bne.n	8008bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	330c      	adds	r3, #12
 8008b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	e853 3f00 	ldrex	r3, [r3]
 8008b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f023 0310 	bic.w	r3, r3, #16
 8008b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	330c      	adds	r3, #12
 8008ba2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ba4:	61ba      	str	r2, [r7, #24]
 8008ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	6979      	ldr	r1, [r7, #20]
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e5      	bne.n	8008b84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008bc6:	bf00      	nop
 8008bc8:	3754      	adds	r7, #84	@ 0x54
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bd8:	b0c0      	sub	sp, #256	@ 0x100
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf0:	68d9      	ldr	r1, [r3, #12]
 8008bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	ea40 0301 	orr.w	r3, r0, r1
 8008bfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	431a      	orrs	r2, r3
 8008c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c2c:	f021 010c 	bic.w	r1, r1, #12
 8008c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c3a:	430b      	orrs	r3, r1
 8008c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c4e:	6999      	ldr	r1, [r3, #24]
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	ea40 0301 	orr.w	r3, r0, r1
 8008c5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	4b8f      	ldr	r3, [pc, #572]	@ (8008ea0 <UART_SetConfig+0x2cc>)
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d005      	beq.n	8008c74 <UART_SetConfig+0xa0>
 8008c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8008ea4 <UART_SetConfig+0x2d0>)
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d104      	bne.n	8008c7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c74:	f7fe fa96 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8008c78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008c7c:	e003      	b.n	8008c86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c7e:	f7fe fa7d 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8008c82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c90:	f040 810c 	bne.w	8008eac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008ca2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	462b      	mov	r3, r5
 8008caa:	1891      	adds	r1, r2, r2
 8008cac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008cae:	415b      	adcs	r3, r3
 8008cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	eb12 0801 	adds.w	r8, r2, r1
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	eb43 0901 	adc.w	r9, r3, r1
 8008cc2:	f04f 0200 	mov.w	r2, #0
 8008cc6:	f04f 0300 	mov.w	r3, #0
 8008cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cd6:	4690      	mov	r8, r2
 8008cd8:	4699      	mov	r9, r3
 8008cda:	4623      	mov	r3, r4
 8008cdc:	eb18 0303 	adds.w	r3, r8, r3
 8008ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	eb49 0303 	adc.w	r3, r9, r3
 8008cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008cfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008cfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d02:	460b      	mov	r3, r1
 8008d04:	18db      	adds	r3, r3, r3
 8008d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d08:	4613      	mov	r3, r2
 8008d0a:	eb42 0303 	adc.w	r3, r2, r3
 8008d0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008d14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008d18:	f7f8 f806 	bl	8000d28 <__aeabi_uldivmod>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4b61      	ldr	r3, [pc, #388]	@ (8008ea8 <UART_SetConfig+0x2d4>)
 8008d22:	fba3 2302 	umull	r2, r3, r3, r2
 8008d26:	095b      	lsrs	r3, r3, #5
 8008d28:	011c      	lsls	r4, r3, #4
 8008d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008d38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	464b      	mov	r3, r9
 8008d40:	1891      	adds	r1, r2, r2
 8008d42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008d44:	415b      	adcs	r3, r3
 8008d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008d4c:	4641      	mov	r1, r8
 8008d4e:	eb12 0a01 	adds.w	sl, r2, r1
 8008d52:	4649      	mov	r1, r9
 8008d54:	eb43 0b01 	adc.w	fp, r3, r1
 8008d58:	f04f 0200 	mov.w	r2, #0
 8008d5c:	f04f 0300 	mov.w	r3, #0
 8008d60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d6c:	4692      	mov	sl, r2
 8008d6e:	469b      	mov	fp, r3
 8008d70:	4643      	mov	r3, r8
 8008d72:	eb1a 0303 	adds.w	r3, sl, r3
 8008d76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d7a:	464b      	mov	r3, r9
 8008d7c:	eb4b 0303 	adc.w	r3, fp, r3
 8008d80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008d94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	18db      	adds	r3, r3, r3
 8008d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d9e:	4613      	mov	r3, r2
 8008da0:	eb42 0303 	adc.w	r3, r2, r3
 8008da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008da6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008daa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008dae:	f7f7 ffbb 	bl	8000d28 <__aeabi_uldivmod>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4611      	mov	r1, r2
 8008db8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ea8 <UART_SetConfig+0x2d4>)
 8008dba:	fba3 2301 	umull	r2, r3, r3, r1
 8008dbe:	095b      	lsrs	r3, r3, #5
 8008dc0:	2264      	movs	r2, #100	@ 0x64
 8008dc2:	fb02 f303 	mul.w	r3, r2, r3
 8008dc6:	1acb      	subs	r3, r1, r3
 8008dc8:	00db      	lsls	r3, r3, #3
 8008dca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008dce:	4b36      	ldr	r3, [pc, #216]	@ (8008ea8 <UART_SetConfig+0x2d4>)
 8008dd0:	fba3 2302 	umull	r2, r3, r3, r2
 8008dd4:	095b      	lsrs	r3, r3, #5
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008ddc:	441c      	add	r4, r3
 8008dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008de8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008dec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008df0:	4642      	mov	r2, r8
 8008df2:	464b      	mov	r3, r9
 8008df4:	1891      	adds	r1, r2, r2
 8008df6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008df8:	415b      	adcs	r3, r3
 8008dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008e00:	4641      	mov	r1, r8
 8008e02:	1851      	adds	r1, r2, r1
 8008e04:	6339      	str	r1, [r7, #48]	@ 0x30
 8008e06:	4649      	mov	r1, r9
 8008e08:	414b      	adcs	r3, r1
 8008e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e0c:	f04f 0200 	mov.w	r2, #0
 8008e10:	f04f 0300 	mov.w	r3, #0
 8008e14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008e18:	4659      	mov	r1, fp
 8008e1a:	00cb      	lsls	r3, r1, #3
 8008e1c:	4651      	mov	r1, sl
 8008e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e22:	4651      	mov	r1, sl
 8008e24:	00ca      	lsls	r2, r1, #3
 8008e26:	4610      	mov	r0, r2
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	189b      	adds	r3, r3, r2
 8008e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e34:	464b      	mov	r3, r9
 8008e36:	460a      	mov	r2, r1
 8008e38:	eb42 0303 	adc.w	r3, r2, r3
 8008e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008e50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e54:	460b      	mov	r3, r1
 8008e56:	18db      	adds	r3, r3, r3
 8008e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	eb42 0303 	adc.w	r3, r2, r3
 8008e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008e6a:	f7f7 ff5d 	bl	8000d28 <__aeabi_uldivmod>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea8 <UART_SetConfig+0x2d4>)
 8008e74:	fba3 1302 	umull	r1, r3, r3, r2
 8008e78:	095b      	lsrs	r3, r3, #5
 8008e7a:	2164      	movs	r1, #100	@ 0x64
 8008e7c:	fb01 f303 	mul.w	r3, r1, r3
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	3332      	adds	r3, #50	@ 0x32
 8008e86:	4a08      	ldr	r2, [pc, #32]	@ (8008ea8 <UART_SetConfig+0x2d4>)
 8008e88:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8c:	095b      	lsrs	r3, r3, #5
 8008e8e:	f003 0207 	and.w	r2, r3, #7
 8008e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4422      	add	r2, r4
 8008e9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e9c:	e106      	b.n	80090ac <UART_SetConfig+0x4d8>
 8008e9e:	bf00      	nop
 8008ea0:	40011000 	.word	0x40011000
 8008ea4:	40011400 	.word	0x40011400
 8008ea8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008eb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008eba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008ebe:	4642      	mov	r2, r8
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	1891      	adds	r1, r2, r2
 8008ec4:	6239      	str	r1, [r7, #32]
 8008ec6:	415b      	adcs	r3, r3
 8008ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ece:	4641      	mov	r1, r8
 8008ed0:	1854      	adds	r4, r2, r1
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	eb43 0501 	adc.w	r5, r3, r1
 8008ed8:	f04f 0200 	mov.w	r2, #0
 8008edc:	f04f 0300 	mov.w	r3, #0
 8008ee0:	00eb      	lsls	r3, r5, #3
 8008ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ee6:	00e2      	lsls	r2, r4, #3
 8008ee8:	4614      	mov	r4, r2
 8008eea:	461d      	mov	r5, r3
 8008eec:	4643      	mov	r3, r8
 8008eee:	18e3      	adds	r3, r4, r3
 8008ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ef4:	464b      	mov	r3, r9
 8008ef6:	eb45 0303 	adc.w	r3, r5, r3
 8008efa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f0e:	f04f 0200 	mov.w	r2, #0
 8008f12:	f04f 0300 	mov.w	r3, #0
 8008f16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	008b      	lsls	r3, r1, #2
 8008f1e:	4621      	mov	r1, r4
 8008f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f24:	4621      	mov	r1, r4
 8008f26:	008a      	lsls	r2, r1, #2
 8008f28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008f2c:	f7f7 fefc 	bl	8000d28 <__aeabi_uldivmod>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4b60      	ldr	r3, [pc, #384]	@ (80090b8 <UART_SetConfig+0x4e4>)
 8008f36:	fba3 2302 	umull	r2, r3, r3, r2
 8008f3a:	095b      	lsrs	r3, r3, #5
 8008f3c:	011c      	lsls	r4, r3, #4
 8008f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008f50:	4642      	mov	r2, r8
 8008f52:	464b      	mov	r3, r9
 8008f54:	1891      	adds	r1, r2, r2
 8008f56:	61b9      	str	r1, [r7, #24]
 8008f58:	415b      	adcs	r3, r3
 8008f5a:	61fb      	str	r3, [r7, #28]
 8008f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f60:	4641      	mov	r1, r8
 8008f62:	1851      	adds	r1, r2, r1
 8008f64:	6139      	str	r1, [r7, #16]
 8008f66:	4649      	mov	r1, r9
 8008f68:	414b      	adcs	r3, r1
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	f04f 0300 	mov.w	r3, #0
 8008f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f78:	4659      	mov	r1, fp
 8008f7a:	00cb      	lsls	r3, r1, #3
 8008f7c:	4651      	mov	r1, sl
 8008f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f82:	4651      	mov	r1, sl
 8008f84:	00ca      	lsls	r2, r1, #3
 8008f86:	4610      	mov	r0, r2
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	4642      	mov	r2, r8
 8008f8e:	189b      	adds	r3, r3, r2
 8008f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f94:	464b      	mov	r3, r9
 8008f96:	460a      	mov	r2, r1
 8008f98:	eb42 0303 	adc.w	r3, r2, r3
 8008f9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008faa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008fac:	f04f 0200 	mov.w	r2, #0
 8008fb0:	f04f 0300 	mov.w	r3, #0
 8008fb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008fb8:	4649      	mov	r1, r9
 8008fba:	008b      	lsls	r3, r1, #2
 8008fbc:	4641      	mov	r1, r8
 8008fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fc2:	4641      	mov	r1, r8
 8008fc4:	008a      	lsls	r2, r1, #2
 8008fc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008fca:	f7f7 fead 	bl	8000d28 <__aeabi_uldivmod>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4b38      	ldr	r3, [pc, #224]	@ (80090b8 <UART_SetConfig+0x4e4>)
 8008fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8008fda:	095b      	lsrs	r3, r3, #5
 8008fdc:	2264      	movs	r2, #100	@ 0x64
 8008fde:	fb02 f303 	mul.w	r3, r2, r3
 8008fe2:	1acb      	subs	r3, r1, r3
 8008fe4:	011b      	lsls	r3, r3, #4
 8008fe6:	3332      	adds	r3, #50	@ 0x32
 8008fe8:	4a33      	ldr	r2, [pc, #204]	@ (80090b8 <UART_SetConfig+0x4e4>)
 8008fea:	fba2 2303 	umull	r2, r3, r2, r3
 8008fee:	095b      	lsrs	r3, r3, #5
 8008ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ff4:	441c      	add	r4, r3
 8008ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ffe:	677a      	str	r2, [r7, #116]	@ 0x74
 8009000:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009004:	4642      	mov	r2, r8
 8009006:	464b      	mov	r3, r9
 8009008:	1891      	adds	r1, r2, r2
 800900a:	60b9      	str	r1, [r7, #8]
 800900c:	415b      	adcs	r3, r3
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009014:	4641      	mov	r1, r8
 8009016:	1851      	adds	r1, r2, r1
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	4649      	mov	r1, r9
 800901c:	414b      	adcs	r3, r1
 800901e:	607b      	str	r3, [r7, #4]
 8009020:	f04f 0200 	mov.w	r2, #0
 8009024:	f04f 0300 	mov.w	r3, #0
 8009028:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800902c:	4659      	mov	r1, fp
 800902e:	00cb      	lsls	r3, r1, #3
 8009030:	4651      	mov	r1, sl
 8009032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009036:	4651      	mov	r1, sl
 8009038:	00ca      	lsls	r2, r1, #3
 800903a:	4610      	mov	r0, r2
 800903c:	4619      	mov	r1, r3
 800903e:	4603      	mov	r3, r0
 8009040:	4642      	mov	r2, r8
 8009042:	189b      	adds	r3, r3, r2
 8009044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009046:	464b      	mov	r3, r9
 8009048:	460a      	mov	r2, r1
 800904a:	eb42 0303 	adc.w	r3, r2, r3
 800904e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	663b      	str	r3, [r7, #96]	@ 0x60
 800905a:	667a      	str	r2, [r7, #100]	@ 0x64
 800905c:	f04f 0200 	mov.w	r2, #0
 8009060:	f04f 0300 	mov.w	r3, #0
 8009064:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009068:	4649      	mov	r1, r9
 800906a:	008b      	lsls	r3, r1, #2
 800906c:	4641      	mov	r1, r8
 800906e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009072:	4641      	mov	r1, r8
 8009074:	008a      	lsls	r2, r1, #2
 8009076:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800907a:	f7f7 fe55 	bl	8000d28 <__aeabi_uldivmod>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4b0d      	ldr	r3, [pc, #52]	@ (80090b8 <UART_SetConfig+0x4e4>)
 8009084:	fba3 1302 	umull	r1, r3, r3, r2
 8009088:	095b      	lsrs	r3, r3, #5
 800908a:	2164      	movs	r1, #100	@ 0x64
 800908c:	fb01 f303 	mul.w	r3, r1, r3
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	011b      	lsls	r3, r3, #4
 8009094:	3332      	adds	r3, #50	@ 0x32
 8009096:	4a08      	ldr	r2, [pc, #32]	@ (80090b8 <UART_SetConfig+0x4e4>)
 8009098:	fba2 2303 	umull	r2, r3, r2, r3
 800909c:	095b      	lsrs	r3, r3, #5
 800909e:	f003 020f 	and.w	r2, r3, #15
 80090a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4422      	add	r2, r4
 80090aa:	609a      	str	r2, [r3, #8]
}
 80090ac:	bf00      	nop
 80090ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80090b2:	46bd      	mov	sp, r7
 80090b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090b8:	51eb851f 	.word	0x51eb851f

080090bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f103 0208 	add.w	r2, r3, #8
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f103 0208 	add.w	r2, r3, #8
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f103 0208 	add.w	r2, r3, #8
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800910a:	bf00      	nop
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	689a      	ldr	r2, [r3, #8]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	601a      	str	r2, [r3, #0]
}
 8009152:	bf00      	nop
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800915e:	b480      	push	{r7}
 8009160:	b085      	sub	sp, #20
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009174:	d103      	bne.n	800917e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	e00c      	b.n	8009198 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3308      	adds	r3, #8
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	e002      	b.n	800918c <vListInsert+0x2e>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	429a      	cmp	r2, r3
 8009196:	d2f6      	bcs.n	8009186 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]
}
 80091c4:	bf00      	nop
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6892      	ldr	r2, [r2, #8]
 80091e6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	6852      	ldr	r2, [r2, #4]
 80091f0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d103      	bne.n	8009204 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	1e5a      	subs	r2, r3, #1
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10b      	bne.n	8009250 <xQueueGenericReset+0x2c>
        __asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	60bb      	str	r3, [r7, #8]
    }
 800924a:	bf00      	nop
 800924c:	bf00      	nop
 800924e:	e7fd      	b.n	800924c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8009250:	f002 fbb4 	bl	800b9bc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925c:	68f9      	ldr	r1, [r7, #12]
 800925e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009260:	fb01 f303 	mul.w	r3, r1, r3
 8009264:	441a      	add	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009280:	3b01      	subs	r3, #1
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009286:	fb01 f303 	mul.w	r3, r1, r3
 800928a:	441a      	add	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	22ff      	movs	r2, #255	@ 0xff
 8009294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	22ff      	movs	r2, #255	@ 0xff
 800929c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d114      	bne.n	80092d0 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d01a      	beq.n	80092e4 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3310      	adds	r3, #16
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 faca 	bl	800a84c <xTaskRemoveFromEventList>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d012      	beq.n	80092e4 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80092be:	4b0d      	ldr	r3, [pc, #52]	@ (80092f4 <xQueueGenericReset+0xd0>)
 80092c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092c4:	601a      	str	r2, [r3, #0]
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	e009      	b.n	80092e4 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3310      	adds	r3, #16
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7ff fef1 	bl	80090bc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3324      	adds	r3, #36	@ 0x24
 80092de:	4618      	mov	r0, r3
 80092e0:	f7ff feec 	bl	80090bc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80092e4:	f002 fb9c 	bl	800ba20 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80092e8:	2301      	movs	r3, #1
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	e000ed04 	.word	0xe000ed04

080092f8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08c      	sub	sp, #48	@ 0x30
 80092fc:	af02      	add	r7, sp, #8
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	4613      	mov	r3, r2
 8009304:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10b      	bne.n	8009324 <xQueueGenericCreate+0x2c>
        __asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	61bb      	str	r3, [r7, #24]
    }
 800931e:	bf00      	nop
 8009320:	bf00      	nop
 8009322:	e7fd      	b.n	8009320 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	fb02 f303 	mul.w	r3, r2, r3
 800932c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d006      	beq.n	8009342 <xQueueGenericCreate+0x4a>
 8009334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	fbb2 f3f3 	udiv	r3, r2, r3
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	429a      	cmp	r2, r3
 8009340:	d101      	bne.n	8009346 <xQueueGenericCreate+0x4e>
 8009342:	2301      	movs	r3, #1
 8009344:	e000      	b.n	8009348 <xQueueGenericCreate+0x50>
 8009346:	2300      	movs	r3, #0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10b      	bne.n	8009364 <xQueueGenericCreate+0x6c>
        __asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	617b      	str	r3, [r7, #20]
    }
 800935e:	bf00      	nop
 8009360:	bf00      	nop
 8009362:	e7fd      	b.n	8009360 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8009364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009366:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800936a:	d90b      	bls.n	8009384 <xQueueGenericCreate+0x8c>
        __asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	613b      	str	r3, [r7, #16]
    }
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	e7fd      	b.n	8009380 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009386:	3350      	adds	r3, #80	@ 0x50
 8009388:	4618      	mov	r0, r3
 800938a:	f002 fc49 	bl	800bc20 <pvPortMalloc>
 800938e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00d      	beq.n	80093b2 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	3350      	adds	r3, #80	@ 0x50
 800939e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093a0:	79fa      	ldrb	r2, [r7, #7]
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	4613      	mov	r3, r2
 80093a8:	69fa      	ldr	r2, [r7, #28]
 80093aa:	68b9      	ldr	r1, [r7, #8]
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f805 	bl	80093bc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80093b2:	6a3b      	ldr	r3, [r7, #32]
    }
 80093b4:	4618      	mov	r0, r3
 80093b6:	3728      	adds	r7, #40	@ 0x28
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d103      	bne.n	80093d8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	e002      	b.n	80093de <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80093ea:	2101      	movs	r1, #1
 80093ec:	69b8      	ldr	r0, [r7, #24]
 80093ee:	f7ff ff19 	bl	8009224 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	68f9      	ldr	r1, [r7, #12]
 8009400:	2073      	movs	r0, #115	@ 0x73
 8009402:	f003 fd83 	bl	800cf0c <SEGGER_SYSVIEW_RecordU32x3>
}
 8009406:	bf00      	nop
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
	...

08009410 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b090      	sub	sp, #64	@ 0x40
 8009414:	af02      	add	r7, sp, #8
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800941e:	2300      	movs	r3, #0
 8009420:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10b      	bne.n	8009444 <xQueueGenericSend+0x34>
        __asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800943e:	bf00      	nop
 8009440:	bf00      	nop
 8009442:	e7fd      	b.n	8009440 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d103      	bne.n	8009452 <xQueueGenericSend+0x42>
 800944a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <xQueueGenericSend+0x46>
 8009452:	2301      	movs	r3, #1
 8009454:	e000      	b.n	8009458 <xQueueGenericSend+0x48>
 8009456:	2300      	movs	r3, #0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10b      	bne.n	8009474 <xQueueGenericSend+0x64>
        __asm volatile
 800945c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800946e:	bf00      	nop
 8009470:	bf00      	nop
 8009472:	e7fd      	b.n	8009470 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b02      	cmp	r3, #2
 8009478:	d103      	bne.n	8009482 <xQueueGenericSend+0x72>
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800947e:	2b01      	cmp	r3, #1
 8009480:	d101      	bne.n	8009486 <xQueueGenericSend+0x76>
 8009482:	2301      	movs	r3, #1
 8009484:	e000      	b.n	8009488 <xQueueGenericSend+0x78>
 8009486:	2300      	movs	r3, #0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10b      	bne.n	80094a4 <xQueueGenericSend+0x94>
        __asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	623b      	str	r3, [r7, #32]
    }
 800949e:	bf00      	nop
 80094a0:	bf00      	nop
 80094a2:	e7fd      	b.n	80094a0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094a4:	f001 fb76 	bl	800ab94 <xTaskGetSchedulerState>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d102      	bne.n	80094b4 <xQueueGenericSend+0xa4>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d101      	bne.n	80094b8 <xQueueGenericSend+0xa8>
 80094b4:	2301      	movs	r3, #1
 80094b6:	e000      	b.n	80094ba <xQueueGenericSend+0xaa>
 80094b8:	2300      	movs	r3, #0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10b      	bne.n	80094d6 <xQueueGenericSend+0xc6>
        __asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	61fb      	str	r3, [r7, #28]
    }
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	e7fd      	b.n	80094d2 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80094d6:	f002 fa71 	bl	800b9bc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d302      	bcc.n	80094ec <xQueueGenericSend+0xdc>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d136      	bne.n	800955a <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 80094ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ee:	4618      	mov	r0, r3
 80094f0:	f004 fa98 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	460b      	mov	r3, r1
 80094fe:	4601      	mov	r1, r0
 8009500:	205a      	movs	r0, #90	@ 0x5a
 8009502:	f003 fd79 	bl	800cff8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	68b9      	ldr	r1, [r7, #8]
 800950a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800950c:	f000 fbd8 	bl	8009cc0 <prvCopyDataToQueue>
 8009510:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009516:	2b00      	cmp	r3, #0
 8009518:	d010      	beq.n	800953c <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	3324      	adds	r3, #36	@ 0x24
 800951e:	4618      	mov	r0, r3
 8009520:	f001 f994 	bl	800a84c <xTaskRemoveFromEventList>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d013      	beq.n	8009552 <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800952a:	4b4d      	ldr	r3, [pc, #308]	@ (8009660 <xQueueGenericSend+0x250>)
 800952c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	e00a      	b.n	8009552 <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800953c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d007      	beq.n	8009552 <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8009542:	4b47      	ldr	r3, [pc, #284]	@ (8009660 <xQueueGenericSend+0x250>)
 8009544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8009552:	f002 fa65 	bl	800ba20 <vPortExitCritical>
                return pdPASS;
 8009556:	2301      	movs	r3, #1
 8009558:	e07d      	b.n	8009656 <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d110      	bne.n	8009582 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009560:	f002 fa5e 	bl	800ba20 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	4618      	mov	r0, r3
 8009568:	f004 fa5c 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	460b      	mov	r3, r1
 8009576:	4601      	mov	r1, r0
 8009578:	205a      	movs	r0, #90	@ 0x5a
 800957a:	f003 fd3d 	bl	800cff8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800957e:	2300      	movs	r3, #0
 8009580:	e069      	b.n	8009656 <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009584:	2b00      	cmp	r3, #0
 8009586:	d106      	bne.n	8009596 <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009588:	f107 0314 	add.w	r3, r7, #20
 800958c:	4618      	mov	r0, r3
 800958e:	f001 f9c5 	bl	800a91c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009592:	2301      	movs	r3, #1
 8009594:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009596:	f002 fa43 	bl	800ba20 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800959a:	f000 ff07 	bl	800a3ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800959e:	f002 fa0d 	bl	800b9bc <vPortEnterCritical>
 80095a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095a8:	b25b      	sxtb	r3, r3
 80095aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095ae:	d103      	bne.n	80095b8 <xQueueGenericSend+0x1a8>
 80095b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095be:	b25b      	sxtb	r3, r3
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095c4:	d103      	bne.n	80095ce <xQueueGenericSend+0x1be>
 80095c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095ce:	f002 fa27 	bl	800ba20 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095d2:	1d3a      	adds	r2, r7, #4
 80095d4:	f107 0314 	add.w	r3, r7, #20
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f001 f9b4 	bl	800a948 <xTaskCheckForTimeOut>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d124      	bne.n	8009630 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095e8:	f000 fc62 	bl	8009eb0 <prvIsQueueFull>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d018      	beq.n	8009624 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f4:	3310      	adds	r3, #16
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 f8d0 	bl	800a7a0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009602:	f000 fbed 	bl	8009de0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009606:	f000 fedf 	bl	800a3c8 <xTaskResumeAll>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	f47f af62 	bne.w	80094d6 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8009612:	4b13      	ldr	r3, [pc, #76]	@ (8009660 <xQueueGenericSend+0x250>)
 8009614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	e758      	b.n	80094d6 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009626:	f000 fbdb 	bl	8009de0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800962a:	f000 fecd 	bl	800a3c8 <xTaskResumeAll>
 800962e:	e752      	b.n	80094d6 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8009630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009632:	f000 fbd5 	bl	8009de0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009636:	f000 fec7 	bl	800a3c8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800963a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963c:	4618      	mov	r0, r3
 800963e:	f004 f9f1 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	460b      	mov	r3, r1
 800964c:	4601      	mov	r1, r0
 800964e:	205a      	movs	r0, #90	@ 0x5a
 8009650:	f003 fcd2 	bl	800cff8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8009654:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8009656:	4618      	mov	r0, r3
 8009658:	3738      	adds	r7, #56	@ 0x38
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b090      	sub	sp, #64	@ 0x40
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8009676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10b      	bne.n	8009694 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800968e:	bf00      	nop
 8009690:	bf00      	nop
 8009692:	e7fd      	b.n	8009690 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <xQueueGenericSendFromISR+0x3e>
 800969a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <xQueueGenericSendFromISR+0x42>
 80096a2:	2301      	movs	r3, #1
 80096a4:	e000      	b.n	80096a8 <xQueueGenericSendFromISR+0x44>
 80096a6:	2300      	movs	r3, #0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10b      	bne.n	80096c4 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80096be:	bf00      	nop
 80096c0:	bf00      	nop
 80096c2:	e7fd      	b.n	80096c0 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d103      	bne.n	80096d2 <xQueueGenericSendFromISR+0x6e>
 80096ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <xQueueGenericSendFromISR+0x72>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e000      	b.n	80096d8 <xQueueGenericSendFromISR+0x74>
 80096d6:	2300      	movs	r3, #0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10b      	bne.n	80096f4 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	623b      	str	r3, [r7, #32]
    }
 80096ee:	bf00      	nop
 80096f0:	bf00      	nop
 80096f2:	e7fd      	b.n	80096f0 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096f4:	f002 fa52 	bl	800bb9c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80096f8:	f3ef 8211 	mrs	r2, BASEPRI
 80096fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	61fa      	str	r2, [r7, #28]
 800970e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8009710:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009712:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800971c:	429a      	cmp	r2, r3
 800971e:	d302      	bcc.n	8009726 <xQueueGenericSendFromISR+0xc2>
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d149      	bne.n	80097ba <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8009726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009728:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800972c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009734:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	4618      	mov	r0, r3
 800973a:	f004 f973 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 800973e:	4601      	mov	r1, r0
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	461a      	mov	r2, r3
 8009744:	2060      	movs	r0, #96	@ 0x60
 8009746:	f003 fb87 	bl	800ce58 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009750:	f000 fab6 	bl	8009cc0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8009754:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009758:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800975c:	d112      	bne.n	8009784 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800975e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	d026      	beq.n	80097b4 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009768:	3324      	adds	r3, #36	@ 0x24
 800976a:	4618      	mov	r0, r3
 800976c:	f001 f86e 	bl	800a84c <xTaskRemoveFromEventList>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d01e      	beq.n	80097b4 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01b      	beq.n	80097b4 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	e017      	b.n	80097b4 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8009784:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009788:	2b7f      	cmp	r3, #127	@ 0x7f
 800978a:	d10b      	bne.n	80097a4 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	617b      	str	r3, [r7, #20]
    }
 800979e:	bf00      	nop
 80097a0:	bf00      	nop
 80097a2:	e7fd      	b.n	80097a0 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80097a8:	3301      	adds	r3, #1
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	b25a      	sxtb	r2, r3
 80097ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80097b4:	2301      	movs	r3, #1
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80097b8:	e00b      	b.n	80097d2 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80097ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097bc:	4618      	mov	r0, r3
 80097be:	f004 f931 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 80097c2:	4601      	mov	r1, r0
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	461a      	mov	r2, r3
 80097c8:	2060      	movs	r0, #96	@ 0x60
 80097ca:	f003 fb45 	bl	800ce58 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80097dc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80097de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3740      	adds	r7, #64	@ 0x40
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80097e8:	b590      	push	{r4, r7, lr}
 80097ea:	b08f      	sub	sp, #60	@ 0x3c
 80097ec:	af02      	add	r7, sp, #8
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80097f4:	2300      	movs	r3, #0
 80097f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80097fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10b      	bne.n	800981a <xQueueReceive+0x32>
        __asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	623b      	str	r3, [r7, #32]
    }
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	e7fd      	b.n	8009816 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d103      	bne.n	8009828 <xQueueReceive+0x40>
 8009820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009824:	2b00      	cmp	r3, #0
 8009826:	d101      	bne.n	800982c <xQueueReceive+0x44>
 8009828:	2301      	movs	r3, #1
 800982a:	e000      	b.n	800982e <xQueueReceive+0x46>
 800982c:	2300      	movs	r3, #0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10b      	bne.n	800984a <xQueueReceive+0x62>
        __asm volatile
 8009832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	61fb      	str	r3, [r7, #28]
    }
 8009844:	bf00      	nop
 8009846:	bf00      	nop
 8009848:	e7fd      	b.n	8009846 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800984a:	f001 f9a3 	bl	800ab94 <xTaskGetSchedulerState>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <xQueueReceive+0x72>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <xQueueReceive+0x76>
 800985a:	2301      	movs	r3, #1
 800985c:	e000      	b.n	8009860 <xQueueReceive+0x78>
 800985e:	2300      	movs	r3, #0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10b      	bne.n	800987c <xQueueReceive+0x94>
        __asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	61bb      	str	r3, [r7, #24]
    }
 8009876:	bf00      	nop
 8009878:	bf00      	nop
 800987a:	e7fd      	b.n	8009878 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800987c:	f002 f89e 	bl	800b9bc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009884:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009888:	2b00      	cmp	r3, #0
 800988a:	d02f      	beq.n	80098ec <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800988c:	68b9      	ldr	r1, [r7, #8]
 800988e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009890:	f000 fa80 	bl	8009d94 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8009894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009896:	4618      	mov	r0, r3
 8009898:	f004 f8c4 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 800989c:	4604      	mov	r4, r0
 800989e:	2000      	movs	r0, #0
 80098a0:	f004 f8c0 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 80098a4:	4602      	mov	r2, r0
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2101      	movs	r1, #1
 80098aa:	9100      	str	r1, [sp, #0]
 80098ac:	4621      	mov	r1, r4
 80098ae:	205c      	movs	r0, #92	@ 0x5c
 80098b0:	f003 fba2 	bl	800cff8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b6:	1e5a      	subs	r2, r3, #1
 80098b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ba:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00f      	beq.n	80098e4 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c6:	3310      	adds	r3, #16
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 ffbf 	bl	800a84c <xTaskRemoveFromEventList>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d007      	beq.n	80098e4 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80098d4:	4b4d      	ldr	r3, [pc, #308]	@ (8009a0c <xQueueReceive+0x224>)
 80098d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80098e4:	f002 f89c 	bl	800ba20 <vPortExitCritical>
                return pdPASS;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e08a      	b.n	8009a02 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d113      	bne.n	800991a <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80098f2:	f002 f895 	bl	800ba20 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80098f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f8:	4618      	mov	r0, r3
 80098fa:	f004 f893 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 80098fe:	4604      	mov	r4, r0
 8009900:	2000      	movs	r0, #0
 8009902:	f004 f88f 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 8009906:	4602      	mov	r2, r0
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2101      	movs	r1, #1
 800990c:	9100      	str	r1, [sp, #0]
 800990e:	4621      	mov	r1, r4
 8009910:	205c      	movs	r0, #92	@ 0x5c
 8009912:	f003 fb71 	bl	800cff8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009916:	2300      	movs	r3, #0
 8009918:	e073      	b.n	8009a02 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800991a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d106      	bne.n	800992e <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009920:	f107 0310 	add.w	r3, r7, #16
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fff9 	bl	800a91c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800992a:	2301      	movs	r3, #1
 800992c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800992e:	f002 f877 	bl	800ba20 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009932:	f000 fd3b 	bl	800a3ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009936:	f002 f841 	bl	800b9bc <vPortEnterCritical>
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009940:	b25b      	sxtb	r3, r3
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009946:	d103      	bne.n	8009950 <xQueueReceive+0x168>
 8009948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009952:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009956:	b25b      	sxtb	r3, r3
 8009958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800995c:	d103      	bne.n	8009966 <xQueueReceive+0x17e>
 800995e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009966:	f002 f85b 	bl	800ba20 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800996a:	1d3a      	adds	r2, r7, #4
 800996c:	f107 0310 	add.w	r3, r7, #16
 8009970:	4611      	mov	r1, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f000 ffe8 	bl	800a948 <xTaskCheckForTimeOut>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d124      	bne.n	80099c8 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800997e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009980:	f000 fa80 	bl	8009e84 <prvIsQueueEmpty>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d018      	beq.n	80099bc <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	3324      	adds	r3, #36	@ 0x24
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f000 ff04 	bl	800a7a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009998:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800999a:	f000 fa21 	bl	8009de0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800999e:	f000 fd13 	bl	800a3c8 <xTaskResumeAll>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f47f af69 	bne.w	800987c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80099aa:	4b18      	ldr	r3, [pc, #96]	@ (8009a0c <xQueueReceive+0x224>)
 80099ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	e75f      	b.n	800987c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80099bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099be:	f000 fa0f 	bl	8009de0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80099c2:	f000 fd01 	bl	800a3c8 <xTaskResumeAll>
 80099c6:	e759      	b.n	800987c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80099c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099ca:	f000 fa09 	bl	8009de0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80099ce:	f000 fcfb 	bl	800a3c8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099d4:	f000 fa56 	bl	8009e84 <prvIsQueueEmpty>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f43f af4e 	beq.w	800987c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80099e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e2:	4618      	mov	r0, r3
 80099e4:	f004 f81e 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 80099e8:	4604      	mov	r4, r0
 80099ea:	2000      	movs	r0, #0
 80099ec:	f004 f81a 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 80099f0:	4602      	mov	r2, r0
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2101      	movs	r1, #1
 80099f6:	9100      	str	r1, [sp, #0]
 80099f8:	4621      	mov	r1, r4
 80099fa:	205c      	movs	r0, #92	@ 0x5c
 80099fc:	f003 fafc 	bl	800cff8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009a00:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3734      	adds	r7, #52	@ 0x34
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd90      	pop	{r4, r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	e000ed04 	.word	0xe000ed04

08009a10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8009a10:	b590      	push	{r4, r7, lr}
 8009a12:	b091      	sub	sp, #68	@ 0x44
 8009a14:	af02      	add	r7, sp, #8
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10b      	bne.n	8009a44 <xQueueSemaphoreTake+0x34>
        __asm volatile
 8009a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	623b      	str	r3, [r7, #32]
    }
 8009a3e:	bf00      	nop
 8009a40:	bf00      	nop
 8009a42:	e7fd      	b.n	8009a40 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8009a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00b      	beq.n	8009a64 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8009a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	61fb      	str	r3, [r7, #28]
    }
 8009a5e:	bf00      	nop
 8009a60:	bf00      	nop
 8009a62:	e7fd      	b.n	8009a60 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a64:	f001 f896 	bl	800ab94 <xTaskGetSchedulerState>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d102      	bne.n	8009a74 <xQueueSemaphoreTake+0x64>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <xQueueSemaphoreTake+0x68>
 8009a74:	2301      	movs	r3, #1
 8009a76:	e000      	b.n	8009a7a <xQueueSemaphoreTake+0x6a>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10b      	bne.n	8009a96 <xQueueSemaphoreTake+0x86>
        __asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	61bb      	str	r3, [r7, #24]
    }
 8009a90:	bf00      	nop
 8009a92:	bf00      	nop
 8009a94:	e7fd      	b.n	8009a92 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009a96:	f001 ff91 	bl	800b9bc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9e:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d034      	beq.n	8009b10 <xQueueSemaphoreTake+0x100>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8009aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f003 ffbb 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 8009aae:	4604      	mov	r4, r0
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	f003 ffb7 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2101      	movs	r1, #1
 8009abc:	9100      	str	r1, [sp, #0]
 8009abe:	4621      	mov	r1, r4
 8009ac0:	205c      	movs	r0, #92	@ 0x5c
 8009ac2:	f003 fa99 	bl	800cff8 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac8:	1e5a      	subs	r2, r3, #1
 8009aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009acc:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d104      	bne.n	8009ae0 <xQueueSemaphoreTake+0xd0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009ad6:	f001 fa11 	bl	800aefc <pvTaskIncrementMutexHeldCount>
 8009ada:	4602      	mov	r2, r0
 8009adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ade:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00f      	beq.n	8009b08 <xQueueSemaphoreTake+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aea:	3310      	adds	r3, #16
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 fead 	bl	800a84c <xTaskRemoveFromEventList>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d007      	beq.n	8009b08 <xQueueSemaphoreTake+0xf8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009af8:	4b64      	ldr	r3, [pc, #400]	@ (8009c8c <xQueueSemaphoreTake+0x27c>)
 8009afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009b08:	f001 ff8a 	bl	800ba20 <vPortExitCritical>
                return pdPASS;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e0b8      	b.n	8009c82 <xQueueSemaphoreTake+0x272>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d122      	bne.n	8009b5c <xQueueSemaphoreTake+0x14c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8009b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00b      	beq.n	8009b34 <xQueueSemaphoreTake+0x124>
        __asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	617b      	str	r3, [r7, #20]
    }
 8009b2e:	bf00      	nop
 8009b30:	bf00      	nop
 8009b32:	e7fd      	b.n	8009b30 <xQueueSemaphoreTake+0x120>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009b34:	f001 ff74 	bl	800ba20 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f003 ff72 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 8009b40:	4604      	mov	r4, r0
 8009b42:	2000      	movs	r0, #0
 8009b44:	f003 ff6e 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	9100      	str	r1, [sp, #0]
 8009b50:	4621      	mov	r1, r4
 8009b52:	205c      	movs	r0, #92	@ 0x5c
 8009b54:	f003 fa50 	bl	800cff8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	e092      	b.n	8009c82 <xQueueSemaphoreTake+0x272>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d106      	bne.n	8009b70 <xQueueSemaphoreTake+0x160>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009b62:	f107 030c 	add.w	r3, r7, #12
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fed8 	bl	800a91c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009b70:	f001 ff56 	bl	800ba20 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009b74:	f000 fc1a 	bl	800a3ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009b78:	f001 ff20 	bl	800b9bc <vPortEnterCritical>
 8009b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b82:	b25b      	sxtb	r3, r3
 8009b84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b88:	d103      	bne.n	8009b92 <xQueueSemaphoreTake+0x182>
 8009b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b98:	b25b      	sxtb	r3, r3
 8009b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b9e:	d103      	bne.n	8009ba8 <xQueueSemaphoreTake+0x198>
 8009ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ba8:	f001 ff3a 	bl	800ba20 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bac:	463a      	mov	r2, r7
 8009bae:	f107 030c 	add.w	r3, r7, #12
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 fec7 	bl	800a948 <xTaskCheckForTimeOut>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d132      	bne.n	8009c26 <xQueueSemaphoreTake+0x216>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bc2:	f000 f95f 	bl	8009e84 <prvIsQueueEmpty>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d026      	beq.n	8009c1a <xQueueSemaphoreTake+0x20a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d109      	bne.n	8009be8 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 8009bd4:	f001 fef2 	bl	800b9bc <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fff7 	bl	800abd0 <xTaskPriorityInherit>
 8009be2:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8009be4:	f001 ff1c 	bl	800ba20 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bea:	3324      	adds	r3, #36	@ 0x24
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fdd5 	bl	800a7a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009bf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bf8:	f000 f8f2 	bl	8009de0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009bfc:	f000 fbe4 	bl	800a3c8 <xTaskResumeAll>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f47f af47 	bne.w	8009a96 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8009c08:	4b20      	ldr	r3, [pc, #128]	@ (8009c8c <xQueueSemaphoreTake+0x27c>)
 8009c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	e73d      	b.n	8009a96 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009c1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c1c:	f000 f8e0 	bl	8009de0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009c20:	f000 fbd2 	bl	800a3c8 <xTaskResumeAll>
 8009c24:	e737      	b.n	8009a96 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009c26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c28:	f000 f8da 	bl	8009de0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009c2c:	f000 fbcc 	bl	800a3c8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c32:	f000 f927 	bl	8009e84 <prvIsQueueEmpty>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f43f af2c 	beq.w	8009a96 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00d      	beq.n	8009c60 <xQueueSemaphoreTake+0x250>
                        {
                            taskENTER_CRITICAL();
 8009c44:	f001 feba 	bl	800b9bc <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c4a:	f000 f821 	bl	8009c90 <prvGetDisinheritPriorityAfterTimeout>
 8009c4e:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 f8b6 	bl	800adc8 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8009c5c:	f001 fee0 	bl	800ba20 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c62:	4618      	mov	r0, r3
 8009c64:	f003 fede 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 8009c68:	4604      	mov	r4, r0
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f003 feda 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 8009c70:	4602      	mov	r2, r0
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2101      	movs	r1, #1
 8009c76:	9100      	str	r1, [sp, #0]
 8009c78:	4621      	mov	r1, r4
 8009c7a:	205c      	movs	r0, #92	@ 0x5c
 8009c7c:	f003 f9bc 	bl	800cff8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009c80:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	373c      	adds	r7, #60	@ 0x3c
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd90      	pop	{r4, r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	e000ed04 	.word	0xe000ed04

08009c90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d006      	beq.n	8009cae <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f1c3 0305 	rsb	r3, r3, #5
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	e001      	b.n	8009cb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
    }
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10d      	bne.n	8009cfa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d14d      	bne.n	8009d82 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 ffea 	bl	800acc4 <xTaskPriorityDisinherit>
 8009cf0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	609a      	str	r2, [r3, #8]
 8009cf8:	e043      	b.n	8009d82 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d119      	bne.n	8009d34 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6858      	ldr	r0, [r3, #4]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d08:	461a      	mov	r2, r3
 8009d0a:	68b9      	ldr	r1, [r7, #8]
 8009d0c:	f004 fa67 	bl	800e1de <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d18:	441a      	add	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d32b      	bcc.n	8009d82 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	605a      	str	r2, [r3, #4]
 8009d32:	e026      	b.n	8009d82 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	68d8      	ldr	r0, [r3, #12]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	68b9      	ldr	r1, [r7, #8]
 8009d40:	f004 fa4d 	bl	800e1de <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	68da      	ldr	r2, [r3, #12]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4c:	425b      	negs	r3, r3
 8009d4e:	441a      	add	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	68da      	ldr	r2, [r3, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d207      	bcs.n	8009d70 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d68:	425b      	negs	r3, r3
 8009d6a:	441a      	add	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d105      	bne.n	8009d82 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d002      	beq.n	8009d82 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	1c5a      	adds	r2, r3, #1
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8009d8a:	697b      	ldr	r3, [r7, #20]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d018      	beq.n	8009dd8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68da      	ldr	r2, [r3, #12]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dae:	441a      	add	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d303      	bcc.n	8009dc8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	68d9      	ldr	r1, [r3, #12]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	6838      	ldr	r0, [r7, #0]
 8009dd4:	f004 fa03 	bl	800e1de <memcpy>
    }
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009de8:	f001 fde8 	bl	800b9bc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009df2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009df4:	e011      	b.n	8009e1a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d012      	beq.n	8009e24 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3324      	adds	r3, #36	@ 0x24
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 fd22 	bl	800a84c <xTaskRemoveFromEventList>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8009e0e:	f000 fe03 	bl	800aa18 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	dce9      	bgt.n	8009df6 <prvUnlockQueue+0x16>
 8009e22:	e000      	b.n	8009e26 <prvUnlockQueue+0x46>
                        break;
 8009e24:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	22ff      	movs	r2, #255	@ 0xff
 8009e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8009e2e:	f001 fdf7 	bl	800ba20 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009e32:	f001 fdc3 	bl	800b9bc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e3c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e3e:	e011      	b.n	8009e64 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d012      	beq.n	8009e6e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3310      	adds	r3, #16
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fcfd 	bl	800a84c <xTaskRemoveFromEventList>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009e58:	f000 fdde 	bl	800aa18 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009e5c:	7bbb      	ldrb	r3, [r7, #14]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	dce9      	bgt.n	8009e40 <prvUnlockQueue+0x60>
 8009e6c:	e000      	b.n	8009e70 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009e6e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	22ff      	movs	r2, #255	@ 0xff
 8009e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009e78:	f001 fdd2 	bl	800ba20 <vPortExitCritical>
}
 8009e7c:	bf00      	nop
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009e8c:	f001 fd96 	bl	800b9bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d102      	bne.n	8009e9e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	e001      	b.n	8009ea2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009ea2:	f001 fdbd 	bl	800ba20 <vPortExitCritical>

    return xReturn;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009eb8:	f001 fd80 	bl	800b9bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d102      	bne.n	8009ece <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	e001      	b.n	8009ed2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009ed2:	f001 fda5 	bl	800ba20 <vPortExitCritical>

    return xReturn;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
 8009eee:	e01e      	b.n	8009f2e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ef0:	4a13      	ldr	r2, [pc, #76]	@ (8009f40 <vQueueAddToRegistry+0x60>)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d115      	bne.n	8009f28 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009efc:	4910      	ldr	r1, [pc, #64]	@ (8009f40 <vQueueAddToRegistry+0x60>)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8009f06:	4a0e      	ldr	r2, [pc, #56]	@ (8009f40 <vQueueAddToRegistry+0x60>)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	00db      	lsls	r3, r3, #3
 8009f0c:	4413      	add	r3, r2
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f003 fd85 	bl	800da24 <SEGGER_SYSVIEW_ShrinkId>
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	2071      	movs	r0, #113	@ 0x71
 8009f22:	f002 ff99 	bl	800ce58 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8009f26:	e006      	b.n	8009f36 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b07      	cmp	r3, #7
 8009f32:	d9dd      	bls.n	8009ef0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	200005f4 	.word	0x200005f4

08009f44 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009f54:	f001 fd32 	bl	800b9bc <vPortEnterCritical>
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f5e:	b25b      	sxtb	r3, r3
 8009f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f64:	d103      	bne.n	8009f6e <vQueueWaitForMessageRestricted+0x2a>
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f74:	b25b      	sxtb	r3, r3
 8009f76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f7a:	d103      	bne.n	8009f84 <vQueueWaitForMessageRestricted+0x40>
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f84:	f001 fd4c 	bl	800ba20 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d106      	bne.n	8009f9e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	3324      	adds	r3, #36	@ 0x24
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	68b9      	ldr	r1, [r7, #8]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 fc27 	bl	800a7ec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009f9e:	6978      	ldr	r0, [r7, #20]
 8009fa0:	f7ff ff1e 	bl	8009de0 <prvUnlockQueue>
    }
 8009fa4:	bf00      	nop
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08c      	sub	sp, #48	@ 0x30
 8009fb0:	af04      	add	r7, sp, #16
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	603b      	str	r3, [r7, #0]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009fbc:	88fb      	ldrh	r3, [r7, #6]
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f001 fe2d 	bl	800bc20 <pvPortMalloc>
 8009fc6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00e      	beq.n	8009fec <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009fce:	2058      	movs	r0, #88	@ 0x58
 8009fd0:	f001 fe26 	bl	800bc20 <pvPortMalloc>
 8009fd4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d003      	beq.n	8009fe4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	631a      	str	r2, [r3, #48]	@ 0x30
 8009fe2:	e005      	b.n	8009ff0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8009fe4:	6978      	ldr	r0, [r7, #20]
 8009fe6:	f001 fefd 	bl	800bde4 <vPortFree>
 8009fea:	e001      	b.n	8009ff0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d013      	beq.n	800a01e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ff6:	88fa      	ldrh	r2, [r7, #6]
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	9303      	str	r3, [sp, #12]
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	9302      	str	r3, [sp, #8]
 800a000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a002:	9301      	str	r3, [sp, #4]
 800a004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	68b9      	ldr	r1, [r7, #8]
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 f80e 	bl	800a02e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a012:	69f8      	ldr	r0, [r7, #28]
 800a014:	f000 f8a2 	bl	800a15c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a018:	2301      	movs	r3, #1
 800a01a:	61bb      	str	r3, [r7, #24]
 800a01c:	e002      	b.n	800a024 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a01e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a022:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a024:	69bb      	ldr	r3, [r7, #24]
    }
 800a026:	4618      	mov	r0, r3
 800a028:	3720      	adds	r7, #32
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b088      	sub	sp, #32
 800a032:	af00      	add	r7, sp, #0
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	607a      	str	r2, [r7, #4]
 800a03a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	461a      	mov	r2, r3
 800a046:	21a5      	movs	r1, #165	@ 0xa5
 800a048:	f004 f860 	bl	800e10c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a056:	3b01      	subs	r3, #1
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	f023 0307 	bic.w	r3, r3, #7
 800a064:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	f003 0307 	and.w	r3, r3, #7
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	617b      	str	r3, [r7, #20]
    }
 800a082:	bf00      	nop
 800a084:	bf00      	nop
 800a086:	e7fd      	b.n	800a084 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d01f      	beq.n	800a0ce <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a08e:	2300      	movs	r3, #0
 800a090:	61fb      	str	r3, [r7, #28]
 800a092:	e012      	b.n	800a0ba <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	4413      	add	r3, r2
 800a09a:	7819      	ldrb	r1, [r3, #0]
 800a09c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	3334      	adds	r3, #52	@ 0x34
 800a0a4:	460a      	mov	r2, r1
 800a0a6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d006      	beq.n	800a0c2 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	61fb      	str	r3, [r7, #28]
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	2b09      	cmp	r3, #9
 800a0be:	d9e9      	bls.n	800a094 <prvInitialiseNewTask+0x66>
 800a0c0:	e000      	b.n	800a0c4 <prvInitialiseNewTask+0x96>
            {
                break;
 800a0c2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a0cc:	e003      	b.n	800a0d6 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	d901      	bls.n	800a0e0 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0dc:	2304      	movs	r3, #4
 800a0de:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0ea:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff f800 	bl	80090fc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fe:	3318      	adds	r3, #24
 800a100:	4618      	mov	r0, r3
 800a102:	f7fe fffb 	bl	80090fc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a10a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a10e:	f1c3 0205 	rsb	r2, r3, #5
 800a112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a114:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a11a:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800a11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11e:	3350      	adds	r3, #80	@ 0x50
 800a120:	2204      	movs	r2, #4
 800a122:	2100      	movs	r1, #0
 800a124:	4618      	mov	r0, r3
 800a126:	f003 fff1 	bl	800e10c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800a12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12c:	3354      	adds	r3, #84	@ 0x54
 800a12e:	2201      	movs	r2, #1
 800a130:	2100      	movs	r1, #0
 800a132:	4618      	mov	r0, r3
 800a134:	f003 ffea 	bl	800e10c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	68f9      	ldr	r1, [r7, #12]
 800a13c:	69b8      	ldr	r0, [r7, #24]
 800a13e:	f001 fa87 	bl	800b650 <pxPortInitialiseStack>
 800a142:	4602      	mov	r2, r0
 800a144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a146:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a152:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a154:	bf00      	nop
 800a156:	3720      	adds	r7, #32
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a15c:	b5b0      	push	{r4, r5, r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af02      	add	r7, sp, #8
 800a162:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a164:	f001 fc2a 	bl	800b9bc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a168:	4b3b      	ldr	r3, [pc, #236]	@ (800a258 <prvAddNewTaskToReadyList+0xfc>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3301      	adds	r3, #1
 800a16e:	4a3a      	ldr	r2, [pc, #232]	@ (800a258 <prvAddNewTaskToReadyList+0xfc>)
 800a170:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a172:	4b3a      	ldr	r3, [pc, #232]	@ (800a25c <prvAddNewTaskToReadyList+0x100>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d109      	bne.n	800a18e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a17a:	4a38      	ldr	r2, [pc, #224]	@ (800a25c <prvAddNewTaskToReadyList+0x100>)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a180:	4b35      	ldr	r3, [pc, #212]	@ (800a258 <prvAddNewTaskToReadyList+0xfc>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d110      	bne.n	800a1aa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a188:	f000 fc6a 	bl	800aa60 <prvInitialiseTaskLists>
 800a18c:	e00d      	b.n	800a1aa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a18e:	4b34      	ldr	r3, [pc, #208]	@ (800a260 <prvAddNewTaskToReadyList+0x104>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d109      	bne.n	800a1aa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a196:	4b31      	ldr	r3, [pc, #196]	@ (800a25c <prvAddNewTaskToReadyList+0x100>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d802      	bhi.n	800a1aa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a1a4:	4a2d      	ldr	r2, [pc, #180]	@ (800a25c <prvAddNewTaskToReadyList+0x100>)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a1aa:	4b2e      	ldr	r3, [pc, #184]	@ (800a264 <prvAddNewTaskToReadyList+0x108>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	4a2c      	ldr	r2, [pc, #176]	@ (800a264 <prvAddNewTaskToReadyList+0x108>)
 800a1b2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a1b4:	4b2b      	ldr	r3, [pc, #172]	@ (800a264 <prvAddNewTaskToReadyList+0x108>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d016      	beq.n	800a1f0 <prvAddNewTaskToReadyList+0x94>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f003 fb07 	bl	800d7d8 <SEGGER_SYSVIEW_OnTaskCreate>
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1da:	461d      	mov	r5, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	461c      	mov	r4, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1e6:	1ae3      	subs	r3, r4, r3
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	462b      	mov	r3, r5
 800a1ec:	f001 ffca 	bl	800c184 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f003 fb74 	bl	800d8e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	409a      	lsls	r2, r3
 800a200:	4b19      	ldr	r3, [pc, #100]	@ (800a268 <prvAddNewTaskToReadyList+0x10c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4313      	orrs	r3, r2
 800a206:	4a18      	ldr	r2, [pc, #96]	@ (800a268 <prvAddNewTaskToReadyList+0x10c>)
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a20e:	4613      	mov	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4a15      	ldr	r2, [pc, #84]	@ (800a26c <prvAddNewTaskToReadyList+0x110>)
 800a218:	441a      	add	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	3304      	adds	r3, #4
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f7fe ff78 	bl	8009116 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800a226:	f001 fbfb 	bl	800ba20 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800a22a:	4b0d      	ldr	r3, [pc, #52]	@ (800a260 <prvAddNewTaskToReadyList+0x104>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00e      	beq.n	800a250 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a232:	4b0a      	ldr	r3, [pc, #40]	@ (800a25c <prvAddNewTaskToReadyList+0x100>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d207      	bcs.n	800a250 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800a240:	4b0b      	ldr	r3, [pc, #44]	@ (800a270 <prvAddNewTaskToReadyList+0x114>)
 800a242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a246:	601a      	str	r2, [r3, #0]
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bdb0      	pop	{r4, r5, r7, pc}
 800a258:	2000070c 	.word	0x2000070c
 800a25c:	20000634 	.word	0x20000634
 800a260:	20000718 	.word	0x20000718
 800a264:	20000728 	.word	0x20000728
 800a268:	20000714 	.word	0x20000714
 800a26c:	20000638 	.word	0x20000638
 800a270:	e000ed04 	.word	0xe000ed04

0800a274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800a27c:	2300      	movs	r3, #0
 800a27e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d01c      	beq.n	800a2c0 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800a286:	4b16      	ldr	r3, [pc, #88]	@ (800a2e0 <vTaskDelay+0x6c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00b      	beq.n	800a2a6 <vTaskDelay+0x32>
        __asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	60bb      	str	r3, [r7, #8]
    }
 800a2a0:	bf00      	nop
 800a2a2:	bf00      	nop
 800a2a4:	e7fd      	b.n	800a2a2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800a2a6:	f000 f881 	bl	800a3ac <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800a2aa:	6879      	ldr	r1, [r7, #4]
 800a2ac:	2023      	movs	r0, #35	@ 0x23
 800a2ae:	f002 fd97 	bl	800cde0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 fe35 	bl	800af24 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800a2ba:	f000 f885 	bl	800a3c8 <xTaskResumeAll>
 800a2be:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d107      	bne.n	800a2d6 <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 800a2c6:	4b07      	ldr	r3, [pc, #28]	@ (800a2e4 <vTaskDelay+0x70>)
 800a2c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a2d6:	bf00      	nop
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20000734 	.word	0x20000734
 800a2e4:	e000ed04 	.word	0xe000ed04

0800a2e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800a2ee:	4b27      	ldr	r3, [pc, #156]	@ (800a38c <vTaskStartScheduler+0xa4>)
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	2282      	movs	r2, #130	@ 0x82
 800a2fa:	4925      	ldr	r1, [pc, #148]	@ (800a390 <vTaskStartScheduler+0xa8>)
 800a2fc:	4825      	ldr	r0, [pc, #148]	@ (800a394 <vTaskStartScheduler+0xac>)
 800a2fe:	f7ff fe55 	bl	8009fac <xTaskCreate>
 800a302:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d102      	bne.n	800a310 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800a30a:	f000 fe83 	bl	800b014 <xTimerCreateTimerTask>
 800a30e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d124      	bne.n	800a360 <vTaskStartScheduler+0x78>
        __asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	60bb      	str	r3, [r7, #8]
    }
 800a328:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800a32a:	4b1b      	ldr	r3, [pc, #108]	@ (800a398 <vTaskStartScheduler+0xb0>)
 800a32c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a330:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a332:	4b1a      	ldr	r3, [pc, #104]	@ (800a39c <vTaskStartScheduler+0xb4>)
 800a334:	2201      	movs	r2, #1
 800a336:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a338:	4b19      	ldr	r3, [pc, #100]	@ (800a3a0 <vTaskStartScheduler+0xb8>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800a33e:	4b19      	ldr	r3, [pc, #100]	@ (800a3a4 <vTaskStartScheduler+0xbc>)
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	4b12      	ldr	r3, [pc, #72]	@ (800a38c <vTaskStartScheduler+0xa4>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	429a      	cmp	r2, r3
 800a348:	d102      	bne.n	800a350 <vTaskStartScheduler+0x68>
 800a34a:	f003 fa29 	bl	800d7a0 <SEGGER_SYSVIEW_OnIdle>
 800a34e:	e004      	b.n	800a35a <vTaskStartScheduler+0x72>
 800a350:	4b14      	ldr	r3, [pc, #80]	@ (800a3a4 <vTaskStartScheduler+0xbc>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4618      	mov	r0, r3
 800a356:	f003 fa81 	bl	800d85c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800a35a:	f001 fa0b 	bl	800b774 <xPortStartScheduler>
 800a35e:	e00f      	b.n	800a380 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a366:	d10b      	bne.n	800a380 <vTaskStartScheduler+0x98>
        __asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	607b      	str	r3, [r7, #4]
    }
 800a37a:	bf00      	nop
 800a37c:	bf00      	nop
 800a37e:	e7fd      	b.n	800a37c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a380:	4b09      	ldr	r3, [pc, #36]	@ (800a3a8 <vTaskStartScheduler+0xc0>)
 800a382:	681b      	ldr	r3, [r3, #0]
}
 800a384:	bf00      	nop
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20000730 	.word	0x20000730
 800a390:	08010140 	.word	0x08010140
 800a394:	0800aa31 	.word	0x0800aa31
 800a398:	2000072c 	.word	0x2000072c
 800a39c:	20000718 	.word	0x20000718
 800a3a0:	20000710 	.word	0x20000710
 800a3a4:	20000634 	.word	0x20000634
 800a3a8:	20000060 	.word	0x20000060

0800a3ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a3b0:	4b04      	ldr	r3, [pc, #16]	@ (800a3c4 <vTaskSuspendAll+0x18>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	4a03      	ldr	r2, [pc, #12]	@ (800a3c4 <vTaskSuspendAll+0x18>)
 800a3b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a3ba:	bf00      	nop
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	20000734 	.word	0x20000734

0800a3c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a3d6:	4b44      	ldr	r3, [pc, #272]	@ (800a4e8 <xTaskResumeAll+0x120>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10b      	bne.n	800a3f6 <xTaskResumeAll+0x2e>
        __asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	603b      	str	r3, [r7, #0]
    }
 800a3f0:	bf00      	nop
 800a3f2:	bf00      	nop
 800a3f4:	e7fd      	b.n	800a3f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a3f6:	f001 fae1 	bl	800b9bc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a3fa:	4b3b      	ldr	r3, [pc, #236]	@ (800a4e8 <xTaskResumeAll+0x120>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	4a39      	ldr	r2, [pc, #228]	@ (800a4e8 <xTaskResumeAll+0x120>)
 800a402:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a404:	4b38      	ldr	r3, [pc, #224]	@ (800a4e8 <xTaskResumeAll+0x120>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d165      	bne.n	800a4d8 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a40c:	4b37      	ldr	r3, [pc, #220]	@ (800a4ec <xTaskResumeAll+0x124>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d061      	beq.n	800a4d8 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a414:	e032      	b.n	800a47c <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a416:	4b36      	ldr	r3, [pc, #216]	@ (800a4f0 <xTaskResumeAll+0x128>)
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3318      	adds	r3, #24
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe fed4 	bl	80091d0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3304      	adds	r3, #4
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fe fecf 	bl	80091d0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	4618      	mov	r0, r3
 800a436:	f003 fa53 	bl	800d8e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43e:	2201      	movs	r2, #1
 800a440:	409a      	lsls	r2, r3
 800a442:	4b2c      	ldr	r3, [pc, #176]	@ (800a4f4 <xTaskResumeAll+0x12c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4313      	orrs	r3, r2
 800a448:	4a2a      	ldr	r2, [pc, #168]	@ (800a4f4 <xTaskResumeAll+0x12c>)
 800a44a:	6013      	str	r3, [r2, #0]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a450:	4613      	mov	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	4a27      	ldr	r2, [pc, #156]	@ (800a4f8 <xTaskResumeAll+0x130>)
 800a45a:	441a      	add	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3304      	adds	r3, #4
 800a460:	4619      	mov	r1, r3
 800a462:	4610      	mov	r0, r2
 800a464:	f7fe fe57 	bl	8009116 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a46c:	4b23      	ldr	r3, [pc, #140]	@ (800a4fc <xTaskResumeAll+0x134>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a472:	429a      	cmp	r2, r3
 800a474:	d302      	bcc.n	800a47c <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800a476:	4b22      	ldr	r3, [pc, #136]	@ (800a500 <xTaskResumeAll+0x138>)
 800a478:	2201      	movs	r2, #1
 800a47a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a47c:	4b1c      	ldr	r3, [pc, #112]	@ (800a4f0 <xTaskResumeAll+0x128>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1c8      	bne.n	800a416 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a48a:	f000 fb67 	bl	800ab5c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a48e:	4b1d      	ldr	r3, [pc, #116]	@ (800a504 <xTaskResumeAll+0x13c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d010      	beq.n	800a4bc <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a49a:	f000 f859 	bl	800a550 <xTaskIncrementTick>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800a4a4:	4b16      	ldr	r3, [pc, #88]	@ (800a500 <xTaskResumeAll+0x138>)
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1f1      	bne.n	800a49a <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800a4b6:	4b13      	ldr	r3, [pc, #76]	@ (800a504 <xTaskResumeAll+0x13c>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a4bc:	4b10      	ldr	r3, [pc, #64]	@ (800a500 <xTaskResumeAll+0x138>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d009      	beq.n	800a4d8 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800a4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a508 <xTaskResumeAll+0x140>)
 800a4ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4ce:	601a      	str	r2, [r3, #0]
 800a4d0:	f3bf 8f4f 	dsb	sy
 800a4d4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a4d8:	f001 faa2 	bl	800ba20 <vPortExitCritical>

    return xAlreadyYielded;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20000734 	.word	0x20000734
 800a4ec:	2000070c 	.word	0x2000070c
 800a4f0:	200006cc 	.word	0x200006cc
 800a4f4:	20000714 	.word	0x20000714
 800a4f8:	20000638 	.word	0x20000638
 800a4fc:	20000634 	.word	0x20000634
 800a500:	20000720 	.word	0x20000720
 800a504:	2000071c 	.word	0x2000071c
 800a508:	e000ed04 	.word	0xe000ed04

0800a50c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a512:	4b05      	ldr	r3, [pc, #20]	@ (800a528 <xTaskGetTickCount+0x1c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a518:	687b      	ldr	r3, [r7, #4]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	20000710 	.word	0x20000710

0800a52c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a532:	f001 fb33 	bl	800bb9c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a536:	2300      	movs	r3, #0
 800a538:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800a53a:	4b04      	ldr	r3, [pc, #16]	@ (800a54c <xTaskGetTickCountFromISR+0x20>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a540:	683b      	ldr	r3, [r7, #0]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000710 	.word	0x20000710

0800a550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a55a:	4b51      	ldr	r3, [pc, #324]	@ (800a6a0 <xTaskIncrementTick+0x150>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f040 8093 	bne.w	800a68a <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a564:	4b4f      	ldr	r3, [pc, #316]	@ (800a6a4 <xTaskIncrementTick+0x154>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3301      	adds	r3, #1
 800a56a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a56c:	4a4d      	ldr	r2, [pc, #308]	@ (800a6a4 <xTaskIncrementTick+0x154>)
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d121      	bne.n	800a5bc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800a578:	4b4b      	ldr	r3, [pc, #300]	@ (800a6a8 <xTaskIncrementTick+0x158>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00b      	beq.n	800a59a <xTaskIncrementTick+0x4a>
        __asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	603b      	str	r3, [r7, #0]
    }
 800a594:	bf00      	nop
 800a596:	bf00      	nop
 800a598:	e7fd      	b.n	800a596 <xTaskIncrementTick+0x46>
 800a59a:	4b43      	ldr	r3, [pc, #268]	@ (800a6a8 <xTaskIncrementTick+0x158>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	4b42      	ldr	r3, [pc, #264]	@ (800a6ac <xTaskIncrementTick+0x15c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a40      	ldr	r2, [pc, #256]	@ (800a6a8 <xTaskIncrementTick+0x158>)
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	4a40      	ldr	r2, [pc, #256]	@ (800a6ac <xTaskIncrementTick+0x15c>)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6013      	str	r3, [r2, #0]
 800a5ae:	4b40      	ldr	r3, [pc, #256]	@ (800a6b0 <xTaskIncrementTick+0x160>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	4a3e      	ldr	r2, [pc, #248]	@ (800a6b0 <xTaskIncrementTick+0x160>)
 800a5b6:	6013      	str	r3, [r2, #0]
 800a5b8:	f000 fad0 	bl	800ab5c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a5bc:	4b3d      	ldr	r3, [pc, #244]	@ (800a6b4 <xTaskIncrementTick+0x164>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d34c      	bcc.n	800a660 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5c6:	4b38      	ldr	r3, [pc, #224]	@ (800a6a8 <xTaskIncrementTick+0x158>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d104      	bne.n	800a5da <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5d0:	4b38      	ldr	r3, [pc, #224]	@ (800a6b4 <xTaskIncrementTick+0x164>)
 800a5d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5d6:	601a      	str	r2, [r3, #0]
                    break;
 800a5d8:	e042      	b.n	800a660 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5da:	4b33      	ldr	r3, [pc, #204]	@ (800a6a8 <xTaskIncrementTick+0x158>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d203      	bcs.n	800a5fa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a5f2:	4a30      	ldr	r2, [pc, #192]	@ (800a6b4 <xTaskIncrementTick+0x164>)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5f8:	e032      	b.n	800a660 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe fde6 	bl	80091d0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d004      	beq.n	800a616 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	3318      	adds	r3, #24
 800a610:	4618      	mov	r0, r3
 800a612:	f7fe fddd 	bl	80091d0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	4618      	mov	r0, r3
 800a61a:	f003 f961 	bl	800d8e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a622:	2201      	movs	r2, #1
 800a624:	409a      	lsls	r2, r3
 800a626:	4b24      	ldr	r3, [pc, #144]	@ (800a6b8 <xTaskIncrementTick+0x168>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	4a22      	ldr	r2, [pc, #136]	@ (800a6b8 <xTaskIncrementTick+0x168>)
 800a62e:	6013      	str	r3, [r2, #0]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4a1f      	ldr	r2, [pc, #124]	@ (800a6bc <xTaskIncrementTick+0x16c>)
 800a63e:	441a      	add	r2, r3
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	3304      	adds	r3, #4
 800a644:	4619      	mov	r1, r3
 800a646:	4610      	mov	r0, r2
 800a648:	f7fe fd65 	bl	8009116 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a650:	4b1b      	ldr	r3, [pc, #108]	@ (800a6c0 <xTaskIncrementTick+0x170>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a656:	429a      	cmp	r2, r3
 800a658:	d3b5      	bcc.n	800a5c6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800a65a:	2301      	movs	r3, #1
 800a65c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a65e:	e7b2      	b.n	800a5c6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a660:	4b17      	ldr	r3, [pc, #92]	@ (800a6c0 <xTaskIncrementTick+0x170>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a666:	4915      	ldr	r1, [pc, #84]	@ (800a6bc <xTaskIncrementTick+0x16c>)
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	440b      	add	r3, r1
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d901      	bls.n	800a67c <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800a678:	2301      	movs	r3, #1
 800a67a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800a67c:	4b11      	ldr	r3, [pc, #68]	@ (800a6c4 <xTaskIncrementTick+0x174>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d007      	beq.n	800a694 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800a684:	2301      	movs	r3, #1
 800a686:	617b      	str	r3, [r7, #20]
 800a688:	e004      	b.n	800a694 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a68a:	4b0f      	ldr	r3, [pc, #60]	@ (800a6c8 <xTaskIncrementTick+0x178>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3301      	adds	r3, #1
 800a690:	4a0d      	ldr	r2, [pc, #52]	@ (800a6c8 <xTaskIncrementTick+0x178>)
 800a692:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a694:	697b      	ldr	r3, [r7, #20]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	20000734 	.word	0x20000734
 800a6a4:	20000710 	.word	0x20000710
 800a6a8:	200006c4 	.word	0x200006c4
 800a6ac:	200006c8 	.word	0x200006c8
 800a6b0:	20000724 	.word	0x20000724
 800a6b4:	2000072c 	.word	0x2000072c
 800a6b8:	20000714 	.word	0x20000714
 800a6bc:	20000638 	.word	0x20000638
 800a6c0:	20000634 	.word	0x20000634
 800a6c4:	20000720 	.word	0x20000720
 800a6c8:	2000071c 	.word	0x2000071c

0800a6cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6d2:	4b2d      	ldr	r3, [pc, #180]	@ (800a788 <vTaskSwitchContext+0xbc>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a6da:	4b2c      	ldr	r3, [pc, #176]	@ (800a78c <vTaskSwitchContext+0xc0>)
 800a6dc:	2201      	movs	r2, #1
 800a6de:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800a6e0:	e04e      	b.n	800a780 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800a6e2:	4b2a      	ldr	r3, [pc, #168]	@ (800a78c <vTaskSwitchContext+0xc0>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6e8:	4b29      	ldr	r3, [pc, #164]	@ (800a790 <vTaskSwitchContext+0xc4>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	fab3 f383 	clz	r3, r3
 800a6f4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a6f6:	7afb      	ldrb	r3, [r7, #11]
 800a6f8:	f1c3 031f 	rsb	r3, r3, #31
 800a6fc:	617b      	str	r3, [r7, #20]
 800a6fe:	4925      	ldr	r1, [pc, #148]	@ (800a794 <vTaskSwitchContext+0xc8>)
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	4613      	mov	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	440b      	add	r3, r1
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10b      	bne.n	800a72a <vTaskSwitchContext+0x5e>
        __asm volatile
 800a712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	607b      	str	r3, [r7, #4]
    }
 800a724:	bf00      	nop
 800a726:	bf00      	nop
 800a728:	e7fd      	b.n	800a726 <vTaskSwitchContext+0x5a>
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	4613      	mov	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4a17      	ldr	r2, [pc, #92]	@ (800a794 <vTaskSwitchContext+0xc8>)
 800a736:	4413      	add	r3, r2
 800a738:	613b      	str	r3, [r7, #16]
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	685a      	ldr	r2, [r3, #4]
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	605a      	str	r2, [r3, #4]
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	3308      	adds	r3, #8
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d104      	bne.n	800a75a <vTaskSwitchContext+0x8e>
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	605a      	str	r2, [r3, #4]
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	4a0d      	ldr	r2, [pc, #52]	@ (800a798 <vTaskSwitchContext+0xcc>)
 800a762:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800a764:	4b0c      	ldr	r3, [pc, #48]	@ (800a798 <vTaskSwitchContext+0xcc>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	4b0c      	ldr	r3, [pc, #48]	@ (800a79c <vTaskSwitchContext+0xd0>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d102      	bne.n	800a776 <vTaskSwitchContext+0xaa>
 800a770:	f003 f816 	bl	800d7a0 <SEGGER_SYSVIEW_OnIdle>
}
 800a774:	e004      	b.n	800a780 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800a776:	4b08      	ldr	r3, [pc, #32]	@ (800a798 <vTaskSwitchContext+0xcc>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f003 f86e 	bl	800d85c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800a780:	bf00      	nop
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	20000734 	.word	0x20000734
 800a78c:	20000720 	.word	0x20000720
 800a790:	20000714 	.word	0x20000714
 800a794:	20000638 	.word	0x20000638
 800a798:	20000634 	.word	0x20000634
 800a79c:	20000730 	.word	0x20000730

0800a7a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10b      	bne.n	800a7c8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	60fb      	str	r3, [r7, #12]
    }
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	e7fd      	b.n	800a7c4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7c8:	4b07      	ldr	r3, [pc, #28]	@ (800a7e8 <vTaskPlaceOnEventList+0x48>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3318      	adds	r3, #24
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f7fe fcc4 	bl	800915e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	6838      	ldr	r0, [r7, #0]
 800a7da:	f000 fba3 	bl	800af24 <prvAddCurrentTaskToDelayedList>
}
 800a7de:	bf00      	nop
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20000634 	.word	0x20000634

0800a7ec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d10b      	bne.n	800a816 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	617b      	str	r3, [r7, #20]
    }
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	e7fd      	b.n	800a812 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a816:	4b0c      	ldr	r3, [pc, #48]	@ (800a848 <vTaskPlaceOnEventListRestricted+0x5c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3318      	adds	r3, #24
 800a81c:	4619      	mov	r1, r3
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f7fe fc79 	bl	8009116 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d002      	beq.n	800a830 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800a82a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a82e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a830:	2024      	movs	r0, #36	@ 0x24
 800a832:	f002 fab7 	bl	800cda4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a836:	6879      	ldr	r1, [r7, #4]
 800a838:	68b8      	ldr	r0, [r7, #8]
 800a83a:	f000 fb73 	bl	800af24 <prvAddCurrentTaskToDelayedList>
    }
 800a83e:	bf00      	nop
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	20000634 	.word	0x20000634

0800a84c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10b      	bne.n	800a87a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800a862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	60fb      	str	r3, [r7, #12]
    }
 800a874:	bf00      	nop
 800a876:	bf00      	nop
 800a878:	e7fd      	b.n	800a876 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	3318      	adds	r3, #24
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe fca6 	bl	80091d0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a884:	4b1f      	ldr	r3, [pc, #124]	@ (800a904 <xTaskRemoveFromEventList+0xb8>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d120      	bne.n	800a8ce <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	3304      	adds	r3, #4
 800a890:	4618      	mov	r0, r3
 800a892:	f7fe fc9d 	bl	80091d0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	4618      	mov	r0, r3
 800a89a:	f003 f821 	bl	800d8e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	409a      	lsls	r2, r3
 800a8a6:	4b18      	ldr	r3, [pc, #96]	@ (800a908 <xTaskRemoveFromEventList+0xbc>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	4a16      	ldr	r2, [pc, #88]	@ (800a908 <xTaskRemoveFromEventList+0xbc>)
 800a8ae:	6013      	str	r3, [r2, #0]
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4a13      	ldr	r2, [pc, #76]	@ (800a90c <xTaskRemoveFromEventList+0xc0>)
 800a8be:	441a      	add	r2, r3
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	f7fe fc25 	bl	8009116 <vListInsertEnd>
 800a8cc:	e005      	b.n	800a8da <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	3318      	adds	r3, #24
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	480e      	ldr	r0, [pc, #56]	@ (800a910 <xTaskRemoveFromEventList+0xc4>)
 800a8d6:	f7fe fc1e 	bl	8009116 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8de:	4b0d      	ldr	r3, [pc, #52]	@ (800a914 <xTaskRemoveFromEventList+0xc8>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d905      	bls.n	800a8f4 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a918 <xTaskRemoveFromEventList+0xcc>)
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	601a      	str	r2, [r3, #0]
 800a8f2:	e001      	b.n	800a8f8 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a8f8:	697b      	ldr	r3, [r7, #20]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3718      	adds	r7, #24
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20000734 	.word	0x20000734
 800a908:	20000714 	.word	0x20000714
 800a90c:	20000638 	.word	0x20000638
 800a910:	200006cc 	.word	0x200006cc
 800a914:	20000634 	.word	0x20000634
 800a918:	20000720 	.word	0x20000720

0800a91c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a924:	4b06      	ldr	r3, [pc, #24]	@ (800a940 <vTaskInternalSetTimeOutState+0x24>)
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a92c:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <vTaskInternalSetTimeOutState+0x28>)
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	605a      	str	r2, [r3, #4]
}
 800a934:	bf00      	nop
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	20000724 	.word	0x20000724
 800a944:	20000710 	.word	0x20000710

0800a948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10b      	bne.n	800a970 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	613b      	str	r3, [r7, #16]
    }
 800a96a:	bf00      	nop
 800a96c:	bf00      	nop
 800a96e:	e7fd      	b.n	800a96c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10b      	bne.n	800a98e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800a976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a97a:	f383 8811 	msr	BASEPRI, r3
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f3bf 8f4f 	dsb	sy
 800a986:	60fb      	str	r3, [r7, #12]
    }
 800a988:	bf00      	nop
 800a98a:	bf00      	nop
 800a98c:	e7fd      	b.n	800a98a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800a98e:	f001 f815 	bl	800b9bc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a992:	4b1f      	ldr	r3, [pc, #124]	@ (800aa10 <xTaskCheckForTimeOut+0xc8>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	69ba      	ldr	r2, [r7, #24]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9aa:	d102      	bne.n	800a9b2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	61fb      	str	r3, [r7, #28]
 800a9b0:	e026      	b.n	800aa00 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	4b17      	ldr	r3, [pc, #92]	@ (800aa14 <xTaskCheckForTimeOut+0xcc>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d00a      	beq.n	800a9d4 <xTaskCheckForTimeOut+0x8c>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d305      	bcc.n	800a9d4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	601a      	str	r2, [r3, #0]
 800a9d2:	e015      	b.n	800aa00 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	697a      	ldr	r2, [r7, #20]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d20b      	bcs.n	800a9f6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	1ad2      	subs	r2, r2, r3
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7ff ff96 	bl	800a91c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	61fb      	str	r3, [r7, #28]
 800a9f4:	e004      	b.n	800aa00 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800aa00:	f001 f80e 	bl	800ba20 <vPortExitCritical>

    return xReturn;
 800aa04:	69fb      	ldr	r3, [r7, #28]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3720      	adds	r7, #32
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20000710 	.word	0x20000710
 800aa14:	20000724 	.word	0x20000724

0800aa18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800aa1c:	4b03      	ldr	r3, [pc, #12]	@ (800aa2c <vTaskMissedYield+0x14>)
 800aa1e:	2201      	movs	r2, #1
 800aa20:	601a      	str	r2, [r3, #0]
}
 800aa22:	bf00      	nop
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	20000720 	.word	0x20000720

0800aa30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800aa38:	f000 f852 	bl	800aae0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa3c:	4b06      	ldr	r3, [pc, #24]	@ (800aa58 <prvIdleTask+0x28>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d9f9      	bls.n	800aa38 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800aa44:	4b05      	ldr	r3, [pc, #20]	@ (800aa5c <prvIdleTask+0x2c>)
 800aa46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa4a:	601a      	str	r2, [r3, #0]
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800aa54:	e7f0      	b.n	800aa38 <prvIdleTask+0x8>
 800aa56:	bf00      	nop
 800aa58:	20000638 	.word	0x20000638
 800aa5c:	e000ed04 	.word	0xe000ed04

0800aa60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa66:	2300      	movs	r3, #0
 800aa68:	607b      	str	r3, [r7, #4]
 800aa6a:	e00c      	b.n	800aa86 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4a12      	ldr	r2, [pc, #72]	@ (800aac0 <prvInitialiseTaskLists+0x60>)
 800aa78:	4413      	add	r3, r2
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe fb1e 	bl	80090bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	3301      	adds	r3, #1
 800aa84:	607b      	str	r3, [r7, #4]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b04      	cmp	r3, #4
 800aa8a:	d9ef      	bls.n	800aa6c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800aa8c:	480d      	ldr	r0, [pc, #52]	@ (800aac4 <prvInitialiseTaskLists+0x64>)
 800aa8e:	f7fe fb15 	bl	80090bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800aa92:	480d      	ldr	r0, [pc, #52]	@ (800aac8 <prvInitialiseTaskLists+0x68>)
 800aa94:	f7fe fb12 	bl	80090bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800aa98:	480c      	ldr	r0, [pc, #48]	@ (800aacc <prvInitialiseTaskLists+0x6c>)
 800aa9a:	f7fe fb0f 	bl	80090bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800aa9e:	480c      	ldr	r0, [pc, #48]	@ (800aad0 <prvInitialiseTaskLists+0x70>)
 800aaa0:	f7fe fb0c 	bl	80090bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800aaa4:	480b      	ldr	r0, [pc, #44]	@ (800aad4 <prvInitialiseTaskLists+0x74>)
 800aaa6:	f7fe fb09 	bl	80090bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800aaaa:	4b0b      	ldr	r3, [pc, #44]	@ (800aad8 <prvInitialiseTaskLists+0x78>)
 800aaac:	4a05      	ldr	r2, [pc, #20]	@ (800aac4 <prvInitialiseTaskLists+0x64>)
 800aaae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aab0:	4b0a      	ldr	r3, [pc, #40]	@ (800aadc <prvInitialiseTaskLists+0x7c>)
 800aab2:	4a05      	ldr	r2, [pc, #20]	@ (800aac8 <prvInitialiseTaskLists+0x68>)
 800aab4:	601a      	str	r2, [r3, #0]
}
 800aab6:	bf00      	nop
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	20000638 	.word	0x20000638
 800aac4:	2000069c 	.word	0x2000069c
 800aac8:	200006b0 	.word	0x200006b0
 800aacc:	200006cc 	.word	0x200006cc
 800aad0:	200006e0 	.word	0x200006e0
 800aad4:	200006f8 	.word	0x200006f8
 800aad8:	200006c4 	.word	0x200006c4
 800aadc:	200006c8 	.word	0x200006c8

0800aae0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aae6:	e019      	b.n	800ab1c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800aae8:	f000 ff68 	bl	800b9bc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaec:	4b10      	ldr	r3, [pc, #64]	@ (800ab30 <prvCheckTasksWaitingTermination+0x50>)
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fe fb69 	bl	80091d0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800aafe:	4b0d      	ldr	r3, [pc, #52]	@ (800ab34 <prvCheckTasksWaitingTermination+0x54>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	3b01      	subs	r3, #1
 800ab04:	4a0b      	ldr	r2, [pc, #44]	@ (800ab34 <prvCheckTasksWaitingTermination+0x54>)
 800ab06:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800ab08:	4b0b      	ldr	r3, [pc, #44]	@ (800ab38 <prvCheckTasksWaitingTermination+0x58>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	4a0a      	ldr	r2, [pc, #40]	@ (800ab38 <prvCheckTasksWaitingTermination+0x58>)
 800ab10:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800ab12:	f000 ff85 	bl	800ba20 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f810 	bl	800ab3c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab1c:	4b06      	ldr	r3, [pc, #24]	@ (800ab38 <prvCheckTasksWaitingTermination+0x58>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e1      	bne.n	800aae8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	200006e0 	.word	0x200006e0
 800ab34:	2000070c 	.word	0x2000070c
 800ab38:	200006f4 	.word	0x200006f4

0800ab3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 f94b 	bl	800bde4 <vPortFree>
                vPortFree( pxTCB );
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f001 f948 	bl	800bde4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab60:	4b0a      	ldr	r3, [pc, #40]	@ (800ab8c <prvResetNextTaskUnblockTime+0x30>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d104      	bne.n	800ab74 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800ab6a:	4b09      	ldr	r3, [pc, #36]	@ (800ab90 <prvResetNextTaskUnblockTime+0x34>)
 800ab6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab70:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800ab72:	e005      	b.n	800ab80 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab74:	4b05      	ldr	r3, [pc, #20]	@ (800ab8c <prvResetNextTaskUnblockTime+0x30>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a04      	ldr	r2, [pc, #16]	@ (800ab90 <prvResetNextTaskUnblockTime+0x34>)
 800ab7e:	6013      	str	r3, [r2, #0]
}
 800ab80:	bf00      	nop
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	200006c4 	.word	0x200006c4
 800ab90:	2000072c 	.word	0x2000072c

0800ab94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800ab9a:	4b0b      	ldr	r3, [pc, #44]	@ (800abc8 <xTaskGetSchedulerState+0x34>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d102      	bne.n	800aba8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800aba2:	2301      	movs	r3, #1
 800aba4:	607b      	str	r3, [r7, #4]
 800aba6:	e008      	b.n	800abba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aba8:	4b08      	ldr	r3, [pc, #32]	@ (800abcc <xTaskGetSchedulerState+0x38>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d102      	bne.n	800abb6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800abb0:	2302      	movs	r3, #2
 800abb2:	607b      	str	r3, [r7, #4]
 800abb4:	e001      	b.n	800abba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800abb6:	2300      	movs	r3, #0
 800abb8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800abba:	687b      	ldr	r3, [r7, #4]
    }
 800abbc:	4618      	mov	r0, r3
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	20000718 	.word	0x20000718
 800abcc:	20000734 	.word	0x20000734

0800abd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800abdc:	2300      	movs	r3, #0
 800abde:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d063      	beq.n	800acae <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abea:	4b33      	ldr	r3, [pc, #204]	@ (800acb8 <xTaskPriorityInherit+0xe8>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d253      	bcs.n	800ac9c <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	db06      	blt.n	800ac0a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abfc:	4b2e      	ldr	r3, [pc, #184]	@ (800acb8 <xTaskPriorityInherit+0xe8>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac02:	f1c3 0205 	rsb	r2, r3, #5
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	6959      	ldr	r1, [r3, #20]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac12:	4613      	mov	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4413      	add	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4a28      	ldr	r2, [pc, #160]	@ (800acbc <xTaskPriorityInherit+0xec>)
 800ac1c:	4413      	add	r3, r2
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	d12f      	bne.n	800ac82 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	3304      	adds	r3, #4
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe fad2 	bl	80091d0 <uxListRemove>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac36:	2201      	movs	r2, #1
 800ac38:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3c:	43da      	mvns	r2, r3
 800ac3e:	4b20      	ldr	r3, [pc, #128]	@ (800acc0 <xTaskPriorityInherit+0xf0>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4013      	ands	r3, r2
 800ac44:	4a1e      	ldr	r2, [pc, #120]	@ (800acc0 <xTaskPriorityInherit+0xf0>)
 800ac46:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac48:	4b1b      	ldr	r3, [pc, #108]	@ (800acb8 <xTaskPriorityInherit+0xe8>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac56:	2201      	movs	r2, #1
 800ac58:	409a      	lsls	r2, r3
 800ac5a:	4b19      	ldr	r3, [pc, #100]	@ (800acc0 <xTaskPriorityInherit+0xf0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	4a17      	ldr	r2, [pc, #92]	@ (800acc0 <xTaskPriorityInherit+0xf0>)
 800ac62:	6013      	str	r3, [r2, #0]
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4a12      	ldr	r2, [pc, #72]	@ (800acbc <xTaskPriorityInherit+0xec>)
 800ac72:	441a      	add	r2, r3
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	3304      	adds	r3, #4
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	f7fe fa4b 	bl	8009116 <vListInsertEnd>
 800ac80:	e004      	b.n	800ac8c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac82:	4b0d      	ldr	r3, [pc, #52]	@ (800acb8 <xTaskPriorityInherit+0xe8>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	2049      	movs	r0, #73	@ 0x49
 800ac92:	f002 f8a5 	bl	800cde0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800ac96:	2301      	movs	r3, #1
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	e008      	b.n	800acae <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aca0:	4b05      	ldr	r3, [pc, #20]	@ (800acb8 <xTaskPriorityInherit+0xe8>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d201      	bcs.n	800acae <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800acaa:	2301      	movs	r3, #1
 800acac:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800acae:	68fb      	ldr	r3, [r7, #12]
    }
 800acb0:	4618      	mov	r0, r3
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	20000634 	.word	0x20000634
 800acbc:	20000638 	.word	0x20000638
 800acc0:	20000714 	.word	0x20000714

0800acc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800acd0:	2300      	movs	r3, #0
 800acd2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d06a      	beq.n	800adb0 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800acda:	4b38      	ldr	r3, [pc, #224]	@ (800adbc <xTaskPriorityDisinherit+0xf8>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d00b      	beq.n	800acfc <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800ace4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	60fb      	str	r3, [r7, #12]
    }
 800acf6:	bf00      	nop
 800acf8:	bf00      	nop
 800acfa:	e7fd      	b.n	800acf8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10b      	bne.n	800ad1c <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	60bb      	str	r3, [r7, #8]
    }
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	e7fd      	b.n	800ad18 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad20:	1e5a      	subs	r2, r3, #1
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d03e      	beq.n	800adb0 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d13a      	bne.n	800adb0 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe fa46 	bl	80091d0 <uxListRemove>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10a      	bne.n	800ad60 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4e:	2201      	movs	r2, #1
 800ad50:	fa02 f303 	lsl.w	r3, r2, r3
 800ad54:	43da      	mvns	r2, r3
 800ad56:	4b1a      	ldr	r3, [pc, #104]	@ (800adc0 <xTaskPriorityDisinherit+0xfc>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	4a18      	ldr	r2, [pc, #96]	@ (800adc0 <xTaskPriorityDisinherit+0xfc>)
 800ad5e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4619      	mov	r1, r3
 800ad64:	204a      	movs	r0, #74	@ 0x4a
 800ad66:	f002 f83b 	bl	800cde0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad76:	f1c3 0205 	rsb	r2, r3, #5
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad82:	2201      	movs	r2, #1
 800ad84:	409a      	lsls	r2, r3
 800ad86:	4b0e      	ldr	r3, [pc, #56]	@ (800adc0 <xTaskPriorityDisinherit+0xfc>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	4a0c      	ldr	r2, [pc, #48]	@ (800adc0 <xTaskPriorityDisinherit+0xfc>)
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4a09      	ldr	r2, [pc, #36]	@ (800adc4 <xTaskPriorityDisinherit+0x100>)
 800ad9e:	441a      	add	r2, r3
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	3304      	adds	r3, #4
 800ada4:	4619      	mov	r1, r3
 800ada6:	4610      	mov	r0, r2
 800ada8:	f7fe f9b5 	bl	8009116 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800adac:	2301      	movs	r3, #1
 800adae:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800adb0:	697b      	ldr	r3, [r7, #20]
    }
 800adb2:	4618      	mov	r0, r3
 800adb4:	3718      	adds	r7, #24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	20000634 	.word	0x20000634
 800adc0:	20000714 	.word	0x20000714
 800adc4:	20000638 	.word	0x20000638

0800adc8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800add6:	2301      	movs	r3, #1
 800add8:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8083 	beq.w	800aee8 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10b      	bne.n	800ae02 <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	60fb      	str	r3, [r7, #12]
    }
 800adfc:	bf00      	nop
 800adfe:	bf00      	nop
 800ae00:	e7fd      	b.n	800adfe <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d902      	bls.n	800ae12 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	61fb      	str	r3, [r7, #28]
 800ae10:	e002      	b.n	800ae18 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae16:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae1c:	69fa      	ldr	r2, [r7, #28]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d062      	beq.n	800aee8 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d15d      	bne.n	800aee8 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800ae2c:	4b30      	ldr	r3, [pc, #192]	@ (800aef0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	69ba      	ldr	r2, [r7, #24]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d10b      	bne.n	800ae4e <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	60bb      	str	r3, [r7, #8]
    }
 800ae48:	bf00      	nop
 800ae4a:	bf00      	nop
 800ae4c:	e7fd      	b.n	800ae4a <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4619      	mov	r1, r3
 800ae52:	204a      	movs	r0, #74	@ 0x4a
 800ae54:	f001 ffc4 	bl	800cde0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae5c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	69fa      	ldr	r2, [r7, #28]
 800ae62:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	db04      	blt.n	800ae76 <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	f1c3 0205 	rsb	r2, r3, #5
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	6959      	ldr	r1, [r3, #20]
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4a1b      	ldr	r2, [pc, #108]	@ (800aef4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ae86:	4413      	add	r3, r2
 800ae88:	4299      	cmp	r1, r3
 800ae8a:	d12d      	bne.n	800aee8 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	3304      	adds	r3, #4
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe f99d 	bl	80091d0 <uxListRemove>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea0:	2201      	movs	r2, #1
 800aea2:	fa02 f303 	lsl.w	r3, r2, r3
 800aea6:	43da      	mvns	r2, r3
 800aea8:	4b13      	ldr	r3, [pc, #76]	@ (800aef8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4013      	ands	r3, r2
 800aeae:	4a12      	ldr	r2, [pc, #72]	@ (800aef8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800aeb0:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f002 fd13 	bl	800d8e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aebe:	2201      	movs	r2, #1
 800aec0:	409a      	lsls	r2, r3
 800aec2:	4b0d      	ldr	r3, [pc, #52]	@ (800aef8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	4a0b      	ldr	r2, [pc, #44]	@ (800aef8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800aeca:	6013      	str	r3, [r2, #0]
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed0:	4613      	mov	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4a06      	ldr	r2, [pc, #24]	@ (800aef4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800aeda:	441a      	add	r2, r3
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	3304      	adds	r3, #4
 800aee0:	4619      	mov	r1, r3
 800aee2:	4610      	mov	r0, r2
 800aee4:	f7fe f917 	bl	8009116 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800aee8:	bf00      	nop
 800aeea:	3720      	adds	r7, #32
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	20000634 	.word	0x20000634
 800aef4:	20000638 	.word	0x20000638
 800aef8:	20000714 	.word	0x20000714

0800aefc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800aefc:	b480      	push	{r7}
 800aefe:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800af00:	4b07      	ldr	r3, [pc, #28]	@ (800af20 <pvTaskIncrementMutexHeldCount+0x24>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d004      	beq.n	800af12 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800af08:	4b05      	ldr	r3, [pc, #20]	@ (800af20 <pvTaskIncrementMutexHeldCount+0x24>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af0e:	3201      	adds	r2, #1
 800af10:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800af12:	4b03      	ldr	r3, [pc, #12]	@ (800af20 <pvTaskIncrementMutexHeldCount+0x24>)
 800af14:	681b      	ldr	r3, [r3, #0]
    }
 800af16:	4618      	mov	r0, r3
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr
 800af20:	20000634 	.word	0x20000634

0800af24 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800af2e:	4b32      	ldr	r3, [pc, #200]	@ (800aff8 <prvAddCurrentTaskToDelayedList+0xd4>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af34:	4b31      	ldr	r3, [pc, #196]	@ (800affc <prvAddCurrentTaskToDelayedList+0xd8>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3304      	adds	r3, #4
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe f948 	bl	80091d0 <uxListRemove>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10b      	bne.n	800af5e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800af46:	4b2d      	ldr	r3, [pc, #180]	@ (800affc <prvAddCurrentTaskToDelayedList+0xd8>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af4c:	2201      	movs	r2, #1
 800af4e:	fa02 f303 	lsl.w	r3, r2, r3
 800af52:	43da      	mvns	r2, r3
 800af54:	4b2a      	ldr	r3, [pc, #168]	@ (800b000 <prvAddCurrentTaskToDelayedList+0xdc>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4013      	ands	r3, r2
 800af5a:	4a29      	ldr	r2, [pc, #164]	@ (800b000 <prvAddCurrentTaskToDelayedList+0xdc>)
 800af5c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af64:	d110      	bne.n	800af88 <prvAddCurrentTaskToDelayedList+0x64>
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00d      	beq.n	800af88 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800af6c:	4b23      	ldr	r3, [pc, #140]	@ (800affc <prvAddCurrentTaskToDelayedList+0xd8>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	211b      	movs	r1, #27
 800af72:	4618      	mov	r0, r3
 800af74:	f002 fcf6 	bl	800d964 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af78:	4b20      	ldr	r3, [pc, #128]	@ (800affc <prvAddCurrentTaskToDelayedList+0xd8>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3304      	adds	r3, #4
 800af7e:	4619      	mov	r1, r3
 800af80:	4820      	ldr	r0, [pc, #128]	@ (800b004 <prvAddCurrentTaskToDelayedList+0xe0>)
 800af82:	f7fe f8c8 	bl	8009116 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800af86:	e032      	b.n	800afee <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4413      	add	r3, r2
 800af8e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af90:	4b1a      	ldr	r3, [pc, #104]	@ (800affc <prvAddCurrentTaskToDelayedList+0xd8>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d20f      	bcs.n	800afc0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800afa0:	4b16      	ldr	r3, [pc, #88]	@ (800affc <prvAddCurrentTaskToDelayedList+0xd8>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2104      	movs	r1, #4
 800afa6:	4618      	mov	r0, r3
 800afa8:	f002 fcdc 	bl	800d964 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afac:	4b16      	ldr	r3, [pc, #88]	@ (800b008 <prvAddCurrentTaskToDelayedList+0xe4>)
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	4b12      	ldr	r3, [pc, #72]	@ (800affc <prvAddCurrentTaskToDelayedList+0xd8>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f7fe f8d0 	bl	800915e <vListInsert>
}
 800afbe:	e016      	b.n	800afee <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800afc0:	4b0e      	ldr	r3, [pc, #56]	@ (800affc <prvAddCurrentTaskToDelayedList+0xd8>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2104      	movs	r1, #4
 800afc6:	4618      	mov	r0, r3
 800afc8:	f002 fccc 	bl	800d964 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afcc:	4b0f      	ldr	r3, [pc, #60]	@ (800b00c <prvAddCurrentTaskToDelayedList+0xe8>)
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	4b0a      	ldr	r3, [pc, #40]	@ (800affc <prvAddCurrentTaskToDelayedList+0xd8>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3304      	adds	r3, #4
 800afd6:	4619      	mov	r1, r3
 800afd8:	4610      	mov	r0, r2
 800afda:	f7fe f8c0 	bl	800915e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800afde:	4b0c      	ldr	r3, [pc, #48]	@ (800b010 <prvAddCurrentTaskToDelayedList+0xec>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d202      	bcs.n	800afee <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800afe8:	4a09      	ldr	r2, [pc, #36]	@ (800b010 <prvAddCurrentTaskToDelayedList+0xec>)
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	6013      	str	r3, [r2, #0]
}
 800afee:	bf00      	nop
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20000710 	.word	0x20000710
 800affc:	20000634 	.word	0x20000634
 800b000:	20000714 	.word	0x20000714
 800b004:	200006f8 	.word	0x200006f8
 800b008:	200006c8 	.word	0x200006c8
 800b00c:	200006c4 	.word	0x200006c4
 800b010:	2000072c 	.word	0x2000072c

0800b014 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b01e:	f000 fae1 	bl	800b5e4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b022:	4b12      	ldr	r3, [pc, #72]	@ (800b06c <xTimerCreateTimerTask+0x58>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00b      	beq.n	800b042 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800b02a:	4b11      	ldr	r3, [pc, #68]	@ (800b070 <xTimerCreateTimerTask+0x5c>)
 800b02c:	9301      	str	r3, [sp, #4]
 800b02e:	2302      	movs	r3, #2
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	2300      	movs	r3, #0
 800b034:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800b038:	490e      	ldr	r1, [pc, #56]	@ (800b074 <xTimerCreateTimerTask+0x60>)
 800b03a:	480f      	ldr	r0, [pc, #60]	@ (800b078 <xTimerCreateTimerTask+0x64>)
 800b03c:	f7fe ffb6 	bl	8009fac <xTaskCreate>
 800b040:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10b      	bne.n	800b060 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800b048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	603b      	str	r3, [r7, #0]
    }
 800b05a:	bf00      	nop
 800b05c:	bf00      	nop
 800b05e:	e7fd      	b.n	800b05c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800b060:	687b      	ldr	r3, [r7, #4]
    }
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20000768 	.word	0x20000768
 800b070:	2000076c 	.word	0x2000076c
 800b074:	08010148 	.word	0x08010148
 800b078:	0800b1b5 	.word	0x0800b1b5

0800b07c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08a      	sub	sp, #40	@ 0x28
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10b      	bne.n	800b0ac <xTimerGenericCommand+0x30>
        __asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	623b      	str	r3, [r7, #32]
    }
 800b0a6:	bf00      	nop
 800b0a8:	bf00      	nop
 800b0aa:	e7fd      	b.n	800b0a8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800b0ac:	4b19      	ldr	r3, [pc, #100]	@ (800b114 <xTimerGenericCommand+0x98>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d02a      	beq.n	800b10a <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2b05      	cmp	r3, #5
 800b0c4:	dc18      	bgt.n	800b0f8 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b0c6:	f7ff fd65 	bl	800ab94 <xTaskGetSchedulerState>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d109      	bne.n	800b0e4 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b0d0:	4b10      	ldr	r3, [pc, #64]	@ (800b114 <xTimerGenericCommand+0x98>)
 800b0d2:	6818      	ldr	r0, [r3, #0]
 800b0d4:	f107 0114 	add.w	r1, r7, #20
 800b0d8:	2300      	movs	r3, #0
 800b0da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0dc:	f7fe f998 	bl	8009410 <xQueueGenericSend>
 800b0e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0e2:	e012      	b.n	800b10a <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b0e4:	4b0b      	ldr	r3, [pc, #44]	@ (800b114 <xTimerGenericCommand+0x98>)
 800b0e6:	6818      	ldr	r0, [r3, #0]
 800b0e8:	f107 0114 	add.w	r1, r7, #20
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f7fe f98e 	bl	8009410 <xQueueGenericSend>
 800b0f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0f6:	e008      	b.n	800b10a <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0f8:	4b06      	ldr	r3, [pc, #24]	@ (800b114 <xTimerGenericCommand+0x98>)
 800b0fa:	6818      	ldr	r0, [r3, #0]
 800b0fc:	f107 0114 	add.w	r1, r7, #20
 800b100:	2300      	movs	r3, #0
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	f7fe faae 	bl	8009664 <xQueueGenericSendFromISR>
 800b108:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800b10c:	4618      	mov	r0, r3
 800b10e:	3728      	adds	r7, #40	@ 0x28
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	20000768 	.word	0x20000768

0800b118 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af02      	add	r7, sp, #8
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b122:	4b23      	ldr	r3, [pc, #140]	@ (800b1b0 <prvProcessExpiredTimer+0x98>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	3304      	adds	r3, #4
 800b130:	4618      	mov	r0, r3
 800b132:	f7fe f84d 	bl	80091d0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b13c:	f003 0304 	and.w	r3, r3, #4
 800b140:	2b00      	cmp	r3, #0
 800b142:	d023      	beq.n	800b18c <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	699a      	ldr	r2, [r3, #24]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	18d1      	adds	r1, r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	6978      	ldr	r0, [r7, #20]
 800b152:	f000 f8d5 	bl	800b300 <prvInsertTimerInActiveList>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d020      	beq.n	800b19e <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b15c:	2300      	movs	r3, #0
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	2300      	movs	r3, #0
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	2100      	movs	r1, #0
 800b166:	6978      	ldr	r0, [r7, #20]
 800b168:	f7ff ff88 	bl	800b07c <xTimerGenericCommand>
 800b16c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d114      	bne.n	800b19e <prvProcessExpiredTimer+0x86>
        __asm volatile
 800b174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b178:	f383 8811 	msr	BASEPRI, r3
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	f3bf 8f4f 	dsb	sy
 800b184:	60fb      	str	r3, [r7, #12]
    }
 800b186:	bf00      	nop
 800b188:	bf00      	nop
 800b18a:	e7fd      	b.n	800b188 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b192:	f023 0301 	bic.w	r3, r3, #1
 800b196:	b2da      	uxtb	r2, r3
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	6a1b      	ldr	r3, [r3, #32]
 800b1a2:	6978      	ldr	r0, [r7, #20]
 800b1a4:	4798      	blx	r3
    }
 800b1a6:	bf00      	nop
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20000760 	.word	0x20000760

0800b1b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1bc:	f107 0308 	add.w	r3, r7, #8
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f000 f859 	bl	800b278 <prvGetNextExpireTime>
 800b1c6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f000 f805 	bl	800b1dc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b1d2:	f000 f8d7 	bl	800b384 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1d6:	bf00      	nop
 800b1d8:	e7f0      	b.n	800b1bc <prvTimerTask+0x8>
	...

0800b1dc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b1e6:	f7ff f8e1 	bl	800a3ac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1ea:	f107 0308 	add.w	r3, r7, #8
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 f866 	bl	800b2c0 <prvSampleTimeNow>
 800b1f4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d130      	bne.n	800b25e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10a      	bne.n	800b218 <prvProcessTimerOrBlockTask+0x3c>
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	429a      	cmp	r2, r3
 800b208:	d806      	bhi.n	800b218 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b20a:	f7ff f8dd 	bl	800a3c8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b20e:	68f9      	ldr	r1, [r7, #12]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff ff81 	bl	800b118 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b216:	e024      	b.n	800b262 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d008      	beq.n	800b230 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b21e:	4b13      	ldr	r3, [pc, #76]	@ (800b26c <prvProcessTimerOrBlockTask+0x90>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <prvProcessTimerOrBlockTask+0x50>
 800b228:	2301      	movs	r3, #1
 800b22a:	e000      	b.n	800b22e <prvProcessTimerOrBlockTask+0x52>
 800b22c:	2300      	movs	r3, #0
 800b22e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b230:	4b0f      	ldr	r3, [pc, #60]	@ (800b270 <prvProcessTimerOrBlockTask+0x94>)
 800b232:	6818      	ldr	r0, [r3, #0]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	683a      	ldr	r2, [r7, #0]
 800b23c:	4619      	mov	r1, r3
 800b23e:	f7fe fe81 	bl	8009f44 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b242:	f7ff f8c1 	bl	800a3c8 <xTaskResumeAll>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10a      	bne.n	800b262 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800b24c:	4b09      	ldr	r3, [pc, #36]	@ (800b274 <prvProcessTimerOrBlockTask+0x98>)
 800b24e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	f3bf 8f6f 	isb	sy
    }
 800b25c:	e001      	b.n	800b262 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b25e:	f7ff f8b3 	bl	800a3c8 <xTaskResumeAll>
    }
 800b262:	bf00      	nop
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20000764 	.word	0x20000764
 800b270:	20000768 	.word	0x20000768
 800b274:	e000ed04 	.word	0xe000ed04

0800b278 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b280:	4b0e      	ldr	r3, [pc, #56]	@ (800b2bc <prvGetNextExpireTime+0x44>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d101      	bne.n	800b28e <prvGetNextExpireTime+0x16>
 800b28a:	2201      	movs	r2, #1
 800b28c:	e000      	b.n	800b290 <prvGetNextExpireTime+0x18>
 800b28e:	2200      	movs	r2, #0
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d105      	bne.n	800b2a8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b29c:	4b07      	ldr	r3, [pc, #28]	@ (800b2bc <prvGetNextExpireTime+0x44>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	60fb      	str	r3, [r7, #12]
 800b2a6:	e001      	b.n	800b2ac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
    }
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	20000760 	.word	0x20000760

0800b2c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b2c8:	f7ff f920 	bl	800a50c <xTaskGetTickCount>
 800b2cc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b2fc <prvSampleTimeNow+0x3c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d205      	bcs.n	800b2e4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b2d8:	f000 f91e 	bl	800b518 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	e002      	b.n	800b2ea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b2ea:	4a04      	ldr	r2, [pc, #16]	@ (800b2fc <prvSampleTimeNow+0x3c>)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
    }
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20000770 	.word	0x20000770

0800b300 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	429a      	cmp	r2, r3
 800b324:	d812      	bhi.n	800b34c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	1ad2      	subs	r2, r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	429a      	cmp	r2, r3
 800b332:	d302      	bcc.n	800b33a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b334:	2301      	movs	r3, #1
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	e01b      	b.n	800b372 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b33a:	4b10      	ldr	r3, [pc, #64]	@ (800b37c <prvInsertTimerInActiveList+0x7c>)
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3304      	adds	r3, #4
 800b342:	4619      	mov	r1, r3
 800b344:	4610      	mov	r0, r2
 800b346:	f7fd ff0a 	bl	800915e <vListInsert>
 800b34a:	e012      	b.n	800b372 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d206      	bcs.n	800b362 <prvInsertTimerInActiveList+0x62>
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d302      	bcc.n	800b362 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b35c:	2301      	movs	r3, #1
 800b35e:	617b      	str	r3, [r7, #20]
 800b360:	e007      	b.n	800b372 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b362:	4b07      	ldr	r3, [pc, #28]	@ (800b380 <prvInsertTimerInActiveList+0x80>)
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3304      	adds	r3, #4
 800b36a:	4619      	mov	r1, r3
 800b36c:	4610      	mov	r0, r2
 800b36e:	f7fd fef6 	bl	800915e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b372:	697b      	ldr	r3, [r7, #20]
    }
 800b374:	4618      	mov	r0, r3
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	20000764 	.word	0x20000764
 800b380:	20000760 	.word	0x20000760

0800b384 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b384:	b580      	push	{r7, lr}
 800b386:	b08c      	sub	sp, #48	@ 0x30
 800b388:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b38a:	e0b2      	b.n	800b4f2 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f2c0 80af 	blt.w	800b4f2 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39a:	695b      	ldr	r3, [r3, #20]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d004      	beq.n	800b3aa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fd ff13 	bl	80091d0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3aa:	1d3b      	adds	r3, r7, #4
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7ff ff87 	bl	800b2c0 <prvSampleTimeNow>
 800b3b2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2b09      	cmp	r3, #9
 800b3b8:	f200 8098 	bhi.w	800b4ec <prvProcessReceivedCommands+0x168>
 800b3bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c4 <prvProcessReceivedCommands+0x40>)
 800b3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c2:	bf00      	nop
 800b3c4:	0800b3ed 	.word	0x0800b3ed
 800b3c8:	0800b3ed 	.word	0x0800b3ed
 800b3cc:	0800b3ed 	.word	0x0800b3ed
 800b3d0:	0800b463 	.word	0x0800b463
 800b3d4:	0800b477 	.word	0x0800b477
 800b3d8:	0800b4c3 	.word	0x0800b4c3
 800b3dc:	0800b3ed 	.word	0x0800b3ed
 800b3e0:	0800b3ed 	.word	0x0800b3ed
 800b3e4:	0800b463 	.word	0x0800b463
 800b3e8:	0800b477 	.word	0x0800b477
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3f2:	f043 0301 	orr.w	r3, r3, #1
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	18d1      	adds	r1, r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6a3a      	ldr	r2, [r7, #32]
 800b40a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b40c:	f7ff ff78 	bl	800b300 <prvInsertTimerInActiveList>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d06c      	beq.n	800b4f0 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b41c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b424:	f003 0304 	and.w	r3, r3, #4
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d061      	beq.n	800b4f0 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	441a      	add	r2, r3
 800b434:	2300      	movs	r3, #0
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	2300      	movs	r3, #0
 800b43a:	2100      	movs	r1, #0
 800b43c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b43e:	f7ff fe1d 	bl	800b07c <xTimerGenericCommand>
 800b442:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d152      	bne.n	800b4f0 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	61bb      	str	r3, [r7, #24]
    }
 800b45c:	bf00      	nop
 800b45e:	bf00      	nop
 800b460:	e7fd      	b.n	800b45e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b464:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b468:	f023 0301 	bic.w	r3, r3, #1
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b470:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b474:	e03d      	b.n	800b4f2 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b47c:	f043 0301 	orr.w	r3, r3, #1
 800b480:	b2da      	uxtb	r2, r3
 800b482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b484:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10b      	bne.n	800b4ae <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	617b      	str	r3, [r7, #20]
    }
 800b4a8:	bf00      	nop
 800b4aa:	bf00      	nop
 800b4ac:	e7fd      	b.n	800b4aa <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b0:	699a      	ldr	r2, [r3, #24]
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	18d1      	adds	r1, r2, r3
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	6a3a      	ldr	r2, [r7, #32]
 800b4ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b4bc:	f7ff ff20 	bl	800b300 <prvInsertTimerInActiveList>
                        break;
 800b4c0:	e017      	b.n	800b4f2 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4c8:	f003 0302 	and.w	r3, r3, #2
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d103      	bne.n	800b4d8 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800b4d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b4d2:	f000 fc87 	bl	800bde4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b4d6:	e00c      	b.n	800b4f2 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4de:	f023 0301 	bic.w	r3, r3, #1
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b4ea:	e002      	b.n	800b4f2 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800b4ec:	bf00      	nop
 800b4ee:	e000      	b.n	800b4f2 <prvProcessReceivedCommands+0x16e>
                        break;
 800b4f0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4f2:	4b08      	ldr	r3, [pc, #32]	@ (800b514 <prvProcessReceivedCommands+0x190>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f107 0108 	add.w	r1, r7, #8
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fe f973 	bl	80097e8 <xQueueReceive>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	f47f af41 	bne.w	800b38c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800b50a:	bf00      	nop
 800b50c:	bf00      	nop
 800b50e:	3728      	adds	r7, #40	@ 0x28
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	20000768 	.word	0x20000768

0800b518 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b51e:	e049      	b.n	800b5b4 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b520:	4b2e      	ldr	r3, [pc, #184]	@ (800b5dc <prvSwitchTimerLists+0xc4>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b52a:	4b2c      	ldr	r3, [pc, #176]	@ (800b5dc <prvSwitchTimerLists+0xc4>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3304      	adds	r3, #4
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fd fe49 	bl	80091d0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6a1b      	ldr	r3, [r3, #32]
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b54c:	f003 0304 	and.w	r3, r3, #4
 800b550:	2b00      	cmp	r3, #0
 800b552:	d02f      	beq.n	800b5b4 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	4413      	add	r3, r2
 800b55c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	429a      	cmp	r2, r3
 800b564:	d90e      	bls.n	800b584 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b572:	4b1a      	ldr	r3, [pc, #104]	@ (800b5dc <prvSwitchTimerLists+0xc4>)
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3304      	adds	r3, #4
 800b57a:	4619      	mov	r1, r3
 800b57c:	4610      	mov	r0, r2
 800b57e:	f7fd fdee 	bl	800915e <vListInsert>
 800b582:	e017      	b.n	800b5b4 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b584:	2300      	movs	r3, #0
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	2300      	movs	r3, #0
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	2100      	movs	r1, #0
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f7ff fd74 	bl	800b07c <xTimerGenericCommand>
 800b594:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10b      	bne.n	800b5b4 <prvSwitchTimerLists+0x9c>
        __asm volatile
 800b59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a0:	f383 8811 	msr	BASEPRI, r3
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	603b      	str	r3, [r7, #0]
    }
 800b5ae:	bf00      	nop
 800b5b0:	bf00      	nop
 800b5b2:	e7fd      	b.n	800b5b0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5b4:	4b09      	ldr	r3, [pc, #36]	@ (800b5dc <prvSwitchTimerLists+0xc4>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1b0      	bne.n	800b520 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800b5be:	4b07      	ldr	r3, [pc, #28]	@ (800b5dc <prvSwitchTimerLists+0xc4>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800b5c4:	4b06      	ldr	r3, [pc, #24]	@ (800b5e0 <prvSwitchTimerLists+0xc8>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a04      	ldr	r2, [pc, #16]	@ (800b5dc <prvSwitchTimerLists+0xc4>)
 800b5ca:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b5cc:	4a04      	ldr	r2, [pc, #16]	@ (800b5e0 <prvSwitchTimerLists+0xc8>)
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	6013      	str	r3, [r2, #0]
    }
 800b5d2:	bf00      	nop
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	20000760 	.word	0x20000760
 800b5e0:	20000764 	.word	0x20000764

0800b5e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b5e8:	f000 f9e8 	bl	800b9bc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b5ec:	4b12      	ldr	r3, [pc, #72]	@ (800b638 <prvCheckForValidListAndQueue+0x54>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d11d      	bne.n	800b630 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800b5f4:	4811      	ldr	r0, [pc, #68]	@ (800b63c <prvCheckForValidListAndQueue+0x58>)
 800b5f6:	f7fd fd61 	bl	80090bc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b5fa:	4811      	ldr	r0, [pc, #68]	@ (800b640 <prvCheckForValidListAndQueue+0x5c>)
 800b5fc:	f7fd fd5e 	bl	80090bc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b600:	4b10      	ldr	r3, [pc, #64]	@ (800b644 <prvCheckForValidListAndQueue+0x60>)
 800b602:	4a0e      	ldr	r2, [pc, #56]	@ (800b63c <prvCheckForValidListAndQueue+0x58>)
 800b604:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b606:	4b10      	ldr	r3, [pc, #64]	@ (800b648 <prvCheckForValidListAndQueue+0x64>)
 800b608:	4a0d      	ldr	r2, [pc, #52]	@ (800b640 <prvCheckForValidListAndQueue+0x5c>)
 800b60a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b60c:	2200      	movs	r2, #0
 800b60e:	210c      	movs	r1, #12
 800b610:	200a      	movs	r0, #10
 800b612:	f7fd fe71 	bl	80092f8 <xQueueGenericCreate>
 800b616:	4603      	mov	r3, r0
 800b618:	4a07      	ldr	r2, [pc, #28]	@ (800b638 <prvCheckForValidListAndQueue+0x54>)
 800b61a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800b61c:	4b06      	ldr	r3, [pc, #24]	@ (800b638 <prvCheckForValidListAndQueue+0x54>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d005      	beq.n	800b630 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b624:	4b04      	ldr	r3, [pc, #16]	@ (800b638 <prvCheckForValidListAndQueue+0x54>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4908      	ldr	r1, [pc, #32]	@ (800b64c <prvCheckForValidListAndQueue+0x68>)
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fe fc58 	bl	8009ee0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b630:	f000 f9f6 	bl	800ba20 <vPortExitCritical>
    }
 800b634:	bf00      	nop
 800b636:	bd80      	pop	{r7, pc}
 800b638:	20000768 	.word	0x20000768
 800b63c:	20000738 	.word	0x20000738
 800b640:	2000074c 	.word	0x2000074c
 800b644:	20000760 	.word	0x20000760
 800b648:	20000764 	.word	0x20000764
 800b64c:	08010150 	.word	0x08010150

0800b650 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3b04      	subs	r3, #4
 800b660:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b668:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	3b04      	subs	r3, #4
 800b66e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	f023 0201 	bic.w	r2, r3, #1
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	3b04      	subs	r3, #4
 800b67e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b680:	4a0c      	ldr	r2, [pc, #48]	@ (800b6b4 <pxPortInitialiseStack+0x64>)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	3b14      	subs	r3, #20
 800b68a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	3b04      	subs	r3, #4
 800b696:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f06f 0202 	mvn.w	r2, #2
 800b69e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	3b20      	subs	r3, #32
 800b6a4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr
 800b6b4:	0800b6b9 	.word	0x0800b6b9

0800b6b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b6c2:	4b13      	ldr	r3, [pc, #76]	@ (800b710 <prvTaskExitError+0x58>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6ca:	d00b      	beq.n	800b6e4 <prvTaskExitError+0x2c>
        __asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	60fb      	str	r3, [r7, #12]
    }
 800b6de:	bf00      	nop
 800b6e0:	bf00      	nop
 800b6e2:	e7fd      	b.n	800b6e0 <prvTaskExitError+0x28>
        __asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	60bb      	str	r3, [r7, #8]
    }
 800b6f6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b6f8:	bf00      	nop
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0fc      	beq.n	800b6fa <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b700:	bf00      	nop
 800b702:	bf00      	nop
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	20000064 	.word	0x20000064
	...

0800b720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800b720:	4b07      	ldr	r3, [pc, #28]	@ (800b740 <pxCurrentTCBConst2>)
 800b722:	6819      	ldr	r1, [r3, #0]
 800b724:	6808      	ldr	r0, [r1, #0]
 800b726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72a:	f380 8809 	msr	PSP, r0
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f04f 0000 	mov.w	r0, #0
 800b736:	f380 8811 	msr	BASEPRI, r0
 800b73a:	4770      	bx	lr
 800b73c:	f3af 8000 	nop.w

0800b740 <pxCurrentTCBConst2>:
 800b740:	20000634 	.word	0x20000634
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800b744:	bf00      	nop
 800b746:	bf00      	nop

0800b748 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b748:	4808      	ldr	r0, [pc, #32]	@ (800b76c <prvPortStartFirstTask+0x24>)
 800b74a:	6800      	ldr	r0, [r0, #0]
 800b74c:	6800      	ldr	r0, [r0, #0]
 800b74e:	f380 8808 	msr	MSP, r0
 800b752:	f04f 0000 	mov.w	r0, #0
 800b756:	f380 8814 	msr	CONTROL, r0
 800b75a:	b662      	cpsie	i
 800b75c:	b661      	cpsie	f
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	df00      	svc	0
 800b768:	bf00      	nop
 800b76a:	0000      	.short	0x0000
 800b76c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800b770:	bf00      	nop
 800b772:	bf00      	nop

0800b774 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b77a:	4b47      	ldr	r3, [pc, #284]	@ (800b898 <xPortStartScheduler+0x124>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a47      	ldr	r2, [pc, #284]	@ (800b89c <xPortStartScheduler+0x128>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d10b      	bne.n	800b79c <xPortStartScheduler+0x28>
        __asm volatile
 800b784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	613b      	str	r3, [r7, #16]
    }
 800b796:	bf00      	nop
 800b798:	bf00      	nop
 800b79a:	e7fd      	b.n	800b798 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b79c:	4b3e      	ldr	r3, [pc, #248]	@ (800b898 <xPortStartScheduler+0x124>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a3f      	ldr	r2, [pc, #252]	@ (800b8a0 <xPortStartScheduler+0x12c>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d10b      	bne.n	800b7be <xPortStartScheduler+0x4a>
        __asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60fb      	str	r3, [r7, #12]
    }
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	e7fd      	b.n	800b7ba <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7be:	4b39      	ldr	r3, [pc, #228]	@ (800b8a4 <xPortStartScheduler+0x130>)
 800b7c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	22ff      	movs	r2, #255	@ 0xff
 800b7ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7d8:	78fb      	ldrb	r3, [r7, #3]
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b7e0:	b2da      	uxtb	r2, r3
 800b7e2:	4b31      	ldr	r3, [pc, #196]	@ (800b8a8 <xPortStartScheduler+0x134>)
 800b7e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7e6:	4b31      	ldr	r3, [pc, #196]	@ (800b8ac <xPortStartScheduler+0x138>)
 800b7e8:	2207      	movs	r2, #7
 800b7ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7ec:	e009      	b.n	800b802 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800b7ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b8ac <xPortStartScheduler+0x138>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	4a2d      	ldr	r2, [pc, #180]	@ (800b8ac <xPortStartScheduler+0x138>)
 800b7f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7f8:	78fb      	ldrb	r3, [r7, #3]
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b802:	78fb      	ldrb	r3, [r7, #3]
 800b804:	b2db      	uxtb	r3, r3
 800b806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b80a:	2b80      	cmp	r3, #128	@ 0x80
 800b80c:	d0ef      	beq.n	800b7ee <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b80e:	4b27      	ldr	r3, [pc, #156]	@ (800b8ac <xPortStartScheduler+0x138>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f1c3 0307 	rsb	r3, r3, #7
 800b816:	2b04      	cmp	r3, #4
 800b818:	d00b      	beq.n	800b832 <xPortStartScheduler+0xbe>
        __asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	60bb      	str	r3, [r7, #8]
    }
 800b82c:	bf00      	nop
 800b82e:	bf00      	nop
 800b830:	e7fd      	b.n	800b82e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b832:	4b1e      	ldr	r3, [pc, #120]	@ (800b8ac <xPortStartScheduler+0x138>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	021b      	lsls	r3, r3, #8
 800b838:	4a1c      	ldr	r2, [pc, #112]	@ (800b8ac <xPortStartScheduler+0x138>)
 800b83a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b83c:	4b1b      	ldr	r3, [pc, #108]	@ (800b8ac <xPortStartScheduler+0x138>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b844:	4a19      	ldr	r2, [pc, #100]	@ (800b8ac <xPortStartScheduler+0x138>)
 800b846:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b850:	4b17      	ldr	r3, [pc, #92]	@ (800b8b0 <xPortStartScheduler+0x13c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a16      	ldr	r2, [pc, #88]	@ (800b8b0 <xPortStartScheduler+0x13c>)
 800b856:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b85a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b85c:	4b14      	ldr	r3, [pc, #80]	@ (800b8b0 <xPortStartScheduler+0x13c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a13      	ldr	r2, [pc, #76]	@ (800b8b0 <xPortStartScheduler+0x13c>)
 800b862:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b866:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b868:	f000 f968 	bl	800bb3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b86c:	4b11      	ldr	r3, [pc, #68]	@ (800b8b4 <xPortStartScheduler+0x140>)
 800b86e:	2200      	movs	r2, #0
 800b870:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b872:	f000 f987 	bl	800bb84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b876:	4b10      	ldr	r3, [pc, #64]	@ (800b8b8 <xPortStartScheduler+0x144>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a0f      	ldr	r2, [pc, #60]	@ (800b8b8 <xPortStartScheduler+0x144>)
 800b87c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b880:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b882:	f7ff ff61 	bl	800b748 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b886:	f7fe ff21 	bl	800a6cc <vTaskSwitchContext>
    prvTaskExitError();
 800b88a:	f7ff ff15 	bl	800b6b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	e000ed00 	.word	0xe000ed00
 800b89c:	410fc271 	.word	0x410fc271
 800b8a0:	410fc270 	.word	0x410fc270
 800b8a4:	e000e400 	.word	0xe000e400
 800b8a8:	20000774 	.word	0x20000774
 800b8ac:	20000778 	.word	0x20000778
 800b8b0:	e000ed20 	.word	0xe000ed20
 800b8b4:	20000064 	.word	0x20000064
 800b8b8:	e000ef34 	.word	0xe000ef34

0800b8bc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b087      	sub	sp, #28
 800b8c0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8c2:	4b38      	ldr	r3, [pc, #224]	@ (800b9a4 <vInitPrioGroupValue+0xe8>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a38      	ldr	r2, [pc, #224]	@ (800b9a8 <vInitPrioGroupValue+0xec>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d10b      	bne.n	800b8e4 <vInitPrioGroupValue+0x28>
        __asm volatile
 800b8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d0:	f383 8811 	msr	BASEPRI, r3
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	613b      	str	r3, [r7, #16]
    }
 800b8de:	bf00      	nop
 800b8e0:	bf00      	nop
 800b8e2:	e7fd      	b.n	800b8e0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8e4:	4b2f      	ldr	r3, [pc, #188]	@ (800b9a4 <vInitPrioGroupValue+0xe8>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a30      	ldr	r2, [pc, #192]	@ (800b9ac <vInitPrioGroupValue+0xf0>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d10b      	bne.n	800b906 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	60fb      	str	r3, [r7, #12]
    }
 800b900:	bf00      	nop
 800b902:	bf00      	nop
 800b904:	e7fd      	b.n	800b902 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b906:	4b2a      	ldr	r3, [pc, #168]	@ (800b9b0 <vInitPrioGroupValue+0xf4>)
 800b908:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	22ff      	movs	r2, #255	@ 0xff
 800b916:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b920:	78fb      	ldrb	r3, [r7, #3]
 800b922:	b2db      	uxtb	r3, r3
 800b924:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	4b22      	ldr	r3, [pc, #136]	@ (800b9b4 <vInitPrioGroupValue+0xf8>)
 800b92c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b92e:	4b22      	ldr	r3, [pc, #136]	@ (800b9b8 <vInitPrioGroupValue+0xfc>)
 800b930:	2207      	movs	r2, #7
 800b932:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b934:	e009      	b.n	800b94a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800b936:	4b20      	ldr	r3, [pc, #128]	@ (800b9b8 <vInitPrioGroupValue+0xfc>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	4a1e      	ldr	r2, [pc, #120]	@ (800b9b8 <vInitPrioGroupValue+0xfc>)
 800b93e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b940:	78fb      	ldrb	r3, [r7, #3]
 800b942:	b2db      	uxtb	r3, r3
 800b944:	005b      	lsls	r3, r3, #1
 800b946:	b2db      	uxtb	r3, r3
 800b948:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b94a:	78fb      	ldrb	r3, [r7, #3]
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b952:	2b80      	cmp	r3, #128	@ 0x80
 800b954:	d0ef      	beq.n	800b936 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b956:	4b18      	ldr	r3, [pc, #96]	@ (800b9b8 <vInitPrioGroupValue+0xfc>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f1c3 0307 	rsb	r3, r3, #7
 800b95e:	2b04      	cmp	r3, #4
 800b960:	d00b      	beq.n	800b97a <vInitPrioGroupValue+0xbe>
        __asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	60bb      	str	r3, [r7, #8]
    }
 800b974:	bf00      	nop
 800b976:	bf00      	nop
 800b978:	e7fd      	b.n	800b976 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b97a:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b8 <vInitPrioGroupValue+0xfc>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	021b      	lsls	r3, r3, #8
 800b980:	4a0d      	ldr	r2, [pc, #52]	@ (800b9b8 <vInitPrioGroupValue+0xfc>)
 800b982:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b984:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b8 <vInitPrioGroupValue+0xfc>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b98c:	4a0a      	ldr	r2, [pc, #40]	@ (800b9b8 <vInitPrioGroupValue+0xfc>)
 800b98e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	b2da      	uxtb	r2, r3
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800b998:	bf00      	nop
 800b99a:	371c      	adds	r7, #28
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr
 800b9a4:	e000ed00 	.word	0xe000ed00
 800b9a8:	410fc271 	.word	0x410fc271
 800b9ac:	410fc270 	.word	0x410fc270
 800b9b0:	e000e400 	.word	0xe000e400
 800b9b4:	20000774 	.word	0x20000774
 800b9b8:	20000778 	.word	0x20000778

0800b9bc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
        __asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	607b      	str	r3, [r7, #4]
    }
 800b9d4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800b9d6:	4b10      	ldr	r3, [pc, #64]	@ (800ba18 <vPortEnterCritical+0x5c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	4a0e      	ldr	r2, [pc, #56]	@ (800ba18 <vPortEnterCritical+0x5c>)
 800b9de:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800b9e0:	4b0d      	ldr	r3, [pc, #52]	@ (800ba18 <vPortEnterCritical+0x5c>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d110      	bne.n	800ba0a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9e8:	4b0c      	ldr	r3, [pc, #48]	@ (800ba1c <vPortEnterCritical+0x60>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00b      	beq.n	800ba0a <vPortEnterCritical+0x4e>
        __asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	603b      	str	r3, [r7, #0]
    }
 800ba04:	bf00      	nop
 800ba06:	bf00      	nop
 800ba08:	e7fd      	b.n	800ba06 <vPortEnterCritical+0x4a>
    }
}
 800ba0a:	bf00      	nop
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	20000064 	.word	0x20000064
 800ba1c:	e000ed04 	.word	0xe000ed04

0800ba20 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800ba26:	4b12      	ldr	r3, [pc, #72]	@ (800ba70 <vPortExitCritical+0x50>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10b      	bne.n	800ba46 <vPortExitCritical+0x26>
        __asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	607b      	str	r3, [r7, #4]
    }
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	e7fd      	b.n	800ba42 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800ba46:	4b0a      	ldr	r3, [pc, #40]	@ (800ba70 <vPortExitCritical+0x50>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	4a08      	ldr	r2, [pc, #32]	@ (800ba70 <vPortExitCritical+0x50>)
 800ba4e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800ba50:	4b07      	ldr	r3, [pc, #28]	@ (800ba70 <vPortExitCritical+0x50>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d105      	bne.n	800ba64 <vPortExitCritical+0x44>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	f383 8811 	msr	BASEPRI, r3
    }
 800ba62:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	20000064 	.word	0x20000064
	...

0800ba80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800ba80:	f3ef 8009 	mrs	r0, PSP
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	4b15      	ldr	r3, [pc, #84]	@ (800bae0 <pxCurrentTCBConst>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	f01e 0f10 	tst.w	lr, #16
 800ba90:	bf08      	it	eq
 800ba92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9a:	6010      	str	r0, [r2, #0]
 800ba9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800baa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800baa4:	f380 8811 	msr	BASEPRI, r0
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f7fe fe0c 	bl	800a6cc <vTaskSwitchContext>
 800bab4:	f04f 0000 	mov.w	r0, #0
 800bab8:	f380 8811 	msr	BASEPRI, r0
 800babc:	bc09      	pop	{r0, r3}
 800babe:	6819      	ldr	r1, [r3, #0]
 800bac0:	6808      	ldr	r0, [r1, #0]
 800bac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac6:	f01e 0f10 	tst.w	lr, #16
 800baca:	bf08      	it	eq
 800bacc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bad0:	f380 8809 	msr	PSP, r0
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	f3af 8000 	nop.w

0800bae0 <pxCurrentTCBConst>:
 800bae0:	20000634 	.word	0x20000634
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800bae4:	bf00      	nop
 800bae6:	bf00      	nop

0800bae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
        __asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	607b      	str	r3, [r7, #4]
    }
 800bb00:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800bb02:	f001 fdd3 	bl	800d6ac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800bb06:	f7fe fd23 	bl	800a550 <xTaskIncrementTick>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d006      	beq.n	800bb1e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800bb10:	f001 fe2a 	bl	800d768 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb14:	4b08      	ldr	r3, [pc, #32]	@ (800bb38 <SysTick_Handler+0x50>)
 800bb16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb1a:	601a      	str	r2, [r3, #0]
 800bb1c:	e001      	b.n	800bb22 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800bb1e:	f001 fe07 	bl	800d730 <SEGGER_SYSVIEW_RecordExitISR>
 800bb22:	2300      	movs	r3, #0
 800bb24:	603b      	str	r3, [r7, #0]
        __asm volatile
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	f383 8811 	msr	BASEPRI, r3
    }
 800bb2c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800bb2e:	bf00      	nop
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	e000ed04 	.word	0xe000ed04

0800bb3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb40:	4b0b      	ldr	r3, [pc, #44]	@ (800bb70 <vPortSetupTimerInterrupt+0x34>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb46:	4b0b      	ldr	r3, [pc, #44]	@ (800bb74 <vPortSetupTimerInterrupt+0x38>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb78 <vPortSetupTimerInterrupt+0x3c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a0a      	ldr	r2, [pc, #40]	@ (800bb7c <vPortSetupTimerInterrupt+0x40>)
 800bb52:	fba2 2303 	umull	r2, r3, r2, r3
 800bb56:	099b      	lsrs	r3, r3, #6
 800bb58:	4a09      	ldr	r2, [pc, #36]	@ (800bb80 <vPortSetupTimerInterrupt+0x44>)
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb5e:	4b04      	ldr	r3, [pc, #16]	@ (800bb70 <vPortSetupTimerInterrupt+0x34>)
 800bb60:	2207      	movs	r2, #7
 800bb62:	601a      	str	r2, [r3, #0]
}
 800bb64:	bf00      	nop
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	e000e010 	.word	0xe000e010
 800bb74:	e000e018 	.word	0xe000e018
 800bb78:	20000024 	.word	0x20000024
 800bb7c:	10624dd3 	.word	0x10624dd3
 800bb80:	e000e014 	.word	0xe000e014

0800bb84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800bb84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bb94 <vPortEnableVFP+0x10>
 800bb88:	6801      	ldr	r1, [r0, #0]
 800bb8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bb8e:	6001      	str	r1, [r0, #0]
 800bb90:	4770      	bx	lr
 800bb92:	0000      	.short	0x0000
 800bb94:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800bb98:	bf00      	nop
 800bb9a:	bf00      	nop

0800bb9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800bba2:	f3ef 8305 	mrs	r3, IPSR
 800bba6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2b0f      	cmp	r3, #15
 800bbac:	d915      	bls.n	800bbda <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbae:	4a18      	ldr	r2, [pc, #96]	@ (800bc10 <vPortValidateInterruptPriority+0x74>)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbb8:	4b16      	ldr	r3, [pc, #88]	@ (800bc14 <vPortValidateInterruptPriority+0x78>)
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	7afa      	ldrb	r2, [r7, #11]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d20b      	bcs.n	800bbda <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	607b      	str	r3, [r7, #4]
    }
 800bbd4:	bf00      	nop
 800bbd6:	bf00      	nop
 800bbd8:	e7fd      	b.n	800bbd6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bbda:	4b0f      	ldr	r3, [pc, #60]	@ (800bc18 <vPortValidateInterruptPriority+0x7c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bbe2:	4b0e      	ldr	r3, [pc, #56]	@ (800bc1c <vPortValidateInterruptPriority+0x80>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d90b      	bls.n	800bc02 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800bbea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	603b      	str	r3, [r7, #0]
    }
 800bbfc:	bf00      	nop
 800bbfe:	bf00      	nop
 800bc00:	e7fd      	b.n	800bbfe <vPortValidateInterruptPriority+0x62>
    }
 800bc02:	bf00      	nop
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	e000e3f0 	.word	0xe000e3f0
 800bc14:	20000774 	.word	0x20000774
 800bc18:	e000ed0c 	.word	0xe000ed0c
 800bc1c:	20000778 	.word	0x20000778

0800bc20 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08a      	sub	sp, #40	@ 0x28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800bc2c:	f7fe fbbe 	bl	800a3ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800bc30:	4b66      	ldr	r3, [pc, #408]	@ (800bdcc <pvPortMalloc+0x1ac>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800bc38:	f000 f938 	bl	800beac <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc3c:	4b64      	ldr	r3, [pc, #400]	@ (800bdd0 <pvPortMalloc+0x1b0>)
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4013      	ands	r3, r2
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f040 80a9 	bne.w	800bd9c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d02e      	beq.n	800bcae <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800bc50:	2208      	movs	r2, #8
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d228      	bcs.n	800bcae <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800bc5c:	2208      	movs	r2, #8
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4413      	add	r3, r2
 800bc62:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f003 0307 	and.w	r3, r3, #7
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d022      	beq.n	800bcb4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f023 0307 	bic.w	r3, r3, #7
 800bc74:	3308      	adds	r3, #8
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d215      	bcs.n	800bca8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f023 0307 	bic.w	r3, r3, #7
 800bc82:	3308      	adds	r3, #8
 800bc84:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f003 0307 	and.w	r3, r3, #7
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d011      	beq.n	800bcb4 <pvPortMalloc+0x94>
        __asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	617b      	str	r3, [r7, #20]
    }
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	e7fd      	b.n	800bca4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bcac:	e002      	b.n	800bcb4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	607b      	str	r3, [r7, #4]
 800bcb2:	e000      	b.n	800bcb6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bcb4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d06f      	beq.n	800bd9c <pvPortMalloc+0x17c>
 800bcbc:	4b45      	ldr	r3, [pc, #276]	@ (800bdd4 <pvPortMalloc+0x1b4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d86a      	bhi.n	800bd9c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800bcc6:	4b44      	ldr	r3, [pc, #272]	@ (800bdd8 <pvPortMalloc+0x1b8>)
 800bcc8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800bcca:	4b43      	ldr	r3, [pc, #268]	@ (800bdd8 <pvPortMalloc+0x1b8>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcd0:	e004      	b.n	800bcdc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d903      	bls.n	800bcee <pvPortMalloc+0xce>
 800bce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1f1      	bne.n	800bcd2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800bcee:	4b37      	ldr	r3, [pc, #220]	@ (800bdcc <pvPortMalloc+0x1ac>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d051      	beq.n	800bd9c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bcf8:	6a3b      	ldr	r3, [r7, #32]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2208      	movs	r2, #8
 800bcfe:	4413      	add	r3, r2
 800bd00:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	6a3b      	ldr	r3, [r7, #32]
 800bd08:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	1ad2      	subs	r2, r2, r3
 800bd12:	2308      	movs	r3, #8
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d920      	bls.n	800bd5c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4413      	add	r3, r2
 800bd20:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	f003 0307 	and.w	r3, r3, #7
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00b      	beq.n	800bd44 <pvPortMalloc+0x124>
        __asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	613b      	str	r3, [r7, #16]
    }
 800bd3e:	bf00      	nop
 800bd40:	bf00      	nop
 800bd42:	e7fd      	b.n	800bd40 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	1ad2      	subs	r2, r2, r3
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800bd50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd56:	69b8      	ldr	r0, [r7, #24]
 800bd58:	f000 f90a 	bl	800bf70 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd5c:	4b1d      	ldr	r3, [pc, #116]	@ (800bdd4 <pvPortMalloc+0x1b4>)
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	4a1b      	ldr	r2, [pc, #108]	@ (800bdd4 <pvPortMalloc+0x1b4>)
 800bd68:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd6a:	4b1a      	ldr	r3, [pc, #104]	@ (800bdd4 <pvPortMalloc+0x1b4>)
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	4b1b      	ldr	r3, [pc, #108]	@ (800bddc <pvPortMalloc+0x1bc>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d203      	bcs.n	800bd7e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd76:	4b17      	ldr	r3, [pc, #92]	@ (800bdd4 <pvPortMalloc+0x1b4>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a18      	ldr	r2, [pc, #96]	@ (800bddc <pvPortMalloc+0x1bc>)
 800bd7c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	4b13      	ldr	r3, [pc, #76]	@ (800bdd0 <pvPortMalloc+0x1b0>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	431a      	orrs	r2, r3
 800bd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8e:	2200      	movs	r2, #0
 800bd90:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800bd92:	4b13      	ldr	r3, [pc, #76]	@ (800bde0 <pvPortMalloc+0x1c0>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	3301      	adds	r3, #1
 800bd98:	4a11      	ldr	r2, [pc, #68]	@ (800bde0 <pvPortMalloc+0x1c0>)
 800bd9a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800bd9c:	f7fe fb14 	bl	800a3c8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	f003 0307 	and.w	r3, r3, #7
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00b      	beq.n	800bdc2 <pvPortMalloc+0x1a2>
        __asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	60fb      	str	r3, [r7, #12]
    }
 800bdbc:	bf00      	nop
 800bdbe:	bf00      	nop
 800bdc0:	e7fd      	b.n	800bdbe <pvPortMalloc+0x19e>
    return pvReturn;
 800bdc2:	69fb      	ldr	r3, [r7, #28]
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3728      	adds	r7, #40	@ 0x28
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	20013384 	.word	0x20013384
 800bdd0:	20013398 	.word	0x20013398
 800bdd4:	20013388 	.word	0x20013388
 800bdd8:	2001337c 	.word	0x2001337c
 800bddc:	2001338c 	.word	0x2001338c
 800bde0:	20013390 	.word	0x20013390

0800bde4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d04f      	beq.n	800be96 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800bdf6:	2308      	movs	r3, #8
 800bdf8:	425b      	negs	r3, r3
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	4b25      	ldr	r3, [pc, #148]	@ (800bea0 <vPortFree+0xbc>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4013      	ands	r3, r2
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10b      	bne.n	800be2a <vPortFree+0x46>
        __asm volatile
 800be12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	60fb      	str	r3, [r7, #12]
    }
 800be24:	bf00      	nop
 800be26:	bf00      	nop
 800be28:	e7fd      	b.n	800be26 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00b      	beq.n	800be4a <vPortFree+0x66>
        __asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	60bb      	str	r3, [r7, #8]
    }
 800be44:	bf00      	nop
 800be46:	bf00      	nop
 800be48:	e7fd      	b.n	800be46 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	4b14      	ldr	r3, [pc, #80]	@ (800bea0 <vPortFree+0xbc>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4013      	ands	r3, r2
 800be54:	2b00      	cmp	r3, #0
 800be56:	d01e      	beq.n	800be96 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d11a      	bne.n	800be96 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	4b0e      	ldr	r3, [pc, #56]	@ (800bea0 <vPortFree+0xbc>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	43db      	mvns	r3, r3
 800be6a:	401a      	ands	r2, r3
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800be70:	f7fe fa9c 	bl	800a3ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	4b0a      	ldr	r3, [pc, #40]	@ (800bea4 <vPortFree+0xc0>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4413      	add	r3, r2
 800be7e:	4a09      	ldr	r2, [pc, #36]	@ (800bea4 <vPortFree+0xc0>)
 800be80:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be82:	6938      	ldr	r0, [r7, #16]
 800be84:	f000 f874 	bl	800bf70 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800be88:	4b07      	ldr	r3, [pc, #28]	@ (800bea8 <vPortFree+0xc4>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3301      	adds	r3, #1
 800be8e:	4a06      	ldr	r2, [pc, #24]	@ (800bea8 <vPortFree+0xc4>)
 800be90:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800be92:	f7fe fa99 	bl	800a3c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800be96:	bf00      	nop
 800be98:	3718      	adds	r7, #24
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	20013398 	.word	0x20013398
 800bea4:	20013388 	.word	0x20013388
 800bea8:	20013394 	.word	0x20013394

0800beac <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800beb2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800beb6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800beb8:	4b27      	ldr	r3, [pc, #156]	@ (800bf58 <prvHeapInit+0xac>)
 800beba:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f003 0307 	and.w	r3, r3, #7
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00c      	beq.n	800bee0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	3307      	adds	r3, #7
 800beca:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f023 0307 	bic.w	r3, r3, #7
 800bed2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	4a1f      	ldr	r2, [pc, #124]	@ (800bf58 <prvHeapInit+0xac>)
 800bedc:	4413      	add	r3, r2
 800bede:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bee4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf5c <prvHeapInit+0xb0>)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800beea:	4b1c      	ldr	r3, [pc, #112]	@ (800bf5c <prvHeapInit+0xb0>)
 800beec:	2200      	movs	r2, #0
 800beee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	4413      	add	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800bef8:	2208      	movs	r2, #8
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	1a9b      	subs	r3, r3, r2
 800befe:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f023 0307 	bic.w	r3, r3, #7
 800bf06:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	4a15      	ldr	r2, [pc, #84]	@ (800bf60 <prvHeapInit+0xb4>)
 800bf0c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800bf0e:	4b14      	ldr	r3, [pc, #80]	@ (800bf60 <prvHeapInit+0xb4>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2200      	movs	r2, #0
 800bf14:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800bf16:	4b12      	ldr	r3, [pc, #72]	@ (800bf60 <prvHeapInit+0xb4>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	1ad2      	subs	r2, r2, r3
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf2c:	4b0c      	ldr	r3, [pc, #48]	@ (800bf60 <prvHeapInit+0xb4>)
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	4a0a      	ldr	r2, [pc, #40]	@ (800bf64 <prvHeapInit+0xb8>)
 800bf3a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	4a09      	ldr	r2, [pc, #36]	@ (800bf68 <prvHeapInit+0xbc>)
 800bf42:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf44:	4b09      	ldr	r3, [pc, #36]	@ (800bf6c <prvHeapInit+0xc0>)
 800bf46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bf4a:	601a      	str	r2, [r3, #0]
}
 800bf4c:	bf00      	nop
 800bf4e:	3714      	adds	r7, #20
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr
 800bf58:	2000077c 	.word	0x2000077c
 800bf5c:	2001337c 	.word	0x2001337c
 800bf60:	20013384 	.word	0x20013384
 800bf64:	2001338c 	.word	0x2001338c
 800bf68:	20013388 	.word	0x20013388
 800bf6c:	20013398 	.word	0x20013398

0800bf70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf78:	4b28      	ldr	r3, [pc, #160]	@ (800c01c <prvInsertBlockIntoFreeList+0xac>)
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e002      	b.n	800bf84 <prvInsertBlockIntoFreeList+0x14>
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	60fb      	str	r3, [r7, #12]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d8f7      	bhi.n	800bf7e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	4413      	add	r3, r2
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d108      	bne.n	800bfb2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	685a      	ldr	r2, [r3, #4]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	441a      	add	r2, r3
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	441a      	add	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d118      	bne.n	800bff8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	4b15      	ldr	r3, [pc, #84]	@ (800c020 <prvInsertBlockIntoFreeList+0xb0>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d00d      	beq.n	800bfee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	441a      	add	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	601a      	str	r2, [r3, #0]
 800bfec:	e008      	b.n	800c000 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bfee:	4b0c      	ldr	r3, [pc, #48]	@ (800c020 <prvInsertBlockIntoFreeList+0xb0>)
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	601a      	str	r2, [r3, #0]
 800bff6:	e003      	b.n	800c000 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	429a      	cmp	r2, r3
 800c006:	d002      	beq.n	800c00e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c00e:	bf00      	nop
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	2001337c 	.word	0x2001337c
 800c020:	20013384 	.word	0x20013384

0800c024 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800c024:	b580      	push	{r7, lr}
 800c026:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800c028:	4803      	ldr	r0, [pc, #12]	@ (800c038 <_cbSendSystemDesc+0x14>)
 800c02a:	f001 fae9 	bl	800d600 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800c02e:	4803      	ldr	r0, [pc, #12]	@ (800c03c <_cbSendSystemDesc+0x18>)
 800c030:	f001 fae6 	bl	800d600 <SEGGER_SYSVIEW_SendSysDesc>
}
 800c034:	bf00      	nop
 800c036:	bd80      	pop	{r7, pc}
 800c038:	08010158 	.word	0x08010158
 800c03c:	08010180 	.word	0x08010180

0800c040 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800c040:	b580      	push	{r7, lr}
 800c042:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800c044:	4b06      	ldr	r3, [pc, #24]	@ (800c060 <SEGGER_SYSVIEW_Conf+0x20>)
 800c046:	6818      	ldr	r0, [r3, #0]
 800c048:	4b05      	ldr	r3, [pc, #20]	@ (800c060 <SEGGER_SYSVIEW_Conf+0x20>)
 800c04a:	6819      	ldr	r1, [r3, #0]
 800c04c:	4b05      	ldr	r3, [pc, #20]	@ (800c064 <SEGGER_SYSVIEW_Conf+0x24>)
 800c04e:	4a06      	ldr	r2, [pc, #24]	@ (800c068 <SEGGER_SYSVIEW_Conf+0x28>)
 800c050:	f000 fe54 	bl	800ccfc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800c054:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800c058:	f000 fe94 	bl	800cd84 <SEGGER_SYSVIEW_SetRAMBase>
}
 800c05c:	bf00      	nop
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	20000024 	.word	0x20000024
 800c064:	0800c025 	.word	0x0800c025
 800c068:	08010228 	.word	0x08010228

0800c06c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800c06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c06e:	b085      	sub	sp, #20
 800c070:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800c072:	2300      	movs	r3, #0
 800c074:	607b      	str	r3, [r7, #4]
 800c076:	e033      	b.n	800c0e0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800c078:	491e      	ldr	r1, [pc, #120]	@ (800c0f4 <_cbSendTaskList+0x88>)
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	4613      	mov	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	4413      	add	r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	440b      	add	r3, r1
 800c086:	6818      	ldr	r0, [r3, #0]
 800c088:	491a      	ldr	r1, [pc, #104]	@ (800c0f4 <_cbSendTaskList+0x88>)
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	4613      	mov	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	440b      	add	r3, r1
 800c096:	3304      	adds	r3, #4
 800c098:	6819      	ldr	r1, [r3, #0]
 800c09a:	4c16      	ldr	r4, [pc, #88]	@ (800c0f4 <_cbSendTaskList+0x88>)
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4413      	add	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4423      	add	r3, r4
 800c0a8:	3308      	adds	r3, #8
 800c0aa:	681c      	ldr	r4, [r3, #0]
 800c0ac:	4d11      	ldr	r5, [pc, #68]	@ (800c0f4 <_cbSendTaskList+0x88>)
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4413      	add	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	442b      	add	r3, r5
 800c0ba:	330c      	adds	r3, #12
 800c0bc:	681d      	ldr	r5, [r3, #0]
 800c0be:	4e0d      	ldr	r6, [pc, #52]	@ (800c0f4 <_cbSendTaskList+0x88>)
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4413      	add	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4433      	add	r3, r6
 800c0cc:	3310      	adds	r3, #16
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	462b      	mov	r3, r5
 800c0d4:	4622      	mov	r2, r4
 800c0d6:	f000 f8bd 	bl	800c254 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	607b      	str	r3, [r7, #4]
 800c0e0:	4b05      	ldr	r3, [pc, #20]	@ (800c0f8 <_cbSendTaskList+0x8c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d3c6      	bcc.n	800c078 <_cbSendTaskList+0xc>
  }
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0f4:	2001339c 	.word	0x2001339c
 800c0f8:	2001343c 	.word	0x2001343c

0800c0fc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800c0fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c100:	b082      	sub	sp, #8
 800c102:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800c104:	f7fe fa12 	bl	800a52c <xTaskGetTickCountFromISR>
 800c108:	4603      	mov	r3, r0
 800c10a:	2200      	movs	r2, #0
 800c10c:	469a      	mov	sl, r3
 800c10e:	4693      	mov	fp, r2
 800c110:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800c114:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	f04f 0a00 	mov.w	sl, #0
 800c120:	f04f 0b00 	mov.w	fp, #0
 800c124:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800c128:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800c12c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800c130:	4652      	mov	r2, sl
 800c132:	465b      	mov	r3, fp
 800c134:	1a14      	subs	r4, r2, r0
 800c136:	eb63 0501 	sbc.w	r5, r3, r1
 800c13a:	f04f 0200 	mov.w	r2, #0
 800c13e:	f04f 0300 	mov.w	r3, #0
 800c142:	00ab      	lsls	r3, r5, #2
 800c144:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c148:	00a2      	lsls	r2, r4, #2
 800c14a:	4614      	mov	r4, r2
 800c14c:	461d      	mov	r5, r3
 800c14e:	eb14 0800 	adds.w	r8, r4, r0
 800c152:	eb45 0901 	adc.w	r9, r5, r1
 800c156:	f04f 0200 	mov.w	r2, #0
 800c15a:	f04f 0300 	mov.w	r3, #0
 800c15e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c16a:	4690      	mov	r8, r2
 800c16c:	4699      	mov	r9, r3
 800c16e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800c172:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800c176:	4610      	mov	r0, r2
 800c178:	4619      	mov	r1, r3
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800c184 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af02      	add	r7, sp, #8
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
 800c190:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800c192:	2205      	movs	r2, #5
 800c194:	492b      	ldr	r1, [pc, #172]	@ (800c244 <SYSVIEW_AddTask+0xc0>)
 800c196:	68b8      	ldr	r0, [r7, #8]
 800c198:	f001 ffa8 	bl	800e0ec <memcmp>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d04b      	beq.n	800c23a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800c1a2:	4b29      	ldr	r3, [pc, #164]	@ (800c248 <SYSVIEW_AddTask+0xc4>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2b07      	cmp	r3, #7
 800c1a8:	d903      	bls.n	800c1b2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800c1aa:	4828      	ldr	r0, [pc, #160]	@ (800c24c <SYSVIEW_AddTask+0xc8>)
 800c1ac:	f001 fd26 	bl	800dbfc <SEGGER_SYSVIEW_Warn>
    return;
 800c1b0:	e044      	b.n	800c23c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800c1b2:	4b25      	ldr	r3, [pc, #148]	@ (800c248 <SYSVIEW_AddTask+0xc4>)
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	4926      	ldr	r1, [pc, #152]	@ (800c250 <SYSVIEW_AddTask+0xcc>)
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	4413      	add	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	440b      	add	r3, r1
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800c1c6:	4b20      	ldr	r3, [pc, #128]	@ (800c248 <SYSVIEW_AddTask+0xc4>)
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	4921      	ldr	r1, [pc, #132]	@ (800c250 <SYSVIEW_AddTask+0xcc>)
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	440b      	add	r3, r1
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800c1dc:	4b1a      	ldr	r3, [pc, #104]	@ (800c248 <SYSVIEW_AddTask+0xc4>)
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	491b      	ldr	r1, [pc, #108]	@ (800c250 <SYSVIEW_AddTask+0xcc>)
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	4413      	add	r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	440b      	add	r3, r1
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800c1f2:	4b15      	ldr	r3, [pc, #84]	@ (800c248 <SYSVIEW_AddTask+0xc4>)
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	4916      	ldr	r1, [pc, #88]	@ (800c250 <SYSVIEW_AddTask+0xcc>)
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	440b      	add	r3, r1
 800c202:	330c      	adds	r3, #12
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800c208:	4b0f      	ldr	r3, [pc, #60]	@ (800c248 <SYSVIEW_AddTask+0xc4>)
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	4910      	ldr	r1, [pc, #64]	@ (800c250 <SYSVIEW_AddTask+0xcc>)
 800c20e:	4613      	mov	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	440b      	add	r3, r1
 800c218:	3310      	adds	r3, #16
 800c21a:	69ba      	ldr	r2, [r7, #24]
 800c21c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800c21e:	4b0a      	ldr	r3, [pc, #40]	@ (800c248 <SYSVIEW_AddTask+0xc4>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3301      	adds	r3, #1
 800c224:	4a08      	ldr	r2, [pc, #32]	@ (800c248 <SYSVIEW_AddTask+0xc4>)
 800c226:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	68b9      	ldr	r1, [r7, #8]
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f000 f80e 	bl	800c254 <SYSVIEW_SendTaskInfo>
 800c238:	e000      	b.n	800c23c <SYSVIEW_AddTask+0xb8>
    return;
 800c23a:	bf00      	nop

}
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	08010190 	.word	0x08010190
 800c248:	2001343c 	.word	0x2001343c
 800c24c:	08010198 	.word	0x08010198
 800c250:	2001339c 	.word	0x2001339c

0800c254 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800c254:	b580      	push	{r7, lr}
 800c256:	b08a      	sub	sp, #40	@ 0x28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
 800c260:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800c262:	f107 0314 	add.w	r3, r7, #20
 800c266:	2214      	movs	r2, #20
 800c268:	2100      	movs	r1, #0
 800c26a:	4618      	mov	r0, r3
 800c26c:	f001 ff4e 	bl	800e10c <memset>
  TaskInfo.TaskID     = TaskID;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800c280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c282:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800c284:	f107 0314 	add.w	r3, r7, #20
 800c288:	4618      	mov	r0, r3
 800c28a:	f001 f8c1 	bl	800d410 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800c28e:	bf00      	nop
 800c290:	3728      	adds	r7, #40	@ 0x28
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
	...

0800c298 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800c29e:	4b24      	ldr	r3, [pc, #144]	@ (800c330 <_DoInit+0x98>)
 800c2a0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2203      	movs	r2, #3
 800c2a6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2203      	movs	r2, #3
 800c2ac:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a20      	ldr	r2, [pc, #128]	@ (800c334 <_DoInit+0x9c>)
 800c2b2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	4a20      	ldr	r2, [pc, #128]	@ (800c338 <_DoInit+0xa0>)
 800c2b8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c2c0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a17      	ldr	r2, [pc, #92]	@ (800c334 <_DoInit+0x9c>)
 800c2d8:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a17      	ldr	r2, [pc, #92]	@ (800c33c <_DoInit+0xa4>)
 800c2de:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2210      	movs	r2, #16
 800c2e4:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	3307      	adds	r3, #7
 800c2fc:	4a10      	ldr	r2, [pc, #64]	@ (800c340 <_DoInit+0xa8>)
 800c2fe:	6810      	ldr	r0, [r2, #0]
 800c300:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c302:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a0e      	ldr	r2, [pc, #56]	@ (800c344 <_DoInit+0xac>)
 800c30a:	6810      	ldr	r0, [r2, #0]
 800c30c:	6018      	str	r0, [r3, #0]
 800c30e:	8891      	ldrh	r1, [r2, #4]
 800c310:	7992      	ldrb	r2, [r2, #6]
 800c312:	8099      	strh	r1, [r3, #4]
 800c314:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c316:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2220      	movs	r2, #32
 800c31e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c320:	f3bf 8f5f 	dmb	sy
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	20013440 	.word	0x20013440
 800c334:	080101e8 	.word	0x080101e8
 800c338:	200134e8 	.word	0x200134e8
 800c33c:	200138e8 	.word	0x200138e8
 800c340:	080101f4 	.word	0x080101f4
 800c344:	080101f8 	.word	0x080101f8

0800c348 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800c348:	b580      	push	{r7, lr}
 800c34a:	b08a      	sub	sp, #40	@ 0x28
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800c354:	2300      	movs	r3, #0
 800c356:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800c364:	69ba      	ldr	r2, [r7, #24]
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d905      	bls.n	800c378 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800c36c:	69ba      	ldr	r2, [r7, #24]
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	3b01      	subs	r3, #1
 800c374:	627b      	str	r3, [r7, #36]	@ 0x24
 800c376:	e007      	b.n	800c388 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	689a      	ldr	r2, [r3, #8]
 800c37c:	69b9      	ldr	r1, [r7, #24]
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	1acb      	subs	r3, r1, r3
 800c382:	4413      	add	r3, r2
 800c384:	3b01      	subs	r3, #1
 800c386:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	689a      	ldr	r2, [r3, #8]
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c392:	4293      	cmp	r3, r2
 800c394:	bf28      	it	cs
 800c396:	4613      	movcs	r3, r2
 800c398:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800c39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	bf28      	it	cs
 800c3a2:	4613      	movcs	r3, r2
 800c3a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	685a      	ldr	r2, [r3, #4]
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800c3b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3b2:	68b9      	ldr	r1, [r7, #8]
 800c3b4:	6978      	ldr	r0, [r7, #20]
 800c3b6:	f001 ff12 	bl	800e1de <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800c3ba:	6a3a      	ldr	r2, [r7, #32]
 800c3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3be:	4413      	add	r3, r2
 800c3c0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c6:	4413      	add	r3, r2
 800c3c8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800c3d2:	69fa      	ldr	r2, [r7, #28]
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d6:	4413      	add	r3, r2
 800c3d8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	69fa      	ldr	r2, [r7, #28]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d101      	bne.n	800c3e8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c3e8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	69fa      	ldr	r2, [r7, #28]
 800c3f0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1b2      	bne.n	800c35e <_WriteBlocking+0x16>
  return NumBytesWritten;
 800c3f8:	6a3b      	ldr	r3, [r7, #32]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3728      	adds	r7, #40	@ 0x28
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800c402:	b580      	push	{r7, lr}
 800c404:	b088      	sub	sp, #32
 800c406:	af00      	add	r7, sp, #0
 800c408:	60f8      	str	r0, [r7, #12]
 800c40a:	60b9      	str	r1, [r7, #8]
 800c40c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	689a      	ldr	r2, [r3, #8]
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800c41e:	69ba      	ldr	r2, [r7, #24]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	429a      	cmp	r2, r3
 800c424:	d911      	bls.n	800c44a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	685a      	ldr	r2, [r3, #4]
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	4413      	add	r3, r2
 800c42e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	68b9      	ldr	r1, [r7, #8]
 800c434:	6938      	ldr	r0, [r7, #16]
 800c436:	f001 fed2 	bl	800e1de <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c43a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800c43e:	69fa      	ldr	r2, [r7, #28]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	441a      	add	r2, r3
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800c448:	e01f      	b.n	800c48a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	685a      	ldr	r2, [r3, #4]
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	4413      	add	r3, r2
 800c456:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800c458:	697a      	ldr	r2, [r7, #20]
 800c45a:	68b9      	ldr	r1, [r7, #8]
 800c45c:	6938      	ldr	r0, [r7, #16]
 800c45e:	f001 febe 	bl	800e1de <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	4413      	add	r3, r2
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	4619      	mov	r1, r3
 800c47a:	6938      	ldr	r0, [r7, #16]
 800c47c:	f001 feaf 	bl	800e1de <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c480:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	60da      	str	r2, [r3, #12]
}
 800c48a:	bf00      	nop
 800c48c:	3720      	adds	r7, #32
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800c492:	b480      	push	{r7}
 800c494:	b087      	sub	sp, #28
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	691b      	ldr	r3, [r3, #16]
 800c49e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800c4a6:	693a      	ldr	r2, [r7, #16]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d808      	bhi.n	800c4c0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	689a      	ldr	r2, [r3, #8]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	1ad2      	subs	r2, r2, r3
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	617b      	str	r3, [r7, #20]
 800c4be:	e004      	b.n	800c4ca <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	3b01      	subs	r3, #1
 800c4c8:	617b      	str	r3, [r7, #20]
  }
  return r;
 800c4ca:	697b      	ldr	r3, [r7, #20]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	371c      	adds	r7, #28
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08c      	sub	sp, #48	@ 0x30
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800c4e4:	4b3e      	ldr	r3, [pc, #248]	@ (800c5e0 <SEGGER_RTT_ReadNoLock+0x108>)
 800c4e6:	623b      	str	r3, [r7, #32]
 800c4e8:	6a3b      	ldr	r3, [r7, #32]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d101      	bne.n	800c4f6 <SEGGER_RTT_ReadNoLock+0x1e>
 800c4f2:	f7ff fed1 	bl	800c298 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	4413      	add	r3, r2
 800c4fe:	00db      	lsls	r3, r3, #3
 800c500:	3360      	adds	r3, #96	@ 0x60
 800c502:	4a37      	ldr	r2, [pc, #220]	@ (800c5e0 <SEGGER_RTT_ReadNoLock+0x108>)
 800c504:	4413      	add	r3, r2
 800c506:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	691b      	ldr	r3, [r3, #16]
 800c510:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800c518:	2300      	movs	r3, #0
 800c51a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800c51c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	429a      	cmp	r2, r3
 800c522:	d92b      	bls.n	800c57c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	689a      	ldr	r2, [r3, #8]
 800c528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c52e:	697a      	ldr	r2, [r7, #20]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4293      	cmp	r3, r2
 800c534:	bf28      	it	cs
 800c536:	4613      	movcs	r3, r2
 800c538:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c540:	4413      	add	r3, r2
 800c542:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	6939      	ldr	r1, [r7, #16]
 800c548:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c54a:	f001 fe48 	bl	800e1de <memcpy>
    NumBytesRead += NumBytesRem;
 800c54e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	4413      	add	r3, r2
 800c554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800c556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	4413      	add	r3, r2
 800c55c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	4413      	add	r3, r2
 800c56c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c574:	429a      	cmp	r2, r3
 800c576:	d101      	bne.n	800c57c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800c578:	2300      	movs	r3, #0
 800c57a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800c57c:	69ba      	ldr	r2, [r7, #24]
 800c57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4293      	cmp	r3, r2
 800c58a:	bf28      	it	cs
 800c58c:	4613      	movcs	r3, r2
 800c58e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d019      	beq.n	800c5ca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c59c:	4413      	add	r3, r2
 800c59e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c5a0:	697a      	ldr	r2, [r7, #20]
 800c5a2:	6939      	ldr	r1, [r7, #16]
 800c5a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c5a6:	f001 fe1a 	bl	800e1de <memcpy>
    NumBytesRead += NumBytesRem;
 800c5aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800c5b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	1ad3      	subs	r3, r2, r3
 800c5c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c5c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800c5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800c5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3730      	adds	r7, #48	@ 0x30
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20013440 	.word	0x20013440

0800c5e4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b088      	sub	sp, #32
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	1c5a      	adds	r2, r3, #1
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	4413      	add	r3, r2
 800c5fe:	00db      	lsls	r3, r3, #3
 800c600:	4a1f      	ldr	r2, [pc, #124]	@ (800c680 <SEGGER_RTT_WriteNoLock+0x9c>)
 800c602:	4413      	add	r3, r2
 800c604:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	2b02      	cmp	r3, #2
 800c60c:	d029      	beq.n	800c662 <SEGGER_RTT_WriteNoLock+0x7e>
 800c60e:	2b02      	cmp	r3, #2
 800c610:	d82e      	bhi.n	800c670 <SEGGER_RTT_WriteNoLock+0x8c>
 800c612:	2b00      	cmp	r3, #0
 800c614:	d002      	beq.n	800c61c <SEGGER_RTT_WriteNoLock+0x38>
 800c616:	2b01      	cmp	r3, #1
 800c618:	d013      	beq.n	800c642 <SEGGER_RTT_WriteNoLock+0x5e>
 800c61a:	e029      	b.n	800c670 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800c61c:	6978      	ldr	r0, [r7, #20]
 800c61e:	f7ff ff38 	bl	800c492 <_GetAvailWriteSpace>
 800c622:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d202      	bcs.n	800c632 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800c62c:	2300      	movs	r3, #0
 800c62e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800c630:	e021      	b.n	800c676 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	69b9      	ldr	r1, [r7, #24]
 800c63a:	6978      	ldr	r0, [r7, #20]
 800c63c:	f7ff fee1 	bl	800c402 <_WriteNoCheck>
    break;
 800c640:	e019      	b.n	800c676 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800c642:	6978      	ldr	r0, [r7, #20]
 800c644:	f7ff ff25 	bl	800c492 <_GetAvailWriteSpace>
 800c648:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	4293      	cmp	r3, r2
 800c650:	bf28      	it	cs
 800c652:	4613      	movcs	r3, r2
 800c654:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800c656:	69fa      	ldr	r2, [r7, #28]
 800c658:	69b9      	ldr	r1, [r7, #24]
 800c65a:	6978      	ldr	r0, [r7, #20]
 800c65c:	f7ff fed1 	bl	800c402 <_WriteNoCheck>
    break;
 800c660:	e009      	b.n	800c676 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	69b9      	ldr	r1, [r7, #24]
 800c666:	6978      	ldr	r0, [r7, #20]
 800c668:	f7ff fe6e 	bl	800c348 <_WriteBlocking>
 800c66c:	61f8      	str	r0, [r7, #28]
    break;
 800c66e:	e002      	b.n	800c676 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800c670:	2300      	movs	r3, #0
 800c672:	61fb      	str	r3, [r7, #28]
    break;
 800c674:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800c676:	69fb      	ldr	r3, [r7, #28]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3720      	adds	r7, #32
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	20013440 	.word	0x20013440

0800c684 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800c684:	b580      	push	{r7, lr}
 800c686:	b088      	sub	sp, #32
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800c690:	4b0e      	ldr	r3, [pc, #56]	@ (800c6cc <SEGGER_RTT_Write+0x48>)
 800c692:	61fb      	str	r3, [r7, #28]
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <SEGGER_RTT_Write+0x1e>
 800c69e:	f7ff fdfb 	bl	800c298 <_DoInit>
  SEGGER_RTT_LOCK();
 800c6a2:	f3ef 8311 	mrs	r3, BASEPRI
 800c6a6:	f04f 0120 	mov.w	r1, #32
 800c6aa:	f381 8811 	msr	BASEPRI, r1
 800c6ae:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	68b9      	ldr	r1, [r7, #8]
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f7ff ff95 	bl	800c5e4 <SEGGER_RTT_WriteNoLock>
 800c6ba:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800c6c2:	697b      	ldr	r3, [r7, #20]
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3720      	adds	r7, #32
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	20013440 	.word	0x20013440

0800c6d0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b088      	sub	sp, #32
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
 800c6dc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800c6de:	4b3d      	ldr	r3, [pc, #244]	@ (800c7d4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c6e0:	61bb      	str	r3, [r7, #24]
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d101      	bne.n	800c6f0 <SEGGER_RTT_AllocUpBuffer+0x20>
 800c6ec:	f7ff fdd4 	bl	800c298 <_DoInit>
  SEGGER_RTT_LOCK();
 800c6f0:	f3ef 8311 	mrs	r3, BASEPRI
 800c6f4:	f04f 0120 	mov.w	r1, #32
 800c6f8:	f381 8811 	msr	BASEPRI, r1
 800c6fc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c6fe:	4b35      	ldr	r3, [pc, #212]	@ (800c7d4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c700:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800c702:	2300      	movs	r3, #0
 800c704:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800c706:	6939      	ldr	r1, [r7, #16]
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	1c5a      	adds	r2, r3, #1
 800c70c:	4613      	mov	r3, r2
 800c70e:	005b      	lsls	r3, r3, #1
 800c710:	4413      	add	r3, r2
 800c712:	00db      	lsls	r3, r3, #3
 800c714:	440b      	add	r3, r1
 800c716:	3304      	adds	r3, #4
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d008      	beq.n	800c730 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	3301      	adds	r3, #1
 800c722:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	69fa      	ldr	r2, [r7, #28]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	dbeb      	blt.n	800c706 <SEGGER_RTT_AllocUpBuffer+0x36>
 800c72e:	e000      	b.n	800c732 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800c730:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	69fa      	ldr	r2, [r7, #28]
 800c738:	429a      	cmp	r2, r3
 800c73a:	da3f      	bge.n	800c7bc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800c73c:	6939      	ldr	r1, [r7, #16]
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	1c5a      	adds	r2, r3, #1
 800c742:	4613      	mov	r3, r2
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	4413      	add	r3, r2
 800c748:	00db      	lsls	r3, r3, #3
 800c74a:	440b      	add	r3, r1
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800c750:	6939      	ldr	r1, [r7, #16]
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	1c5a      	adds	r2, r3, #1
 800c756:	4613      	mov	r3, r2
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	4413      	add	r3, r2
 800c75c:	00db      	lsls	r3, r3, #3
 800c75e:	440b      	add	r3, r1
 800c760:	3304      	adds	r3, #4
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800c766:	6939      	ldr	r1, [r7, #16]
 800c768:	69fa      	ldr	r2, [r7, #28]
 800c76a:	4613      	mov	r3, r2
 800c76c:	005b      	lsls	r3, r3, #1
 800c76e:	4413      	add	r3, r2
 800c770:	00db      	lsls	r3, r3, #3
 800c772:	440b      	add	r3, r1
 800c774:	3320      	adds	r3, #32
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800c77a:	6939      	ldr	r1, [r7, #16]
 800c77c:	69fa      	ldr	r2, [r7, #28]
 800c77e:	4613      	mov	r3, r2
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	4413      	add	r3, r2
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	440b      	add	r3, r1
 800c788:	3328      	adds	r3, #40	@ 0x28
 800c78a:	2200      	movs	r2, #0
 800c78c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800c78e:	6939      	ldr	r1, [r7, #16]
 800c790:	69fa      	ldr	r2, [r7, #28]
 800c792:	4613      	mov	r3, r2
 800c794:	005b      	lsls	r3, r3, #1
 800c796:	4413      	add	r3, r2
 800c798:	00db      	lsls	r3, r3, #3
 800c79a:	440b      	add	r3, r1
 800c79c:	3324      	adds	r3, #36	@ 0x24
 800c79e:	2200      	movs	r2, #0
 800c7a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800c7a2:	6939      	ldr	r1, [r7, #16]
 800c7a4:	69fa      	ldr	r2, [r7, #28]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	4413      	add	r3, r2
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	440b      	add	r3, r1
 800c7b0:	332c      	adds	r3, #44	@ 0x2c
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c7b6:	f3bf 8f5f 	dmb	sy
 800c7ba:	e002      	b.n	800c7c2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800c7bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c7c0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800c7c8:	69fb      	ldr	r3, [r7, #28]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3720      	adds	r7, #32
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20013440 	.word	0x20013440

0800c7d8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b088      	sub	sp, #32
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
 800c7e4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800c7e6:	4b33      	ldr	r3, [pc, #204]	@ (800c8b4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800c7e8:	61bb      	str	r3, [r7, #24]
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d101      	bne.n	800c7f8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800c7f4:	f7ff fd50 	bl	800c298 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c7f8:	4b2e      	ldr	r3, [pc, #184]	@ (800c8b4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800c7fa:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	695b      	ldr	r3, [r3, #20]
 800c800:	461a      	mov	r2, r3
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	4293      	cmp	r3, r2
 800c806:	d24d      	bcs.n	800c8a4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800c808:	f3ef 8311 	mrs	r3, BASEPRI
 800c80c:	f04f 0120 	mov.w	r1, #32
 800c810:	f381 8811 	msr	BASEPRI, r1
 800c814:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d031      	beq.n	800c880 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800c81c:	6979      	ldr	r1, [r7, #20]
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	4613      	mov	r3, r2
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	4413      	add	r3, r2
 800c826:	00db      	lsls	r3, r3, #3
 800c828:	440b      	add	r3, r1
 800c82a:	3360      	adds	r3, #96	@ 0x60
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800c830:	6979      	ldr	r1, [r7, #20]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	4613      	mov	r3, r2
 800c836:	005b      	lsls	r3, r3, #1
 800c838:	4413      	add	r3, r2
 800c83a:	00db      	lsls	r3, r3, #3
 800c83c:	440b      	add	r3, r1
 800c83e:	3364      	adds	r3, #100	@ 0x64
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800c844:	6979      	ldr	r1, [r7, #20]
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	4613      	mov	r3, r2
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	4413      	add	r3, r2
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	440b      	add	r3, r1
 800c852:	3368      	adds	r3, #104	@ 0x68
 800c854:	683a      	ldr	r2, [r7, #0]
 800c856:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800c858:	6979      	ldr	r1, [r7, #20]
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	4613      	mov	r3, r2
 800c85e:	005b      	lsls	r3, r3, #1
 800c860:	4413      	add	r3, r2
 800c862:	00db      	lsls	r3, r3, #3
 800c864:	440b      	add	r3, r1
 800c866:	3370      	adds	r3, #112	@ 0x70
 800c868:	2200      	movs	r2, #0
 800c86a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800c86c:	6979      	ldr	r1, [r7, #20]
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	4613      	mov	r3, r2
 800c872:	005b      	lsls	r3, r3, #1
 800c874:	4413      	add	r3, r2
 800c876:	00db      	lsls	r3, r3, #3
 800c878:	440b      	add	r3, r1
 800c87a:	336c      	adds	r3, #108	@ 0x6c
 800c87c:	2200      	movs	r2, #0
 800c87e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800c880:	6979      	ldr	r1, [r7, #20]
 800c882:	68fa      	ldr	r2, [r7, #12]
 800c884:	4613      	mov	r3, r2
 800c886:	005b      	lsls	r3, r3, #1
 800c888:	4413      	add	r3, r2
 800c88a:	00db      	lsls	r3, r3, #3
 800c88c:	440b      	add	r3, r1
 800c88e:	3374      	adds	r3, #116	@ 0x74
 800c890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c892:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c894:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	61fb      	str	r3, [r7, #28]
 800c8a2:	e002      	b.n	800c8aa <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800c8a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8a8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800c8aa:	69fb      	ldr	r3, [r7, #28]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3720      	adds	r7, #32
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	20013440 	.word	0x20013440

0800c8b8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800c8c8:	e002      	b.n	800c8d0 <_EncodeStr+0x18>
    Len++;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800c8d0:	68ba      	ldr	r2, [r7, #8]
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1f6      	bne.n	800c8ca <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800c8dc:	693a      	ldr	r2, [r7, #16]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d901      	bls.n	800c8e8 <_EncodeStr+0x30>
    Len = Limit;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	2bfe      	cmp	r3, #254	@ 0xfe
 800c8ec:	d806      	bhi.n	800c8fc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	1c5a      	adds	r2, r3, #1
 800c8f2:	60fa      	str	r2, [r7, #12]
 800c8f4:	693a      	ldr	r2, [r7, #16]
 800c8f6:	b2d2      	uxtb	r2, r2
 800c8f8:	701a      	strb	r2, [r3, #0]
 800c8fa:	e011      	b.n	800c920 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	1c5a      	adds	r2, r3, #1
 800c900:	60fa      	str	r2, [r7, #12]
 800c902:	22ff      	movs	r2, #255	@ 0xff
 800c904:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	60fa      	str	r2, [r7, #12]
 800c90c:	693a      	ldr	r2, [r7, #16]
 800c90e:	b2d2      	uxtb	r2, r2
 800c910:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	0a19      	lsrs	r1, r3, #8
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	60fa      	str	r2, [r7, #12]
 800c91c:	b2ca      	uxtb	r2, r1
 800c91e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800c920:	2300      	movs	r3, #0
 800c922:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c924:	e00a      	b.n	800c93c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	1c53      	adds	r3, r2, #1
 800c92a:	60bb      	str	r3, [r7, #8]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	1c59      	adds	r1, r3, #1
 800c930:	60f9      	str	r1, [r7, #12]
 800c932:	7812      	ldrb	r2, [r2, #0]
 800c934:	701a      	strb	r2, [r3, #0]
    n++;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	3301      	adds	r3, #1
 800c93a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c93c:	697a      	ldr	r2, [r7, #20]
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	429a      	cmp	r2, r3
 800c942:	d3f0      	bcc.n	800c926 <_EncodeStr+0x6e>
  }
  return pPayload;
 800c944:	68fb      	ldr	r3, [r7, #12]
}
 800c946:	4618      	mov	r0, r3
 800c948:	371c      	adds	r7, #28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c952:	b480      	push	{r7}
 800c954:	b083      	sub	sp, #12
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	3304      	adds	r3, #4
}
 800c95e:	4618      	mov	r0, r3
 800c960:	370c      	adds	r7, #12
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
	...

0800c96c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c972:	4b35      	ldr	r3, [pc, #212]	@ (800ca48 <_HandleIncomingPacket+0xdc>)
 800c974:	7e1b      	ldrb	r3, [r3, #24]
 800c976:	4618      	mov	r0, r3
 800c978:	1cfb      	adds	r3, r7, #3
 800c97a:	2201      	movs	r2, #1
 800c97c:	4619      	mov	r1, r3
 800c97e:	f7ff fdab 	bl	800c4d8 <SEGGER_RTT_ReadNoLock>
 800c982:	4603      	mov	r3, r0
 800c984:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	dd59      	ble.n	800ca40 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800c98c:	78fb      	ldrb	r3, [r7, #3]
 800c98e:	2b80      	cmp	r3, #128	@ 0x80
 800c990:	d032      	beq.n	800c9f8 <_HandleIncomingPacket+0x8c>
 800c992:	2b80      	cmp	r3, #128	@ 0x80
 800c994:	dc42      	bgt.n	800ca1c <_HandleIncomingPacket+0xb0>
 800c996:	2b07      	cmp	r3, #7
 800c998:	dc16      	bgt.n	800c9c8 <_HandleIncomingPacket+0x5c>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	dd3e      	ble.n	800ca1c <_HandleIncomingPacket+0xb0>
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	2b06      	cmp	r3, #6
 800c9a2:	d83b      	bhi.n	800ca1c <_HandleIncomingPacket+0xb0>
 800c9a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c9ac <_HandleIncomingPacket+0x40>)
 800c9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9aa:	bf00      	nop
 800c9ac:	0800c9cf 	.word	0x0800c9cf
 800c9b0:	0800c9d5 	.word	0x0800c9d5
 800c9b4:	0800c9db 	.word	0x0800c9db
 800c9b8:	0800c9e1 	.word	0x0800c9e1
 800c9bc:	0800c9e7 	.word	0x0800c9e7
 800c9c0:	0800c9ed 	.word	0x0800c9ed
 800c9c4:	0800c9f3 	.word	0x0800c9f3
 800c9c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9ca:	d034      	beq.n	800ca36 <_HandleIncomingPacket+0xca>
 800c9cc:	e026      	b.n	800ca1c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c9ce:	f000 fba5 	bl	800d11c <SEGGER_SYSVIEW_Start>
      break;
 800c9d2:	e035      	b.n	800ca40 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c9d4:	f000 fc5c 	bl	800d290 <SEGGER_SYSVIEW_Stop>
      break;
 800c9d8:	e032      	b.n	800ca40 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c9da:	f000 fe35 	bl	800d648 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c9de:	e02f      	b.n	800ca40 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800c9e0:	f000 fdfa 	bl	800d5d8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800c9e4:	e02c      	b.n	800ca40 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800c9e6:	f000 fc79 	bl	800d2dc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800c9ea:	e029      	b.n	800ca40 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800c9ec:	f001 f8c8 	bl	800db80 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800c9f0:	e026      	b.n	800ca40 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800c9f2:	f001 f8a7 	bl	800db44 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800c9f6:	e023      	b.n	800ca40 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c9f8:	4b13      	ldr	r3, [pc, #76]	@ (800ca48 <_HandleIncomingPacket+0xdc>)
 800c9fa:	7e1b      	ldrb	r3, [r3, #24]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	1cfb      	adds	r3, r7, #3
 800ca00:	2201      	movs	r2, #1
 800ca02:	4619      	mov	r1, r3
 800ca04:	f7ff fd68 	bl	800c4d8 <SEGGER_RTT_ReadNoLock>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	dd13      	ble.n	800ca3a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800ca12:	78fb      	ldrb	r3, [r7, #3]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f001 f815 	bl	800da44 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800ca1a:	e00e      	b.n	800ca3a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800ca1c:	78fb      	ldrb	r3, [r7, #3]
 800ca1e:	b25b      	sxtb	r3, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	da0c      	bge.n	800ca3e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ca24:	4b08      	ldr	r3, [pc, #32]	@ (800ca48 <_HandleIncomingPacket+0xdc>)
 800ca26:	7e1b      	ldrb	r3, [r3, #24]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	1cfb      	adds	r3, r7, #3
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	4619      	mov	r1, r3
 800ca30:	f7ff fd52 	bl	800c4d8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800ca34:	e003      	b.n	800ca3e <_HandleIncomingPacket+0xd2>
      break;
 800ca36:	bf00      	nop
 800ca38:	e002      	b.n	800ca40 <_HandleIncomingPacket+0xd4>
      break;
 800ca3a:	bf00      	nop
 800ca3c:	e000      	b.n	800ca40 <_HandleIncomingPacket+0xd4>
      break;
 800ca3e:	bf00      	nop
    }
  }
}
 800ca40:	bf00      	nop
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	20014900 	.word	0x20014900

0800ca4c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08c      	sub	sp, #48	@ 0x30
 800ca50:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800ca52:	2301      	movs	r3, #1
 800ca54:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800ca56:	1d3b      	adds	r3, r7, #4
 800ca58:	3301      	adds	r3, #1
 800ca5a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca60:	4b31      	ldr	r3, [pc, #196]	@ (800cb28 <_TrySendOverflowPacket+0xdc>)
 800ca62:	695b      	ldr	r3, [r3, #20]
 800ca64:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca66:	e00b      	b.n	800ca80 <_TrySendOverflowPacket+0x34>
 800ca68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6e:	1c59      	adds	r1, r3, #1
 800ca70:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ca72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ca76:	b2d2      	uxtb	r2, r2
 800ca78:	701a      	strb	r2, [r3, #0]
 800ca7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7c:	09db      	lsrs	r3, r3, #7
 800ca7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca82:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca84:	d8f0      	bhi.n	800ca68 <_TrySendOverflowPacket+0x1c>
 800ca86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca88:	1c5a      	adds	r2, r3, #1
 800ca8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca8e:	b2d2      	uxtb	r2, r2
 800ca90:	701a      	strb	r2, [r3, #0]
 800ca92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca94:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ca96:	4b25      	ldr	r3, [pc, #148]	@ (800cb2c <_TrySendOverflowPacket+0xe0>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800ca9c:	4b22      	ldr	r3, [pc, #136]	@ (800cb28 <_TrySendOverflowPacket+0xdc>)
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	69ba      	ldr	r2, [r7, #24]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	627b      	str	r3, [r7, #36]	@ 0x24
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	623b      	str	r3, [r7, #32]
 800caae:	e00b      	b.n	800cac8 <_TrySendOverflowPacket+0x7c>
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab6:	1c59      	adds	r1, r3, #1
 800cab8:	6279      	str	r1, [r7, #36]	@ 0x24
 800caba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cabe:	b2d2      	uxtb	r2, r2
 800cac0:	701a      	strb	r2, [r3, #0]
 800cac2:	6a3b      	ldr	r3, [r7, #32]
 800cac4:	09db      	lsrs	r3, r3, #7
 800cac6:	623b      	str	r3, [r7, #32]
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	2b7f      	cmp	r3, #127	@ 0x7f
 800cacc:	d8f0      	bhi.n	800cab0 <_TrySendOverflowPacket+0x64>
 800cace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad0:	1c5a      	adds	r2, r3, #1
 800cad2:	627a      	str	r2, [r7, #36]	@ 0x24
 800cad4:	6a3a      	ldr	r2, [r7, #32]
 800cad6:	b2d2      	uxtb	r2, r2
 800cad8:	701a      	strb	r2, [r3, #0]
 800cada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cadc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800cade:	4b12      	ldr	r3, [pc, #72]	@ (800cb28 <_TrySendOverflowPacket+0xdc>)
 800cae0:	785b      	ldrb	r3, [r3, #1]
 800cae2:	4618      	mov	r0, r3
 800cae4:	1d3b      	adds	r3, r7, #4
 800cae6:	69fa      	ldr	r2, [r7, #28]
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	461a      	mov	r2, r3
 800caec:	1d3b      	adds	r3, r7, #4
 800caee:	4619      	mov	r1, r3
 800caf0:	f7f3 fb8e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800caf4:	4603      	mov	r3, r0
 800caf6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d009      	beq.n	800cb12 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800cafe:	4a0a      	ldr	r2, [pc, #40]	@ (800cb28 <_TrySendOverflowPacket+0xdc>)
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800cb04:	4b08      	ldr	r3, [pc, #32]	@ (800cb28 <_TrySendOverflowPacket+0xdc>)
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	4b06      	ldr	r3, [pc, #24]	@ (800cb28 <_TrySendOverflowPacket+0xdc>)
 800cb0e:	701a      	strb	r2, [r3, #0]
 800cb10:	e004      	b.n	800cb1c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800cb12:	4b05      	ldr	r3, [pc, #20]	@ (800cb28 <_TrySendOverflowPacket+0xdc>)
 800cb14:	695b      	ldr	r3, [r3, #20]
 800cb16:	3301      	adds	r3, #1
 800cb18:	4a03      	ldr	r2, [pc, #12]	@ (800cb28 <_TrySendOverflowPacket+0xdc>)
 800cb1a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800cb1c:	693b      	ldr	r3, [r7, #16]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3730      	adds	r7, #48	@ 0x30
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	20014900 	.word	0x20014900
 800cb2c:	e0001004 	.word	0xe0001004

0800cb30 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b08a      	sub	sp, #40	@ 0x28
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800cb3c:	4b6c      	ldr	r3, [pc, #432]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d010      	beq.n	800cb66 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800cb44:	4b6a      	ldr	r3, [pc, #424]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f000 80a3 	beq.w	800cc94 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800cb4e:	4b68      	ldr	r3, [pc, #416]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	d109      	bne.n	800cb6a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800cb56:	f7ff ff79 	bl	800ca4c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800cb5a:	4b65      	ldr	r3, [pc, #404]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	f040 809a 	bne.w	800cc98 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800cb64:	e001      	b.n	800cb6a <_SendPacket+0x3a>
    goto Send;
 800cb66:	bf00      	nop
 800cb68:	e000      	b.n	800cb6c <_SendPacket+0x3c>
Send:
 800cb6a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b1f      	cmp	r3, #31
 800cb70:	d809      	bhi.n	800cb86 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800cb72:	4b5f      	ldr	r3, [pc, #380]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cb74:	69da      	ldr	r2, [r3, #28]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	fa22 f303 	lsr.w	r3, r2, r3
 800cb7c:	f003 0301 	and.w	r3, r3, #1
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f040 808b 	bne.w	800cc9c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b17      	cmp	r3, #23
 800cb8a:	d807      	bhi.n	800cb9c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	60fb      	str	r3, [r7, #12]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	b2da      	uxtb	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	701a      	strb	r2, [r3, #0]
 800cb9a:	e03d      	b.n	800cc18 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	1ad3      	subs	r3, r2, r3
 800cba2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	2b7f      	cmp	r3, #127	@ 0x7f
 800cba8:	d912      	bls.n	800cbd0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	09da      	lsrs	r2, r3, #7
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	60fb      	str	r3, [r7, #12]
 800cbb4:	b2d2      	uxtb	r2, r2
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	3a01      	subs	r2, #1
 800cbc2:	60fa      	str	r2, [r7, #12]
 800cbc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	701a      	strb	r2, [r3, #0]
 800cbce:	e006      	b.n	800cbde <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	60fb      	str	r3, [r7, #12]
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	b2da      	uxtb	r2, r3
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbe2:	d912      	bls.n	800cc0a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	09da      	lsrs	r2, r3, #7
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	3b01      	subs	r3, #1
 800cbec:	60fb      	str	r3, [r7, #12]
 800cbee:	b2d2      	uxtb	r2, r2
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	3a01      	subs	r2, #1
 800cbfc:	60fa      	str	r2, [r7, #12]
 800cbfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	701a      	strb	r2, [r3, #0]
 800cc08:	e006      	b.n	800cc18 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	60fb      	str	r3, [r7, #12]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	b2da      	uxtb	r2, r3
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800cc18:	4b36      	ldr	r3, [pc, #216]	@ (800ccf4 <_SendPacket+0x1c4>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800cc1e:	4b34      	ldr	r3, [pc, #208]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	623b      	str	r3, [r7, #32]
 800cc30:	e00b      	b.n	800cc4a <_SendPacket+0x11a>
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc38:	1c59      	adds	r1, r3, #1
 800cc3a:	6279      	str	r1, [r7, #36]	@ 0x24
 800cc3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc40:	b2d2      	uxtb	r2, r2
 800cc42:	701a      	strb	r2, [r3, #0]
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	09db      	lsrs	r3, r3, #7
 800cc48:	623b      	str	r3, [r7, #32]
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc4e:	d8f0      	bhi.n	800cc32 <_SendPacket+0x102>
 800cc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	627a      	str	r2, [r7, #36]	@ 0x24
 800cc56:	6a3a      	ldr	r2, [r7, #32]
 800cc58:	b2d2      	uxtb	r2, r2
 800cc5a:	701a      	strb	r2, [r3, #0]
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800cc60:	4b23      	ldr	r3, [pc, #140]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cc62:	785b      	ldrb	r3, [r3, #1]
 800cc64:	4618      	mov	r0, r3
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	68f9      	ldr	r1, [r7, #12]
 800cc70:	f7f3 face 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800cc74:	4603      	mov	r3, r0
 800cc76:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d003      	beq.n	800cc86 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800cc7e:	4a1c      	ldr	r2, [pc, #112]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	60d3      	str	r3, [r2, #12]
 800cc84:	e00b      	b.n	800cc9e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800cc86:	4b1a      	ldr	r3, [pc, #104]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	4b18      	ldr	r3, [pc, #96]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cc90:	701a      	strb	r2, [r3, #0]
 800cc92:	e004      	b.n	800cc9e <_SendPacket+0x16e>
    goto SendDone;
 800cc94:	bf00      	nop
 800cc96:	e002      	b.n	800cc9e <_SendPacket+0x16e>
      goto SendDone;
 800cc98:	bf00      	nop
 800cc9a:	e000      	b.n	800cc9e <_SendPacket+0x16e>
      goto SendDone;
 800cc9c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800cc9e:	4b14      	ldr	r3, [pc, #80]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cca0:	7e1b      	ldrb	r3, [r3, #24]
 800cca2:	4619      	mov	r1, r3
 800cca4:	4a14      	ldr	r2, [pc, #80]	@ (800ccf8 <_SendPacket+0x1c8>)
 800cca6:	460b      	mov	r3, r1
 800cca8:	005b      	lsls	r3, r3, #1
 800ccaa:	440b      	add	r3, r1
 800ccac:	00db      	lsls	r3, r3, #3
 800ccae:	4413      	add	r3, r2
 800ccb0:	336c      	adds	r3, #108	@ 0x6c
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf0 <_SendPacket+0x1c0>)
 800ccb6:	7e1b      	ldrb	r3, [r3, #24]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	490f      	ldr	r1, [pc, #60]	@ (800ccf8 <_SendPacket+0x1c8>)
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	005b      	lsls	r3, r3, #1
 800ccc0:	4403      	add	r3, r0
 800ccc2:	00db      	lsls	r3, r3, #3
 800ccc4:	440b      	add	r3, r1
 800ccc6:	3370      	adds	r3, #112	@ 0x70
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d00b      	beq.n	800cce6 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800ccce:	4b08      	ldr	r3, [pc, #32]	@ (800ccf0 <_SendPacket+0x1c0>)
 800ccd0:	789b      	ldrb	r3, [r3, #2]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d107      	bne.n	800cce6 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800ccd6:	4b06      	ldr	r3, [pc, #24]	@ (800ccf0 <_SendPacket+0x1c0>)
 800ccd8:	2201      	movs	r2, #1
 800ccda:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800ccdc:	f7ff fe46 	bl	800c96c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800cce0:	4b03      	ldr	r3, [pc, #12]	@ (800ccf0 <_SendPacket+0x1c0>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800cce6:	bf00      	nop
 800cce8:	3728      	adds	r7, #40	@ 0x28
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20014900 	.word	0x20014900
 800ccf4:	e0001004 	.word	0xe0001004
 800ccf8:	20013440 	.word	0x20013440

0800ccfc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af02      	add	r7, sp, #8
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cd10:	4917      	ldr	r1, [pc, #92]	@ (800cd70 <SEGGER_SYSVIEW_Init+0x74>)
 800cd12:	4818      	ldr	r0, [pc, #96]	@ (800cd74 <SEGGER_SYSVIEW_Init+0x78>)
 800cd14:	f7ff fcdc 	bl	800c6d0 <SEGGER_RTT_AllocUpBuffer>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	4b16      	ldr	r3, [pc, #88]	@ (800cd78 <SEGGER_SYSVIEW_Init+0x7c>)
 800cd1e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800cd20:	4b15      	ldr	r3, [pc, #84]	@ (800cd78 <SEGGER_SYSVIEW_Init+0x7c>)
 800cd22:	785a      	ldrb	r2, [r3, #1]
 800cd24:	4b14      	ldr	r3, [pc, #80]	@ (800cd78 <SEGGER_SYSVIEW_Init+0x7c>)
 800cd26:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800cd28:	4b13      	ldr	r3, [pc, #76]	@ (800cd78 <SEGGER_SYSVIEW_Init+0x7c>)
 800cd2a:	7e1b      	ldrb	r3, [r3, #24]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	2300      	movs	r3, #0
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	2308      	movs	r3, #8
 800cd34:	4a11      	ldr	r2, [pc, #68]	@ (800cd7c <SEGGER_SYSVIEW_Init+0x80>)
 800cd36:	490f      	ldr	r1, [pc, #60]	@ (800cd74 <SEGGER_SYSVIEW_Init+0x78>)
 800cd38:	f7ff fd4e 	bl	800c7d8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800cd3c:	4b0e      	ldr	r3, [pc, #56]	@ (800cd78 <SEGGER_SYSVIEW_Init+0x7c>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800cd42:	4b0f      	ldr	r3, [pc, #60]	@ (800cd80 <SEGGER_SYSVIEW_Init+0x84>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a0c      	ldr	r2, [pc, #48]	@ (800cd78 <SEGGER_SYSVIEW_Init+0x7c>)
 800cd48:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800cd4a:	4a0b      	ldr	r2, [pc, #44]	@ (800cd78 <SEGGER_SYSVIEW_Init+0x7c>)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800cd50:	4a09      	ldr	r2, [pc, #36]	@ (800cd78 <SEGGER_SYSVIEW_Init+0x7c>)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800cd56:	4a08      	ldr	r2, [pc, #32]	@ (800cd78 <SEGGER_SYSVIEW_Init+0x7c>)
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800cd5c:	4a06      	ldr	r2, [pc, #24]	@ (800cd78 <SEGGER_SYSVIEW_Init+0x7c>)
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800cd62:	4b05      	ldr	r3, [pc, #20]	@ (800cd78 <SEGGER_SYSVIEW_Init+0x7c>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800cd68:	bf00      	nop
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	200138f8 	.word	0x200138f8
 800cd74:	08010200 	.word	0x08010200
 800cd78:	20014900 	.word	0x20014900
 800cd7c:	200148f8 	.word	0x200148f8
 800cd80:	e0001004 	.word	0xe0001004

0800cd84 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800cd8c:	4a04      	ldr	r2, [pc, #16]	@ (800cda0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6113      	str	r3, [r2, #16]
}
 800cd92:	bf00      	nop
 800cd94:	370c      	adds	r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop
 800cda0:	20014900 	.word	0x20014900

0800cda4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cdac:	f3ef 8311 	mrs	r3, BASEPRI
 800cdb0:	f04f 0120 	mov.w	r1, #32
 800cdb4:	f381 8811 	msr	BASEPRI, r1
 800cdb8:	60fb      	str	r3, [r7, #12]
 800cdba:	4808      	ldr	r0, [pc, #32]	@ (800cddc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800cdbc:	f7ff fdc9 	bl	800c952 <_PreparePacket>
 800cdc0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	68b9      	ldr	r1, [r7, #8]
 800cdc6:	68b8      	ldr	r0, [r7, #8]
 800cdc8:	f7ff feb2 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f383 8811 	msr	BASEPRI, r3
}
 800cdd2:	bf00      	nop
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	20014930 	.word	0x20014930

0800cde0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b088      	sub	sp, #32
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cdea:	f3ef 8311 	mrs	r3, BASEPRI
 800cdee:	f04f 0120 	mov.w	r1, #32
 800cdf2:	f381 8811 	msr	BASEPRI, r1
 800cdf6:	617b      	str	r3, [r7, #20]
 800cdf8:	4816      	ldr	r0, [pc, #88]	@ (800ce54 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800cdfa:	f7ff fdaa 	bl	800c952 <_PreparePacket>
 800cdfe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	61fb      	str	r3, [r7, #28]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	61bb      	str	r3, [r7, #24]
 800ce0c:	e00b      	b.n	800ce26 <SEGGER_SYSVIEW_RecordU32+0x46>
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	1c59      	adds	r1, r3, #1
 800ce16:	61f9      	str	r1, [r7, #28]
 800ce18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce1c:	b2d2      	uxtb	r2, r2
 800ce1e:	701a      	strb	r2, [r3, #0]
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	09db      	lsrs	r3, r3, #7
 800ce24:	61bb      	str	r3, [r7, #24]
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce2a:	d8f0      	bhi.n	800ce0e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	1c5a      	adds	r2, r3, #1
 800ce30:	61fa      	str	r2, [r7, #28]
 800ce32:	69ba      	ldr	r2, [r7, #24]
 800ce34:	b2d2      	uxtb	r2, r2
 800ce36:	701a      	strb	r2, [r3, #0]
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	68f9      	ldr	r1, [r7, #12]
 800ce40:	6938      	ldr	r0, [r7, #16]
 800ce42:	f7ff fe75 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	f383 8811 	msr	BASEPRI, r3
}
 800ce4c:	bf00      	nop
 800ce4e:	3720      	adds	r7, #32
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	20014930 	.word	0x20014930

0800ce58 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b08c      	sub	sp, #48	@ 0x30
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800ce64:	f3ef 8311 	mrs	r3, BASEPRI
 800ce68:	f04f 0120 	mov.w	r1, #32
 800ce6c:	f381 8811 	msr	BASEPRI, r1
 800ce70:	61fb      	str	r3, [r7, #28]
 800ce72:	4825      	ldr	r0, [pc, #148]	@ (800cf08 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800ce74:	f7ff fd6d 	bl	800c952 <_PreparePacket>
 800ce78:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce86:	e00b      	b.n	800cea0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800ce88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce8e:	1c59      	adds	r1, r3, #1
 800ce90:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ce92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce96:	b2d2      	uxtb	r2, r2
 800ce98:	701a      	strb	r2, [r3, #0]
 800ce9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9c:	09db      	lsrs	r3, r3, #7
 800ce9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea2:	2b7f      	cmp	r3, #127	@ 0x7f
 800cea4:	d8f0      	bhi.n	800ce88 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800cea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cea8:	1c5a      	adds	r2, r3, #1
 800ceaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ceac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ceae:	b2d2      	uxtb	r2, r2
 800ceb0:	701a      	strb	r2, [r3, #0]
 800ceb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	623b      	str	r3, [r7, #32]
 800cebe:	e00b      	b.n	800ced8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800cec0:	6a3b      	ldr	r3, [r7, #32]
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec6:	1c59      	adds	r1, r3, #1
 800cec8:	6279      	str	r1, [r7, #36]	@ 0x24
 800ceca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cece:	b2d2      	uxtb	r2, r2
 800ced0:	701a      	strb	r2, [r3, #0]
 800ced2:	6a3b      	ldr	r3, [r7, #32]
 800ced4:	09db      	lsrs	r3, r3, #7
 800ced6:	623b      	str	r3, [r7, #32]
 800ced8:	6a3b      	ldr	r3, [r7, #32]
 800ceda:	2b7f      	cmp	r3, #127	@ 0x7f
 800cedc:	d8f0      	bhi.n	800cec0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800cede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee0:	1c5a      	adds	r2, r3, #1
 800cee2:	627a      	str	r2, [r7, #36]	@ 0x24
 800cee4:	6a3a      	ldr	r2, [r7, #32]
 800cee6:	b2d2      	uxtb	r2, r2
 800cee8:	701a      	strb	r2, [r3, #0]
 800ceea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ceee:	68fa      	ldr	r2, [r7, #12]
 800cef0:	6979      	ldr	r1, [r7, #20]
 800cef2:	69b8      	ldr	r0, [r7, #24]
 800cef4:	f7ff fe1c 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	f383 8811 	msr	BASEPRI, r3
}
 800cefe:	bf00      	nop
 800cf00:	3730      	adds	r7, #48	@ 0x30
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	20014930 	.word	0x20014930

0800cf0c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b08e      	sub	sp, #56	@ 0x38
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
 800cf18:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800cf1a:	f3ef 8311 	mrs	r3, BASEPRI
 800cf1e:	f04f 0120 	mov.w	r1, #32
 800cf22:	f381 8811 	msr	BASEPRI, r1
 800cf26:	61fb      	str	r3, [r7, #28]
 800cf28:	4832      	ldr	r0, [pc, #200]	@ (800cff4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800cf2a:	f7ff fd12 	bl	800c952 <_PreparePacket>
 800cf2e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf3c:	e00b      	b.n	800cf56 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf40:	b2da      	uxtb	r2, r3
 800cf42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf44:	1c59      	adds	r1, r3, #1
 800cf46:	6379      	str	r1, [r7, #52]	@ 0x34
 800cf48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cf4c:	b2d2      	uxtb	r2, r2
 800cf4e:	701a      	strb	r2, [r3, #0]
 800cf50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf52:	09db      	lsrs	r3, r3, #7
 800cf54:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf58:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf5a:	d8f0      	bhi.n	800cf3e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800cf5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf5e:	1c5a      	adds	r2, r3, #1
 800cf60:	637a      	str	r2, [r7, #52]	@ 0x34
 800cf62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf64:	b2d2      	uxtb	r2, r2
 800cf66:	701a      	strb	r2, [r3, #0]
 800cf68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf74:	e00b      	b.n	800cf8e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800cf76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf7c:	1c59      	adds	r1, r3, #1
 800cf7e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cf80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cf84:	b2d2      	uxtb	r2, r2
 800cf86:	701a      	strb	r2, [r3, #0]
 800cf88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8a:	09db      	lsrs	r3, r3, #7
 800cf8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf90:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf92:	d8f0      	bhi.n	800cf76 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800cf94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cf9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf9c:	b2d2      	uxtb	r2, r2
 800cf9e:	701a      	strb	r2, [r3, #0]
 800cfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	623b      	str	r3, [r7, #32]
 800cfac:	e00b      	b.n	800cfc6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800cfae:	6a3b      	ldr	r3, [r7, #32]
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb4:	1c59      	adds	r1, r3, #1
 800cfb6:	6279      	str	r1, [r7, #36]	@ 0x24
 800cfb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cfbc:	b2d2      	uxtb	r2, r2
 800cfbe:	701a      	strb	r2, [r3, #0]
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
 800cfc2:	09db      	lsrs	r3, r3, #7
 800cfc4:	623b      	str	r3, [r7, #32]
 800cfc6:	6a3b      	ldr	r3, [r7, #32]
 800cfc8:	2b7f      	cmp	r3, #127	@ 0x7f
 800cfca:	d8f0      	bhi.n	800cfae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfce:	1c5a      	adds	r2, r3, #1
 800cfd0:	627a      	str	r2, [r7, #36]	@ 0x24
 800cfd2:	6a3a      	ldr	r2, [r7, #32]
 800cfd4:	b2d2      	uxtb	r2, r2
 800cfd6:	701a      	strb	r2, [r3, #0]
 800cfd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfda:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	6979      	ldr	r1, [r7, #20]
 800cfe0:	69b8      	ldr	r0, [r7, #24]
 800cfe2:	f7ff fda5 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	f383 8811 	msr	BASEPRI, r3
}
 800cfec:	bf00      	nop
 800cfee:	3738      	adds	r7, #56	@ 0x38
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	20014930 	.word	0x20014930

0800cff8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b090      	sub	sp, #64	@ 0x40
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d006:	f3ef 8311 	mrs	r3, BASEPRI
 800d00a:	f04f 0120 	mov.w	r1, #32
 800d00e:	f381 8811 	msr	BASEPRI, r1
 800d012:	61fb      	str	r3, [r7, #28]
 800d014:	4840      	ldr	r0, [pc, #256]	@ (800d118 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800d016:	f7ff fc9c 	bl	800c952 <_PreparePacket>
 800d01a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d028:	e00b      	b.n	800d042 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800d02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d030:	1c59      	adds	r1, r3, #1
 800d032:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800d034:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d038:	b2d2      	uxtb	r2, r2
 800d03a:	701a      	strb	r2, [r3, #0]
 800d03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03e:	09db      	lsrs	r3, r3, #7
 800d040:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d044:	2b7f      	cmp	r3, #127	@ 0x7f
 800d046:	d8f0      	bhi.n	800d02a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800d048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d04a:	1c5a      	adds	r2, r3, #1
 800d04c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d04e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d050:	b2d2      	uxtb	r2, r2
 800d052:	701a      	strb	r2, [r3, #0]
 800d054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d056:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d060:	e00b      	b.n	800d07a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800d062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d064:	b2da      	uxtb	r2, r3
 800d066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d068:	1c59      	adds	r1, r3, #1
 800d06a:	6379      	str	r1, [r7, #52]	@ 0x34
 800d06c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d070:	b2d2      	uxtb	r2, r2
 800d072:	701a      	strb	r2, [r3, #0]
 800d074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d076:	09db      	lsrs	r3, r3, #7
 800d078:	633b      	str	r3, [r7, #48]	@ 0x30
 800d07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d07e:	d8f0      	bhi.n	800d062 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800d080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d082:	1c5a      	adds	r2, r3, #1
 800d084:	637a      	str	r2, [r7, #52]	@ 0x34
 800d086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d088:	b2d2      	uxtb	r2, r2
 800d08a:	701a      	strb	r2, [r3, #0]
 800d08c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d08e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d098:	e00b      	b.n	800d0b2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800d09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09c:	b2da      	uxtb	r2, r3
 800d09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a0:	1c59      	adds	r1, r3, #1
 800d0a2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d0a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d0a8:	b2d2      	uxtb	r2, r2
 800d0aa:	701a      	strb	r2, [r3, #0]
 800d0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ae:	09db      	lsrs	r3, r3, #7
 800d0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b4:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0b6:	d8f0      	bhi.n	800d09a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800d0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ba:	1c5a      	adds	r2, r3, #1
 800d0bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d0be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0c0:	b2d2      	uxtb	r2, r2
 800d0c2:	701a      	strb	r2, [r3, #0]
 800d0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0ce:	623b      	str	r3, [r7, #32]
 800d0d0:	e00b      	b.n	800d0ea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d8:	1c59      	adds	r1, r3, #1
 800d0da:	6279      	str	r1, [r7, #36]	@ 0x24
 800d0dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d0e0:	b2d2      	uxtb	r2, r2
 800d0e2:	701a      	strb	r2, [r3, #0]
 800d0e4:	6a3b      	ldr	r3, [r7, #32]
 800d0e6:	09db      	lsrs	r3, r3, #7
 800d0e8:	623b      	str	r3, [r7, #32]
 800d0ea:	6a3b      	ldr	r3, [r7, #32]
 800d0ec:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0ee:	d8f0      	bhi.n	800d0d2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f2:	1c5a      	adds	r2, r3, #1
 800d0f4:	627a      	str	r2, [r7, #36]	@ 0x24
 800d0f6:	6a3a      	ldr	r2, [r7, #32]
 800d0f8:	b2d2      	uxtb	r2, r2
 800d0fa:	701a      	strb	r2, [r3, #0]
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	6979      	ldr	r1, [r7, #20]
 800d104:	69b8      	ldr	r0, [r7, #24]
 800d106:	f7ff fd13 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	f383 8811 	msr	BASEPRI, r3
}
 800d110:	bf00      	nop
 800d112:	3740      	adds	r7, #64	@ 0x40
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	20014930 	.word	0x20014930

0800d11c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b08c      	sub	sp, #48	@ 0x30
 800d120:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800d122:	4b58      	ldr	r3, [pc, #352]	@ (800d284 <SEGGER_SYSVIEW_Start+0x168>)
 800d124:	2201      	movs	r2, #1
 800d126:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800d128:	f3ef 8311 	mrs	r3, BASEPRI
 800d12c:	f04f 0120 	mov.w	r1, #32
 800d130:	f381 8811 	msr	BASEPRI, r1
 800d134:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800d136:	4b53      	ldr	r3, [pc, #332]	@ (800d284 <SEGGER_SYSVIEW_Start+0x168>)
 800d138:	785b      	ldrb	r3, [r3, #1]
 800d13a:	220a      	movs	r2, #10
 800d13c:	4952      	ldr	r1, [pc, #328]	@ (800d288 <SEGGER_SYSVIEW_Start+0x16c>)
 800d13e:	4618      	mov	r0, r3
 800d140:	f7f3 f866 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800d14a:	200a      	movs	r0, #10
 800d14c:	f7ff fe2a 	bl	800cda4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d150:	f3ef 8311 	mrs	r3, BASEPRI
 800d154:	f04f 0120 	mov.w	r1, #32
 800d158:	f381 8811 	msr	BASEPRI, r1
 800d15c:	60bb      	str	r3, [r7, #8]
 800d15e:	484b      	ldr	r0, [pc, #300]	@ (800d28c <SEGGER_SYSVIEW_Start+0x170>)
 800d160:	f7ff fbf7 	bl	800c952 <_PreparePacket>
 800d164:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d16e:	4b45      	ldr	r3, [pc, #276]	@ (800d284 <SEGGER_SYSVIEW_Start+0x168>)
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d174:	e00b      	b.n	800d18e <SEGGER_SYSVIEW_Start+0x72>
 800d176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17c:	1c59      	adds	r1, r3, #1
 800d17e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d180:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d184:	b2d2      	uxtb	r2, r2
 800d186:	701a      	strb	r2, [r3, #0]
 800d188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d18a:	09db      	lsrs	r3, r3, #7
 800d18c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d190:	2b7f      	cmp	r3, #127	@ 0x7f
 800d192:	d8f0      	bhi.n	800d176 <SEGGER_SYSVIEW_Start+0x5a>
 800d194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d196:	1c5a      	adds	r2, r3, #1
 800d198:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d19a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d19c:	b2d2      	uxtb	r2, r2
 800d19e:	701a      	strb	r2, [r3, #0]
 800d1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1a8:	4b36      	ldr	r3, [pc, #216]	@ (800d284 <SEGGER_SYSVIEW_Start+0x168>)
 800d1aa:	689b      	ldr	r3, [r3, #8]
 800d1ac:	623b      	str	r3, [r7, #32]
 800d1ae:	e00b      	b.n	800d1c8 <SEGGER_SYSVIEW_Start+0xac>
 800d1b0:	6a3b      	ldr	r3, [r7, #32]
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b6:	1c59      	adds	r1, r3, #1
 800d1b8:	6279      	str	r1, [r7, #36]	@ 0x24
 800d1ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d1be:	b2d2      	uxtb	r2, r2
 800d1c0:	701a      	strb	r2, [r3, #0]
 800d1c2:	6a3b      	ldr	r3, [r7, #32]
 800d1c4:	09db      	lsrs	r3, r3, #7
 800d1c6:	623b      	str	r3, [r7, #32]
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1cc:	d8f0      	bhi.n	800d1b0 <SEGGER_SYSVIEW_Start+0x94>
 800d1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d0:	1c5a      	adds	r2, r3, #1
 800d1d2:	627a      	str	r2, [r7, #36]	@ 0x24
 800d1d4:	6a3a      	ldr	r2, [r7, #32]
 800d1d6:	b2d2      	uxtb	r2, r2
 800d1d8:	701a      	strb	r2, [r3, #0]
 800d1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	61fb      	str	r3, [r7, #28]
 800d1e2:	4b28      	ldr	r3, [pc, #160]	@ (800d284 <SEGGER_SYSVIEW_Start+0x168>)
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	61bb      	str	r3, [r7, #24]
 800d1e8:	e00b      	b.n	800d202 <SEGGER_SYSVIEW_Start+0xe6>
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	b2da      	uxtb	r2, r3
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	1c59      	adds	r1, r3, #1
 800d1f2:	61f9      	str	r1, [r7, #28]
 800d1f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d1f8:	b2d2      	uxtb	r2, r2
 800d1fa:	701a      	strb	r2, [r3, #0]
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	09db      	lsrs	r3, r3, #7
 800d200:	61bb      	str	r3, [r7, #24]
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	2b7f      	cmp	r3, #127	@ 0x7f
 800d206:	d8f0      	bhi.n	800d1ea <SEGGER_SYSVIEW_Start+0xce>
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	1c5a      	adds	r2, r3, #1
 800d20c:	61fa      	str	r2, [r7, #28]
 800d20e:	69ba      	ldr	r2, [r7, #24]
 800d210:	b2d2      	uxtb	r2, r2
 800d212:	701a      	strb	r2, [r3, #0]
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	617b      	str	r3, [r7, #20]
 800d21c:	2300      	movs	r3, #0
 800d21e:	613b      	str	r3, [r7, #16]
 800d220:	e00b      	b.n	800d23a <SEGGER_SYSVIEW_Start+0x11e>
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	b2da      	uxtb	r2, r3
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	1c59      	adds	r1, r3, #1
 800d22a:	6179      	str	r1, [r7, #20]
 800d22c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d230:	b2d2      	uxtb	r2, r2
 800d232:	701a      	strb	r2, [r3, #0]
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	09db      	lsrs	r3, r3, #7
 800d238:	613b      	str	r3, [r7, #16]
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d23e:	d8f0      	bhi.n	800d222 <SEGGER_SYSVIEW_Start+0x106>
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	617a      	str	r2, [r7, #20]
 800d246:	693a      	ldr	r2, [r7, #16]
 800d248:	b2d2      	uxtb	r2, r2
 800d24a:	701a      	strb	r2, [r3, #0]
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d250:	2218      	movs	r2, #24
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff fc6b 	bl	800cb30 <_SendPacket>
      RECORD_END();
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d260:	4b08      	ldr	r3, [pc, #32]	@ (800d284 <SEGGER_SYSVIEW_Start+0x168>)
 800d262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800d268:	4b06      	ldr	r3, [pc, #24]	@ (800d284 <SEGGER_SYSVIEW_Start+0x168>)
 800d26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d26c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800d26e:	f000 f9eb 	bl	800d648 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800d272:	f000 f9b1 	bl	800d5d8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800d276:	f000 fc83 	bl	800db80 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800d27a:	bf00      	nop
 800d27c:	3730      	adds	r7, #48	@ 0x30
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	20014900 	.word	0x20014900
 800d288:	08010230 	.word	0x08010230
 800d28c:	20014930 	.word	0x20014930

0800d290 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d296:	f3ef 8311 	mrs	r3, BASEPRI
 800d29a:	f04f 0120 	mov.w	r1, #32
 800d29e:	f381 8811 	msr	BASEPRI, r1
 800d2a2:	607b      	str	r3, [r7, #4]
 800d2a4:	480b      	ldr	r0, [pc, #44]	@ (800d2d4 <SEGGER_SYSVIEW_Stop+0x44>)
 800d2a6:	f7ff fb54 	bl	800c952 <_PreparePacket>
 800d2aa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800d2ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d2d8 <SEGGER_SYSVIEW_Stop+0x48>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d007      	beq.n	800d2c4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800d2b4:	220b      	movs	r2, #11
 800d2b6:	6839      	ldr	r1, [r7, #0]
 800d2b8:	6838      	ldr	r0, [r7, #0]
 800d2ba:	f7ff fc39 	bl	800cb30 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800d2be:	4b06      	ldr	r3, [pc, #24]	@ (800d2d8 <SEGGER_SYSVIEW_Stop+0x48>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f383 8811 	msr	BASEPRI, r3
}
 800d2ca:	bf00      	nop
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	20014930 	.word	0x20014930
 800d2d8:	20014900 	.word	0x20014900

0800d2dc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b08c      	sub	sp, #48	@ 0x30
 800d2e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d2e2:	f3ef 8311 	mrs	r3, BASEPRI
 800d2e6:	f04f 0120 	mov.w	r1, #32
 800d2ea:	f381 8811 	msr	BASEPRI, r1
 800d2ee:	60fb      	str	r3, [r7, #12]
 800d2f0:	4845      	ldr	r0, [pc, #276]	@ (800d408 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800d2f2:	f7ff fb2e 	bl	800c952 <_PreparePacket>
 800d2f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d300:	4b42      	ldr	r3, [pc, #264]	@ (800d40c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d306:	e00b      	b.n	800d320 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800d308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d30e:	1c59      	adds	r1, r3, #1
 800d310:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d312:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d316:	b2d2      	uxtb	r2, r2
 800d318:	701a      	strb	r2, [r3, #0]
 800d31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d31c:	09db      	lsrs	r3, r3, #7
 800d31e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d322:	2b7f      	cmp	r3, #127	@ 0x7f
 800d324:	d8f0      	bhi.n	800d308 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800d326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d32c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d32e:	b2d2      	uxtb	r2, r2
 800d330:	701a      	strb	r2, [r3, #0]
 800d332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d334:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	627b      	str	r3, [r7, #36]	@ 0x24
 800d33a:	4b34      	ldr	r3, [pc, #208]	@ (800d40c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	623b      	str	r3, [r7, #32]
 800d340:	e00b      	b.n	800d35a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	b2da      	uxtb	r2, r3
 800d346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d348:	1c59      	adds	r1, r3, #1
 800d34a:	6279      	str	r1, [r7, #36]	@ 0x24
 800d34c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d350:	b2d2      	uxtb	r2, r2
 800d352:	701a      	strb	r2, [r3, #0]
 800d354:	6a3b      	ldr	r3, [r7, #32]
 800d356:	09db      	lsrs	r3, r3, #7
 800d358:	623b      	str	r3, [r7, #32]
 800d35a:	6a3b      	ldr	r3, [r7, #32]
 800d35c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d35e:	d8f0      	bhi.n	800d342 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800d360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d362:	1c5a      	adds	r2, r3, #1
 800d364:	627a      	str	r2, [r7, #36]	@ 0x24
 800d366:	6a3a      	ldr	r2, [r7, #32]
 800d368:	b2d2      	uxtb	r2, r2
 800d36a:	701a      	strb	r2, [r3, #0]
 800d36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	61fb      	str	r3, [r7, #28]
 800d374:	4b25      	ldr	r3, [pc, #148]	@ (800d40c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	61bb      	str	r3, [r7, #24]
 800d37a:	e00b      	b.n	800d394 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800d37c:	69bb      	ldr	r3, [r7, #24]
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	1c59      	adds	r1, r3, #1
 800d384:	61f9      	str	r1, [r7, #28]
 800d386:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d38a:	b2d2      	uxtb	r2, r2
 800d38c:	701a      	strb	r2, [r3, #0]
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	09db      	lsrs	r3, r3, #7
 800d392:	61bb      	str	r3, [r7, #24]
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	2b7f      	cmp	r3, #127	@ 0x7f
 800d398:	d8f0      	bhi.n	800d37c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	1c5a      	adds	r2, r3, #1
 800d39e:	61fa      	str	r2, [r7, #28]
 800d3a0:	69ba      	ldr	r2, [r7, #24]
 800d3a2:	b2d2      	uxtb	r2, r2
 800d3a4:	701a      	strb	r2, [r3, #0]
 800d3a6:	69fb      	ldr	r3, [r7, #28]
 800d3a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	617b      	str	r3, [r7, #20]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	613b      	str	r3, [r7, #16]
 800d3b2:	e00b      	b.n	800d3cc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	1c59      	adds	r1, r3, #1
 800d3bc:	6179      	str	r1, [r7, #20]
 800d3be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d3c2:	b2d2      	uxtb	r2, r2
 800d3c4:	701a      	strb	r2, [r3, #0]
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	09db      	lsrs	r3, r3, #7
 800d3ca:	613b      	str	r3, [r7, #16]
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3d0:	d8f0      	bhi.n	800d3b4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	1c5a      	adds	r2, r3, #1
 800d3d6:	617a      	str	r2, [r7, #20]
 800d3d8:	693a      	ldr	r2, [r7, #16]
 800d3da:	b2d2      	uxtb	r2, r2
 800d3dc:	701a      	strb	r2, [r3, #0]
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d3e2:	2218      	movs	r2, #24
 800d3e4:	6879      	ldr	r1, [r7, #4]
 800d3e6:	68b8      	ldr	r0, [r7, #8]
 800d3e8:	f7ff fba2 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d3f2:	4b06      	ldr	r3, [pc, #24]	@ (800d40c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d002      	beq.n	800d400 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800d3fa:	4b04      	ldr	r3, [pc, #16]	@ (800d40c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3fe:	4798      	blx	r3
  }
}
 800d400:	bf00      	nop
 800d402:	3730      	adds	r7, #48	@ 0x30
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	20014930 	.word	0x20014930
 800d40c:	20014900 	.word	0x20014900

0800d410 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800d410:	b580      	push	{r7, lr}
 800d412:	b092      	sub	sp, #72	@ 0x48
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800d418:	f3ef 8311 	mrs	r3, BASEPRI
 800d41c:	f04f 0120 	mov.w	r1, #32
 800d420:	f381 8811 	msr	BASEPRI, r1
 800d424:	617b      	str	r3, [r7, #20]
 800d426:	486a      	ldr	r0, [pc, #424]	@ (800d5d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800d428:	f7ff fa93 	bl	800c952 <_PreparePacket>
 800d42c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	647b      	str	r3, [r7, #68]	@ 0x44
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	4b66      	ldr	r3, [pc, #408]	@ (800d5d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	643b      	str	r3, [r7, #64]	@ 0x40
 800d442:	e00b      	b.n	800d45c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800d444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d446:	b2da      	uxtb	r2, r3
 800d448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d44a:	1c59      	adds	r1, r3, #1
 800d44c:	6479      	str	r1, [r7, #68]	@ 0x44
 800d44e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d452:	b2d2      	uxtb	r2, r2
 800d454:	701a      	strb	r2, [r3, #0]
 800d456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d458:	09db      	lsrs	r3, r3, #7
 800d45a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d45c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d45e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d460:	d8f0      	bhi.n	800d444 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800d462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d464:	1c5a      	adds	r2, r3, #1
 800d466:	647a      	str	r2, [r7, #68]	@ 0x44
 800d468:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d46a:	b2d2      	uxtb	r2, r2
 800d46c:	701a      	strb	r2, [r3, #0]
 800d46e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d470:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d47c:	e00b      	b.n	800d496 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800d47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d480:	b2da      	uxtb	r2, r3
 800d482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d484:	1c59      	adds	r1, r3, #1
 800d486:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800d488:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d48c:	b2d2      	uxtb	r2, r2
 800d48e:	701a      	strb	r2, [r3, #0]
 800d490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d492:	09db      	lsrs	r3, r3, #7
 800d494:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d498:	2b7f      	cmp	r3, #127	@ 0x7f
 800d49a:	d8f0      	bhi.n	800d47e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800d49c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d49e:	1c5a      	adds	r2, r3, #1
 800d4a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d4a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4a4:	b2d2      	uxtb	r2, r2
 800d4a6:	701a      	strb	r2, [r3, #0]
 800d4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4aa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	2220      	movs	r2, #32
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7ff f9ff 	bl	800c8b8 <_EncodeStr>
 800d4ba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800d4bc:	2209      	movs	r2, #9
 800d4be:	68f9      	ldr	r1, [r7, #12]
 800d4c0:	6938      	ldr	r0, [r7, #16]
 800d4c2:	f7ff fb35 	bl	800cb30 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	4b40      	ldr	r3, [pc, #256]	@ (800d5d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d4d4:	691b      	ldr	r3, [r3, #16]
 800d4d6:	1ad3      	subs	r3, r2, r3
 800d4d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4da:	e00b      	b.n	800d4f4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800d4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4e2:	1c59      	adds	r1, r3, #1
 800d4e4:	6379      	str	r1, [r7, #52]	@ 0x34
 800d4e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d4ea:	b2d2      	uxtb	r2, r2
 800d4ec:	701a      	strb	r2, [r3, #0]
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f0:	09db      	lsrs	r3, r3, #7
 800d4f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d4f8:	d8f0      	bhi.n	800d4dc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800d4fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4fc:	1c5a      	adds	r2, r3, #1
 800d4fe:	637a      	str	r2, [r7, #52]	@ 0x34
 800d500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d502:	b2d2      	uxtb	r2, r2
 800d504:	701a      	strb	r2, [r3, #0]
 800d506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d508:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d514:	e00b      	b.n	800d52e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800d516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d51c:	1c59      	adds	r1, r3, #1
 800d51e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d520:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d524:	b2d2      	uxtb	r2, r2
 800d526:	701a      	strb	r2, [r3, #0]
 800d528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52a:	09db      	lsrs	r3, r3, #7
 800d52c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d530:	2b7f      	cmp	r3, #127	@ 0x7f
 800d532:	d8f0      	bhi.n	800d516 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800d534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d536:	1c5a      	adds	r2, r3, #1
 800d538:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d53a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d53c:	b2d2      	uxtb	r2, r2
 800d53e:	701a      	strb	r2, [r3, #0]
 800d540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d542:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	627b      	str	r3, [r7, #36]	@ 0x24
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	691b      	ldr	r3, [r3, #16]
 800d54c:	623b      	str	r3, [r7, #32]
 800d54e:	e00b      	b.n	800d568 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800d550:	6a3b      	ldr	r3, [r7, #32]
 800d552:	b2da      	uxtb	r2, r3
 800d554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d556:	1c59      	adds	r1, r3, #1
 800d558:	6279      	str	r1, [r7, #36]	@ 0x24
 800d55a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d55e:	b2d2      	uxtb	r2, r2
 800d560:	701a      	strb	r2, [r3, #0]
 800d562:	6a3b      	ldr	r3, [r7, #32]
 800d564:	09db      	lsrs	r3, r3, #7
 800d566:	623b      	str	r3, [r7, #32]
 800d568:	6a3b      	ldr	r3, [r7, #32]
 800d56a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d56c:	d8f0      	bhi.n	800d550 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800d56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d570:	1c5a      	adds	r2, r3, #1
 800d572:	627a      	str	r2, [r7, #36]	@ 0x24
 800d574:	6a3a      	ldr	r2, [r7, #32]
 800d576:	b2d2      	uxtb	r2, r2
 800d578:	701a      	strb	r2, [r3, #0]
 800d57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	61fb      	str	r3, [r7, #28]
 800d582:	2300      	movs	r3, #0
 800d584:	61bb      	str	r3, [r7, #24]
 800d586:	e00b      	b.n	800d5a0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	1c59      	adds	r1, r3, #1
 800d590:	61f9      	str	r1, [r7, #28]
 800d592:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d596:	b2d2      	uxtb	r2, r2
 800d598:	701a      	strb	r2, [r3, #0]
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	09db      	lsrs	r3, r3, #7
 800d59e:	61bb      	str	r3, [r7, #24]
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d5a4:	d8f0      	bhi.n	800d588 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	1c5a      	adds	r2, r3, #1
 800d5aa:	61fa      	str	r2, [r7, #28]
 800d5ac:	69ba      	ldr	r2, [r7, #24]
 800d5ae:	b2d2      	uxtb	r2, r2
 800d5b0:	701a      	strb	r2, [r3, #0]
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800d5b6:	2215      	movs	r2, #21
 800d5b8:	68f9      	ldr	r1, [r7, #12]
 800d5ba:	6938      	ldr	r0, [r7, #16]
 800d5bc:	f7ff fab8 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f383 8811 	msr	BASEPRI, r3
}
 800d5c6:	bf00      	nop
 800d5c8:	3748      	adds	r7, #72	@ 0x48
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	20014930 	.word	0x20014930
 800d5d4:	20014900 	.word	0x20014900

0800d5d8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800d5dc:	4b07      	ldr	r3, [pc, #28]	@ (800d5fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d5de:	6a1b      	ldr	r3, [r3, #32]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d008      	beq.n	800d5f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800d5e4:	4b05      	ldr	r3, [pc, #20]	@ (800d5fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d5e6:	6a1b      	ldr	r3, [r3, #32]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d003      	beq.n	800d5f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800d5ee:	4b03      	ldr	r3, [pc, #12]	@ (800d5fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d5f0:	6a1b      	ldr	r3, [r3, #32]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	4798      	blx	r3
  }
}
 800d5f6:	bf00      	nop
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20014900 	.word	0x20014900

0800d600 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d608:	f3ef 8311 	mrs	r3, BASEPRI
 800d60c:	f04f 0120 	mov.w	r1, #32
 800d610:	f381 8811 	msr	BASEPRI, r1
 800d614:	617b      	str	r3, [r7, #20]
 800d616:	480b      	ldr	r0, [pc, #44]	@ (800d644 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800d618:	f7ff f99b 	bl	800c952 <_PreparePacket>
 800d61c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d61e:	2280      	movs	r2, #128	@ 0x80
 800d620:	6879      	ldr	r1, [r7, #4]
 800d622:	6938      	ldr	r0, [r7, #16]
 800d624:	f7ff f948 	bl	800c8b8 <_EncodeStr>
 800d628:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800d62a:	220e      	movs	r2, #14
 800d62c:	68f9      	ldr	r1, [r7, #12]
 800d62e:	6938      	ldr	r0, [r7, #16]
 800d630:	f7ff fa7e 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	f383 8811 	msr	BASEPRI, r3
}
 800d63a:	bf00      	nop
 800d63c:	3718      	adds	r7, #24
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	20014930 	.word	0x20014930

0800d648 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800d648:	b590      	push	{r4, r7, lr}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800d64e:	4b15      	ldr	r3, [pc, #84]	@ (800d6a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d650:	6a1b      	ldr	r3, [r3, #32]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d01a      	beq.n	800d68c <SEGGER_SYSVIEW_RecordSystime+0x44>
 800d656:	4b13      	ldr	r3, [pc, #76]	@ (800d6a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d658:	6a1b      	ldr	r3, [r3, #32]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d015      	beq.n	800d68c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800d660:	4b10      	ldr	r3, [pc, #64]	@ (800d6a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d662:	6a1b      	ldr	r3, [r3, #32]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4798      	blx	r3
 800d668:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d66c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800d66e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d672:	f04f 0200 	mov.w	r2, #0
 800d676:	f04f 0300 	mov.w	r3, #0
 800d67a:	000a      	movs	r2, r1
 800d67c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d67e:	4613      	mov	r3, r2
 800d680:	461a      	mov	r2, r3
 800d682:	4621      	mov	r1, r4
 800d684:	200d      	movs	r0, #13
 800d686:	f7ff fbe7 	bl	800ce58 <SEGGER_SYSVIEW_RecordU32x2>
 800d68a:	e006      	b.n	800d69a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800d68c:	4b06      	ldr	r3, [pc, #24]	@ (800d6a8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4619      	mov	r1, r3
 800d692:	200c      	movs	r0, #12
 800d694:	f7ff fba4 	bl	800cde0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800d698:	bf00      	nop
 800d69a:	bf00      	nop
 800d69c:	370c      	adds	r7, #12
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd90      	pop	{r4, r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20014900 	.word	0x20014900
 800d6a8:	e0001004 	.word	0xe0001004

0800d6ac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d6b2:	f3ef 8311 	mrs	r3, BASEPRI
 800d6b6:	f04f 0120 	mov.w	r1, #32
 800d6ba:	f381 8811 	msr	BASEPRI, r1
 800d6be:	60fb      	str	r3, [r7, #12]
 800d6c0:	4819      	ldr	r0, [pc, #100]	@ (800d728 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800d6c2:	f7ff f946 	bl	800c952 <_PreparePacket>
 800d6c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800d6cc:	4b17      	ldr	r3, [pc, #92]	@ (800d72c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	617b      	str	r3, [r7, #20]
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	613b      	str	r3, [r7, #16]
 800d6de:	e00b      	b.n	800d6f8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	b2da      	uxtb	r2, r3
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	1c59      	adds	r1, r3, #1
 800d6e8:	6179      	str	r1, [r7, #20]
 800d6ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d6ee:	b2d2      	uxtb	r2, r2
 800d6f0:	701a      	strb	r2, [r3, #0]
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	09db      	lsrs	r3, r3, #7
 800d6f6:	613b      	str	r3, [r7, #16]
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800d6fc:	d8f0      	bhi.n	800d6e0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	617a      	str	r2, [r7, #20]
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	b2d2      	uxtb	r2, r2
 800d708:	701a      	strb	r2, [r3, #0]
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800d70e:	2202      	movs	r2, #2
 800d710:	6879      	ldr	r1, [r7, #4]
 800d712:	68b8      	ldr	r0, [r7, #8]
 800d714:	f7ff fa0c 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f383 8811 	msr	BASEPRI, r3
}
 800d71e:	bf00      	nop
 800d720:	3718      	adds	r7, #24
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	20014930 	.word	0x20014930
 800d72c:	e000ed04 	.word	0xe000ed04

0800d730 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d736:	f3ef 8311 	mrs	r3, BASEPRI
 800d73a:	f04f 0120 	mov.w	r1, #32
 800d73e:	f381 8811 	msr	BASEPRI, r1
 800d742:	607b      	str	r3, [r7, #4]
 800d744:	4807      	ldr	r0, [pc, #28]	@ (800d764 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800d746:	f7ff f904 	bl	800c952 <_PreparePacket>
 800d74a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800d74c:	2203      	movs	r2, #3
 800d74e:	6839      	ldr	r1, [r7, #0]
 800d750:	6838      	ldr	r0, [r7, #0]
 800d752:	f7ff f9ed 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f383 8811 	msr	BASEPRI, r3
}
 800d75c:	bf00      	nop
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	20014930 	.word	0x20014930

0800d768 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d76e:	f3ef 8311 	mrs	r3, BASEPRI
 800d772:	f04f 0120 	mov.w	r1, #32
 800d776:	f381 8811 	msr	BASEPRI, r1
 800d77a:	607b      	str	r3, [r7, #4]
 800d77c:	4807      	ldr	r0, [pc, #28]	@ (800d79c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800d77e:	f7ff f8e8 	bl	800c952 <_PreparePacket>
 800d782:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800d784:	2212      	movs	r2, #18
 800d786:	6839      	ldr	r1, [r7, #0]
 800d788:	6838      	ldr	r0, [r7, #0]
 800d78a:	f7ff f9d1 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f383 8811 	msr	BASEPRI, r3
}
 800d794:	bf00      	nop
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	20014930 	.word	0x20014930

0800d7a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d7a6:	f3ef 8311 	mrs	r3, BASEPRI
 800d7aa:	f04f 0120 	mov.w	r1, #32
 800d7ae:	f381 8811 	msr	BASEPRI, r1
 800d7b2:	607b      	str	r3, [r7, #4]
 800d7b4:	4807      	ldr	r0, [pc, #28]	@ (800d7d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800d7b6:	f7ff f8cc 	bl	800c952 <_PreparePacket>
 800d7ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800d7bc:	2211      	movs	r2, #17
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	6838      	ldr	r0, [r7, #0]
 800d7c2:	f7ff f9b5 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f383 8811 	msr	BASEPRI, r3
}
 800d7cc:	bf00      	nop
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	20014930 	.word	0x20014930

0800d7d8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b088      	sub	sp, #32
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d7e0:	f3ef 8311 	mrs	r3, BASEPRI
 800d7e4:	f04f 0120 	mov.w	r1, #32
 800d7e8:	f381 8811 	msr	BASEPRI, r1
 800d7ec:	617b      	str	r3, [r7, #20]
 800d7ee:	4819      	ldr	r0, [pc, #100]	@ (800d854 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800d7f0:	f7ff f8af 	bl	800c952 <_PreparePacket>
 800d7f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d7fa:	4b17      	ldr	r3, [pc, #92]	@ (800d858 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800d7fc:	691b      	ldr	r3, [r3, #16]
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	61fb      	str	r3, [r7, #28]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	61bb      	str	r3, [r7, #24]
 800d80c:	e00b      	b.n	800d826 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	b2da      	uxtb	r2, r3
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	1c59      	adds	r1, r3, #1
 800d816:	61f9      	str	r1, [r7, #28]
 800d818:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d81c:	b2d2      	uxtb	r2, r2
 800d81e:	701a      	strb	r2, [r3, #0]
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	09db      	lsrs	r3, r3, #7
 800d824:	61bb      	str	r3, [r7, #24]
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	2b7f      	cmp	r3, #127	@ 0x7f
 800d82a:	d8f0      	bhi.n	800d80e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	1c5a      	adds	r2, r3, #1
 800d830:	61fa      	str	r2, [r7, #28]
 800d832:	69ba      	ldr	r2, [r7, #24]
 800d834:	b2d2      	uxtb	r2, r2
 800d836:	701a      	strb	r2, [r3, #0]
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800d83c:	2208      	movs	r2, #8
 800d83e:	68f9      	ldr	r1, [r7, #12]
 800d840:	6938      	ldr	r0, [r7, #16]
 800d842:	f7ff f975 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	f383 8811 	msr	BASEPRI, r3
}
 800d84c:	bf00      	nop
 800d84e:	3720      	adds	r7, #32
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	20014930 	.word	0x20014930
 800d858:	20014900 	.word	0x20014900

0800d85c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b088      	sub	sp, #32
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d864:	f3ef 8311 	mrs	r3, BASEPRI
 800d868:	f04f 0120 	mov.w	r1, #32
 800d86c:	f381 8811 	msr	BASEPRI, r1
 800d870:	617b      	str	r3, [r7, #20]
 800d872:	4819      	ldr	r0, [pc, #100]	@ (800d8d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800d874:	f7ff f86d 	bl	800c952 <_PreparePacket>
 800d878:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d87e:	4b17      	ldr	r3, [pc, #92]	@ (800d8dc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800d880:	691b      	ldr	r3, [r3, #16]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	61fb      	str	r3, [r7, #28]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	61bb      	str	r3, [r7, #24]
 800d890:	e00b      	b.n	800d8aa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	b2da      	uxtb	r2, r3
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	1c59      	adds	r1, r3, #1
 800d89a:	61f9      	str	r1, [r7, #28]
 800d89c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d8a0:	b2d2      	uxtb	r2, r2
 800d8a2:	701a      	strb	r2, [r3, #0]
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	09db      	lsrs	r3, r3, #7
 800d8a8:	61bb      	str	r3, [r7, #24]
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	2b7f      	cmp	r3, #127	@ 0x7f
 800d8ae:	d8f0      	bhi.n	800d892 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	1c5a      	adds	r2, r3, #1
 800d8b4:	61fa      	str	r2, [r7, #28]
 800d8b6:	69ba      	ldr	r2, [r7, #24]
 800d8b8:	b2d2      	uxtb	r2, r2
 800d8ba:	701a      	strb	r2, [r3, #0]
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d8c0:	2204      	movs	r2, #4
 800d8c2:	68f9      	ldr	r1, [r7, #12]
 800d8c4:	6938      	ldr	r0, [r7, #16]
 800d8c6:	f7ff f933 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	f383 8811 	msr	BASEPRI, r3
}
 800d8d0:	bf00      	nop
 800d8d2:	3720      	adds	r7, #32
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	20014930 	.word	0x20014930
 800d8dc:	20014900 	.word	0x20014900

0800d8e0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d8e8:	f3ef 8311 	mrs	r3, BASEPRI
 800d8ec:	f04f 0120 	mov.w	r1, #32
 800d8f0:	f381 8811 	msr	BASEPRI, r1
 800d8f4:	617b      	str	r3, [r7, #20]
 800d8f6:	4819      	ldr	r0, [pc, #100]	@ (800d95c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d8f8:	f7ff f82b 	bl	800c952 <_PreparePacket>
 800d8fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d902:	4b17      	ldr	r3, [pc, #92]	@ (800d960 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d904:	691b      	ldr	r3, [r3, #16]
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	1ad3      	subs	r3, r2, r3
 800d90a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	61fb      	str	r3, [r7, #28]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	61bb      	str	r3, [r7, #24]
 800d914:	e00b      	b.n	800d92e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	1c59      	adds	r1, r3, #1
 800d91e:	61f9      	str	r1, [r7, #28]
 800d920:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d924:	b2d2      	uxtb	r2, r2
 800d926:	701a      	strb	r2, [r3, #0]
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	09db      	lsrs	r3, r3, #7
 800d92c:	61bb      	str	r3, [r7, #24]
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	2b7f      	cmp	r3, #127	@ 0x7f
 800d932:	d8f0      	bhi.n	800d916 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	1c5a      	adds	r2, r3, #1
 800d938:	61fa      	str	r2, [r7, #28]
 800d93a:	69ba      	ldr	r2, [r7, #24]
 800d93c:	b2d2      	uxtb	r2, r2
 800d93e:	701a      	strb	r2, [r3, #0]
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800d944:	2206      	movs	r2, #6
 800d946:	68f9      	ldr	r1, [r7, #12]
 800d948:	6938      	ldr	r0, [r7, #16]
 800d94a:	f7ff f8f1 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f383 8811 	msr	BASEPRI, r3
}
 800d954:	bf00      	nop
 800d956:	3720      	adds	r7, #32
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	20014930 	.word	0x20014930
 800d960:	20014900 	.word	0x20014900

0800d964 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800d964:	b580      	push	{r7, lr}
 800d966:	b08a      	sub	sp, #40	@ 0x28
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d96e:	f3ef 8311 	mrs	r3, BASEPRI
 800d972:	f04f 0120 	mov.w	r1, #32
 800d976:	f381 8811 	msr	BASEPRI, r1
 800d97a:	617b      	str	r3, [r7, #20]
 800d97c:	4827      	ldr	r0, [pc, #156]	@ (800da1c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800d97e:	f7fe ffe8 	bl	800c952 <_PreparePacket>
 800d982:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d988:	4b25      	ldr	r3, [pc, #148]	@ (800da20 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800d98a:	691b      	ldr	r3, [r3, #16]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	627b      	str	r3, [r7, #36]	@ 0x24
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	623b      	str	r3, [r7, #32]
 800d99a:	e00b      	b.n	800d9b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800d99c:	6a3b      	ldr	r3, [r7, #32]
 800d99e:	b2da      	uxtb	r2, r3
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a2:	1c59      	adds	r1, r3, #1
 800d9a4:	6279      	str	r1, [r7, #36]	@ 0x24
 800d9a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d9aa:	b2d2      	uxtb	r2, r2
 800d9ac:	701a      	strb	r2, [r3, #0]
 800d9ae:	6a3b      	ldr	r3, [r7, #32]
 800d9b0:	09db      	lsrs	r3, r3, #7
 800d9b2:	623b      	str	r3, [r7, #32]
 800d9b4:	6a3b      	ldr	r3, [r7, #32]
 800d9b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d9b8:	d8f0      	bhi.n	800d99c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800d9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9bc:	1c5a      	adds	r2, r3, #1
 800d9be:	627a      	str	r2, [r7, #36]	@ 0x24
 800d9c0:	6a3a      	ldr	r2, [r7, #32]
 800d9c2:	b2d2      	uxtb	r2, r2
 800d9c4:	701a      	strb	r2, [r3, #0]
 800d9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	61fb      	str	r3, [r7, #28]
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	61bb      	str	r3, [r7, #24]
 800d9d2:	e00b      	b.n	800d9ec <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	1c59      	adds	r1, r3, #1
 800d9dc:	61f9      	str	r1, [r7, #28]
 800d9de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d9e2:	b2d2      	uxtb	r2, r2
 800d9e4:	701a      	strb	r2, [r3, #0]
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	09db      	lsrs	r3, r3, #7
 800d9ea:	61bb      	str	r3, [r7, #24]
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800d9f0:	d8f0      	bhi.n	800d9d4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	61fa      	str	r2, [r7, #28]
 800d9f8:	69ba      	ldr	r2, [r7, #24]
 800d9fa:	b2d2      	uxtb	r2, r2
 800d9fc:	701a      	strb	r2, [r3, #0]
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800da02:	2207      	movs	r2, #7
 800da04:	68f9      	ldr	r1, [r7, #12]
 800da06:	6938      	ldr	r0, [r7, #16]
 800da08:	f7ff f892 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	f383 8811 	msr	BASEPRI, r3
}
 800da12:	bf00      	nop
 800da14:	3728      	adds	r7, #40	@ 0x28
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	20014930 	.word	0x20014930
 800da20:	20014900 	.word	0x20014900

0800da24 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800da2c:	4b04      	ldr	r3, [pc, #16]	@ (800da40 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800da2e:	691b      	ldr	r3, [r3, #16]
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	1ad3      	subs	r3, r2, r3
}
 800da34:	4618      	mov	r0, r3
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr
 800da40:	20014900 	.word	0x20014900

0800da44 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800da44:	b580      	push	{r7, lr}
 800da46:	b08c      	sub	sp, #48	@ 0x30
 800da48:	af00      	add	r7, sp, #0
 800da4a:	4603      	mov	r3, r0
 800da4c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800da4e:	4b3b      	ldr	r3, [pc, #236]	@ (800db3c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d06d      	beq.n	800db32 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800da56:	4b39      	ldr	r3, [pc, #228]	@ (800db3c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800da5c:	2300      	movs	r3, #0
 800da5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da60:	e008      	b.n	800da74 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800da62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800da68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d007      	beq.n	800da7e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800da6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da70:	3301      	adds	r3, #1
 800da72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da74:	79fb      	ldrb	r3, [r7, #7]
 800da76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da78:	429a      	cmp	r2, r3
 800da7a:	d3f2      	bcc.n	800da62 <SEGGER_SYSVIEW_SendModule+0x1e>
 800da7c:	e000      	b.n	800da80 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800da7e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800da80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da82:	2b00      	cmp	r3, #0
 800da84:	d055      	beq.n	800db32 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800da86:	f3ef 8311 	mrs	r3, BASEPRI
 800da8a:	f04f 0120 	mov.w	r1, #32
 800da8e:	f381 8811 	msr	BASEPRI, r1
 800da92:	617b      	str	r3, [r7, #20]
 800da94:	482a      	ldr	r0, [pc, #168]	@ (800db40 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800da96:	f7fe ff5c 	bl	800c952 <_PreparePacket>
 800da9a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	627b      	str	r3, [r7, #36]	@ 0x24
 800daa4:	79fb      	ldrb	r3, [r7, #7]
 800daa6:	623b      	str	r3, [r7, #32]
 800daa8:	e00b      	b.n	800dac2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800daaa:	6a3b      	ldr	r3, [r7, #32]
 800daac:	b2da      	uxtb	r2, r3
 800daae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab0:	1c59      	adds	r1, r3, #1
 800dab2:	6279      	str	r1, [r7, #36]	@ 0x24
 800dab4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dab8:	b2d2      	uxtb	r2, r2
 800daba:	701a      	strb	r2, [r3, #0]
 800dabc:	6a3b      	ldr	r3, [r7, #32]
 800dabe:	09db      	lsrs	r3, r3, #7
 800dac0:	623b      	str	r3, [r7, #32]
 800dac2:	6a3b      	ldr	r3, [r7, #32]
 800dac4:	2b7f      	cmp	r3, #127	@ 0x7f
 800dac6:	d8f0      	bhi.n	800daaa <SEGGER_SYSVIEW_SendModule+0x66>
 800dac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daca:	1c5a      	adds	r2, r3, #1
 800dacc:	627a      	str	r2, [r7, #36]	@ 0x24
 800dace:	6a3a      	ldr	r2, [r7, #32]
 800dad0:	b2d2      	uxtb	r2, r2
 800dad2:	701a      	strb	r2, [r3, #0]
 800dad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dad6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	61fb      	str	r3, [r7, #28]
 800dadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	61bb      	str	r3, [r7, #24]
 800dae2:	e00b      	b.n	800dafc <SEGGER_SYSVIEW_SendModule+0xb8>
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	1c59      	adds	r1, r3, #1
 800daec:	61f9      	str	r1, [r7, #28]
 800daee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800daf2:	b2d2      	uxtb	r2, r2
 800daf4:	701a      	strb	r2, [r3, #0]
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	09db      	lsrs	r3, r3, #7
 800dafa:	61bb      	str	r3, [r7, #24]
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	2b7f      	cmp	r3, #127	@ 0x7f
 800db00:	d8f0      	bhi.n	800dae4 <SEGGER_SYSVIEW_SendModule+0xa0>
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	1c5a      	adds	r2, r3, #1
 800db06:	61fa      	str	r2, [r7, #28]
 800db08:	69ba      	ldr	r2, [r7, #24]
 800db0a:	b2d2      	uxtb	r2, r2
 800db0c:	701a      	strb	r2, [r3, #0]
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800db12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2280      	movs	r2, #128	@ 0x80
 800db18:	4619      	mov	r1, r3
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f7fe fecc 	bl	800c8b8 <_EncodeStr>
 800db20:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800db22:	2216      	movs	r2, #22
 800db24:	68f9      	ldr	r1, [r7, #12]
 800db26:	6938      	ldr	r0, [r7, #16]
 800db28:	f7ff f802 	bl	800cb30 <_SendPacket>
      RECORD_END();
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800db32:	bf00      	nop
 800db34:	3730      	adds	r7, #48	@ 0x30
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	20014928 	.word	0x20014928
 800db40:	20014930 	.word	0x20014930

0800db44 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800db4a:	4b0c      	ldr	r3, [pc, #48]	@ (800db7c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00f      	beq.n	800db72 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800db52:	4b0a      	ldr	r3, [pc, #40]	@ (800db7c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	68db      	ldr	r3, [r3, #12]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d1f2      	bne.n	800db58 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800db72:	bf00      	nop
 800db74:	3708      	adds	r7, #8
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	20014928 	.word	0x20014928

0800db80 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800db86:	f3ef 8311 	mrs	r3, BASEPRI
 800db8a:	f04f 0120 	mov.w	r1, #32
 800db8e:	f381 8811 	msr	BASEPRI, r1
 800db92:	60fb      	str	r3, [r7, #12]
 800db94:	4817      	ldr	r0, [pc, #92]	@ (800dbf4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800db96:	f7fe fedc 	bl	800c952 <_PreparePacket>
 800db9a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	617b      	str	r3, [r7, #20]
 800dba4:	4b14      	ldr	r3, [pc, #80]	@ (800dbf8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	613b      	str	r3, [r7, #16]
 800dbaa:	e00b      	b.n	800dbc4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	1c59      	adds	r1, r3, #1
 800dbb4:	6179      	str	r1, [r7, #20]
 800dbb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dbba:	b2d2      	uxtb	r2, r2
 800dbbc:	701a      	strb	r2, [r3, #0]
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	09db      	lsrs	r3, r3, #7
 800dbc2:	613b      	str	r3, [r7, #16]
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	2b7f      	cmp	r3, #127	@ 0x7f
 800dbc8:	d8f0      	bhi.n	800dbac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	1c5a      	adds	r2, r3, #1
 800dbce:	617a      	str	r2, [r7, #20]
 800dbd0:	693a      	ldr	r2, [r7, #16]
 800dbd2:	b2d2      	uxtb	r2, r2
 800dbd4:	701a      	strb	r2, [r3, #0]
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800dbda:	221b      	movs	r2, #27
 800dbdc:	6879      	ldr	r1, [r7, #4]
 800dbde:	68b8      	ldr	r0, [r7, #8]
 800dbe0:	f7fe ffa6 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f383 8811 	msr	BASEPRI, r3
}
 800dbea:	bf00      	nop
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20014930 	.word	0x20014930
 800dbf8:	2001492c 	.word	0x2001492c

0800dbfc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b08a      	sub	sp, #40	@ 0x28
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800dc04:	f3ef 8311 	mrs	r3, BASEPRI
 800dc08:	f04f 0120 	mov.w	r1, #32
 800dc0c:	f381 8811 	msr	BASEPRI, r1
 800dc10:	617b      	str	r3, [r7, #20]
 800dc12:	4827      	ldr	r0, [pc, #156]	@ (800dcb0 <SEGGER_SYSVIEW_Warn+0xb4>)
 800dc14:	f7fe fe9d 	bl	800c952 <_PreparePacket>
 800dc18:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800dc1a:	2280      	movs	r2, #128	@ 0x80
 800dc1c:	6879      	ldr	r1, [r7, #4]
 800dc1e:	6938      	ldr	r0, [r7, #16]
 800dc20:	f7fe fe4a 	bl	800c8b8 <_EncodeStr>
 800dc24:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	623b      	str	r3, [r7, #32]
 800dc2e:	e00b      	b.n	800dc48 <SEGGER_SYSVIEW_Warn+0x4c>
 800dc30:	6a3b      	ldr	r3, [r7, #32]
 800dc32:	b2da      	uxtb	r2, r3
 800dc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc36:	1c59      	adds	r1, r3, #1
 800dc38:	6279      	str	r1, [r7, #36]	@ 0x24
 800dc3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dc3e:	b2d2      	uxtb	r2, r2
 800dc40:	701a      	strb	r2, [r3, #0]
 800dc42:	6a3b      	ldr	r3, [r7, #32]
 800dc44:	09db      	lsrs	r3, r3, #7
 800dc46:	623b      	str	r3, [r7, #32]
 800dc48:	6a3b      	ldr	r3, [r7, #32]
 800dc4a:	2b7f      	cmp	r3, #127	@ 0x7f
 800dc4c:	d8f0      	bhi.n	800dc30 <SEGGER_SYSVIEW_Warn+0x34>
 800dc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc50:	1c5a      	adds	r2, r3, #1
 800dc52:	627a      	str	r2, [r7, #36]	@ 0x24
 800dc54:	6a3a      	ldr	r2, [r7, #32]
 800dc56:	b2d2      	uxtb	r2, r2
 800dc58:	701a      	strb	r2, [r3, #0]
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	61fb      	str	r3, [r7, #28]
 800dc62:	2300      	movs	r3, #0
 800dc64:	61bb      	str	r3, [r7, #24]
 800dc66:	e00b      	b.n	800dc80 <SEGGER_SYSVIEW_Warn+0x84>
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	1c59      	adds	r1, r3, #1
 800dc70:	61f9      	str	r1, [r7, #28]
 800dc72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dc76:	b2d2      	uxtb	r2, r2
 800dc78:	701a      	strb	r2, [r3, #0]
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	09db      	lsrs	r3, r3, #7
 800dc7e:	61bb      	str	r3, [r7, #24]
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	2b7f      	cmp	r3, #127	@ 0x7f
 800dc84:	d8f0      	bhi.n	800dc68 <SEGGER_SYSVIEW_Warn+0x6c>
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	1c5a      	adds	r2, r3, #1
 800dc8a:	61fa      	str	r2, [r7, #28]
 800dc8c:	69ba      	ldr	r2, [r7, #24]
 800dc8e:	b2d2      	uxtb	r2, r2
 800dc90:	701a      	strb	r2, [r3, #0]
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800dc96:	221a      	movs	r2, #26
 800dc98:	68f9      	ldr	r1, [r7, #12]
 800dc9a:	6938      	ldr	r0, [r7, #16]
 800dc9c:	f7fe ff48 	bl	800cb30 <_SendPacket>
  RECORD_END();
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	f383 8811 	msr	BASEPRI, r3
}
 800dca6:	bf00      	nop
 800dca8:	3728      	adds	r7, #40	@ 0x28
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	20014930 	.word	0x20014930

0800dcb4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800dcc2:	683a      	ldr	r2, [r7, #0]
 800dcc4:	6879      	ldr	r1, [r7, #4]
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	f7fe fcdc 	bl	800c684 <SEGGER_RTT_Write>
  return len;
 800dccc:	683b      	ldr	r3, [r7, #0]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
	...

0800dcd8 <std>:
 800dcd8:	2300      	movs	r3, #0
 800dcda:	b510      	push	{r4, lr}
 800dcdc:	4604      	mov	r4, r0
 800dcde:	e9c0 3300 	strd	r3, r3, [r0]
 800dce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dce6:	6083      	str	r3, [r0, #8]
 800dce8:	8181      	strh	r1, [r0, #12]
 800dcea:	6643      	str	r3, [r0, #100]	@ 0x64
 800dcec:	81c2      	strh	r2, [r0, #14]
 800dcee:	6183      	str	r3, [r0, #24]
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	2208      	movs	r2, #8
 800dcf4:	305c      	adds	r0, #92	@ 0x5c
 800dcf6:	f000 fa09 	bl	800e10c <memset>
 800dcfa:	4b0d      	ldr	r3, [pc, #52]	@ (800dd30 <std+0x58>)
 800dcfc:	6263      	str	r3, [r4, #36]	@ 0x24
 800dcfe:	4b0d      	ldr	r3, [pc, #52]	@ (800dd34 <std+0x5c>)
 800dd00:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dd02:	4b0d      	ldr	r3, [pc, #52]	@ (800dd38 <std+0x60>)
 800dd04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dd06:	4b0d      	ldr	r3, [pc, #52]	@ (800dd3c <std+0x64>)
 800dd08:	6323      	str	r3, [r4, #48]	@ 0x30
 800dd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd40 <std+0x68>)
 800dd0c:	6224      	str	r4, [r4, #32]
 800dd0e:	429c      	cmp	r4, r3
 800dd10:	d006      	beq.n	800dd20 <std+0x48>
 800dd12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dd16:	4294      	cmp	r4, r2
 800dd18:	d002      	beq.n	800dd20 <std+0x48>
 800dd1a:	33d0      	adds	r3, #208	@ 0xd0
 800dd1c:	429c      	cmp	r4, r3
 800dd1e:	d105      	bne.n	800dd2c <std+0x54>
 800dd20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd28:	f000 ba56 	b.w	800e1d8 <__retarget_lock_init_recursive>
 800dd2c:	bd10      	pop	{r4, pc}
 800dd2e:	bf00      	nop
 800dd30:	0800df3d 	.word	0x0800df3d
 800dd34:	0800df5f 	.word	0x0800df5f
 800dd38:	0800df97 	.word	0x0800df97
 800dd3c:	0800dfbb 	.word	0x0800dfbb
 800dd40:	20014a14 	.word	0x20014a14

0800dd44 <stdio_exit_handler>:
 800dd44:	4a02      	ldr	r2, [pc, #8]	@ (800dd50 <stdio_exit_handler+0xc>)
 800dd46:	4903      	ldr	r1, [pc, #12]	@ (800dd54 <stdio_exit_handler+0x10>)
 800dd48:	4803      	ldr	r0, [pc, #12]	@ (800dd58 <stdio_exit_handler+0x14>)
 800dd4a:	f000 b869 	b.w	800de20 <_fwalk_sglue>
 800dd4e:	bf00      	nop
 800dd50:	20000068 	.word	0x20000068
 800dd54:	0800ea95 	.word	0x0800ea95
 800dd58:	20000078 	.word	0x20000078

0800dd5c <cleanup_stdio>:
 800dd5c:	6841      	ldr	r1, [r0, #4]
 800dd5e:	4b0c      	ldr	r3, [pc, #48]	@ (800dd90 <cleanup_stdio+0x34>)
 800dd60:	4299      	cmp	r1, r3
 800dd62:	b510      	push	{r4, lr}
 800dd64:	4604      	mov	r4, r0
 800dd66:	d001      	beq.n	800dd6c <cleanup_stdio+0x10>
 800dd68:	f000 fe94 	bl	800ea94 <_fflush_r>
 800dd6c:	68a1      	ldr	r1, [r4, #8]
 800dd6e:	4b09      	ldr	r3, [pc, #36]	@ (800dd94 <cleanup_stdio+0x38>)
 800dd70:	4299      	cmp	r1, r3
 800dd72:	d002      	beq.n	800dd7a <cleanup_stdio+0x1e>
 800dd74:	4620      	mov	r0, r4
 800dd76:	f000 fe8d 	bl	800ea94 <_fflush_r>
 800dd7a:	68e1      	ldr	r1, [r4, #12]
 800dd7c:	4b06      	ldr	r3, [pc, #24]	@ (800dd98 <cleanup_stdio+0x3c>)
 800dd7e:	4299      	cmp	r1, r3
 800dd80:	d004      	beq.n	800dd8c <cleanup_stdio+0x30>
 800dd82:	4620      	mov	r0, r4
 800dd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd88:	f000 be84 	b.w	800ea94 <_fflush_r>
 800dd8c:	bd10      	pop	{r4, pc}
 800dd8e:	bf00      	nop
 800dd90:	20014a14 	.word	0x20014a14
 800dd94:	20014a7c 	.word	0x20014a7c
 800dd98:	20014ae4 	.word	0x20014ae4

0800dd9c <global_stdio_init.part.0>:
 800dd9c:	b510      	push	{r4, lr}
 800dd9e:	4b0b      	ldr	r3, [pc, #44]	@ (800ddcc <global_stdio_init.part.0+0x30>)
 800dda0:	4c0b      	ldr	r4, [pc, #44]	@ (800ddd0 <global_stdio_init.part.0+0x34>)
 800dda2:	4a0c      	ldr	r2, [pc, #48]	@ (800ddd4 <global_stdio_init.part.0+0x38>)
 800dda4:	601a      	str	r2, [r3, #0]
 800dda6:	4620      	mov	r0, r4
 800dda8:	2200      	movs	r2, #0
 800ddaa:	2104      	movs	r1, #4
 800ddac:	f7ff ff94 	bl	800dcd8 <std>
 800ddb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	2109      	movs	r1, #9
 800ddb8:	f7ff ff8e 	bl	800dcd8 <std>
 800ddbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ddc0:	2202      	movs	r2, #2
 800ddc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddc6:	2112      	movs	r1, #18
 800ddc8:	f7ff bf86 	b.w	800dcd8 <std>
 800ddcc:	20014b4c 	.word	0x20014b4c
 800ddd0:	20014a14 	.word	0x20014a14
 800ddd4:	0800dd45 	.word	0x0800dd45

0800ddd8 <__sfp_lock_acquire>:
 800ddd8:	4801      	ldr	r0, [pc, #4]	@ (800dde0 <__sfp_lock_acquire+0x8>)
 800ddda:	f000 b9fe 	b.w	800e1da <__retarget_lock_acquire_recursive>
 800ddde:	bf00      	nop
 800dde0:	20014b55 	.word	0x20014b55

0800dde4 <__sfp_lock_release>:
 800dde4:	4801      	ldr	r0, [pc, #4]	@ (800ddec <__sfp_lock_release+0x8>)
 800dde6:	f000 b9f9 	b.w	800e1dc <__retarget_lock_release_recursive>
 800ddea:	bf00      	nop
 800ddec:	20014b55 	.word	0x20014b55

0800ddf0 <__sinit>:
 800ddf0:	b510      	push	{r4, lr}
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	f7ff fff0 	bl	800ddd8 <__sfp_lock_acquire>
 800ddf8:	6a23      	ldr	r3, [r4, #32]
 800ddfa:	b11b      	cbz	r3, 800de04 <__sinit+0x14>
 800ddfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de00:	f7ff bff0 	b.w	800dde4 <__sfp_lock_release>
 800de04:	4b04      	ldr	r3, [pc, #16]	@ (800de18 <__sinit+0x28>)
 800de06:	6223      	str	r3, [r4, #32]
 800de08:	4b04      	ldr	r3, [pc, #16]	@ (800de1c <__sinit+0x2c>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1f5      	bne.n	800ddfc <__sinit+0xc>
 800de10:	f7ff ffc4 	bl	800dd9c <global_stdio_init.part.0>
 800de14:	e7f2      	b.n	800ddfc <__sinit+0xc>
 800de16:	bf00      	nop
 800de18:	0800dd5d 	.word	0x0800dd5d
 800de1c:	20014b4c 	.word	0x20014b4c

0800de20 <_fwalk_sglue>:
 800de20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de24:	4607      	mov	r7, r0
 800de26:	4688      	mov	r8, r1
 800de28:	4614      	mov	r4, r2
 800de2a:	2600      	movs	r6, #0
 800de2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de30:	f1b9 0901 	subs.w	r9, r9, #1
 800de34:	d505      	bpl.n	800de42 <_fwalk_sglue+0x22>
 800de36:	6824      	ldr	r4, [r4, #0]
 800de38:	2c00      	cmp	r4, #0
 800de3a:	d1f7      	bne.n	800de2c <_fwalk_sglue+0xc>
 800de3c:	4630      	mov	r0, r6
 800de3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de42:	89ab      	ldrh	r3, [r5, #12]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d907      	bls.n	800de58 <_fwalk_sglue+0x38>
 800de48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de4c:	3301      	adds	r3, #1
 800de4e:	d003      	beq.n	800de58 <_fwalk_sglue+0x38>
 800de50:	4629      	mov	r1, r5
 800de52:	4638      	mov	r0, r7
 800de54:	47c0      	blx	r8
 800de56:	4306      	orrs	r6, r0
 800de58:	3568      	adds	r5, #104	@ 0x68
 800de5a:	e7e9      	b.n	800de30 <_fwalk_sglue+0x10>

0800de5c <iprintf>:
 800de5c:	b40f      	push	{r0, r1, r2, r3}
 800de5e:	b507      	push	{r0, r1, r2, lr}
 800de60:	4906      	ldr	r1, [pc, #24]	@ (800de7c <iprintf+0x20>)
 800de62:	ab04      	add	r3, sp, #16
 800de64:	6808      	ldr	r0, [r1, #0]
 800de66:	f853 2b04 	ldr.w	r2, [r3], #4
 800de6a:	6881      	ldr	r1, [r0, #8]
 800de6c:	9301      	str	r3, [sp, #4]
 800de6e:	f000 fae7 	bl	800e440 <_vfiprintf_r>
 800de72:	b003      	add	sp, #12
 800de74:	f85d eb04 	ldr.w	lr, [sp], #4
 800de78:	b004      	add	sp, #16
 800de7a:	4770      	bx	lr
 800de7c:	20000074 	.word	0x20000074

0800de80 <_puts_r>:
 800de80:	6a03      	ldr	r3, [r0, #32]
 800de82:	b570      	push	{r4, r5, r6, lr}
 800de84:	6884      	ldr	r4, [r0, #8]
 800de86:	4605      	mov	r5, r0
 800de88:	460e      	mov	r6, r1
 800de8a:	b90b      	cbnz	r3, 800de90 <_puts_r+0x10>
 800de8c:	f7ff ffb0 	bl	800ddf0 <__sinit>
 800de90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de92:	07db      	lsls	r3, r3, #31
 800de94:	d405      	bmi.n	800dea2 <_puts_r+0x22>
 800de96:	89a3      	ldrh	r3, [r4, #12]
 800de98:	0598      	lsls	r0, r3, #22
 800de9a:	d402      	bmi.n	800dea2 <_puts_r+0x22>
 800de9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de9e:	f000 f99c 	bl	800e1da <__retarget_lock_acquire_recursive>
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	0719      	lsls	r1, r3, #28
 800dea6:	d502      	bpl.n	800deae <_puts_r+0x2e>
 800dea8:	6923      	ldr	r3, [r4, #16]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d135      	bne.n	800df1a <_puts_r+0x9a>
 800deae:	4621      	mov	r1, r4
 800deb0:	4628      	mov	r0, r5
 800deb2:	f000 f8c5 	bl	800e040 <__swsetup_r>
 800deb6:	b380      	cbz	r0, 800df1a <_puts_r+0x9a>
 800deb8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800debc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800debe:	07da      	lsls	r2, r3, #31
 800dec0:	d405      	bmi.n	800dece <_puts_r+0x4e>
 800dec2:	89a3      	ldrh	r3, [r4, #12]
 800dec4:	059b      	lsls	r3, r3, #22
 800dec6:	d402      	bmi.n	800dece <_puts_r+0x4e>
 800dec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800deca:	f000 f987 	bl	800e1dc <__retarget_lock_release_recursive>
 800dece:	4628      	mov	r0, r5
 800ded0:	bd70      	pop	{r4, r5, r6, pc}
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	da04      	bge.n	800dee0 <_puts_r+0x60>
 800ded6:	69a2      	ldr	r2, [r4, #24]
 800ded8:	429a      	cmp	r2, r3
 800deda:	dc17      	bgt.n	800df0c <_puts_r+0x8c>
 800dedc:	290a      	cmp	r1, #10
 800dede:	d015      	beq.n	800df0c <_puts_r+0x8c>
 800dee0:	6823      	ldr	r3, [r4, #0]
 800dee2:	1c5a      	adds	r2, r3, #1
 800dee4:	6022      	str	r2, [r4, #0]
 800dee6:	7019      	strb	r1, [r3, #0]
 800dee8:	68a3      	ldr	r3, [r4, #8]
 800deea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800deee:	3b01      	subs	r3, #1
 800def0:	60a3      	str	r3, [r4, #8]
 800def2:	2900      	cmp	r1, #0
 800def4:	d1ed      	bne.n	800ded2 <_puts_r+0x52>
 800def6:	2b00      	cmp	r3, #0
 800def8:	da11      	bge.n	800df1e <_puts_r+0x9e>
 800defa:	4622      	mov	r2, r4
 800defc:	210a      	movs	r1, #10
 800defe:	4628      	mov	r0, r5
 800df00:	f000 f85f 	bl	800dfc2 <__swbuf_r>
 800df04:	3001      	adds	r0, #1
 800df06:	d0d7      	beq.n	800deb8 <_puts_r+0x38>
 800df08:	250a      	movs	r5, #10
 800df0a:	e7d7      	b.n	800debc <_puts_r+0x3c>
 800df0c:	4622      	mov	r2, r4
 800df0e:	4628      	mov	r0, r5
 800df10:	f000 f857 	bl	800dfc2 <__swbuf_r>
 800df14:	3001      	adds	r0, #1
 800df16:	d1e7      	bne.n	800dee8 <_puts_r+0x68>
 800df18:	e7ce      	b.n	800deb8 <_puts_r+0x38>
 800df1a:	3e01      	subs	r6, #1
 800df1c:	e7e4      	b.n	800dee8 <_puts_r+0x68>
 800df1e:	6823      	ldr	r3, [r4, #0]
 800df20:	1c5a      	adds	r2, r3, #1
 800df22:	6022      	str	r2, [r4, #0]
 800df24:	220a      	movs	r2, #10
 800df26:	701a      	strb	r2, [r3, #0]
 800df28:	e7ee      	b.n	800df08 <_puts_r+0x88>
	...

0800df2c <puts>:
 800df2c:	4b02      	ldr	r3, [pc, #8]	@ (800df38 <puts+0xc>)
 800df2e:	4601      	mov	r1, r0
 800df30:	6818      	ldr	r0, [r3, #0]
 800df32:	f7ff bfa5 	b.w	800de80 <_puts_r>
 800df36:	bf00      	nop
 800df38:	20000074 	.word	0x20000074

0800df3c <__sread>:
 800df3c:	b510      	push	{r4, lr}
 800df3e:	460c      	mov	r4, r1
 800df40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df44:	f000 f90c 	bl	800e160 <_read_r>
 800df48:	2800      	cmp	r0, #0
 800df4a:	bfab      	itete	ge
 800df4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800df4e:	89a3      	ldrhlt	r3, [r4, #12]
 800df50:	181b      	addge	r3, r3, r0
 800df52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800df56:	bfac      	ite	ge
 800df58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800df5a:	81a3      	strhlt	r3, [r4, #12]
 800df5c:	bd10      	pop	{r4, pc}

0800df5e <__swrite>:
 800df5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df62:	461f      	mov	r7, r3
 800df64:	898b      	ldrh	r3, [r1, #12]
 800df66:	05db      	lsls	r3, r3, #23
 800df68:	4605      	mov	r5, r0
 800df6a:	460c      	mov	r4, r1
 800df6c:	4616      	mov	r6, r2
 800df6e:	d505      	bpl.n	800df7c <__swrite+0x1e>
 800df70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df74:	2302      	movs	r3, #2
 800df76:	2200      	movs	r2, #0
 800df78:	f000 f8e0 	bl	800e13c <_lseek_r>
 800df7c:	89a3      	ldrh	r3, [r4, #12]
 800df7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df86:	81a3      	strh	r3, [r4, #12]
 800df88:	4632      	mov	r2, r6
 800df8a:	463b      	mov	r3, r7
 800df8c:	4628      	mov	r0, r5
 800df8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df92:	f7ff be8f 	b.w	800dcb4 <_write_r>

0800df96 <__sseek>:
 800df96:	b510      	push	{r4, lr}
 800df98:	460c      	mov	r4, r1
 800df9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df9e:	f000 f8cd 	bl	800e13c <_lseek_r>
 800dfa2:	1c43      	adds	r3, r0, #1
 800dfa4:	89a3      	ldrh	r3, [r4, #12]
 800dfa6:	bf15      	itete	ne
 800dfa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dfaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dfae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dfb2:	81a3      	strheq	r3, [r4, #12]
 800dfb4:	bf18      	it	ne
 800dfb6:	81a3      	strhne	r3, [r4, #12]
 800dfb8:	bd10      	pop	{r4, pc}

0800dfba <__sclose>:
 800dfba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfbe:	f000 b8ad 	b.w	800e11c <_close_r>

0800dfc2 <__swbuf_r>:
 800dfc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc4:	460e      	mov	r6, r1
 800dfc6:	4614      	mov	r4, r2
 800dfc8:	4605      	mov	r5, r0
 800dfca:	b118      	cbz	r0, 800dfd4 <__swbuf_r+0x12>
 800dfcc:	6a03      	ldr	r3, [r0, #32]
 800dfce:	b90b      	cbnz	r3, 800dfd4 <__swbuf_r+0x12>
 800dfd0:	f7ff ff0e 	bl	800ddf0 <__sinit>
 800dfd4:	69a3      	ldr	r3, [r4, #24]
 800dfd6:	60a3      	str	r3, [r4, #8]
 800dfd8:	89a3      	ldrh	r3, [r4, #12]
 800dfda:	071a      	lsls	r2, r3, #28
 800dfdc:	d501      	bpl.n	800dfe2 <__swbuf_r+0x20>
 800dfde:	6923      	ldr	r3, [r4, #16]
 800dfe0:	b943      	cbnz	r3, 800dff4 <__swbuf_r+0x32>
 800dfe2:	4621      	mov	r1, r4
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	f000 f82b 	bl	800e040 <__swsetup_r>
 800dfea:	b118      	cbz	r0, 800dff4 <__swbuf_r+0x32>
 800dfec:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800dff0:	4638      	mov	r0, r7
 800dff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dff4:	6823      	ldr	r3, [r4, #0]
 800dff6:	6922      	ldr	r2, [r4, #16]
 800dff8:	1a98      	subs	r0, r3, r2
 800dffa:	6963      	ldr	r3, [r4, #20]
 800dffc:	b2f6      	uxtb	r6, r6
 800dffe:	4283      	cmp	r3, r0
 800e000:	4637      	mov	r7, r6
 800e002:	dc05      	bgt.n	800e010 <__swbuf_r+0x4e>
 800e004:	4621      	mov	r1, r4
 800e006:	4628      	mov	r0, r5
 800e008:	f000 fd44 	bl	800ea94 <_fflush_r>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d1ed      	bne.n	800dfec <__swbuf_r+0x2a>
 800e010:	68a3      	ldr	r3, [r4, #8]
 800e012:	3b01      	subs	r3, #1
 800e014:	60a3      	str	r3, [r4, #8]
 800e016:	6823      	ldr	r3, [r4, #0]
 800e018:	1c5a      	adds	r2, r3, #1
 800e01a:	6022      	str	r2, [r4, #0]
 800e01c:	701e      	strb	r6, [r3, #0]
 800e01e:	6962      	ldr	r2, [r4, #20]
 800e020:	1c43      	adds	r3, r0, #1
 800e022:	429a      	cmp	r2, r3
 800e024:	d004      	beq.n	800e030 <__swbuf_r+0x6e>
 800e026:	89a3      	ldrh	r3, [r4, #12]
 800e028:	07db      	lsls	r3, r3, #31
 800e02a:	d5e1      	bpl.n	800dff0 <__swbuf_r+0x2e>
 800e02c:	2e0a      	cmp	r6, #10
 800e02e:	d1df      	bne.n	800dff0 <__swbuf_r+0x2e>
 800e030:	4621      	mov	r1, r4
 800e032:	4628      	mov	r0, r5
 800e034:	f000 fd2e 	bl	800ea94 <_fflush_r>
 800e038:	2800      	cmp	r0, #0
 800e03a:	d0d9      	beq.n	800dff0 <__swbuf_r+0x2e>
 800e03c:	e7d6      	b.n	800dfec <__swbuf_r+0x2a>
	...

0800e040 <__swsetup_r>:
 800e040:	b538      	push	{r3, r4, r5, lr}
 800e042:	4b29      	ldr	r3, [pc, #164]	@ (800e0e8 <__swsetup_r+0xa8>)
 800e044:	4605      	mov	r5, r0
 800e046:	6818      	ldr	r0, [r3, #0]
 800e048:	460c      	mov	r4, r1
 800e04a:	b118      	cbz	r0, 800e054 <__swsetup_r+0x14>
 800e04c:	6a03      	ldr	r3, [r0, #32]
 800e04e:	b90b      	cbnz	r3, 800e054 <__swsetup_r+0x14>
 800e050:	f7ff fece 	bl	800ddf0 <__sinit>
 800e054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e058:	0719      	lsls	r1, r3, #28
 800e05a:	d422      	bmi.n	800e0a2 <__swsetup_r+0x62>
 800e05c:	06da      	lsls	r2, r3, #27
 800e05e:	d407      	bmi.n	800e070 <__swsetup_r+0x30>
 800e060:	2209      	movs	r2, #9
 800e062:	602a      	str	r2, [r5, #0]
 800e064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e068:	81a3      	strh	r3, [r4, #12]
 800e06a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e06e:	e033      	b.n	800e0d8 <__swsetup_r+0x98>
 800e070:	0758      	lsls	r0, r3, #29
 800e072:	d512      	bpl.n	800e09a <__swsetup_r+0x5a>
 800e074:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e076:	b141      	cbz	r1, 800e08a <__swsetup_r+0x4a>
 800e078:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e07c:	4299      	cmp	r1, r3
 800e07e:	d002      	beq.n	800e086 <__swsetup_r+0x46>
 800e080:	4628      	mov	r0, r5
 800e082:	f000 f8bb 	bl	800e1fc <_free_r>
 800e086:	2300      	movs	r3, #0
 800e088:	6363      	str	r3, [r4, #52]	@ 0x34
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e090:	81a3      	strh	r3, [r4, #12]
 800e092:	2300      	movs	r3, #0
 800e094:	6063      	str	r3, [r4, #4]
 800e096:	6923      	ldr	r3, [r4, #16]
 800e098:	6023      	str	r3, [r4, #0]
 800e09a:	89a3      	ldrh	r3, [r4, #12]
 800e09c:	f043 0308 	orr.w	r3, r3, #8
 800e0a0:	81a3      	strh	r3, [r4, #12]
 800e0a2:	6923      	ldr	r3, [r4, #16]
 800e0a4:	b94b      	cbnz	r3, 800e0ba <__swsetup_r+0x7a>
 800e0a6:	89a3      	ldrh	r3, [r4, #12]
 800e0a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e0ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0b0:	d003      	beq.n	800e0ba <__swsetup_r+0x7a>
 800e0b2:	4621      	mov	r1, r4
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	f000 fd3b 	bl	800eb30 <__smakebuf_r>
 800e0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0be:	f013 0201 	ands.w	r2, r3, #1
 800e0c2:	d00a      	beq.n	800e0da <__swsetup_r+0x9a>
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	60a2      	str	r2, [r4, #8]
 800e0c8:	6962      	ldr	r2, [r4, #20]
 800e0ca:	4252      	negs	r2, r2
 800e0cc:	61a2      	str	r2, [r4, #24]
 800e0ce:	6922      	ldr	r2, [r4, #16]
 800e0d0:	b942      	cbnz	r2, 800e0e4 <__swsetup_r+0xa4>
 800e0d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e0d6:	d1c5      	bne.n	800e064 <__swsetup_r+0x24>
 800e0d8:	bd38      	pop	{r3, r4, r5, pc}
 800e0da:	0799      	lsls	r1, r3, #30
 800e0dc:	bf58      	it	pl
 800e0de:	6962      	ldrpl	r2, [r4, #20]
 800e0e0:	60a2      	str	r2, [r4, #8]
 800e0e2:	e7f4      	b.n	800e0ce <__swsetup_r+0x8e>
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	e7f7      	b.n	800e0d8 <__swsetup_r+0x98>
 800e0e8:	20000074 	.word	0x20000074

0800e0ec <memcmp>:
 800e0ec:	b510      	push	{r4, lr}
 800e0ee:	3901      	subs	r1, #1
 800e0f0:	4402      	add	r2, r0
 800e0f2:	4290      	cmp	r0, r2
 800e0f4:	d101      	bne.n	800e0fa <memcmp+0xe>
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	e005      	b.n	800e106 <memcmp+0x1a>
 800e0fa:	7803      	ldrb	r3, [r0, #0]
 800e0fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e100:	42a3      	cmp	r3, r4
 800e102:	d001      	beq.n	800e108 <memcmp+0x1c>
 800e104:	1b18      	subs	r0, r3, r4
 800e106:	bd10      	pop	{r4, pc}
 800e108:	3001      	adds	r0, #1
 800e10a:	e7f2      	b.n	800e0f2 <memcmp+0x6>

0800e10c <memset>:
 800e10c:	4402      	add	r2, r0
 800e10e:	4603      	mov	r3, r0
 800e110:	4293      	cmp	r3, r2
 800e112:	d100      	bne.n	800e116 <memset+0xa>
 800e114:	4770      	bx	lr
 800e116:	f803 1b01 	strb.w	r1, [r3], #1
 800e11a:	e7f9      	b.n	800e110 <memset+0x4>

0800e11c <_close_r>:
 800e11c:	b538      	push	{r3, r4, r5, lr}
 800e11e:	4d06      	ldr	r5, [pc, #24]	@ (800e138 <_close_r+0x1c>)
 800e120:	2300      	movs	r3, #0
 800e122:	4604      	mov	r4, r0
 800e124:	4608      	mov	r0, r1
 800e126:	602b      	str	r3, [r5, #0]
 800e128:	f7f5 fbcd 	bl	80038c6 <_close>
 800e12c:	1c43      	adds	r3, r0, #1
 800e12e:	d102      	bne.n	800e136 <_close_r+0x1a>
 800e130:	682b      	ldr	r3, [r5, #0]
 800e132:	b103      	cbz	r3, 800e136 <_close_r+0x1a>
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	bd38      	pop	{r3, r4, r5, pc}
 800e138:	20014b50 	.word	0x20014b50

0800e13c <_lseek_r>:
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	4d07      	ldr	r5, [pc, #28]	@ (800e15c <_lseek_r+0x20>)
 800e140:	4604      	mov	r4, r0
 800e142:	4608      	mov	r0, r1
 800e144:	4611      	mov	r1, r2
 800e146:	2200      	movs	r2, #0
 800e148:	602a      	str	r2, [r5, #0]
 800e14a:	461a      	mov	r2, r3
 800e14c:	f7f5 fbe2 	bl	8003914 <_lseek>
 800e150:	1c43      	adds	r3, r0, #1
 800e152:	d102      	bne.n	800e15a <_lseek_r+0x1e>
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	b103      	cbz	r3, 800e15a <_lseek_r+0x1e>
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
 800e15c:	20014b50 	.word	0x20014b50

0800e160 <_read_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4d07      	ldr	r5, [pc, #28]	@ (800e180 <_read_r+0x20>)
 800e164:	4604      	mov	r4, r0
 800e166:	4608      	mov	r0, r1
 800e168:	4611      	mov	r1, r2
 800e16a:	2200      	movs	r2, #0
 800e16c:	602a      	str	r2, [r5, #0]
 800e16e:	461a      	mov	r2, r3
 800e170:	f7f5 fb8c 	bl	800388c <_read>
 800e174:	1c43      	adds	r3, r0, #1
 800e176:	d102      	bne.n	800e17e <_read_r+0x1e>
 800e178:	682b      	ldr	r3, [r5, #0]
 800e17a:	b103      	cbz	r3, 800e17e <_read_r+0x1e>
 800e17c:	6023      	str	r3, [r4, #0]
 800e17e:	bd38      	pop	{r3, r4, r5, pc}
 800e180:	20014b50 	.word	0x20014b50

0800e184 <__errno>:
 800e184:	4b01      	ldr	r3, [pc, #4]	@ (800e18c <__errno+0x8>)
 800e186:	6818      	ldr	r0, [r3, #0]
 800e188:	4770      	bx	lr
 800e18a:	bf00      	nop
 800e18c:	20000074 	.word	0x20000074

0800e190 <__libc_init_array>:
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	4d0d      	ldr	r5, [pc, #52]	@ (800e1c8 <__libc_init_array+0x38>)
 800e194:	4c0d      	ldr	r4, [pc, #52]	@ (800e1cc <__libc_init_array+0x3c>)
 800e196:	1b64      	subs	r4, r4, r5
 800e198:	10a4      	asrs	r4, r4, #2
 800e19a:	2600      	movs	r6, #0
 800e19c:	42a6      	cmp	r6, r4
 800e19e:	d109      	bne.n	800e1b4 <__libc_init_array+0x24>
 800e1a0:	4d0b      	ldr	r5, [pc, #44]	@ (800e1d0 <__libc_init_array+0x40>)
 800e1a2:	4c0c      	ldr	r4, [pc, #48]	@ (800e1d4 <__libc_init_array+0x44>)
 800e1a4:	f001 fd74 	bl	800fc90 <_init>
 800e1a8:	1b64      	subs	r4, r4, r5
 800e1aa:	10a4      	asrs	r4, r4, #2
 800e1ac:	2600      	movs	r6, #0
 800e1ae:	42a6      	cmp	r6, r4
 800e1b0:	d105      	bne.n	800e1be <__libc_init_array+0x2e>
 800e1b2:	bd70      	pop	{r4, r5, r6, pc}
 800e1b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1b8:	4798      	blx	r3
 800e1ba:	3601      	adds	r6, #1
 800e1bc:	e7ee      	b.n	800e19c <__libc_init_array+0xc>
 800e1be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1c2:	4798      	blx	r3
 800e1c4:	3601      	adds	r6, #1
 800e1c6:	e7f2      	b.n	800e1ae <__libc_init_array+0x1e>
 800e1c8:	080102a8 	.word	0x080102a8
 800e1cc:	080102a8 	.word	0x080102a8
 800e1d0:	080102a8 	.word	0x080102a8
 800e1d4:	080102ac 	.word	0x080102ac

0800e1d8 <__retarget_lock_init_recursive>:
 800e1d8:	4770      	bx	lr

0800e1da <__retarget_lock_acquire_recursive>:
 800e1da:	4770      	bx	lr

0800e1dc <__retarget_lock_release_recursive>:
 800e1dc:	4770      	bx	lr

0800e1de <memcpy>:
 800e1de:	440a      	add	r2, r1
 800e1e0:	4291      	cmp	r1, r2
 800e1e2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e1e6:	d100      	bne.n	800e1ea <memcpy+0xc>
 800e1e8:	4770      	bx	lr
 800e1ea:	b510      	push	{r4, lr}
 800e1ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1f4:	4291      	cmp	r1, r2
 800e1f6:	d1f9      	bne.n	800e1ec <memcpy+0xe>
 800e1f8:	bd10      	pop	{r4, pc}
	...

0800e1fc <_free_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4605      	mov	r5, r0
 800e200:	2900      	cmp	r1, #0
 800e202:	d041      	beq.n	800e288 <_free_r+0x8c>
 800e204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e208:	1f0c      	subs	r4, r1, #4
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	bfb8      	it	lt
 800e20e:	18e4      	addlt	r4, r4, r3
 800e210:	f000 f8e0 	bl	800e3d4 <__malloc_lock>
 800e214:	4a1d      	ldr	r2, [pc, #116]	@ (800e28c <_free_r+0x90>)
 800e216:	6813      	ldr	r3, [r2, #0]
 800e218:	b933      	cbnz	r3, 800e228 <_free_r+0x2c>
 800e21a:	6063      	str	r3, [r4, #4]
 800e21c:	6014      	str	r4, [r2, #0]
 800e21e:	4628      	mov	r0, r5
 800e220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e224:	f000 b8dc 	b.w	800e3e0 <__malloc_unlock>
 800e228:	42a3      	cmp	r3, r4
 800e22a:	d908      	bls.n	800e23e <_free_r+0x42>
 800e22c:	6820      	ldr	r0, [r4, #0]
 800e22e:	1821      	adds	r1, r4, r0
 800e230:	428b      	cmp	r3, r1
 800e232:	bf01      	itttt	eq
 800e234:	6819      	ldreq	r1, [r3, #0]
 800e236:	685b      	ldreq	r3, [r3, #4]
 800e238:	1809      	addeq	r1, r1, r0
 800e23a:	6021      	streq	r1, [r4, #0]
 800e23c:	e7ed      	b.n	800e21a <_free_r+0x1e>
 800e23e:	461a      	mov	r2, r3
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	b10b      	cbz	r3, 800e248 <_free_r+0x4c>
 800e244:	42a3      	cmp	r3, r4
 800e246:	d9fa      	bls.n	800e23e <_free_r+0x42>
 800e248:	6811      	ldr	r1, [r2, #0]
 800e24a:	1850      	adds	r0, r2, r1
 800e24c:	42a0      	cmp	r0, r4
 800e24e:	d10b      	bne.n	800e268 <_free_r+0x6c>
 800e250:	6820      	ldr	r0, [r4, #0]
 800e252:	4401      	add	r1, r0
 800e254:	1850      	adds	r0, r2, r1
 800e256:	4283      	cmp	r3, r0
 800e258:	6011      	str	r1, [r2, #0]
 800e25a:	d1e0      	bne.n	800e21e <_free_r+0x22>
 800e25c:	6818      	ldr	r0, [r3, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	6053      	str	r3, [r2, #4]
 800e262:	4408      	add	r0, r1
 800e264:	6010      	str	r0, [r2, #0]
 800e266:	e7da      	b.n	800e21e <_free_r+0x22>
 800e268:	d902      	bls.n	800e270 <_free_r+0x74>
 800e26a:	230c      	movs	r3, #12
 800e26c:	602b      	str	r3, [r5, #0]
 800e26e:	e7d6      	b.n	800e21e <_free_r+0x22>
 800e270:	6820      	ldr	r0, [r4, #0]
 800e272:	1821      	adds	r1, r4, r0
 800e274:	428b      	cmp	r3, r1
 800e276:	bf04      	itt	eq
 800e278:	6819      	ldreq	r1, [r3, #0]
 800e27a:	685b      	ldreq	r3, [r3, #4]
 800e27c:	6063      	str	r3, [r4, #4]
 800e27e:	bf04      	itt	eq
 800e280:	1809      	addeq	r1, r1, r0
 800e282:	6021      	streq	r1, [r4, #0]
 800e284:	6054      	str	r4, [r2, #4]
 800e286:	e7ca      	b.n	800e21e <_free_r+0x22>
 800e288:	bd38      	pop	{r3, r4, r5, pc}
 800e28a:	bf00      	nop
 800e28c:	20014b5c 	.word	0x20014b5c

0800e290 <sbrk_aligned>:
 800e290:	b570      	push	{r4, r5, r6, lr}
 800e292:	4e0f      	ldr	r6, [pc, #60]	@ (800e2d0 <sbrk_aligned+0x40>)
 800e294:	460c      	mov	r4, r1
 800e296:	6831      	ldr	r1, [r6, #0]
 800e298:	4605      	mov	r5, r0
 800e29a:	b911      	cbnz	r1, 800e2a2 <sbrk_aligned+0x12>
 800e29c:	f000 fca6 	bl	800ebec <_sbrk_r>
 800e2a0:	6030      	str	r0, [r6, #0]
 800e2a2:	4621      	mov	r1, r4
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	f000 fca1 	bl	800ebec <_sbrk_r>
 800e2aa:	1c43      	adds	r3, r0, #1
 800e2ac:	d103      	bne.n	800e2b6 <sbrk_aligned+0x26>
 800e2ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	bd70      	pop	{r4, r5, r6, pc}
 800e2b6:	1cc4      	adds	r4, r0, #3
 800e2b8:	f024 0403 	bic.w	r4, r4, #3
 800e2bc:	42a0      	cmp	r0, r4
 800e2be:	d0f8      	beq.n	800e2b2 <sbrk_aligned+0x22>
 800e2c0:	1a21      	subs	r1, r4, r0
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	f000 fc92 	bl	800ebec <_sbrk_r>
 800e2c8:	3001      	adds	r0, #1
 800e2ca:	d1f2      	bne.n	800e2b2 <sbrk_aligned+0x22>
 800e2cc:	e7ef      	b.n	800e2ae <sbrk_aligned+0x1e>
 800e2ce:	bf00      	nop
 800e2d0:	20014b58 	.word	0x20014b58

0800e2d4 <_malloc_r>:
 800e2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2d8:	1ccd      	adds	r5, r1, #3
 800e2da:	f025 0503 	bic.w	r5, r5, #3
 800e2de:	3508      	adds	r5, #8
 800e2e0:	2d0c      	cmp	r5, #12
 800e2e2:	bf38      	it	cc
 800e2e4:	250c      	movcc	r5, #12
 800e2e6:	2d00      	cmp	r5, #0
 800e2e8:	4606      	mov	r6, r0
 800e2ea:	db01      	blt.n	800e2f0 <_malloc_r+0x1c>
 800e2ec:	42a9      	cmp	r1, r5
 800e2ee:	d904      	bls.n	800e2fa <_malloc_r+0x26>
 800e2f0:	230c      	movs	r3, #12
 800e2f2:	6033      	str	r3, [r6, #0]
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e3d0 <_malloc_r+0xfc>
 800e2fe:	f000 f869 	bl	800e3d4 <__malloc_lock>
 800e302:	f8d8 3000 	ldr.w	r3, [r8]
 800e306:	461c      	mov	r4, r3
 800e308:	bb44      	cbnz	r4, 800e35c <_malloc_r+0x88>
 800e30a:	4629      	mov	r1, r5
 800e30c:	4630      	mov	r0, r6
 800e30e:	f7ff ffbf 	bl	800e290 <sbrk_aligned>
 800e312:	1c43      	adds	r3, r0, #1
 800e314:	4604      	mov	r4, r0
 800e316:	d158      	bne.n	800e3ca <_malloc_r+0xf6>
 800e318:	f8d8 4000 	ldr.w	r4, [r8]
 800e31c:	4627      	mov	r7, r4
 800e31e:	2f00      	cmp	r7, #0
 800e320:	d143      	bne.n	800e3aa <_malloc_r+0xd6>
 800e322:	2c00      	cmp	r4, #0
 800e324:	d04b      	beq.n	800e3be <_malloc_r+0xea>
 800e326:	6823      	ldr	r3, [r4, #0]
 800e328:	4639      	mov	r1, r7
 800e32a:	4630      	mov	r0, r6
 800e32c:	eb04 0903 	add.w	r9, r4, r3
 800e330:	f000 fc5c 	bl	800ebec <_sbrk_r>
 800e334:	4581      	cmp	r9, r0
 800e336:	d142      	bne.n	800e3be <_malloc_r+0xea>
 800e338:	6821      	ldr	r1, [r4, #0]
 800e33a:	1a6d      	subs	r5, r5, r1
 800e33c:	4629      	mov	r1, r5
 800e33e:	4630      	mov	r0, r6
 800e340:	f7ff ffa6 	bl	800e290 <sbrk_aligned>
 800e344:	3001      	adds	r0, #1
 800e346:	d03a      	beq.n	800e3be <_malloc_r+0xea>
 800e348:	6823      	ldr	r3, [r4, #0]
 800e34a:	442b      	add	r3, r5
 800e34c:	6023      	str	r3, [r4, #0]
 800e34e:	f8d8 3000 	ldr.w	r3, [r8]
 800e352:	685a      	ldr	r2, [r3, #4]
 800e354:	bb62      	cbnz	r2, 800e3b0 <_malloc_r+0xdc>
 800e356:	f8c8 7000 	str.w	r7, [r8]
 800e35a:	e00f      	b.n	800e37c <_malloc_r+0xa8>
 800e35c:	6822      	ldr	r2, [r4, #0]
 800e35e:	1b52      	subs	r2, r2, r5
 800e360:	d420      	bmi.n	800e3a4 <_malloc_r+0xd0>
 800e362:	2a0b      	cmp	r2, #11
 800e364:	d917      	bls.n	800e396 <_malloc_r+0xc2>
 800e366:	1961      	adds	r1, r4, r5
 800e368:	42a3      	cmp	r3, r4
 800e36a:	6025      	str	r5, [r4, #0]
 800e36c:	bf18      	it	ne
 800e36e:	6059      	strne	r1, [r3, #4]
 800e370:	6863      	ldr	r3, [r4, #4]
 800e372:	bf08      	it	eq
 800e374:	f8c8 1000 	streq.w	r1, [r8]
 800e378:	5162      	str	r2, [r4, r5]
 800e37a:	604b      	str	r3, [r1, #4]
 800e37c:	4630      	mov	r0, r6
 800e37e:	f000 f82f 	bl	800e3e0 <__malloc_unlock>
 800e382:	f104 000b 	add.w	r0, r4, #11
 800e386:	1d23      	adds	r3, r4, #4
 800e388:	f020 0007 	bic.w	r0, r0, #7
 800e38c:	1ac2      	subs	r2, r0, r3
 800e38e:	bf1c      	itt	ne
 800e390:	1a1b      	subne	r3, r3, r0
 800e392:	50a3      	strne	r3, [r4, r2]
 800e394:	e7af      	b.n	800e2f6 <_malloc_r+0x22>
 800e396:	6862      	ldr	r2, [r4, #4]
 800e398:	42a3      	cmp	r3, r4
 800e39a:	bf0c      	ite	eq
 800e39c:	f8c8 2000 	streq.w	r2, [r8]
 800e3a0:	605a      	strne	r2, [r3, #4]
 800e3a2:	e7eb      	b.n	800e37c <_malloc_r+0xa8>
 800e3a4:	4623      	mov	r3, r4
 800e3a6:	6864      	ldr	r4, [r4, #4]
 800e3a8:	e7ae      	b.n	800e308 <_malloc_r+0x34>
 800e3aa:	463c      	mov	r4, r7
 800e3ac:	687f      	ldr	r7, [r7, #4]
 800e3ae:	e7b6      	b.n	800e31e <_malloc_r+0x4a>
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	42a3      	cmp	r3, r4
 800e3b6:	d1fb      	bne.n	800e3b0 <_malloc_r+0xdc>
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	6053      	str	r3, [r2, #4]
 800e3bc:	e7de      	b.n	800e37c <_malloc_r+0xa8>
 800e3be:	230c      	movs	r3, #12
 800e3c0:	6033      	str	r3, [r6, #0]
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f000 f80c 	bl	800e3e0 <__malloc_unlock>
 800e3c8:	e794      	b.n	800e2f4 <_malloc_r+0x20>
 800e3ca:	6005      	str	r5, [r0, #0]
 800e3cc:	e7d6      	b.n	800e37c <_malloc_r+0xa8>
 800e3ce:	bf00      	nop
 800e3d0:	20014b5c 	.word	0x20014b5c

0800e3d4 <__malloc_lock>:
 800e3d4:	4801      	ldr	r0, [pc, #4]	@ (800e3dc <__malloc_lock+0x8>)
 800e3d6:	f7ff bf00 	b.w	800e1da <__retarget_lock_acquire_recursive>
 800e3da:	bf00      	nop
 800e3dc:	20014b54 	.word	0x20014b54

0800e3e0 <__malloc_unlock>:
 800e3e0:	4801      	ldr	r0, [pc, #4]	@ (800e3e8 <__malloc_unlock+0x8>)
 800e3e2:	f7ff befb 	b.w	800e1dc <__retarget_lock_release_recursive>
 800e3e6:	bf00      	nop
 800e3e8:	20014b54 	.word	0x20014b54

0800e3ec <__sfputc_r>:
 800e3ec:	6893      	ldr	r3, [r2, #8]
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	b410      	push	{r4}
 800e3f4:	6093      	str	r3, [r2, #8]
 800e3f6:	da08      	bge.n	800e40a <__sfputc_r+0x1e>
 800e3f8:	6994      	ldr	r4, [r2, #24]
 800e3fa:	42a3      	cmp	r3, r4
 800e3fc:	db01      	blt.n	800e402 <__sfputc_r+0x16>
 800e3fe:	290a      	cmp	r1, #10
 800e400:	d103      	bne.n	800e40a <__sfputc_r+0x1e>
 800e402:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e406:	f7ff bddc 	b.w	800dfc2 <__swbuf_r>
 800e40a:	6813      	ldr	r3, [r2, #0]
 800e40c:	1c58      	adds	r0, r3, #1
 800e40e:	6010      	str	r0, [r2, #0]
 800e410:	7019      	strb	r1, [r3, #0]
 800e412:	4608      	mov	r0, r1
 800e414:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <__sfputs_r>:
 800e41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41c:	4606      	mov	r6, r0
 800e41e:	460f      	mov	r7, r1
 800e420:	4614      	mov	r4, r2
 800e422:	18d5      	adds	r5, r2, r3
 800e424:	42ac      	cmp	r4, r5
 800e426:	d101      	bne.n	800e42c <__sfputs_r+0x12>
 800e428:	2000      	movs	r0, #0
 800e42a:	e007      	b.n	800e43c <__sfputs_r+0x22>
 800e42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e430:	463a      	mov	r2, r7
 800e432:	4630      	mov	r0, r6
 800e434:	f7ff ffda 	bl	800e3ec <__sfputc_r>
 800e438:	1c43      	adds	r3, r0, #1
 800e43a:	d1f3      	bne.n	800e424 <__sfputs_r+0xa>
 800e43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e440 <_vfiprintf_r>:
 800e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e444:	460d      	mov	r5, r1
 800e446:	b09d      	sub	sp, #116	@ 0x74
 800e448:	4614      	mov	r4, r2
 800e44a:	4698      	mov	r8, r3
 800e44c:	4606      	mov	r6, r0
 800e44e:	b118      	cbz	r0, 800e458 <_vfiprintf_r+0x18>
 800e450:	6a03      	ldr	r3, [r0, #32]
 800e452:	b90b      	cbnz	r3, 800e458 <_vfiprintf_r+0x18>
 800e454:	f7ff fccc 	bl	800ddf0 <__sinit>
 800e458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e45a:	07d9      	lsls	r1, r3, #31
 800e45c:	d405      	bmi.n	800e46a <_vfiprintf_r+0x2a>
 800e45e:	89ab      	ldrh	r3, [r5, #12]
 800e460:	059a      	lsls	r2, r3, #22
 800e462:	d402      	bmi.n	800e46a <_vfiprintf_r+0x2a>
 800e464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e466:	f7ff feb8 	bl	800e1da <__retarget_lock_acquire_recursive>
 800e46a:	89ab      	ldrh	r3, [r5, #12]
 800e46c:	071b      	lsls	r3, r3, #28
 800e46e:	d501      	bpl.n	800e474 <_vfiprintf_r+0x34>
 800e470:	692b      	ldr	r3, [r5, #16]
 800e472:	b99b      	cbnz	r3, 800e49c <_vfiprintf_r+0x5c>
 800e474:	4629      	mov	r1, r5
 800e476:	4630      	mov	r0, r6
 800e478:	f7ff fde2 	bl	800e040 <__swsetup_r>
 800e47c:	b170      	cbz	r0, 800e49c <_vfiprintf_r+0x5c>
 800e47e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e480:	07dc      	lsls	r4, r3, #31
 800e482:	d504      	bpl.n	800e48e <_vfiprintf_r+0x4e>
 800e484:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e488:	b01d      	add	sp, #116	@ 0x74
 800e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48e:	89ab      	ldrh	r3, [r5, #12]
 800e490:	0598      	lsls	r0, r3, #22
 800e492:	d4f7      	bmi.n	800e484 <_vfiprintf_r+0x44>
 800e494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e496:	f7ff fea1 	bl	800e1dc <__retarget_lock_release_recursive>
 800e49a:	e7f3      	b.n	800e484 <_vfiprintf_r+0x44>
 800e49c:	2300      	movs	r3, #0
 800e49e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4a0:	2320      	movs	r3, #32
 800e4a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4aa:	2330      	movs	r3, #48	@ 0x30
 800e4ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e65c <_vfiprintf_r+0x21c>
 800e4b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4b4:	f04f 0901 	mov.w	r9, #1
 800e4b8:	4623      	mov	r3, r4
 800e4ba:	469a      	mov	sl, r3
 800e4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4c0:	b10a      	cbz	r2, 800e4c6 <_vfiprintf_r+0x86>
 800e4c2:	2a25      	cmp	r2, #37	@ 0x25
 800e4c4:	d1f9      	bne.n	800e4ba <_vfiprintf_r+0x7a>
 800e4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800e4ca:	d00b      	beq.n	800e4e4 <_vfiprintf_r+0xa4>
 800e4cc:	465b      	mov	r3, fp
 800e4ce:	4622      	mov	r2, r4
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7ff ffa1 	bl	800e41a <__sfputs_r>
 800e4d8:	3001      	adds	r0, #1
 800e4da:	f000 80a7 	beq.w	800e62c <_vfiprintf_r+0x1ec>
 800e4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4e0:	445a      	add	r2, fp
 800e4e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	f000 809f 	beq.w	800e62c <_vfiprintf_r+0x1ec>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4f8:	f10a 0a01 	add.w	sl, sl, #1
 800e4fc:	9304      	str	r3, [sp, #16]
 800e4fe:	9307      	str	r3, [sp, #28]
 800e500:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e504:	931a      	str	r3, [sp, #104]	@ 0x68
 800e506:	4654      	mov	r4, sl
 800e508:	2205      	movs	r2, #5
 800e50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e50e:	4853      	ldr	r0, [pc, #332]	@ (800e65c <_vfiprintf_r+0x21c>)
 800e510:	f7f1 fede 	bl	80002d0 <memchr>
 800e514:	9a04      	ldr	r2, [sp, #16]
 800e516:	b9d8      	cbnz	r0, 800e550 <_vfiprintf_r+0x110>
 800e518:	06d1      	lsls	r1, r2, #27
 800e51a:	bf44      	itt	mi
 800e51c:	2320      	movmi	r3, #32
 800e51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e522:	0713      	lsls	r3, r2, #28
 800e524:	bf44      	itt	mi
 800e526:	232b      	movmi	r3, #43	@ 0x2b
 800e528:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e52c:	f89a 3000 	ldrb.w	r3, [sl]
 800e530:	2b2a      	cmp	r3, #42	@ 0x2a
 800e532:	d015      	beq.n	800e560 <_vfiprintf_r+0x120>
 800e534:	9a07      	ldr	r2, [sp, #28]
 800e536:	4654      	mov	r4, sl
 800e538:	2000      	movs	r0, #0
 800e53a:	f04f 0c0a 	mov.w	ip, #10
 800e53e:	4621      	mov	r1, r4
 800e540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e544:	3b30      	subs	r3, #48	@ 0x30
 800e546:	2b09      	cmp	r3, #9
 800e548:	d94b      	bls.n	800e5e2 <_vfiprintf_r+0x1a2>
 800e54a:	b1b0      	cbz	r0, 800e57a <_vfiprintf_r+0x13a>
 800e54c:	9207      	str	r2, [sp, #28]
 800e54e:	e014      	b.n	800e57a <_vfiprintf_r+0x13a>
 800e550:	eba0 0308 	sub.w	r3, r0, r8
 800e554:	fa09 f303 	lsl.w	r3, r9, r3
 800e558:	4313      	orrs	r3, r2
 800e55a:	9304      	str	r3, [sp, #16]
 800e55c:	46a2      	mov	sl, r4
 800e55e:	e7d2      	b.n	800e506 <_vfiprintf_r+0xc6>
 800e560:	9b03      	ldr	r3, [sp, #12]
 800e562:	1d19      	adds	r1, r3, #4
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	9103      	str	r1, [sp, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	bfbb      	ittet	lt
 800e56c:	425b      	neglt	r3, r3
 800e56e:	f042 0202 	orrlt.w	r2, r2, #2
 800e572:	9307      	strge	r3, [sp, #28]
 800e574:	9307      	strlt	r3, [sp, #28]
 800e576:	bfb8      	it	lt
 800e578:	9204      	strlt	r2, [sp, #16]
 800e57a:	7823      	ldrb	r3, [r4, #0]
 800e57c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e57e:	d10a      	bne.n	800e596 <_vfiprintf_r+0x156>
 800e580:	7863      	ldrb	r3, [r4, #1]
 800e582:	2b2a      	cmp	r3, #42	@ 0x2a
 800e584:	d132      	bne.n	800e5ec <_vfiprintf_r+0x1ac>
 800e586:	9b03      	ldr	r3, [sp, #12]
 800e588:	1d1a      	adds	r2, r3, #4
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	9203      	str	r2, [sp, #12]
 800e58e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e592:	3402      	adds	r4, #2
 800e594:	9305      	str	r3, [sp, #20]
 800e596:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e66c <_vfiprintf_r+0x22c>
 800e59a:	7821      	ldrb	r1, [r4, #0]
 800e59c:	2203      	movs	r2, #3
 800e59e:	4650      	mov	r0, sl
 800e5a0:	f7f1 fe96 	bl	80002d0 <memchr>
 800e5a4:	b138      	cbz	r0, 800e5b6 <_vfiprintf_r+0x176>
 800e5a6:	9b04      	ldr	r3, [sp, #16]
 800e5a8:	eba0 000a 	sub.w	r0, r0, sl
 800e5ac:	2240      	movs	r2, #64	@ 0x40
 800e5ae:	4082      	lsls	r2, r0
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	3401      	adds	r4, #1
 800e5b4:	9304      	str	r3, [sp, #16]
 800e5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ba:	4829      	ldr	r0, [pc, #164]	@ (800e660 <_vfiprintf_r+0x220>)
 800e5bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5c0:	2206      	movs	r2, #6
 800e5c2:	f7f1 fe85 	bl	80002d0 <memchr>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	d03f      	beq.n	800e64a <_vfiprintf_r+0x20a>
 800e5ca:	4b26      	ldr	r3, [pc, #152]	@ (800e664 <_vfiprintf_r+0x224>)
 800e5cc:	bb1b      	cbnz	r3, 800e616 <_vfiprintf_r+0x1d6>
 800e5ce:	9b03      	ldr	r3, [sp, #12]
 800e5d0:	3307      	adds	r3, #7
 800e5d2:	f023 0307 	bic.w	r3, r3, #7
 800e5d6:	3308      	adds	r3, #8
 800e5d8:	9303      	str	r3, [sp, #12]
 800e5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5dc:	443b      	add	r3, r7
 800e5de:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5e0:	e76a      	b.n	800e4b8 <_vfiprintf_r+0x78>
 800e5e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	2001      	movs	r0, #1
 800e5ea:	e7a8      	b.n	800e53e <_vfiprintf_r+0xfe>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	3401      	adds	r4, #1
 800e5f0:	9305      	str	r3, [sp, #20]
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	f04f 0c0a 	mov.w	ip, #10
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5fe:	3a30      	subs	r2, #48	@ 0x30
 800e600:	2a09      	cmp	r2, #9
 800e602:	d903      	bls.n	800e60c <_vfiprintf_r+0x1cc>
 800e604:	2b00      	cmp	r3, #0
 800e606:	d0c6      	beq.n	800e596 <_vfiprintf_r+0x156>
 800e608:	9105      	str	r1, [sp, #20]
 800e60a:	e7c4      	b.n	800e596 <_vfiprintf_r+0x156>
 800e60c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e610:	4604      	mov	r4, r0
 800e612:	2301      	movs	r3, #1
 800e614:	e7f0      	b.n	800e5f8 <_vfiprintf_r+0x1b8>
 800e616:	ab03      	add	r3, sp, #12
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	462a      	mov	r2, r5
 800e61c:	4b12      	ldr	r3, [pc, #72]	@ (800e668 <_vfiprintf_r+0x228>)
 800e61e:	a904      	add	r1, sp, #16
 800e620:	4630      	mov	r0, r6
 800e622:	f3af 8000 	nop.w
 800e626:	4607      	mov	r7, r0
 800e628:	1c78      	adds	r0, r7, #1
 800e62a:	d1d6      	bne.n	800e5da <_vfiprintf_r+0x19a>
 800e62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e62e:	07d9      	lsls	r1, r3, #31
 800e630:	d405      	bmi.n	800e63e <_vfiprintf_r+0x1fe>
 800e632:	89ab      	ldrh	r3, [r5, #12]
 800e634:	059a      	lsls	r2, r3, #22
 800e636:	d402      	bmi.n	800e63e <_vfiprintf_r+0x1fe>
 800e638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e63a:	f7ff fdcf 	bl	800e1dc <__retarget_lock_release_recursive>
 800e63e:	89ab      	ldrh	r3, [r5, #12]
 800e640:	065b      	lsls	r3, r3, #25
 800e642:	f53f af1f 	bmi.w	800e484 <_vfiprintf_r+0x44>
 800e646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e648:	e71e      	b.n	800e488 <_vfiprintf_r+0x48>
 800e64a:	ab03      	add	r3, sp, #12
 800e64c:	9300      	str	r3, [sp, #0]
 800e64e:	462a      	mov	r2, r5
 800e650:	4b05      	ldr	r3, [pc, #20]	@ (800e668 <_vfiprintf_r+0x228>)
 800e652:	a904      	add	r1, sp, #16
 800e654:	4630      	mov	r0, r6
 800e656:	f000 f879 	bl	800e74c <_printf_i>
 800e65a:	e7e4      	b.n	800e626 <_vfiprintf_r+0x1e6>
 800e65c:	0801023a 	.word	0x0801023a
 800e660:	08010244 	.word	0x08010244
 800e664:	00000000 	.word	0x00000000
 800e668:	0800e41b 	.word	0x0800e41b
 800e66c:	08010240 	.word	0x08010240

0800e670 <_printf_common>:
 800e670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e674:	4616      	mov	r6, r2
 800e676:	4698      	mov	r8, r3
 800e678:	688a      	ldr	r2, [r1, #8]
 800e67a:	690b      	ldr	r3, [r1, #16]
 800e67c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e680:	4293      	cmp	r3, r2
 800e682:	bfb8      	it	lt
 800e684:	4613      	movlt	r3, r2
 800e686:	6033      	str	r3, [r6, #0]
 800e688:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e68c:	4607      	mov	r7, r0
 800e68e:	460c      	mov	r4, r1
 800e690:	b10a      	cbz	r2, 800e696 <_printf_common+0x26>
 800e692:	3301      	adds	r3, #1
 800e694:	6033      	str	r3, [r6, #0]
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	0699      	lsls	r1, r3, #26
 800e69a:	bf42      	ittt	mi
 800e69c:	6833      	ldrmi	r3, [r6, #0]
 800e69e:	3302      	addmi	r3, #2
 800e6a0:	6033      	strmi	r3, [r6, #0]
 800e6a2:	6825      	ldr	r5, [r4, #0]
 800e6a4:	f015 0506 	ands.w	r5, r5, #6
 800e6a8:	d106      	bne.n	800e6b8 <_printf_common+0x48>
 800e6aa:	f104 0a19 	add.w	sl, r4, #25
 800e6ae:	68e3      	ldr	r3, [r4, #12]
 800e6b0:	6832      	ldr	r2, [r6, #0]
 800e6b2:	1a9b      	subs	r3, r3, r2
 800e6b4:	42ab      	cmp	r3, r5
 800e6b6:	dc26      	bgt.n	800e706 <_printf_common+0x96>
 800e6b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e6bc:	6822      	ldr	r2, [r4, #0]
 800e6be:	3b00      	subs	r3, #0
 800e6c0:	bf18      	it	ne
 800e6c2:	2301      	movne	r3, #1
 800e6c4:	0692      	lsls	r2, r2, #26
 800e6c6:	d42b      	bmi.n	800e720 <_printf_common+0xb0>
 800e6c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e6cc:	4641      	mov	r1, r8
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	47c8      	blx	r9
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	d01e      	beq.n	800e714 <_printf_common+0xa4>
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	6922      	ldr	r2, [r4, #16]
 800e6da:	f003 0306 	and.w	r3, r3, #6
 800e6de:	2b04      	cmp	r3, #4
 800e6e0:	bf02      	ittt	eq
 800e6e2:	68e5      	ldreq	r5, [r4, #12]
 800e6e4:	6833      	ldreq	r3, [r6, #0]
 800e6e6:	1aed      	subeq	r5, r5, r3
 800e6e8:	68a3      	ldr	r3, [r4, #8]
 800e6ea:	bf0c      	ite	eq
 800e6ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6f0:	2500      	movne	r5, #0
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	bfc4      	itt	gt
 800e6f6:	1a9b      	subgt	r3, r3, r2
 800e6f8:	18ed      	addgt	r5, r5, r3
 800e6fa:	2600      	movs	r6, #0
 800e6fc:	341a      	adds	r4, #26
 800e6fe:	42b5      	cmp	r5, r6
 800e700:	d11a      	bne.n	800e738 <_printf_common+0xc8>
 800e702:	2000      	movs	r0, #0
 800e704:	e008      	b.n	800e718 <_printf_common+0xa8>
 800e706:	2301      	movs	r3, #1
 800e708:	4652      	mov	r2, sl
 800e70a:	4641      	mov	r1, r8
 800e70c:	4638      	mov	r0, r7
 800e70e:	47c8      	blx	r9
 800e710:	3001      	adds	r0, #1
 800e712:	d103      	bne.n	800e71c <_printf_common+0xac>
 800e714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e71c:	3501      	adds	r5, #1
 800e71e:	e7c6      	b.n	800e6ae <_printf_common+0x3e>
 800e720:	18e1      	adds	r1, r4, r3
 800e722:	1c5a      	adds	r2, r3, #1
 800e724:	2030      	movs	r0, #48	@ 0x30
 800e726:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e72a:	4422      	add	r2, r4
 800e72c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e730:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e734:	3302      	adds	r3, #2
 800e736:	e7c7      	b.n	800e6c8 <_printf_common+0x58>
 800e738:	2301      	movs	r3, #1
 800e73a:	4622      	mov	r2, r4
 800e73c:	4641      	mov	r1, r8
 800e73e:	4638      	mov	r0, r7
 800e740:	47c8      	blx	r9
 800e742:	3001      	adds	r0, #1
 800e744:	d0e6      	beq.n	800e714 <_printf_common+0xa4>
 800e746:	3601      	adds	r6, #1
 800e748:	e7d9      	b.n	800e6fe <_printf_common+0x8e>
	...

0800e74c <_printf_i>:
 800e74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e750:	7e0f      	ldrb	r7, [r1, #24]
 800e752:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e754:	2f78      	cmp	r7, #120	@ 0x78
 800e756:	4691      	mov	r9, r2
 800e758:	4680      	mov	r8, r0
 800e75a:	460c      	mov	r4, r1
 800e75c:	469a      	mov	sl, r3
 800e75e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e762:	d807      	bhi.n	800e774 <_printf_i+0x28>
 800e764:	2f62      	cmp	r7, #98	@ 0x62
 800e766:	d80a      	bhi.n	800e77e <_printf_i+0x32>
 800e768:	2f00      	cmp	r7, #0
 800e76a:	f000 80d2 	beq.w	800e912 <_printf_i+0x1c6>
 800e76e:	2f58      	cmp	r7, #88	@ 0x58
 800e770:	f000 80b9 	beq.w	800e8e6 <_printf_i+0x19a>
 800e774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e778:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e77c:	e03a      	b.n	800e7f4 <_printf_i+0xa8>
 800e77e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e782:	2b15      	cmp	r3, #21
 800e784:	d8f6      	bhi.n	800e774 <_printf_i+0x28>
 800e786:	a101      	add	r1, pc, #4	@ (adr r1, 800e78c <_printf_i+0x40>)
 800e788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e78c:	0800e7e5 	.word	0x0800e7e5
 800e790:	0800e7f9 	.word	0x0800e7f9
 800e794:	0800e775 	.word	0x0800e775
 800e798:	0800e775 	.word	0x0800e775
 800e79c:	0800e775 	.word	0x0800e775
 800e7a0:	0800e775 	.word	0x0800e775
 800e7a4:	0800e7f9 	.word	0x0800e7f9
 800e7a8:	0800e775 	.word	0x0800e775
 800e7ac:	0800e775 	.word	0x0800e775
 800e7b0:	0800e775 	.word	0x0800e775
 800e7b4:	0800e775 	.word	0x0800e775
 800e7b8:	0800e8f9 	.word	0x0800e8f9
 800e7bc:	0800e823 	.word	0x0800e823
 800e7c0:	0800e8b3 	.word	0x0800e8b3
 800e7c4:	0800e775 	.word	0x0800e775
 800e7c8:	0800e775 	.word	0x0800e775
 800e7cc:	0800e91b 	.word	0x0800e91b
 800e7d0:	0800e775 	.word	0x0800e775
 800e7d4:	0800e823 	.word	0x0800e823
 800e7d8:	0800e775 	.word	0x0800e775
 800e7dc:	0800e775 	.word	0x0800e775
 800e7e0:	0800e8bb 	.word	0x0800e8bb
 800e7e4:	6833      	ldr	r3, [r6, #0]
 800e7e6:	1d1a      	adds	r2, r3, #4
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	6032      	str	r2, [r6, #0]
 800e7ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e09d      	b.n	800e934 <_printf_i+0x1e8>
 800e7f8:	6833      	ldr	r3, [r6, #0]
 800e7fa:	6820      	ldr	r0, [r4, #0]
 800e7fc:	1d19      	adds	r1, r3, #4
 800e7fe:	6031      	str	r1, [r6, #0]
 800e800:	0606      	lsls	r6, r0, #24
 800e802:	d501      	bpl.n	800e808 <_printf_i+0xbc>
 800e804:	681d      	ldr	r5, [r3, #0]
 800e806:	e003      	b.n	800e810 <_printf_i+0xc4>
 800e808:	0645      	lsls	r5, r0, #25
 800e80a:	d5fb      	bpl.n	800e804 <_printf_i+0xb8>
 800e80c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e810:	2d00      	cmp	r5, #0
 800e812:	da03      	bge.n	800e81c <_printf_i+0xd0>
 800e814:	232d      	movs	r3, #45	@ 0x2d
 800e816:	426d      	negs	r5, r5
 800e818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e81c:	4859      	ldr	r0, [pc, #356]	@ (800e984 <_printf_i+0x238>)
 800e81e:	230a      	movs	r3, #10
 800e820:	e011      	b.n	800e846 <_printf_i+0xfa>
 800e822:	6821      	ldr	r1, [r4, #0]
 800e824:	6833      	ldr	r3, [r6, #0]
 800e826:	0608      	lsls	r0, r1, #24
 800e828:	f853 5b04 	ldr.w	r5, [r3], #4
 800e82c:	d402      	bmi.n	800e834 <_printf_i+0xe8>
 800e82e:	0649      	lsls	r1, r1, #25
 800e830:	bf48      	it	mi
 800e832:	b2ad      	uxthmi	r5, r5
 800e834:	2f6f      	cmp	r7, #111	@ 0x6f
 800e836:	4853      	ldr	r0, [pc, #332]	@ (800e984 <_printf_i+0x238>)
 800e838:	6033      	str	r3, [r6, #0]
 800e83a:	bf14      	ite	ne
 800e83c:	230a      	movne	r3, #10
 800e83e:	2308      	moveq	r3, #8
 800e840:	2100      	movs	r1, #0
 800e842:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e846:	6866      	ldr	r6, [r4, #4]
 800e848:	60a6      	str	r6, [r4, #8]
 800e84a:	2e00      	cmp	r6, #0
 800e84c:	bfa2      	ittt	ge
 800e84e:	6821      	ldrge	r1, [r4, #0]
 800e850:	f021 0104 	bicge.w	r1, r1, #4
 800e854:	6021      	strge	r1, [r4, #0]
 800e856:	b90d      	cbnz	r5, 800e85c <_printf_i+0x110>
 800e858:	2e00      	cmp	r6, #0
 800e85a:	d04b      	beq.n	800e8f4 <_printf_i+0x1a8>
 800e85c:	4616      	mov	r6, r2
 800e85e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e862:	fb03 5711 	mls	r7, r3, r1, r5
 800e866:	5dc7      	ldrb	r7, [r0, r7]
 800e868:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e86c:	462f      	mov	r7, r5
 800e86e:	42bb      	cmp	r3, r7
 800e870:	460d      	mov	r5, r1
 800e872:	d9f4      	bls.n	800e85e <_printf_i+0x112>
 800e874:	2b08      	cmp	r3, #8
 800e876:	d10b      	bne.n	800e890 <_printf_i+0x144>
 800e878:	6823      	ldr	r3, [r4, #0]
 800e87a:	07df      	lsls	r7, r3, #31
 800e87c:	d508      	bpl.n	800e890 <_printf_i+0x144>
 800e87e:	6923      	ldr	r3, [r4, #16]
 800e880:	6861      	ldr	r1, [r4, #4]
 800e882:	4299      	cmp	r1, r3
 800e884:	bfde      	ittt	le
 800e886:	2330      	movle	r3, #48	@ 0x30
 800e888:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e88c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e890:	1b92      	subs	r2, r2, r6
 800e892:	6122      	str	r2, [r4, #16]
 800e894:	f8cd a000 	str.w	sl, [sp]
 800e898:	464b      	mov	r3, r9
 800e89a:	aa03      	add	r2, sp, #12
 800e89c:	4621      	mov	r1, r4
 800e89e:	4640      	mov	r0, r8
 800e8a0:	f7ff fee6 	bl	800e670 <_printf_common>
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	d14a      	bne.n	800e93e <_printf_i+0x1f2>
 800e8a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8ac:	b004      	add	sp, #16
 800e8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8b2:	6823      	ldr	r3, [r4, #0]
 800e8b4:	f043 0320 	orr.w	r3, r3, #32
 800e8b8:	6023      	str	r3, [r4, #0]
 800e8ba:	4833      	ldr	r0, [pc, #204]	@ (800e988 <_printf_i+0x23c>)
 800e8bc:	2778      	movs	r7, #120	@ 0x78
 800e8be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	6831      	ldr	r1, [r6, #0]
 800e8c6:	061f      	lsls	r7, r3, #24
 800e8c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800e8cc:	d402      	bmi.n	800e8d4 <_printf_i+0x188>
 800e8ce:	065f      	lsls	r7, r3, #25
 800e8d0:	bf48      	it	mi
 800e8d2:	b2ad      	uxthmi	r5, r5
 800e8d4:	6031      	str	r1, [r6, #0]
 800e8d6:	07d9      	lsls	r1, r3, #31
 800e8d8:	bf44      	itt	mi
 800e8da:	f043 0320 	orrmi.w	r3, r3, #32
 800e8de:	6023      	strmi	r3, [r4, #0]
 800e8e0:	b11d      	cbz	r5, 800e8ea <_printf_i+0x19e>
 800e8e2:	2310      	movs	r3, #16
 800e8e4:	e7ac      	b.n	800e840 <_printf_i+0xf4>
 800e8e6:	4827      	ldr	r0, [pc, #156]	@ (800e984 <_printf_i+0x238>)
 800e8e8:	e7e9      	b.n	800e8be <_printf_i+0x172>
 800e8ea:	6823      	ldr	r3, [r4, #0]
 800e8ec:	f023 0320 	bic.w	r3, r3, #32
 800e8f0:	6023      	str	r3, [r4, #0]
 800e8f2:	e7f6      	b.n	800e8e2 <_printf_i+0x196>
 800e8f4:	4616      	mov	r6, r2
 800e8f6:	e7bd      	b.n	800e874 <_printf_i+0x128>
 800e8f8:	6833      	ldr	r3, [r6, #0]
 800e8fa:	6825      	ldr	r5, [r4, #0]
 800e8fc:	6961      	ldr	r1, [r4, #20]
 800e8fe:	1d18      	adds	r0, r3, #4
 800e900:	6030      	str	r0, [r6, #0]
 800e902:	062e      	lsls	r6, r5, #24
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	d501      	bpl.n	800e90c <_printf_i+0x1c0>
 800e908:	6019      	str	r1, [r3, #0]
 800e90a:	e002      	b.n	800e912 <_printf_i+0x1c6>
 800e90c:	0668      	lsls	r0, r5, #25
 800e90e:	d5fb      	bpl.n	800e908 <_printf_i+0x1bc>
 800e910:	8019      	strh	r1, [r3, #0]
 800e912:	2300      	movs	r3, #0
 800e914:	6123      	str	r3, [r4, #16]
 800e916:	4616      	mov	r6, r2
 800e918:	e7bc      	b.n	800e894 <_printf_i+0x148>
 800e91a:	6833      	ldr	r3, [r6, #0]
 800e91c:	1d1a      	adds	r2, r3, #4
 800e91e:	6032      	str	r2, [r6, #0]
 800e920:	681e      	ldr	r6, [r3, #0]
 800e922:	6862      	ldr	r2, [r4, #4]
 800e924:	2100      	movs	r1, #0
 800e926:	4630      	mov	r0, r6
 800e928:	f7f1 fcd2 	bl	80002d0 <memchr>
 800e92c:	b108      	cbz	r0, 800e932 <_printf_i+0x1e6>
 800e92e:	1b80      	subs	r0, r0, r6
 800e930:	6060      	str	r0, [r4, #4]
 800e932:	6863      	ldr	r3, [r4, #4]
 800e934:	6123      	str	r3, [r4, #16]
 800e936:	2300      	movs	r3, #0
 800e938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e93c:	e7aa      	b.n	800e894 <_printf_i+0x148>
 800e93e:	6923      	ldr	r3, [r4, #16]
 800e940:	4632      	mov	r2, r6
 800e942:	4649      	mov	r1, r9
 800e944:	4640      	mov	r0, r8
 800e946:	47d0      	blx	sl
 800e948:	3001      	adds	r0, #1
 800e94a:	d0ad      	beq.n	800e8a8 <_printf_i+0x15c>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	079b      	lsls	r3, r3, #30
 800e950:	d413      	bmi.n	800e97a <_printf_i+0x22e>
 800e952:	68e0      	ldr	r0, [r4, #12]
 800e954:	9b03      	ldr	r3, [sp, #12]
 800e956:	4298      	cmp	r0, r3
 800e958:	bfb8      	it	lt
 800e95a:	4618      	movlt	r0, r3
 800e95c:	e7a6      	b.n	800e8ac <_printf_i+0x160>
 800e95e:	2301      	movs	r3, #1
 800e960:	4632      	mov	r2, r6
 800e962:	4649      	mov	r1, r9
 800e964:	4640      	mov	r0, r8
 800e966:	47d0      	blx	sl
 800e968:	3001      	adds	r0, #1
 800e96a:	d09d      	beq.n	800e8a8 <_printf_i+0x15c>
 800e96c:	3501      	adds	r5, #1
 800e96e:	68e3      	ldr	r3, [r4, #12]
 800e970:	9903      	ldr	r1, [sp, #12]
 800e972:	1a5b      	subs	r3, r3, r1
 800e974:	42ab      	cmp	r3, r5
 800e976:	dcf2      	bgt.n	800e95e <_printf_i+0x212>
 800e978:	e7eb      	b.n	800e952 <_printf_i+0x206>
 800e97a:	2500      	movs	r5, #0
 800e97c:	f104 0619 	add.w	r6, r4, #25
 800e980:	e7f5      	b.n	800e96e <_printf_i+0x222>
 800e982:	bf00      	nop
 800e984:	0801024b 	.word	0x0801024b
 800e988:	0801025c 	.word	0x0801025c

0800e98c <__sflush_r>:
 800e98c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e994:	0716      	lsls	r6, r2, #28
 800e996:	4605      	mov	r5, r0
 800e998:	460c      	mov	r4, r1
 800e99a:	d454      	bmi.n	800ea46 <__sflush_r+0xba>
 800e99c:	684b      	ldr	r3, [r1, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	dc02      	bgt.n	800e9a8 <__sflush_r+0x1c>
 800e9a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	dd48      	ble.n	800ea3a <__sflush_r+0xae>
 800e9a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9aa:	2e00      	cmp	r6, #0
 800e9ac:	d045      	beq.n	800ea3a <__sflush_r+0xae>
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e9b4:	682f      	ldr	r7, [r5, #0]
 800e9b6:	6a21      	ldr	r1, [r4, #32]
 800e9b8:	602b      	str	r3, [r5, #0]
 800e9ba:	d030      	beq.n	800ea1e <__sflush_r+0x92>
 800e9bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e9be:	89a3      	ldrh	r3, [r4, #12]
 800e9c0:	0759      	lsls	r1, r3, #29
 800e9c2:	d505      	bpl.n	800e9d0 <__sflush_r+0x44>
 800e9c4:	6863      	ldr	r3, [r4, #4]
 800e9c6:	1ad2      	subs	r2, r2, r3
 800e9c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e9ca:	b10b      	cbz	r3, 800e9d0 <__sflush_r+0x44>
 800e9cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e9ce:	1ad2      	subs	r2, r2, r3
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9d4:	6a21      	ldr	r1, [r4, #32]
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	47b0      	blx	r6
 800e9da:	1c43      	adds	r3, r0, #1
 800e9dc:	89a3      	ldrh	r3, [r4, #12]
 800e9de:	d106      	bne.n	800e9ee <__sflush_r+0x62>
 800e9e0:	6829      	ldr	r1, [r5, #0]
 800e9e2:	291d      	cmp	r1, #29
 800e9e4:	d82b      	bhi.n	800ea3e <__sflush_r+0xb2>
 800e9e6:	4a2a      	ldr	r2, [pc, #168]	@ (800ea90 <__sflush_r+0x104>)
 800e9e8:	410a      	asrs	r2, r1
 800e9ea:	07d6      	lsls	r6, r2, #31
 800e9ec:	d427      	bmi.n	800ea3e <__sflush_r+0xb2>
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	6062      	str	r2, [r4, #4]
 800e9f2:	04d9      	lsls	r1, r3, #19
 800e9f4:	6922      	ldr	r2, [r4, #16]
 800e9f6:	6022      	str	r2, [r4, #0]
 800e9f8:	d504      	bpl.n	800ea04 <__sflush_r+0x78>
 800e9fa:	1c42      	adds	r2, r0, #1
 800e9fc:	d101      	bne.n	800ea02 <__sflush_r+0x76>
 800e9fe:	682b      	ldr	r3, [r5, #0]
 800ea00:	b903      	cbnz	r3, 800ea04 <__sflush_r+0x78>
 800ea02:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea06:	602f      	str	r7, [r5, #0]
 800ea08:	b1b9      	cbz	r1, 800ea3a <__sflush_r+0xae>
 800ea0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea0e:	4299      	cmp	r1, r3
 800ea10:	d002      	beq.n	800ea18 <__sflush_r+0x8c>
 800ea12:	4628      	mov	r0, r5
 800ea14:	f7ff fbf2 	bl	800e1fc <_free_r>
 800ea18:	2300      	movs	r3, #0
 800ea1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea1c:	e00d      	b.n	800ea3a <__sflush_r+0xae>
 800ea1e:	2301      	movs	r3, #1
 800ea20:	4628      	mov	r0, r5
 800ea22:	47b0      	blx	r6
 800ea24:	4602      	mov	r2, r0
 800ea26:	1c50      	adds	r0, r2, #1
 800ea28:	d1c9      	bne.n	800e9be <__sflush_r+0x32>
 800ea2a:	682b      	ldr	r3, [r5, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d0c6      	beq.n	800e9be <__sflush_r+0x32>
 800ea30:	2b1d      	cmp	r3, #29
 800ea32:	d001      	beq.n	800ea38 <__sflush_r+0xac>
 800ea34:	2b16      	cmp	r3, #22
 800ea36:	d11e      	bne.n	800ea76 <__sflush_r+0xea>
 800ea38:	602f      	str	r7, [r5, #0]
 800ea3a:	2000      	movs	r0, #0
 800ea3c:	e022      	b.n	800ea84 <__sflush_r+0xf8>
 800ea3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea42:	b21b      	sxth	r3, r3
 800ea44:	e01b      	b.n	800ea7e <__sflush_r+0xf2>
 800ea46:	690f      	ldr	r7, [r1, #16]
 800ea48:	2f00      	cmp	r7, #0
 800ea4a:	d0f6      	beq.n	800ea3a <__sflush_r+0xae>
 800ea4c:	0793      	lsls	r3, r2, #30
 800ea4e:	680e      	ldr	r6, [r1, #0]
 800ea50:	bf08      	it	eq
 800ea52:	694b      	ldreq	r3, [r1, #20]
 800ea54:	600f      	str	r7, [r1, #0]
 800ea56:	bf18      	it	ne
 800ea58:	2300      	movne	r3, #0
 800ea5a:	eba6 0807 	sub.w	r8, r6, r7
 800ea5e:	608b      	str	r3, [r1, #8]
 800ea60:	f1b8 0f00 	cmp.w	r8, #0
 800ea64:	dde9      	ble.n	800ea3a <__sflush_r+0xae>
 800ea66:	6a21      	ldr	r1, [r4, #32]
 800ea68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ea6a:	4643      	mov	r3, r8
 800ea6c:	463a      	mov	r2, r7
 800ea6e:	4628      	mov	r0, r5
 800ea70:	47b0      	blx	r6
 800ea72:	2800      	cmp	r0, #0
 800ea74:	dc08      	bgt.n	800ea88 <__sflush_r+0xfc>
 800ea76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea7e:	81a3      	strh	r3, [r4, #12]
 800ea80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea88:	4407      	add	r7, r0
 800ea8a:	eba8 0800 	sub.w	r8, r8, r0
 800ea8e:	e7e7      	b.n	800ea60 <__sflush_r+0xd4>
 800ea90:	dfbffffe 	.word	0xdfbffffe

0800ea94 <_fflush_r>:
 800ea94:	b538      	push	{r3, r4, r5, lr}
 800ea96:	690b      	ldr	r3, [r1, #16]
 800ea98:	4605      	mov	r5, r0
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	b913      	cbnz	r3, 800eaa4 <_fflush_r+0x10>
 800ea9e:	2500      	movs	r5, #0
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	b118      	cbz	r0, 800eaae <_fflush_r+0x1a>
 800eaa6:	6a03      	ldr	r3, [r0, #32]
 800eaa8:	b90b      	cbnz	r3, 800eaae <_fflush_r+0x1a>
 800eaaa:	f7ff f9a1 	bl	800ddf0 <__sinit>
 800eaae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d0f3      	beq.n	800ea9e <_fflush_r+0xa>
 800eab6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eab8:	07d0      	lsls	r0, r2, #31
 800eaba:	d404      	bmi.n	800eac6 <_fflush_r+0x32>
 800eabc:	0599      	lsls	r1, r3, #22
 800eabe:	d402      	bmi.n	800eac6 <_fflush_r+0x32>
 800eac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eac2:	f7ff fb8a 	bl	800e1da <__retarget_lock_acquire_recursive>
 800eac6:	4628      	mov	r0, r5
 800eac8:	4621      	mov	r1, r4
 800eaca:	f7ff ff5f 	bl	800e98c <__sflush_r>
 800eace:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ead0:	07da      	lsls	r2, r3, #31
 800ead2:	4605      	mov	r5, r0
 800ead4:	d4e4      	bmi.n	800eaa0 <_fflush_r+0xc>
 800ead6:	89a3      	ldrh	r3, [r4, #12]
 800ead8:	059b      	lsls	r3, r3, #22
 800eada:	d4e1      	bmi.n	800eaa0 <_fflush_r+0xc>
 800eadc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eade:	f7ff fb7d 	bl	800e1dc <__retarget_lock_release_recursive>
 800eae2:	e7dd      	b.n	800eaa0 <_fflush_r+0xc>

0800eae4 <__swhatbuf_r>:
 800eae4:	b570      	push	{r4, r5, r6, lr}
 800eae6:	460c      	mov	r4, r1
 800eae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaec:	2900      	cmp	r1, #0
 800eaee:	b096      	sub	sp, #88	@ 0x58
 800eaf0:	4615      	mov	r5, r2
 800eaf2:	461e      	mov	r6, r3
 800eaf4:	da0d      	bge.n	800eb12 <__swhatbuf_r+0x2e>
 800eaf6:	89a3      	ldrh	r3, [r4, #12]
 800eaf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eafc:	f04f 0100 	mov.w	r1, #0
 800eb00:	bf14      	ite	ne
 800eb02:	2340      	movne	r3, #64	@ 0x40
 800eb04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eb08:	2000      	movs	r0, #0
 800eb0a:	6031      	str	r1, [r6, #0]
 800eb0c:	602b      	str	r3, [r5, #0]
 800eb0e:	b016      	add	sp, #88	@ 0x58
 800eb10:	bd70      	pop	{r4, r5, r6, pc}
 800eb12:	466a      	mov	r2, sp
 800eb14:	f000 f848 	bl	800eba8 <_fstat_r>
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	dbec      	blt.n	800eaf6 <__swhatbuf_r+0x12>
 800eb1c:	9901      	ldr	r1, [sp, #4]
 800eb1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eb22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eb26:	4259      	negs	r1, r3
 800eb28:	4159      	adcs	r1, r3
 800eb2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb2e:	e7eb      	b.n	800eb08 <__swhatbuf_r+0x24>

0800eb30 <__smakebuf_r>:
 800eb30:	898b      	ldrh	r3, [r1, #12]
 800eb32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb34:	079d      	lsls	r5, r3, #30
 800eb36:	4606      	mov	r6, r0
 800eb38:	460c      	mov	r4, r1
 800eb3a:	d507      	bpl.n	800eb4c <__smakebuf_r+0x1c>
 800eb3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eb40:	6023      	str	r3, [r4, #0]
 800eb42:	6123      	str	r3, [r4, #16]
 800eb44:	2301      	movs	r3, #1
 800eb46:	6163      	str	r3, [r4, #20]
 800eb48:	b003      	add	sp, #12
 800eb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb4c:	ab01      	add	r3, sp, #4
 800eb4e:	466a      	mov	r2, sp
 800eb50:	f7ff ffc8 	bl	800eae4 <__swhatbuf_r>
 800eb54:	9f00      	ldr	r7, [sp, #0]
 800eb56:	4605      	mov	r5, r0
 800eb58:	4639      	mov	r1, r7
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	f7ff fbba 	bl	800e2d4 <_malloc_r>
 800eb60:	b948      	cbnz	r0, 800eb76 <__smakebuf_r+0x46>
 800eb62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb66:	059a      	lsls	r2, r3, #22
 800eb68:	d4ee      	bmi.n	800eb48 <__smakebuf_r+0x18>
 800eb6a:	f023 0303 	bic.w	r3, r3, #3
 800eb6e:	f043 0302 	orr.w	r3, r3, #2
 800eb72:	81a3      	strh	r3, [r4, #12]
 800eb74:	e7e2      	b.n	800eb3c <__smakebuf_r+0xc>
 800eb76:	89a3      	ldrh	r3, [r4, #12]
 800eb78:	6020      	str	r0, [r4, #0]
 800eb7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb7e:	81a3      	strh	r3, [r4, #12]
 800eb80:	9b01      	ldr	r3, [sp, #4]
 800eb82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eb86:	b15b      	cbz	r3, 800eba0 <__smakebuf_r+0x70>
 800eb88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	f000 f81d 	bl	800ebcc <_isatty_r>
 800eb92:	b128      	cbz	r0, 800eba0 <__smakebuf_r+0x70>
 800eb94:	89a3      	ldrh	r3, [r4, #12]
 800eb96:	f023 0303 	bic.w	r3, r3, #3
 800eb9a:	f043 0301 	orr.w	r3, r3, #1
 800eb9e:	81a3      	strh	r3, [r4, #12]
 800eba0:	89a3      	ldrh	r3, [r4, #12]
 800eba2:	431d      	orrs	r5, r3
 800eba4:	81a5      	strh	r5, [r4, #12]
 800eba6:	e7cf      	b.n	800eb48 <__smakebuf_r+0x18>

0800eba8 <_fstat_r>:
 800eba8:	b538      	push	{r3, r4, r5, lr}
 800ebaa:	4d07      	ldr	r5, [pc, #28]	@ (800ebc8 <_fstat_r+0x20>)
 800ebac:	2300      	movs	r3, #0
 800ebae:	4604      	mov	r4, r0
 800ebb0:	4608      	mov	r0, r1
 800ebb2:	4611      	mov	r1, r2
 800ebb4:	602b      	str	r3, [r5, #0]
 800ebb6:	f7f4 fe92 	bl	80038de <_fstat>
 800ebba:	1c43      	adds	r3, r0, #1
 800ebbc:	d102      	bne.n	800ebc4 <_fstat_r+0x1c>
 800ebbe:	682b      	ldr	r3, [r5, #0]
 800ebc0:	b103      	cbz	r3, 800ebc4 <_fstat_r+0x1c>
 800ebc2:	6023      	str	r3, [r4, #0]
 800ebc4:	bd38      	pop	{r3, r4, r5, pc}
 800ebc6:	bf00      	nop
 800ebc8:	20014b50 	.word	0x20014b50

0800ebcc <_isatty_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4d06      	ldr	r5, [pc, #24]	@ (800ebe8 <_isatty_r+0x1c>)
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	4608      	mov	r0, r1
 800ebd6:	602b      	str	r3, [r5, #0]
 800ebd8:	f7f4 fe91 	bl	80038fe <_isatty>
 800ebdc:	1c43      	adds	r3, r0, #1
 800ebde:	d102      	bne.n	800ebe6 <_isatty_r+0x1a>
 800ebe0:	682b      	ldr	r3, [r5, #0]
 800ebe2:	b103      	cbz	r3, 800ebe6 <_isatty_r+0x1a>
 800ebe4:	6023      	str	r3, [r4, #0]
 800ebe6:	bd38      	pop	{r3, r4, r5, pc}
 800ebe8:	20014b50 	.word	0x20014b50

0800ebec <_sbrk_r>:
 800ebec:	b538      	push	{r3, r4, r5, lr}
 800ebee:	4d06      	ldr	r5, [pc, #24]	@ (800ec08 <_sbrk_r+0x1c>)
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	4608      	mov	r0, r1
 800ebf6:	602b      	str	r3, [r5, #0]
 800ebf8:	f001 f83c 	bl	800fc74 <_sbrk>
 800ebfc:	1c43      	adds	r3, r0, #1
 800ebfe:	d102      	bne.n	800ec06 <_sbrk_r+0x1a>
 800ec00:	682b      	ldr	r3, [r5, #0]
 800ec02:	b103      	cbz	r3, 800ec06 <_sbrk_r+0x1a>
 800ec04:	6023      	str	r3, [r4, #0]
 800ec06:	bd38      	pop	{r3, r4, r5, pc}
 800ec08:	20014b50 	.word	0x20014b50

0800ec0c <pow>:
 800ec0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec0e:	ed2d 8b02 	vpush	{d8}
 800ec12:	eeb0 8a40 	vmov.f32	s16, s0
 800ec16:	eef0 8a60 	vmov.f32	s17, s1
 800ec1a:	ec55 4b11 	vmov	r4, r5, d1
 800ec1e:	f000 f947 	bl	800eeb0 <__ieee754_pow>
 800ec22:	4622      	mov	r2, r4
 800ec24:	462b      	mov	r3, r5
 800ec26:	4620      	mov	r0, r4
 800ec28:	4629      	mov	r1, r5
 800ec2a:	ec57 6b10 	vmov	r6, r7, d0
 800ec2e:	f7f1 fff5 	bl	8000c1c <__aeabi_dcmpun>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	d13b      	bne.n	800ecae <pow+0xa2>
 800ec36:	ec51 0b18 	vmov	r0, r1, d8
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	f7f1 ffbb 	bl	8000bb8 <__aeabi_dcmpeq>
 800ec42:	b1b8      	cbz	r0, 800ec74 <pow+0x68>
 800ec44:	2200      	movs	r2, #0
 800ec46:	2300      	movs	r3, #0
 800ec48:	4620      	mov	r0, r4
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	f7f1 ffb4 	bl	8000bb8 <__aeabi_dcmpeq>
 800ec50:	2800      	cmp	r0, #0
 800ec52:	d146      	bne.n	800ece2 <pow+0xd6>
 800ec54:	ec45 4b10 	vmov	d0, r4, r5
 800ec58:	f000 f848 	bl	800ecec <finite>
 800ec5c:	b338      	cbz	r0, 800ecae <pow+0xa2>
 800ec5e:	2200      	movs	r2, #0
 800ec60:	2300      	movs	r3, #0
 800ec62:	4620      	mov	r0, r4
 800ec64:	4629      	mov	r1, r5
 800ec66:	f7f1 ffb1 	bl	8000bcc <__aeabi_dcmplt>
 800ec6a:	b300      	cbz	r0, 800ecae <pow+0xa2>
 800ec6c:	f7ff fa8a 	bl	800e184 <__errno>
 800ec70:	2322      	movs	r3, #34	@ 0x22
 800ec72:	e01b      	b.n	800ecac <pow+0xa0>
 800ec74:	ec47 6b10 	vmov	d0, r6, r7
 800ec78:	f000 f838 	bl	800ecec <finite>
 800ec7c:	b9e0      	cbnz	r0, 800ecb8 <pow+0xac>
 800ec7e:	eeb0 0a48 	vmov.f32	s0, s16
 800ec82:	eef0 0a68 	vmov.f32	s1, s17
 800ec86:	f000 f831 	bl	800ecec <finite>
 800ec8a:	b1a8      	cbz	r0, 800ecb8 <pow+0xac>
 800ec8c:	ec45 4b10 	vmov	d0, r4, r5
 800ec90:	f000 f82c 	bl	800ecec <finite>
 800ec94:	b180      	cbz	r0, 800ecb8 <pow+0xac>
 800ec96:	4632      	mov	r2, r6
 800ec98:	463b      	mov	r3, r7
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	4639      	mov	r1, r7
 800ec9e:	f7f1 ffbd 	bl	8000c1c <__aeabi_dcmpun>
 800eca2:	2800      	cmp	r0, #0
 800eca4:	d0e2      	beq.n	800ec6c <pow+0x60>
 800eca6:	f7ff fa6d 	bl	800e184 <__errno>
 800ecaa:	2321      	movs	r3, #33	@ 0x21
 800ecac:	6003      	str	r3, [r0, #0]
 800ecae:	ecbd 8b02 	vpop	{d8}
 800ecb2:	ec47 6b10 	vmov	d0, r6, r7
 800ecb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecb8:	2200      	movs	r2, #0
 800ecba:	2300      	movs	r3, #0
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	4639      	mov	r1, r7
 800ecc0:	f7f1 ff7a 	bl	8000bb8 <__aeabi_dcmpeq>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d0f2      	beq.n	800ecae <pow+0xa2>
 800ecc8:	eeb0 0a48 	vmov.f32	s0, s16
 800eccc:	eef0 0a68 	vmov.f32	s1, s17
 800ecd0:	f000 f80c 	bl	800ecec <finite>
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	d0ea      	beq.n	800ecae <pow+0xa2>
 800ecd8:	ec45 4b10 	vmov	d0, r4, r5
 800ecdc:	f000 f806 	bl	800ecec <finite>
 800ece0:	e7c3      	b.n	800ec6a <pow+0x5e>
 800ece2:	4f01      	ldr	r7, [pc, #4]	@ (800ece8 <pow+0xdc>)
 800ece4:	2600      	movs	r6, #0
 800ece6:	e7e2      	b.n	800ecae <pow+0xa2>
 800ece8:	3ff00000 	.word	0x3ff00000

0800ecec <finite>:
 800ecec:	b082      	sub	sp, #8
 800ecee:	ed8d 0b00 	vstr	d0, [sp]
 800ecf2:	9801      	ldr	r0, [sp, #4]
 800ecf4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ecf8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ecfc:	0fc0      	lsrs	r0, r0, #31
 800ecfe:	b002      	add	sp, #8
 800ed00:	4770      	bx	lr

0800ed02 <fmax>:
 800ed02:	b508      	push	{r3, lr}
 800ed04:	ed2d 8b04 	vpush	{d8-d9}
 800ed08:	eeb0 8a40 	vmov.f32	s16, s0
 800ed0c:	eef0 8a60 	vmov.f32	s17, s1
 800ed10:	eeb0 9a41 	vmov.f32	s18, s2
 800ed14:	eef0 9a61 	vmov.f32	s19, s3
 800ed18:	f000 f81e 	bl	800ed58 <__fpclassifyd>
 800ed1c:	b950      	cbnz	r0, 800ed34 <fmax+0x32>
 800ed1e:	eeb0 8a49 	vmov.f32	s16, s18
 800ed22:	eef0 8a69 	vmov.f32	s17, s19
 800ed26:	eeb0 0a48 	vmov.f32	s0, s16
 800ed2a:	eef0 0a68 	vmov.f32	s1, s17
 800ed2e:	ecbd 8b04 	vpop	{d8-d9}
 800ed32:	bd08      	pop	{r3, pc}
 800ed34:	eeb0 0a49 	vmov.f32	s0, s18
 800ed38:	eef0 0a69 	vmov.f32	s1, s19
 800ed3c:	f000 f80c 	bl	800ed58 <__fpclassifyd>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d0f0      	beq.n	800ed26 <fmax+0x24>
 800ed44:	ec53 2b19 	vmov	r2, r3, d9
 800ed48:	ec51 0b18 	vmov	r0, r1, d8
 800ed4c:	f7f1 ff5c 	bl	8000c08 <__aeabi_dcmpgt>
 800ed50:	2800      	cmp	r0, #0
 800ed52:	d0e4      	beq.n	800ed1e <fmax+0x1c>
 800ed54:	e7e7      	b.n	800ed26 <fmax+0x24>
	...

0800ed58 <__fpclassifyd>:
 800ed58:	ec51 0b10 	vmov	r0, r1, d0
 800ed5c:	b510      	push	{r4, lr}
 800ed5e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800ed62:	460b      	mov	r3, r1
 800ed64:	d019      	beq.n	800ed9a <__fpclassifyd+0x42>
 800ed66:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800ed6a:	490e      	ldr	r1, [pc, #56]	@ (800eda4 <__fpclassifyd+0x4c>)
 800ed6c:	428a      	cmp	r2, r1
 800ed6e:	d90e      	bls.n	800ed8e <__fpclassifyd+0x36>
 800ed70:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800ed74:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800ed78:	428a      	cmp	r2, r1
 800ed7a:	d908      	bls.n	800ed8e <__fpclassifyd+0x36>
 800ed7c:	4a0a      	ldr	r2, [pc, #40]	@ (800eda8 <__fpclassifyd+0x50>)
 800ed7e:	4213      	tst	r3, r2
 800ed80:	d007      	beq.n	800ed92 <__fpclassifyd+0x3a>
 800ed82:	4294      	cmp	r4, r2
 800ed84:	d107      	bne.n	800ed96 <__fpclassifyd+0x3e>
 800ed86:	fab0 f080 	clz	r0, r0
 800ed8a:	0940      	lsrs	r0, r0, #5
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	2004      	movs	r0, #4
 800ed90:	e7fc      	b.n	800ed8c <__fpclassifyd+0x34>
 800ed92:	2003      	movs	r0, #3
 800ed94:	e7fa      	b.n	800ed8c <__fpclassifyd+0x34>
 800ed96:	2000      	movs	r0, #0
 800ed98:	e7f8      	b.n	800ed8c <__fpclassifyd+0x34>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d1ee      	bne.n	800ed7c <__fpclassifyd+0x24>
 800ed9e:	2002      	movs	r0, #2
 800eda0:	e7f4      	b.n	800ed8c <__fpclassifyd+0x34>
 800eda2:	bf00      	nop
 800eda4:	7fdfffff 	.word	0x7fdfffff
 800eda8:	7ff00000 	.word	0x7ff00000

0800edac <fminf>:
 800edac:	b508      	push	{r3, lr}
 800edae:	ed2d 8b02 	vpush	{d8}
 800edb2:	eeb0 8a40 	vmov.f32	s16, s0
 800edb6:	eef0 8a60 	vmov.f32	s17, s1
 800edba:	f000 f815 	bl	800ede8 <__fpclassifyf>
 800edbe:	b930      	cbnz	r0, 800edce <fminf+0x22>
 800edc0:	eeb0 8a68 	vmov.f32	s16, s17
 800edc4:	eeb0 0a48 	vmov.f32	s0, s16
 800edc8:	ecbd 8b02 	vpop	{d8}
 800edcc:	bd08      	pop	{r3, pc}
 800edce:	eeb0 0a68 	vmov.f32	s0, s17
 800edd2:	f000 f809 	bl	800ede8 <__fpclassifyf>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d0f4      	beq.n	800edc4 <fminf+0x18>
 800edda:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800edde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede2:	d5ed      	bpl.n	800edc0 <fminf+0x14>
 800ede4:	e7ee      	b.n	800edc4 <fminf+0x18>
	...

0800ede8 <__fpclassifyf>:
 800ede8:	ee10 3a10 	vmov	r3, s0
 800edec:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800edf0:	d00d      	beq.n	800ee0e <__fpclassifyf+0x26>
 800edf2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800edf6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800edfa:	d30a      	bcc.n	800ee12 <__fpclassifyf+0x2a>
 800edfc:	4b07      	ldr	r3, [pc, #28]	@ (800ee1c <__fpclassifyf+0x34>)
 800edfe:	1e42      	subs	r2, r0, #1
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d908      	bls.n	800ee16 <__fpclassifyf+0x2e>
 800ee04:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800ee08:	4258      	negs	r0, r3
 800ee0a:	4158      	adcs	r0, r3
 800ee0c:	4770      	bx	lr
 800ee0e:	2002      	movs	r0, #2
 800ee10:	4770      	bx	lr
 800ee12:	2004      	movs	r0, #4
 800ee14:	4770      	bx	lr
 800ee16:	2003      	movs	r0, #3
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	007ffffe 	.word	0x007ffffe

0800ee20 <round>:
 800ee20:	ec51 0b10 	vmov	r0, r1, d0
 800ee24:	b570      	push	{r4, r5, r6, lr}
 800ee26:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ee2a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800ee2e:	2a13      	cmp	r2, #19
 800ee30:	460b      	mov	r3, r1
 800ee32:	4605      	mov	r5, r0
 800ee34:	dc1b      	bgt.n	800ee6e <round+0x4e>
 800ee36:	2a00      	cmp	r2, #0
 800ee38:	da0b      	bge.n	800ee52 <round+0x32>
 800ee3a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ee3e:	3201      	adds	r2, #1
 800ee40:	bf04      	itt	eq
 800ee42:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800ee46:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	4610      	mov	r0, r2
 800ee50:	e015      	b.n	800ee7e <round+0x5e>
 800ee52:	4c15      	ldr	r4, [pc, #84]	@ (800eea8 <round+0x88>)
 800ee54:	4114      	asrs	r4, r2
 800ee56:	ea04 0601 	and.w	r6, r4, r1
 800ee5a:	4306      	orrs	r6, r0
 800ee5c:	d00f      	beq.n	800ee7e <round+0x5e>
 800ee5e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800ee62:	fa41 f202 	asr.w	r2, r1, r2
 800ee66:	4413      	add	r3, r2
 800ee68:	ea23 0304 	bic.w	r3, r3, r4
 800ee6c:	e7ed      	b.n	800ee4a <round+0x2a>
 800ee6e:	2a33      	cmp	r2, #51	@ 0x33
 800ee70:	dd08      	ble.n	800ee84 <round+0x64>
 800ee72:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800ee76:	d102      	bne.n	800ee7e <round+0x5e>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	f7f1 fa7f 	bl	800037c <__adddf3>
 800ee7e:	ec41 0b10 	vmov	d0, r0, r1
 800ee82:	bd70      	pop	{r4, r5, r6, pc}
 800ee84:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800ee88:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ee8c:	40f4      	lsrs	r4, r6
 800ee8e:	4204      	tst	r4, r0
 800ee90:	d0f5      	beq.n	800ee7e <round+0x5e>
 800ee92:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800ee96:	2201      	movs	r2, #1
 800ee98:	408a      	lsls	r2, r1
 800ee9a:	1952      	adds	r2, r2, r5
 800ee9c:	bf28      	it	cs
 800ee9e:	3301      	addcs	r3, #1
 800eea0:	ea22 0204 	bic.w	r2, r2, r4
 800eea4:	e7d2      	b.n	800ee4c <round+0x2c>
 800eea6:	bf00      	nop
 800eea8:	000fffff 	.word	0x000fffff
 800eeac:	00000000 	.word	0x00000000

0800eeb0 <__ieee754_pow>:
 800eeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb4:	b091      	sub	sp, #68	@ 0x44
 800eeb6:	ed8d 1b00 	vstr	d1, [sp]
 800eeba:	e9dd 1900 	ldrd	r1, r9, [sp]
 800eebe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800eec2:	ea5a 0001 	orrs.w	r0, sl, r1
 800eec6:	ec57 6b10 	vmov	r6, r7, d0
 800eeca:	d113      	bne.n	800eef4 <__ieee754_pow+0x44>
 800eecc:	19b3      	adds	r3, r6, r6
 800eece:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800eed2:	4152      	adcs	r2, r2
 800eed4:	4298      	cmp	r0, r3
 800eed6:	4b98      	ldr	r3, [pc, #608]	@ (800f138 <__ieee754_pow+0x288>)
 800eed8:	4193      	sbcs	r3, r2
 800eeda:	f080 84ea 	bcs.w	800f8b2 <__ieee754_pow+0xa02>
 800eede:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eee2:	4630      	mov	r0, r6
 800eee4:	4639      	mov	r1, r7
 800eee6:	f7f1 fa49 	bl	800037c <__adddf3>
 800eeea:	ec41 0b10 	vmov	d0, r0, r1
 800eeee:	b011      	add	sp, #68	@ 0x44
 800eef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eef4:	4a91      	ldr	r2, [pc, #580]	@ (800f13c <__ieee754_pow+0x28c>)
 800eef6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800eefa:	4590      	cmp	r8, r2
 800eefc:	463d      	mov	r5, r7
 800eefe:	4633      	mov	r3, r6
 800ef00:	d806      	bhi.n	800ef10 <__ieee754_pow+0x60>
 800ef02:	d101      	bne.n	800ef08 <__ieee754_pow+0x58>
 800ef04:	2e00      	cmp	r6, #0
 800ef06:	d1ea      	bne.n	800eede <__ieee754_pow+0x2e>
 800ef08:	4592      	cmp	sl, r2
 800ef0a:	d801      	bhi.n	800ef10 <__ieee754_pow+0x60>
 800ef0c:	d10e      	bne.n	800ef2c <__ieee754_pow+0x7c>
 800ef0e:	b169      	cbz	r1, 800ef2c <__ieee754_pow+0x7c>
 800ef10:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ef14:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ef18:	431d      	orrs	r5, r3
 800ef1a:	d1e0      	bne.n	800eede <__ieee754_pow+0x2e>
 800ef1c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ef20:	18db      	adds	r3, r3, r3
 800ef22:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ef26:	4152      	adcs	r2, r2
 800ef28:	429d      	cmp	r5, r3
 800ef2a:	e7d4      	b.n	800eed6 <__ieee754_pow+0x26>
 800ef2c:	2d00      	cmp	r5, #0
 800ef2e:	46c3      	mov	fp, r8
 800ef30:	da3a      	bge.n	800efa8 <__ieee754_pow+0xf8>
 800ef32:	4a83      	ldr	r2, [pc, #524]	@ (800f140 <__ieee754_pow+0x290>)
 800ef34:	4592      	cmp	sl, r2
 800ef36:	d84d      	bhi.n	800efd4 <__ieee754_pow+0x124>
 800ef38:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ef3c:	4592      	cmp	sl, r2
 800ef3e:	f240 84c7 	bls.w	800f8d0 <__ieee754_pow+0xa20>
 800ef42:	ea4f 522a 	mov.w	r2, sl, asr #20
 800ef46:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ef4a:	2a14      	cmp	r2, #20
 800ef4c:	dd0f      	ble.n	800ef6e <__ieee754_pow+0xbe>
 800ef4e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ef52:	fa21 f402 	lsr.w	r4, r1, r2
 800ef56:	fa04 f202 	lsl.w	r2, r4, r2
 800ef5a:	428a      	cmp	r2, r1
 800ef5c:	f040 84b8 	bne.w	800f8d0 <__ieee754_pow+0xa20>
 800ef60:	f004 0401 	and.w	r4, r4, #1
 800ef64:	f1c4 0402 	rsb	r4, r4, #2
 800ef68:	2900      	cmp	r1, #0
 800ef6a:	d158      	bne.n	800f01e <__ieee754_pow+0x16e>
 800ef6c:	e00e      	b.n	800ef8c <__ieee754_pow+0xdc>
 800ef6e:	2900      	cmp	r1, #0
 800ef70:	d154      	bne.n	800f01c <__ieee754_pow+0x16c>
 800ef72:	f1c2 0214 	rsb	r2, r2, #20
 800ef76:	fa4a f402 	asr.w	r4, sl, r2
 800ef7a:	fa04 f202 	lsl.w	r2, r4, r2
 800ef7e:	4552      	cmp	r2, sl
 800ef80:	f040 84a3 	bne.w	800f8ca <__ieee754_pow+0xa1a>
 800ef84:	f004 0401 	and.w	r4, r4, #1
 800ef88:	f1c4 0402 	rsb	r4, r4, #2
 800ef8c:	4a6d      	ldr	r2, [pc, #436]	@ (800f144 <__ieee754_pow+0x294>)
 800ef8e:	4592      	cmp	sl, r2
 800ef90:	d12e      	bne.n	800eff0 <__ieee754_pow+0x140>
 800ef92:	f1b9 0f00 	cmp.w	r9, #0
 800ef96:	f280 8494 	bge.w	800f8c2 <__ieee754_pow+0xa12>
 800ef9a:	496a      	ldr	r1, [pc, #424]	@ (800f144 <__ieee754_pow+0x294>)
 800ef9c:	4632      	mov	r2, r6
 800ef9e:	463b      	mov	r3, r7
 800efa0:	2000      	movs	r0, #0
 800efa2:	f7f1 fccb 	bl	800093c <__aeabi_ddiv>
 800efa6:	e7a0      	b.n	800eeea <__ieee754_pow+0x3a>
 800efa8:	2400      	movs	r4, #0
 800efaa:	bbc1      	cbnz	r1, 800f01e <__ieee754_pow+0x16e>
 800efac:	4a63      	ldr	r2, [pc, #396]	@ (800f13c <__ieee754_pow+0x28c>)
 800efae:	4592      	cmp	sl, r2
 800efb0:	d1ec      	bne.n	800ef8c <__ieee754_pow+0xdc>
 800efb2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800efb6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800efba:	431a      	orrs	r2, r3
 800efbc:	f000 8479 	beq.w	800f8b2 <__ieee754_pow+0xa02>
 800efc0:	4b61      	ldr	r3, [pc, #388]	@ (800f148 <__ieee754_pow+0x298>)
 800efc2:	4598      	cmp	r8, r3
 800efc4:	d908      	bls.n	800efd8 <__ieee754_pow+0x128>
 800efc6:	f1b9 0f00 	cmp.w	r9, #0
 800efca:	f2c0 8476 	blt.w	800f8ba <__ieee754_pow+0xa0a>
 800efce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efd2:	e78a      	b.n	800eeea <__ieee754_pow+0x3a>
 800efd4:	2402      	movs	r4, #2
 800efd6:	e7e8      	b.n	800efaa <__ieee754_pow+0xfa>
 800efd8:	f1b9 0f00 	cmp.w	r9, #0
 800efdc:	f04f 0000 	mov.w	r0, #0
 800efe0:	f04f 0100 	mov.w	r1, #0
 800efe4:	da81      	bge.n	800eeea <__ieee754_pow+0x3a>
 800efe6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800efea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800efee:	e77c      	b.n	800eeea <__ieee754_pow+0x3a>
 800eff0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800eff4:	d106      	bne.n	800f004 <__ieee754_pow+0x154>
 800eff6:	4632      	mov	r2, r6
 800eff8:	463b      	mov	r3, r7
 800effa:	4630      	mov	r0, r6
 800effc:	4639      	mov	r1, r7
 800effe:	f7f1 fb73 	bl	80006e8 <__aeabi_dmul>
 800f002:	e772      	b.n	800eeea <__ieee754_pow+0x3a>
 800f004:	4a51      	ldr	r2, [pc, #324]	@ (800f14c <__ieee754_pow+0x29c>)
 800f006:	4591      	cmp	r9, r2
 800f008:	d109      	bne.n	800f01e <__ieee754_pow+0x16e>
 800f00a:	2d00      	cmp	r5, #0
 800f00c:	db07      	blt.n	800f01e <__ieee754_pow+0x16e>
 800f00e:	ec47 6b10 	vmov	d0, r6, r7
 800f012:	b011      	add	sp, #68	@ 0x44
 800f014:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f018:	f000 bd52 	b.w	800fac0 <__ieee754_sqrt>
 800f01c:	2400      	movs	r4, #0
 800f01e:	ec47 6b10 	vmov	d0, r6, r7
 800f022:	9302      	str	r3, [sp, #8]
 800f024:	f000 fc88 	bl	800f938 <fabs>
 800f028:	9b02      	ldr	r3, [sp, #8]
 800f02a:	ec51 0b10 	vmov	r0, r1, d0
 800f02e:	bb53      	cbnz	r3, 800f086 <__ieee754_pow+0x1d6>
 800f030:	4b44      	ldr	r3, [pc, #272]	@ (800f144 <__ieee754_pow+0x294>)
 800f032:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f036:	429a      	cmp	r2, r3
 800f038:	d002      	beq.n	800f040 <__ieee754_pow+0x190>
 800f03a:	f1b8 0f00 	cmp.w	r8, #0
 800f03e:	d122      	bne.n	800f086 <__ieee754_pow+0x1d6>
 800f040:	f1b9 0f00 	cmp.w	r9, #0
 800f044:	da05      	bge.n	800f052 <__ieee754_pow+0x1a2>
 800f046:	4602      	mov	r2, r0
 800f048:	460b      	mov	r3, r1
 800f04a:	2000      	movs	r0, #0
 800f04c:	493d      	ldr	r1, [pc, #244]	@ (800f144 <__ieee754_pow+0x294>)
 800f04e:	f7f1 fc75 	bl	800093c <__aeabi_ddiv>
 800f052:	2d00      	cmp	r5, #0
 800f054:	f6bf af49 	bge.w	800eeea <__ieee754_pow+0x3a>
 800f058:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f05c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f060:	ea58 0804 	orrs.w	r8, r8, r4
 800f064:	d108      	bne.n	800f078 <__ieee754_pow+0x1c8>
 800f066:	4602      	mov	r2, r0
 800f068:	460b      	mov	r3, r1
 800f06a:	4610      	mov	r0, r2
 800f06c:	4619      	mov	r1, r3
 800f06e:	f7f1 f983 	bl	8000378 <__aeabi_dsub>
 800f072:	4602      	mov	r2, r0
 800f074:	460b      	mov	r3, r1
 800f076:	e794      	b.n	800efa2 <__ieee754_pow+0xf2>
 800f078:	2c01      	cmp	r4, #1
 800f07a:	f47f af36 	bne.w	800eeea <__ieee754_pow+0x3a>
 800f07e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f082:	4619      	mov	r1, r3
 800f084:	e731      	b.n	800eeea <__ieee754_pow+0x3a>
 800f086:	0feb      	lsrs	r3, r5, #31
 800f088:	3b01      	subs	r3, #1
 800f08a:	ea53 0204 	orrs.w	r2, r3, r4
 800f08e:	d102      	bne.n	800f096 <__ieee754_pow+0x1e6>
 800f090:	4632      	mov	r2, r6
 800f092:	463b      	mov	r3, r7
 800f094:	e7e9      	b.n	800f06a <__ieee754_pow+0x1ba>
 800f096:	3c01      	subs	r4, #1
 800f098:	431c      	orrs	r4, r3
 800f09a:	d016      	beq.n	800f0ca <__ieee754_pow+0x21a>
 800f09c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f128 <__ieee754_pow+0x278>
 800f0a0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f0a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f0a8:	f240 8112 	bls.w	800f2d0 <__ieee754_pow+0x420>
 800f0ac:	4b28      	ldr	r3, [pc, #160]	@ (800f150 <__ieee754_pow+0x2a0>)
 800f0ae:	459a      	cmp	sl, r3
 800f0b0:	4b25      	ldr	r3, [pc, #148]	@ (800f148 <__ieee754_pow+0x298>)
 800f0b2:	d916      	bls.n	800f0e2 <__ieee754_pow+0x232>
 800f0b4:	4598      	cmp	r8, r3
 800f0b6:	d80b      	bhi.n	800f0d0 <__ieee754_pow+0x220>
 800f0b8:	f1b9 0f00 	cmp.w	r9, #0
 800f0bc:	da0b      	bge.n	800f0d6 <__ieee754_pow+0x226>
 800f0be:	2000      	movs	r0, #0
 800f0c0:	b011      	add	sp, #68	@ 0x44
 800f0c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c6:	f000 bcf3 	b.w	800fab0 <__math_oflow>
 800f0ca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800f130 <__ieee754_pow+0x280>
 800f0ce:	e7e7      	b.n	800f0a0 <__ieee754_pow+0x1f0>
 800f0d0:	f1b9 0f00 	cmp.w	r9, #0
 800f0d4:	dcf3      	bgt.n	800f0be <__ieee754_pow+0x20e>
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	b011      	add	sp, #68	@ 0x44
 800f0da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0de:	f000 bcdf 	b.w	800faa0 <__math_uflow>
 800f0e2:	4598      	cmp	r8, r3
 800f0e4:	d20c      	bcs.n	800f100 <__ieee754_pow+0x250>
 800f0e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	f7f1 fd6d 	bl	8000bcc <__aeabi_dcmplt>
 800f0f2:	3800      	subs	r0, #0
 800f0f4:	bf18      	it	ne
 800f0f6:	2001      	movne	r0, #1
 800f0f8:	f1b9 0f00 	cmp.w	r9, #0
 800f0fc:	daec      	bge.n	800f0d8 <__ieee754_pow+0x228>
 800f0fe:	e7df      	b.n	800f0c0 <__ieee754_pow+0x210>
 800f100:	4b10      	ldr	r3, [pc, #64]	@ (800f144 <__ieee754_pow+0x294>)
 800f102:	4598      	cmp	r8, r3
 800f104:	f04f 0200 	mov.w	r2, #0
 800f108:	d924      	bls.n	800f154 <__ieee754_pow+0x2a4>
 800f10a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f10e:	2300      	movs	r3, #0
 800f110:	f7f1 fd5c 	bl	8000bcc <__aeabi_dcmplt>
 800f114:	3800      	subs	r0, #0
 800f116:	bf18      	it	ne
 800f118:	2001      	movne	r0, #1
 800f11a:	f1b9 0f00 	cmp.w	r9, #0
 800f11e:	dccf      	bgt.n	800f0c0 <__ieee754_pow+0x210>
 800f120:	e7da      	b.n	800f0d8 <__ieee754_pow+0x228>
 800f122:	bf00      	nop
 800f124:	f3af 8000 	nop.w
 800f128:	00000000 	.word	0x00000000
 800f12c:	3ff00000 	.word	0x3ff00000
 800f130:	00000000 	.word	0x00000000
 800f134:	bff00000 	.word	0xbff00000
 800f138:	fff00000 	.word	0xfff00000
 800f13c:	7ff00000 	.word	0x7ff00000
 800f140:	433fffff 	.word	0x433fffff
 800f144:	3ff00000 	.word	0x3ff00000
 800f148:	3fefffff 	.word	0x3fefffff
 800f14c:	3fe00000 	.word	0x3fe00000
 800f150:	43f00000 	.word	0x43f00000
 800f154:	4b5a      	ldr	r3, [pc, #360]	@ (800f2c0 <__ieee754_pow+0x410>)
 800f156:	f7f1 f90f 	bl	8000378 <__aeabi_dsub>
 800f15a:	a351      	add	r3, pc, #324	@ (adr r3, 800f2a0 <__ieee754_pow+0x3f0>)
 800f15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f160:	4604      	mov	r4, r0
 800f162:	460d      	mov	r5, r1
 800f164:	f7f1 fac0 	bl	80006e8 <__aeabi_dmul>
 800f168:	a34f      	add	r3, pc, #316	@ (adr r3, 800f2a8 <__ieee754_pow+0x3f8>)
 800f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16e:	4606      	mov	r6, r0
 800f170:	460f      	mov	r7, r1
 800f172:	4620      	mov	r0, r4
 800f174:	4629      	mov	r1, r5
 800f176:	f7f1 fab7 	bl	80006e8 <__aeabi_dmul>
 800f17a:	4b52      	ldr	r3, [pc, #328]	@ (800f2c4 <__ieee754_pow+0x414>)
 800f17c:	4682      	mov	sl, r0
 800f17e:	468b      	mov	fp, r1
 800f180:	2200      	movs	r2, #0
 800f182:	4620      	mov	r0, r4
 800f184:	4629      	mov	r1, r5
 800f186:	f7f1 faaf 	bl	80006e8 <__aeabi_dmul>
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	a148      	add	r1, pc, #288	@ (adr r1, 800f2b0 <__ieee754_pow+0x400>)
 800f190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f194:	f7f1 f8f0 	bl	8000378 <__aeabi_dsub>
 800f198:	4622      	mov	r2, r4
 800f19a:	462b      	mov	r3, r5
 800f19c:	f7f1 faa4 	bl	80006e8 <__aeabi_dmul>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	4948      	ldr	r1, [pc, #288]	@ (800f2c8 <__ieee754_pow+0x418>)
 800f1a8:	f7f1 f8e6 	bl	8000378 <__aeabi_dsub>
 800f1ac:	4622      	mov	r2, r4
 800f1ae:	4680      	mov	r8, r0
 800f1b0:	4689      	mov	r9, r1
 800f1b2:	462b      	mov	r3, r5
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	f7f1 fa96 	bl	80006e8 <__aeabi_dmul>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	460b      	mov	r3, r1
 800f1c0:	4640      	mov	r0, r8
 800f1c2:	4649      	mov	r1, r9
 800f1c4:	f7f1 fa90 	bl	80006e8 <__aeabi_dmul>
 800f1c8:	a33b      	add	r3, pc, #236	@ (adr r3, 800f2b8 <__ieee754_pow+0x408>)
 800f1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ce:	f7f1 fa8b 	bl	80006e8 <__aeabi_dmul>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	4650      	mov	r0, sl
 800f1d8:	4659      	mov	r1, fp
 800f1da:	f7f1 f8cd 	bl	8000378 <__aeabi_dsub>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	4680      	mov	r8, r0
 800f1e4:	4689      	mov	r9, r1
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	4639      	mov	r1, r7
 800f1ea:	f7f1 f8c7 	bl	800037c <__adddf3>
 800f1ee:	2400      	movs	r4, #0
 800f1f0:	4632      	mov	r2, r6
 800f1f2:	463b      	mov	r3, r7
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	460d      	mov	r5, r1
 800f1f8:	f7f1 f8be 	bl	8000378 <__aeabi_dsub>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	460b      	mov	r3, r1
 800f200:	4640      	mov	r0, r8
 800f202:	4649      	mov	r1, r9
 800f204:	f7f1 f8b8 	bl	8000378 <__aeabi_dsub>
 800f208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f20c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f210:	2300      	movs	r3, #0
 800f212:	9304      	str	r3, [sp, #16]
 800f214:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f218:	4606      	mov	r6, r0
 800f21a:	460f      	mov	r7, r1
 800f21c:	4652      	mov	r2, sl
 800f21e:	465b      	mov	r3, fp
 800f220:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f224:	f7f1 f8a8 	bl	8000378 <__aeabi_dsub>
 800f228:	4622      	mov	r2, r4
 800f22a:	462b      	mov	r3, r5
 800f22c:	f7f1 fa5c 	bl	80006e8 <__aeabi_dmul>
 800f230:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f234:	4680      	mov	r8, r0
 800f236:	4689      	mov	r9, r1
 800f238:	4630      	mov	r0, r6
 800f23a:	4639      	mov	r1, r7
 800f23c:	f7f1 fa54 	bl	80006e8 <__aeabi_dmul>
 800f240:	4602      	mov	r2, r0
 800f242:	460b      	mov	r3, r1
 800f244:	4640      	mov	r0, r8
 800f246:	4649      	mov	r1, r9
 800f248:	f7f1 f898 	bl	800037c <__adddf3>
 800f24c:	4652      	mov	r2, sl
 800f24e:	465b      	mov	r3, fp
 800f250:	4606      	mov	r6, r0
 800f252:	460f      	mov	r7, r1
 800f254:	4620      	mov	r0, r4
 800f256:	4629      	mov	r1, r5
 800f258:	f7f1 fa46 	bl	80006e8 <__aeabi_dmul>
 800f25c:	460b      	mov	r3, r1
 800f25e:	4602      	mov	r2, r0
 800f260:	4680      	mov	r8, r0
 800f262:	4689      	mov	r9, r1
 800f264:	4630      	mov	r0, r6
 800f266:	4639      	mov	r1, r7
 800f268:	f7f1 f888 	bl	800037c <__adddf3>
 800f26c:	4b17      	ldr	r3, [pc, #92]	@ (800f2cc <__ieee754_pow+0x41c>)
 800f26e:	4299      	cmp	r1, r3
 800f270:	4604      	mov	r4, r0
 800f272:	460d      	mov	r5, r1
 800f274:	468a      	mov	sl, r1
 800f276:	468b      	mov	fp, r1
 800f278:	f340 82ef 	ble.w	800f85a <__ieee754_pow+0x9aa>
 800f27c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f280:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f284:	4303      	orrs	r3, r0
 800f286:	f000 81e8 	beq.w	800f65a <__ieee754_pow+0x7aa>
 800f28a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f28e:	2200      	movs	r2, #0
 800f290:	2300      	movs	r3, #0
 800f292:	f7f1 fc9b 	bl	8000bcc <__aeabi_dcmplt>
 800f296:	3800      	subs	r0, #0
 800f298:	bf18      	it	ne
 800f29a:	2001      	movne	r0, #1
 800f29c:	e710      	b.n	800f0c0 <__ieee754_pow+0x210>
 800f29e:	bf00      	nop
 800f2a0:	60000000 	.word	0x60000000
 800f2a4:	3ff71547 	.word	0x3ff71547
 800f2a8:	f85ddf44 	.word	0xf85ddf44
 800f2ac:	3e54ae0b 	.word	0x3e54ae0b
 800f2b0:	55555555 	.word	0x55555555
 800f2b4:	3fd55555 	.word	0x3fd55555
 800f2b8:	652b82fe 	.word	0x652b82fe
 800f2bc:	3ff71547 	.word	0x3ff71547
 800f2c0:	3ff00000 	.word	0x3ff00000
 800f2c4:	3fd00000 	.word	0x3fd00000
 800f2c8:	3fe00000 	.word	0x3fe00000
 800f2cc:	408fffff 	.word	0x408fffff
 800f2d0:	4bd5      	ldr	r3, [pc, #852]	@ (800f628 <__ieee754_pow+0x778>)
 800f2d2:	402b      	ands	r3, r5
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	b92b      	cbnz	r3, 800f2e4 <__ieee754_pow+0x434>
 800f2d8:	4bd4      	ldr	r3, [pc, #848]	@ (800f62c <__ieee754_pow+0x77c>)
 800f2da:	f7f1 fa05 	bl	80006e8 <__aeabi_dmul>
 800f2de:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f2e2:	468b      	mov	fp, r1
 800f2e4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f2e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f2ec:	4413      	add	r3, r2
 800f2ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2f0:	4bcf      	ldr	r3, [pc, #828]	@ (800f630 <__ieee754_pow+0x780>)
 800f2f2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f2f6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f2fa:	459b      	cmp	fp, r3
 800f2fc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f300:	dd08      	ble.n	800f314 <__ieee754_pow+0x464>
 800f302:	4bcc      	ldr	r3, [pc, #816]	@ (800f634 <__ieee754_pow+0x784>)
 800f304:	459b      	cmp	fp, r3
 800f306:	f340 81a5 	ble.w	800f654 <__ieee754_pow+0x7a4>
 800f30a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f30c:	3301      	adds	r3, #1
 800f30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f310:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f314:	f04f 0a00 	mov.w	sl, #0
 800f318:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f31c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f31e:	4bc6      	ldr	r3, [pc, #792]	@ (800f638 <__ieee754_pow+0x788>)
 800f320:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f324:	ed93 7b00 	vldr	d7, [r3]
 800f328:	4629      	mov	r1, r5
 800f32a:	ec53 2b17 	vmov	r2, r3, d7
 800f32e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f332:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f336:	f7f1 f81f 	bl	8000378 <__aeabi_dsub>
 800f33a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f33e:	4606      	mov	r6, r0
 800f340:	460f      	mov	r7, r1
 800f342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f346:	f7f1 f819 	bl	800037c <__adddf3>
 800f34a:	4602      	mov	r2, r0
 800f34c:	460b      	mov	r3, r1
 800f34e:	2000      	movs	r0, #0
 800f350:	49ba      	ldr	r1, [pc, #744]	@ (800f63c <__ieee754_pow+0x78c>)
 800f352:	f7f1 faf3 	bl	800093c <__aeabi_ddiv>
 800f356:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f35a:	4602      	mov	r2, r0
 800f35c:	460b      	mov	r3, r1
 800f35e:	4630      	mov	r0, r6
 800f360:	4639      	mov	r1, r7
 800f362:	f7f1 f9c1 	bl	80006e8 <__aeabi_dmul>
 800f366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f36a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f36e:	106d      	asrs	r5, r5, #1
 800f370:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f374:	f04f 0b00 	mov.w	fp, #0
 800f378:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f37c:	4661      	mov	r1, ip
 800f37e:	2200      	movs	r2, #0
 800f380:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f384:	4658      	mov	r0, fp
 800f386:	46e1      	mov	r9, ip
 800f388:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f38c:	4614      	mov	r4, r2
 800f38e:	461d      	mov	r5, r3
 800f390:	f7f1 f9aa 	bl	80006e8 <__aeabi_dmul>
 800f394:	4602      	mov	r2, r0
 800f396:	460b      	mov	r3, r1
 800f398:	4630      	mov	r0, r6
 800f39a:	4639      	mov	r1, r7
 800f39c:	f7f0 ffec 	bl	8000378 <__aeabi_dsub>
 800f3a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f3a4:	4606      	mov	r6, r0
 800f3a6:	460f      	mov	r7, r1
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	4629      	mov	r1, r5
 800f3ac:	f7f0 ffe4 	bl	8000378 <__aeabi_dsub>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	460b      	mov	r3, r1
 800f3b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f3b8:	f7f0 ffde 	bl	8000378 <__aeabi_dsub>
 800f3bc:	465a      	mov	r2, fp
 800f3be:	464b      	mov	r3, r9
 800f3c0:	f7f1 f992 	bl	80006e8 <__aeabi_dmul>
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	4639      	mov	r1, r7
 800f3cc:	f7f0 ffd4 	bl	8000378 <__aeabi_dsub>
 800f3d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f3d4:	f7f1 f988 	bl	80006e8 <__aeabi_dmul>
 800f3d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f3e0:	4610      	mov	r0, r2
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	f7f1 f980 	bl	80006e8 <__aeabi_dmul>
 800f3e8:	a37d      	add	r3, pc, #500	@ (adr r3, 800f5e0 <__ieee754_pow+0x730>)
 800f3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	460d      	mov	r5, r1
 800f3f2:	f7f1 f979 	bl	80006e8 <__aeabi_dmul>
 800f3f6:	a37c      	add	r3, pc, #496	@ (adr r3, 800f5e8 <__ieee754_pow+0x738>)
 800f3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3fc:	f7f0 ffbe 	bl	800037c <__adddf3>
 800f400:	4622      	mov	r2, r4
 800f402:	462b      	mov	r3, r5
 800f404:	f7f1 f970 	bl	80006e8 <__aeabi_dmul>
 800f408:	a379      	add	r3, pc, #484	@ (adr r3, 800f5f0 <__ieee754_pow+0x740>)
 800f40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f40e:	f7f0 ffb5 	bl	800037c <__adddf3>
 800f412:	4622      	mov	r2, r4
 800f414:	462b      	mov	r3, r5
 800f416:	f7f1 f967 	bl	80006e8 <__aeabi_dmul>
 800f41a:	a377      	add	r3, pc, #476	@ (adr r3, 800f5f8 <__ieee754_pow+0x748>)
 800f41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f420:	f7f0 ffac 	bl	800037c <__adddf3>
 800f424:	4622      	mov	r2, r4
 800f426:	462b      	mov	r3, r5
 800f428:	f7f1 f95e 	bl	80006e8 <__aeabi_dmul>
 800f42c:	a374      	add	r3, pc, #464	@ (adr r3, 800f600 <__ieee754_pow+0x750>)
 800f42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f432:	f7f0 ffa3 	bl	800037c <__adddf3>
 800f436:	4622      	mov	r2, r4
 800f438:	462b      	mov	r3, r5
 800f43a:	f7f1 f955 	bl	80006e8 <__aeabi_dmul>
 800f43e:	a372      	add	r3, pc, #456	@ (adr r3, 800f608 <__ieee754_pow+0x758>)
 800f440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f444:	f7f0 ff9a 	bl	800037c <__adddf3>
 800f448:	4622      	mov	r2, r4
 800f44a:	4606      	mov	r6, r0
 800f44c:	460f      	mov	r7, r1
 800f44e:	462b      	mov	r3, r5
 800f450:	4620      	mov	r0, r4
 800f452:	4629      	mov	r1, r5
 800f454:	f7f1 f948 	bl	80006e8 <__aeabi_dmul>
 800f458:	4602      	mov	r2, r0
 800f45a:	460b      	mov	r3, r1
 800f45c:	4630      	mov	r0, r6
 800f45e:	4639      	mov	r1, r7
 800f460:	f7f1 f942 	bl	80006e8 <__aeabi_dmul>
 800f464:	465a      	mov	r2, fp
 800f466:	4604      	mov	r4, r0
 800f468:	460d      	mov	r5, r1
 800f46a:	464b      	mov	r3, r9
 800f46c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f470:	f7f0 ff84 	bl	800037c <__adddf3>
 800f474:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f478:	f7f1 f936 	bl	80006e8 <__aeabi_dmul>
 800f47c:	4622      	mov	r2, r4
 800f47e:	462b      	mov	r3, r5
 800f480:	f7f0 ff7c 	bl	800037c <__adddf3>
 800f484:	465a      	mov	r2, fp
 800f486:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f48a:	464b      	mov	r3, r9
 800f48c:	4658      	mov	r0, fp
 800f48e:	4649      	mov	r1, r9
 800f490:	f7f1 f92a 	bl	80006e8 <__aeabi_dmul>
 800f494:	4b6a      	ldr	r3, [pc, #424]	@ (800f640 <__ieee754_pow+0x790>)
 800f496:	2200      	movs	r2, #0
 800f498:	4606      	mov	r6, r0
 800f49a:	460f      	mov	r7, r1
 800f49c:	f7f0 ff6e 	bl	800037c <__adddf3>
 800f4a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f4a4:	f7f0 ff6a 	bl	800037c <__adddf3>
 800f4a8:	46d8      	mov	r8, fp
 800f4aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800f4ae:	460d      	mov	r5, r1
 800f4b0:	465a      	mov	r2, fp
 800f4b2:	460b      	mov	r3, r1
 800f4b4:	4640      	mov	r0, r8
 800f4b6:	4649      	mov	r1, r9
 800f4b8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800f4bc:	f7f1 f914 	bl	80006e8 <__aeabi_dmul>
 800f4c0:	465c      	mov	r4, fp
 800f4c2:	4680      	mov	r8, r0
 800f4c4:	4689      	mov	r9, r1
 800f4c6:	4b5e      	ldr	r3, [pc, #376]	@ (800f640 <__ieee754_pow+0x790>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	4629      	mov	r1, r5
 800f4ce:	f7f0 ff53 	bl	8000378 <__aeabi_dsub>
 800f4d2:	4632      	mov	r2, r6
 800f4d4:	463b      	mov	r3, r7
 800f4d6:	f7f0 ff4f 	bl	8000378 <__aeabi_dsub>
 800f4da:	4602      	mov	r2, r0
 800f4dc:	460b      	mov	r3, r1
 800f4de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f4e2:	f7f0 ff49 	bl	8000378 <__aeabi_dsub>
 800f4e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4ea:	f7f1 f8fd 	bl	80006e8 <__aeabi_dmul>
 800f4ee:	4622      	mov	r2, r4
 800f4f0:	4606      	mov	r6, r0
 800f4f2:	460f      	mov	r7, r1
 800f4f4:	462b      	mov	r3, r5
 800f4f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4fa:	f7f1 f8f5 	bl	80006e8 <__aeabi_dmul>
 800f4fe:	4602      	mov	r2, r0
 800f500:	460b      	mov	r3, r1
 800f502:	4630      	mov	r0, r6
 800f504:	4639      	mov	r1, r7
 800f506:	f7f0 ff39 	bl	800037c <__adddf3>
 800f50a:	4606      	mov	r6, r0
 800f50c:	460f      	mov	r7, r1
 800f50e:	4602      	mov	r2, r0
 800f510:	460b      	mov	r3, r1
 800f512:	4640      	mov	r0, r8
 800f514:	4649      	mov	r1, r9
 800f516:	f7f0 ff31 	bl	800037c <__adddf3>
 800f51a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f51e:	a33c      	add	r3, pc, #240	@ (adr r3, 800f610 <__ieee754_pow+0x760>)
 800f520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f524:	4658      	mov	r0, fp
 800f526:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f52a:	460d      	mov	r5, r1
 800f52c:	f7f1 f8dc 	bl	80006e8 <__aeabi_dmul>
 800f530:	465c      	mov	r4, fp
 800f532:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f536:	4642      	mov	r2, r8
 800f538:	464b      	mov	r3, r9
 800f53a:	4620      	mov	r0, r4
 800f53c:	4629      	mov	r1, r5
 800f53e:	f7f0 ff1b 	bl	8000378 <__aeabi_dsub>
 800f542:	4602      	mov	r2, r0
 800f544:	460b      	mov	r3, r1
 800f546:	4630      	mov	r0, r6
 800f548:	4639      	mov	r1, r7
 800f54a:	f7f0 ff15 	bl	8000378 <__aeabi_dsub>
 800f54e:	a332      	add	r3, pc, #200	@ (adr r3, 800f618 <__ieee754_pow+0x768>)
 800f550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f554:	f7f1 f8c8 	bl	80006e8 <__aeabi_dmul>
 800f558:	a331      	add	r3, pc, #196	@ (adr r3, 800f620 <__ieee754_pow+0x770>)
 800f55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55e:	4606      	mov	r6, r0
 800f560:	460f      	mov	r7, r1
 800f562:	4620      	mov	r0, r4
 800f564:	4629      	mov	r1, r5
 800f566:	f7f1 f8bf 	bl	80006e8 <__aeabi_dmul>
 800f56a:	4602      	mov	r2, r0
 800f56c:	460b      	mov	r3, r1
 800f56e:	4630      	mov	r0, r6
 800f570:	4639      	mov	r1, r7
 800f572:	f7f0 ff03 	bl	800037c <__adddf3>
 800f576:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f578:	4b32      	ldr	r3, [pc, #200]	@ (800f644 <__ieee754_pow+0x794>)
 800f57a:	4413      	add	r3, r2
 800f57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f580:	f7f0 fefc 	bl	800037c <__adddf3>
 800f584:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f588:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f58a:	f7f1 f843 	bl	8000614 <__aeabi_i2d>
 800f58e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f590:	4b2d      	ldr	r3, [pc, #180]	@ (800f648 <__ieee754_pow+0x798>)
 800f592:	4413      	add	r3, r2
 800f594:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f598:	4606      	mov	r6, r0
 800f59a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f59e:	460f      	mov	r7, r1
 800f5a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5a4:	f7f0 feea 	bl	800037c <__adddf3>
 800f5a8:	4642      	mov	r2, r8
 800f5aa:	464b      	mov	r3, r9
 800f5ac:	f7f0 fee6 	bl	800037c <__adddf3>
 800f5b0:	4632      	mov	r2, r6
 800f5b2:	463b      	mov	r3, r7
 800f5b4:	f7f0 fee2 	bl	800037c <__adddf3>
 800f5b8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800f5bc:	4632      	mov	r2, r6
 800f5be:	463b      	mov	r3, r7
 800f5c0:	4658      	mov	r0, fp
 800f5c2:	460d      	mov	r5, r1
 800f5c4:	f7f0 fed8 	bl	8000378 <__aeabi_dsub>
 800f5c8:	4642      	mov	r2, r8
 800f5ca:	464b      	mov	r3, r9
 800f5cc:	f7f0 fed4 	bl	8000378 <__aeabi_dsub>
 800f5d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5d4:	f7f0 fed0 	bl	8000378 <__aeabi_dsub>
 800f5d8:	465c      	mov	r4, fp
 800f5da:	4602      	mov	r2, r0
 800f5dc:	e036      	b.n	800f64c <__ieee754_pow+0x79c>
 800f5de:	bf00      	nop
 800f5e0:	4a454eef 	.word	0x4a454eef
 800f5e4:	3fca7e28 	.word	0x3fca7e28
 800f5e8:	93c9db65 	.word	0x93c9db65
 800f5ec:	3fcd864a 	.word	0x3fcd864a
 800f5f0:	a91d4101 	.word	0xa91d4101
 800f5f4:	3fd17460 	.word	0x3fd17460
 800f5f8:	518f264d 	.word	0x518f264d
 800f5fc:	3fd55555 	.word	0x3fd55555
 800f600:	db6fabff 	.word	0xdb6fabff
 800f604:	3fdb6db6 	.word	0x3fdb6db6
 800f608:	33333303 	.word	0x33333303
 800f60c:	3fe33333 	.word	0x3fe33333
 800f610:	e0000000 	.word	0xe0000000
 800f614:	3feec709 	.word	0x3feec709
 800f618:	dc3a03fd 	.word	0xdc3a03fd
 800f61c:	3feec709 	.word	0x3feec709
 800f620:	145b01f5 	.word	0x145b01f5
 800f624:	be3e2fe0 	.word	0xbe3e2fe0
 800f628:	7ff00000 	.word	0x7ff00000
 800f62c:	43400000 	.word	0x43400000
 800f630:	0003988e 	.word	0x0003988e
 800f634:	000bb679 	.word	0x000bb679
 800f638:	08010290 	.word	0x08010290
 800f63c:	3ff00000 	.word	0x3ff00000
 800f640:	40080000 	.word	0x40080000
 800f644:	08010270 	.word	0x08010270
 800f648:	08010280 	.word	0x08010280
 800f64c:	460b      	mov	r3, r1
 800f64e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f652:	e5d7      	b.n	800f204 <__ieee754_pow+0x354>
 800f654:	f04f 0a01 	mov.w	sl, #1
 800f658:	e65e      	b.n	800f318 <__ieee754_pow+0x468>
 800f65a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800f92c <__ieee754_pow+0xa7c>)
 800f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f660:	4630      	mov	r0, r6
 800f662:	4639      	mov	r1, r7
 800f664:	f7f0 fe8a 	bl	800037c <__adddf3>
 800f668:	4642      	mov	r2, r8
 800f66a:	e9cd 0100 	strd	r0, r1, [sp]
 800f66e:	464b      	mov	r3, r9
 800f670:	4620      	mov	r0, r4
 800f672:	4629      	mov	r1, r5
 800f674:	f7f0 fe80 	bl	8000378 <__aeabi_dsub>
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f680:	f7f1 fac2 	bl	8000c08 <__aeabi_dcmpgt>
 800f684:	2800      	cmp	r0, #0
 800f686:	f47f ae00 	bne.w	800f28a <__ieee754_pow+0x3da>
 800f68a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800f68e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f692:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800f696:	fa43 fa0a 	asr.w	sl, r3, sl
 800f69a:	44da      	add	sl, fp
 800f69c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f6a0:	489d      	ldr	r0, [pc, #628]	@ (800f918 <__ieee754_pow+0xa68>)
 800f6a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f6a6:	4108      	asrs	r0, r1
 800f6a8:	ea00 030a 	and.w	r3, r0, sl
 800f6ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f6b0:	f1c1 0114 	rsb	r1, r1, #20
 800f6b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800f6b8:	fa4a fa01 	asr.w	sl, sl, r1
 800f6bc:	f1bb 0f00 	cmp.w	fp, #0
 800f6c0:	4640      	mov	r0, r8
 800f6c2:	4649      	mov	r1, r9
 800f6c4:	f04f 0200 	mov.w	r2, #0
 800f6c8:	bfb8      	it	lt
 800f6ca:	f1ca 0a00 	rsblt	sl, sl, #0
 800f6ce:	f7f0 fe53 	bl	8000378 <__aeabi_dsub>
 800f6d2:	4680      	mov	r8, r0
 800f6d4:	4689      	mov	r9, r1
 800f6d6:	4632      	mov	r2, r6
 800f6d8:	463b      	mov	r3, r7
 800f6da:	4640      	mov	r0, r8
 800f6dc:	4649      	mov	r1, r9
 800f6de:	f7f0 fe4d 	bl	800037c <__adddf3>
 800f6e2:	2400      	movs	r4, #0
 800f6e4:	a37c      	add	r3, pc, #496	@ (adr r3, 800f8d8 <__ieee754_pow+0xa28>)
 800f6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	460d      	mov	r5, r1
 800f6ee:	f7f0 fffb 	bl	80006e8 <__aeabi_dmul>
 800f6f2:	4642      	mov	r2, r8
 800f6f4:	e9cd 0100 	strd	r0, r1, [sp]
 800f6f8:	464b      	mov	r3, r9
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	f7f0 fe3b 	bl	8000378 <__aeabi_dsub>
 800f702:	4602      	mov	r2, r0
 800f704:	460b      	mov	r3, r1
 800f706:	4630      	mov	r0, r6
 800f708:	4639      	mov	r1, r7
 800f70a:	f7f0 fe35 	bl	8000378 <__aeabi_dsub>
 800f70e:	a374      	add	r3, pc, #464	@ (adr r3, 800f8e0 <__ieee754_pow+0xa30>)
 800f710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f714:	f7f0 ffe8 	bl	80006e8 <__aeabi_dmul>
 800f718:	a373      	add	r3, pc, #460	@ (adr r3, 800f8e8 <__ieee754_pow+0xa38>)
 800f71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71e:	4680      	mov	r8, r0
 800f720:	4689      	mov	r9, r1
 800f722:	4620      	mov	r0, r4
 800f724:	4629      	mov	r1, r5
 800f726:	f7f0 ffdf 	bl	80006e8 <__aeabi_dmul>
 800f72a:	4602      	mov	r2, r0
 800f72c:	460b      	mov	r3, r1
 800f72e:	4640      	mov	r0, r8
 800f730:	4649      	mov	r1, r9
 800f732:	f7f0 fe23 	bl	800037c <__adddf3>
 800f736:	4604      	mov	r4, r0
 800f738:	460d      	mov	r5, r1
 800f73a:	4602      	mov	r2, r0
 800f73c:	460b      	mov	r3, r1
 800f73e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f742:	f7f0 fe1b 	bl	800037c <__adddf3>
 800f746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f74a:	4680      	mov	r8, r0
 800f74c:	4689      	mov	r9, r1
 800f74e:	f7f0 fe13 	bl	8000378 <__aeabi_dsub>
 800f752:	4602      	mov	r2, r0
 800f754:	460b      	mov	r3, r1
 800f756:	4620      	mov	r0, r4
 800f758:	4629      	mov	r1, r5
 800f75a:	f7f0 fe0d 	bl	8000378 <__aeabi_dsub>
 800f75e:	4642      	mov	r2, r8
 800f760:	4606      	mov	r6, r0
 800f762:	460f      	mov	r7, r1
 800f764:	464b      	mov	r3, r9
 800f766:	4640      	mov	r0, r8
 800f768:	4649      	mov	r1, r9
 800f76a:	f7f0 ffbd 	bl	80006e8 <__aeabi_dmul>
 800f76e:	a360      	add	r3, pc, #384	@ (adr r3, 800f8f0 <__ieee754_pow+0xa40>)
 800f770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f774:	4604      	mov	r4, r0
 800f776:	460d      	mov	r5, r1
 800f778:	f7f0 ffb6 	bl	80006e8 <__aeabi_dmul>
 800f77c:	a35e      	add	r3, pc, #376	@ (adr r3, 800f8f8 <__ieee754_pow+0xa48>)
 800f77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f782:	f7f0 fdf9 	bl	8000378 <__aeabi_dsub>
 800f786:	4622      	mov	r2, r4
 800f788:	462b      	mov	r3, r5
 800f78a:	f7f0 ffad 	bl	80006e8 <__aeabi_dmul>
 800f78e:	a35c      	add	r3, pc, #368	@ (adr r3, 800f900 <__ieee754_pow+0xa50>)
 800f790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f794:	f7f0 fdf2 	bl	800037c <__adddf3>
 800f798:	4622      	mov	r2, r4
 800f79a:	462b      	mov	r3, r5
 800f79c:	f7f0 ffa4 	bl	80006e8 <__aeabi_dmul>
 800f7a0:	a359      	add	r3, pc, #356	@ (adr r3, 800f908 <__ieee754_pow+0xa58>)
 800f7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a6:	f7f0 fde7 	bl	8000378 <__aeabi_dsub>
 800f7aa:	4622      	mov	r2, r4
 800f7ac:	462b      	mov	r3, r5
 800f7ae:	f7f0 ff9b 	bl	80006e8 <__aeabi_dmul>
 800f7b2:	a357      	add	r3, pc, #348	@ (adr r3, 800f910 <__ieee754_pow+0xa60>)
 800f7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b8:	f7f0 fde0 	bl	800037c <__adddf3>
 800f7bc:	4622      	mov	r2, r4
 800f7be:	462b      	mov	r3, r5
 800f7c0:	f7f0 ff92 	bl	80006e8 <__aeabi_dmul>
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	460b      	mov	r3, r1
 800f7c8:	4640      	mov	r0, r8
 800f7ca:	4649      	mov	r1, r9
 800f7cc:	f7f0 fdd4 	bl	8000378 <__aeabi_dsub>
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	460d      	mov	r5, r1
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	4640      	mov	r0, r8
 800f7da:	4649      	mov	r1, r9
 800f7dc:	f7f0 ff84 	bl	80006e8 <__aeabi_dmul>
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	e9cd 0100 	strd	r0, r1, [sp]
 800f7e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	4629      	mov	r1, r5
 800f7ee:	f7f0 fdc3 	bl	8000378 <__aeabi_dsub>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7fa:	f7f1 f89f 	bl	800093c <__aeabi_ddiv>
 800f7fe:	4632      	mov	r2, r6
 800f800:	4604      	mov	r4, r0
 800f802:	460d      	mov	r5, r1
 800f804:	463b      	mov	r3, r7
 800f806:	4640      	mov	r0, r8
 800f808:	4649      	mov	r1, r9
 800f80a:	f7f0 ff6d 	bl	80006e8 <__aeabi_dmul>
 800f80e:	4632      	mov	r2, r6
 800f810:	463b      	mov	r3, r7
 800f812:	f7f0 fdb3 	bl	800037c <__adddf3>
 800f816:	4602      	mov	r2, r0
 800f818:	460b      	mov	r3, r1
 800f81a:	4620      	mov	r0, r4
 800f81c:	4629      	mov	r1, r5
 800f81e:	f7f0 fdab 	bl	8000378 <__aeabi_dsub>
 800f822:	4642      	mov	r2, r8
 800f824:	464b      	mov	r3, r9
 800f826:	f7f0 fda7 	bl	8000378 <__aeabi_dsub>
 800f82a:	460b      	mov	r3, r1
 800f82c:	4602      	mov	r2, r0
 800f82e:	493b      	ldr	r1, [pc, #236]	@ (800f91c <__ieee754_pow+0xa6c>)
 800f830:	2000      	movs	r0, #0
 800f832:	f7f0 fda1 	bl	8000378 <__aeabi_dsub>
 800f836:	ec41 0b10 	vmov	d0, r0, r1
 800f83a:	ee10 3a90 	vmov	r3, s1
 800f83e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f846:	da30      	bge.n	800f8aa <__ieee754_pow+0x9fa>
 800f848:	4650      	mov	r0, sl
 800f84a:	f000 f87d 	bl	800f948 <scalbn>
 800f84e:	ec51 0b10 	vmov	r0, r1, d0
 800f852:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f856:	f7ff bbd2 	b.w	800effe <__ieee754_pow+0x14e>
 800f85a:	4c31      	ldr	r4, [pc, #196]	@ (800f920 <__ieee754_pow+0xa70>)
 800f85c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f860:	42a3      	cmp	r3, r4
 800f862:	d91a      	bls.n	800f89a <__ieee754_pow+0x9ea>
 800f864:	4b2f      	ldr	r3, [pc, #188]	@ (800f924 <__ieee754_pow+0xa74>)
 800f866:	440b      	add	r3, r1
 800f868:	4303      	orrs	r3, r0
 800f86a:	d009      	beq.n	800f880 <__ieee754_pow+0x9d0>
 800f86c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f870:	2200      	movs	r2, #0
 800f872:	2300      	movs	r3, #0
 800f874:	f7f1 f9aa 	bl	8000bcc <__aeabi_dcmplt>
 800f878:	3800      	subs	r0, #0
 800f87a:	bf18      	it	ne
 800f87c:	2001      	movne	r0, #1
 800f87e:	e42b      	b.n	800f0d8 <__ieee754_pow+0x228>
 800f880:	4642      	mov	r2, r8
 800f882:	464b      	mov	r3, r9
 800f884:	f7f0 fd78 	bl	8000378 <__aeabi_dsub>
 800f888:	4632      	mov	r2, r6
 800f88a:	463b      	mov	r3, r7
 800f88c:	f7f1 f9b2 	bl	8000bf4 <__aeabi_dcmpge>
 800f890:	2800      	cmp	r0, #0
 800f892:	d1eb      	bne.n	800f86c <__ieee754_pow+0x9bc>
 800f894:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800f934 <__ieee754_pow+0xa84>
 800f898:	e6f7      	b.n	800f68a <__ieee754_pow+0x7da>
 800f89a:	469a      	mov	sl, r3
 800f89c:	4b22      	ldr	r3, [pc, #136]	@ (800f928 <__ieee754_pow+0xa78>)
 800f89e:	459a      	cmp	sl, r3
 800f8a0:	f63f aef3 	bhi.w	800f68a <__ieee754_pow+0x7da>
 800f8a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f8a8:	e715      	b.n	800f6d6 <__ieee754_pow+0x826>
 800f8aa:	ec51 0b10 	vmov	r0, r1, d0
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	e7cf      	b.n	800f852 <__ieee754_pow+0x9a2>
 800f8b2:	491a      	ldr	r1, [pc, #104]	@ (800f91c <__ieee754_pow+0xa6c>)
 800f8b4:	2000      	movs	r0, #0
 800f8b6:	f7ff bb18 	b.w	800eeea <__ieee754_pow+0x3a>
 800f8ba:	2000      	movs	r0, #0
 800f8bc:	2100      	movs	r1, #0
 800f8be:	f7ff bb14 	b.w	800eeea <__ieee754_pow+0x3a>
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	4639      	mov	r1, r7
 800f8c6:	f7ff bb10 	b.w	800eeea <__ieee754_pow+0x3a>
 800f8ca:	460c      	mov	r4, r1
 800f8cc:	f7ff bb5e 	b.w	800ef8c <__ieee754_pow+0xdc>
 800f8d0:	2400      	movs	r4, #0
 800f8d2:	f7ff bb49 	b.w	800ef68 <__ieee754_pow+0xb8>
 800f8d6:	bf00      	nop
 800f8d8:	00000000 	.word	0x00000000
 800f8dc:	3fe62e43 	.word	0x3fe62e43
 800f8e0:	fefa39ef 	.word	0xfefa39ef
 800f8e4:	3fe62e42 	.word	0x3fe62e42
 800f8e8:	0ca86c39 	.word	0x0ca86c39
 800f8ec:	be205c61 	.word	0xbe205c61
 800f8f0:	72bea4d0 	.word	0x72bea4d0
 800f8f4:	3e663769 	.word	0x3e663769
 800f8f8:	c5d26bf1 	.word	0xc5d26bf1
 800f8fc:	3ebbbd41 	.word	0x3ebbbd41
 800f900:	af25de2c 	.word	0xaf25de2c
 800f904:	3f11566a 	.word	0x3f11566a
 800f908:	16bebd93 	.word	0x16bebd93
 800f90c:	3f66c16c 	.word	0x3f66c16c
 800f910:	5555553e 	.word	0x5555553e
 800f914:	3fc55555 	.word	0x3fc55555
 800f918:	fff00000 	.word	0xfff00000
 800f91c:	3ff00000 	.word	0x3ff00000
 800f920:	4090cbff 	.word	0x4090cbff
 800f924:	3f6f3400 	.word	0x3f6f3400
 800f928:	3fe00000 	.word	0x3fe00000
 800f92c:	652b82fe 	.word	0x652b82fe
 800f930:	3c971547 	.word	0x3c971547
 800f934:	4090cc00 	.word	0x4090cc00

0800f938 <fabs>:
 800f938:	ec51 0b10 	vmov	r0, r1, d0
 800f93c:	4602      	mov	r2, r0
 800f93e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f942:	ec43 2b10 	vmov	d0, r2, r3
 800f946:	4770      	bx	lr

0800f948 <scalbn>:
 800f948:	b570      	push	{r4, r5, r6, lr}
 800f94a:	ec55 4b10 	vmov	r4, r5, d0
 800f94e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f952:	4606      	mov	r6, r0
 800f954:	462b      	mov	r3, r5
 800f956:	b991      	cbnz	r1, 800f97e <scalbn+0x36>
 800f958:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f95c:	4323      	orrs	r3, r4
 800f95e:	d03d      	beq.n	800f9dc <scalbn+0x94>
 800f960:	4b35      	ldr	r3, [pc, #212]	@ (800fa38 <scalbn+0xf0>)
 800f962:	4620      	mov	r0, r4
 800f964:	4629      	mov	r1, r5
 800f966:	2200      	movs	r2, #0
 800f968:	f7f0 febe 	bl	80006e8 <__aeabi_dmul>
 800f96c:	4b33      	ldr	r3, [pc, #204]	@ (800fa3c <scalbn+0xf4>)
 800f96e:	429e      	cmp	r6, r3
 800f970:	4604      	mov	r4, r0
 800f972:	460d      	mov	r5, r1
 800f974:	da0f      	bge.n	800f996 <scalbn+0x4e>
 800f976:	a328      	add	r3, pc, #160	@ (adr r3, 800fa18 <scalbn+0xd0>)
 800f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97c:	e01e      	b.n	800f9bc <scalbn+0x74>
 800f97e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f982:	4291      	cmp	r1, r2
 800f984:	d10b      	bne.n	800f99e <scalbn+0x56>
 800f986:	4622      	mov	r2, r4
 800f988:	4620      	mov	r0, r4
 800f98a:	4629      	mov	r1, r5
 800f98c:	f7f0 fcf6 	bl	800037c <__adddf3>
 800f990:	4604      	mov	r4, r0
 800f992:	460d      	mov	r5, r1
 800f994:	e022      	b.n	800f9dc <scalbn+0x94>
 800f996:	460b      	mov	r3, r1
 800f998:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f99c:	3936      	subs	r1, #54	@ 0x36
 800f99e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f9a2:	4296      	cmp	r6, r2
 800f9a4:	dd0d      	ble.n	800f9c2 <scalbn+0x7a>
 800f9a6:	2d00      	cmp	r5, #0
 800f9a8:	a11d      	add	r1, pc, #116	@ (adr r1, 800fa20 <scalbn+0xd8>)
 800f9aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9ae:	da02      	bge.n	800f9b6 <scalbn+0x6e>
 800f9b0:	a11d      	add	r1, pc, #116	@ (adr r1, 800fa28 <scalbn+0xe0>)
 800f9b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9b6:	a31a      	add	r3, pc, #104	@ (adr r3, 800fa20 <scalbn+0xd8>)
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	f7f0 fe94 	bl	80006e8 <__aeabi_dmul>
 800f9c0:	e7e6      	b.n	800f990 <scalbn+0x48>
 800f9c2:	1872      	adds	r2, r6, r1
 800f9c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f9c8:	428a      	cmp	r2, r1
 800f9ca:	dcec      	bgt.n	800f9a6 <scalbn+0x5e>
 800f9cc:	2a00      	cmp	r2, #0
 800f9ce:	dd08      	ble.n	800f9e2 <scalbn+0x9a>
 800f9d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f9d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f9d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f9dc:	ec45 4b10 	vmov	d0, r4, r5
 800f9e0:	bd70      	pop	{r4, r5, r6, pc}
 800f9e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f9e6:	da08      	bge.n	800f9fa <scalbn+0xb2>
 800f9e8:	2d00      	cmp	r5, #0
 800f9ea:	a10b      	add	r1, pc, #44	@ (adr r1, 800fa18 <scalbn+0xd0>)
 800f9ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9f0:	dac1      	bge.n	800f976 <scalbn+0x2e>
 800f9f2:	a10f      	add	r1, pc, #60	@ (adr r1, 800fa30 <scalbn+0xe8>)
 800f9f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9f8:	e7bd      	b.n	800f976 <scalbn+0x2e>
 800f9fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f9fe:	3236      	adds	r2, #54	@ 0x36
 800fa00:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fa04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fa08:	4620      	mov	r0, r4
 800fa0a:	4b0d      	ldr	r3, [pc, #52]	@ (800fa40 <scalbn+0xf8>)
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	2200      	movs	r2, #0
 800fa10:	e7d4      	b.n	800f9bc <scalbn+0x74>
 800fa12:	bf00      	nop
 800fa14:	f3af 8000 	nop.w
 800fa18:	c2f8f359 	.word	0xc2f8f359
 800fa1c:	01a56e1f 	.word	0x01a56e1f
 800fa20:	8800759c 	.word	0x8800759c
 800fa24:	7e37e43c 	.word	0x7e37e43c
 800fa28:	8800759c 	.word	0x8800759c
 800fa2c:	fe37e43c 	.word	0xfe37e43c
 800fa30:	c2f8f359 	.word	0xc2f8f359
 800fa34:	81a56e1f 	.word	0x81a56e1f
 800fa38:	43500000 	.word	0x43500000
 800fa3c:	ffff3cb0 	.word	0xffff3cb0
 800fa40:	3c900000 	.word	0x3c900000

0800fa44 <with_errno>:
 800fa44:	b510      	push	{r4, lr}
 800fa46:	ed2d 8b02 	vpush	{d8}
 800fa4a:	eeb0 8a40 	vmov.f32	s16, s0
 800fa4e:	eef0 8a60 	vmov.f32	s17, s1
 800fa52:	4604      	mov	r4, r0
 800fa54:	f7fe fb96 	bl	800e184 <__errno>
 800fa58:	eeb0 0a48 	vmov.f32	s0, s16
 800fa5c:	eef0 0a68 	vmov.f32	s1, s17
 800fa60:	ecbd 8b02 	vpop	{d8}
 800fa64:	6004      	str	r4, [r0, #0]
 800fa66:	bd10      	pop	{r4, pc}

0800fa68 <xflow>:
 800fa68:	4603      	mov	r3, r0
 800fa6a:	b507      	push	{r0, r1, r2, lr}
 800fa6c:	ec51 0b10 	vmov	r0, r1, d0
 800fa70:	b183      	cbz	r3, 800fa94 <xflow+0x2c>
 800fa72:	4602      	mov	r2, r0
 800fa74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa78:	e9cd 2300 	strd	r2, r3, [sp]
 800fa7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa80:	f7f0 fe32 	bl	80006e8 <__aeabi_dmul>
 800fa84:	ec41 0b10 	vmov	d0, r0, r1
 800fa88:	2022      	movs	r0, #34	@ 0x22
 800fa8a:	b003      	add	sp, #12
 800fa8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa90:	f7ff bfd8 	b.w	800fa44 <with_errno>
 800fa94:	4602      	mov	r2, r0
 800fa96:	460b      	mov	r3, r1
 800fa98:	e7ee      	b.n	800fa78 <xflow+0x10>
 800fa9a:	0000      	movs	r0, r0
 800fa9c:	0000      	movs	r0, r0
	...

0800faa0 <__math_uflow>:
 800faa0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800faa8 <__math_uflow+0x8>
 800faa4:	f7ff bfe0 	b.w	800fa68 <xflow>
 800faa8:	00000000 	.word	0x00000000
 800faac:	10000000 	.word	0x10000000

0800fab0 <__math_oflow>:
 800fab0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fab8 <__math_oflow+0x8>
 800fab4:	f7ff bfd8 	b.w	800fa68 <xflow>
 800fab8:	00000000 	.word	0x00000000
 800fabc:	70000000 	.word	0x70000000

0800fac0 <__ieee754_sqrt>:
 800fac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac4:	4a68      	ldr	r2, [pc, #416]	@ (800fc68 <__ieee754_sqrt+0x1a8>)
 800fac6:	ec55 4b10 	vmov	r4, r5, d0
 800faca:	43aa      	bics	r2, r5
 800facc:	462b      	mov	r3, r5
 800face:	4621      	mov	r1, r4
 800fad0:	d110      	bne.n	800faf4 <__ieee754_sqrt+0x34>
 800fad2:	4622      	mov	r2, r4
 800fad4:	4620      	mov	r0, r4
 800fad6:	4629      	mov	r1, r5
 800fad8:	f7f0 fe06 	bl	80006e8 <__aeabi_dmul>
 800fadc:	4602      	mov	r2, r0
 800fade:	460b      	mov	r3, r1
 800fae0:	4620      	mov	r0, r4
 800fae2:	4629      	mov	r1, r5
 800fae4:	f7f0 fc4a 	bl	800037c <__adddf3>
 800fae8:	4604      	mov	r4, r0
 800faea:	460d      	mov	r5, r1
 800faec:	ec45 4b10 	vmov	d0, r4, r5
 800faf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf4:	2d00      	cmp	r5, #0
 800faf6:	dc0e      	bgt.n	800fb16 <__ieee754_sqrt+0x56>
 800faf8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fafc:	4322      	orrs	r2, r4
 800fafe:	d0f5      	beq.n	800faec <__ieee754_sqrt+0x2c>
 800fb00:	b19d      	cbz	r5, 800fb2a <__ieee754_sqrt+0x6a>
 800fb02:	4622      	mov	r2, r4
 800fb04:	4620      	mov	r0, r4
 800fb06:	4629      	mov	r1, r5
 800fb08:	f7f0 fc36 	bl	8000378 <__aeabi_dsub>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	f7f0 ff14 	bl	800093c <__aeabi_ddiv>
 800fb14:	e7e8      	b.n	800fae8 <__ieee754_sqrt+0x28>
 800fb16:	152a      	asrs	r2, r5, #20
 800fb18:	d115      	bne.n	800fb46 <__ieee754_sqrt+0x86>
 800fb1a:	2000      	movs	r0, #0
 800fb1c:	e009      	b.n	800fb32 <__ieee754_sqrt+0x72>
 800fb1e:	0acb      	lsrs	r3, r1, #11
 800fb20:	3a15      	subs	r2, #21
 800fb22:	0549      	lsls	r1, r1, #21
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d0fa      	beq.n	800fb1e <__ieee754_sqrt+0x5e>
 800fb28:	e7f7      	b.n	800fb1a <__ieee754_sqrt+0x5a>
 800fb2a:	462a      	mov	r2, r5
 800fb2c:	e7fa      	b.n	800fb24 <__ieee754_sqrt+0x64>
 800fb2e:	005b      	lsls	r3, r3, #1
 800fb30:	3001      	adds	r0, #1
 800fb32:	02dc      	lsls	r4, r3, #11
 800fb34:	d5fb      	bpl.n	800fb2e <__ieee754_sqrt+0x6e>
 800fb36:	1e44      	subs	r4, r0, #1
 800fb38:	1b12      	subs	r2, r2, r4
 800fb3a:	f1c0 0420 	rsb	r4, r0, #32
 800fb3e:	fa21 f404 	lsr.w	r4, r1, r4
 800fb42:	4323      	orrs	r3, r4
 800fb44:	4081      	lsls	r1, r0
 800fb46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb4a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800fb4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb52:	07d2      	lsls	r2, r2, #31
 800fb54:	bf5c      	itt	pl
 800fb56:	005b      	lslpl	r3, r3, #1
 800fb58:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fb5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fb60:	bf58      	it	pl
 800fb62:	0049      	lslpl	r1, r1, #1
 800fb64:	2600      	movs	r6, #0
 800fb66:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fb6a:	106d      	asrs	r5, r5, #1
 800fb6c:	0049      	lsls	r1, r1, #1
 800fb6e:	2016      	movs	r0, #22
 800fb70:	4632      	mov	r2, r6
 800fb72:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fb76:	1917      	adds	r7, r2, r4
 800fb78:	429f      	cmp	r7, r3
 800fb7a:	bfde      	ittt	le
 800fb7c:	193a      	addle	r2, r7, r4
 800fb7e:	1bdb      	suble	r3, r3, r7
 800fb80:	1936      	addle	r6, r6, r4
 800fb82:	0fcf      	lsrs	r7, r1, #31
 800fb84:	3801      	subs	r0, #1
 800fb86:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800fb8a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fb8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fb92:	d1f0      	bne.n	800fb76 <__ieee754_sqrt+0xb6>
 800fb94:	4604      	mov	r4, r0
 800fb96:	2720      	movs	r7, #32
 800fb98:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	eb00 0e0c 	add.w	lr, r0, ip
 800fba2:	db02      	blt.n	800fbaa <__ieee754_sqrt+0xea>
 800fba4:	d113      	bne.n	800fbce <__ieee754_sqrt+0x10e>
 800fba6:	458e      	cmp	lr, r1
 800fba8:	d811      	bhi.n	800fbce <__ieee754_sqrt+0x10e>
 800fbaa:	f1be 0f00 	cmp.w	lr, #0
 800fbae:	eb0e 000c 	add.w	r0, lr, ip
 800fbb2:	da42      	bge.n	800fc3a <__ieee754_sqrt+0x17a>
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	db40      	blt.n	800fc3a <__ieee754_sqrt+0x17a>
 800fbb8:	f102 0801 	add.w	r8, r2, #1
 800fbbc:	1a9b      	subs	r3, r3, r2
 800fbbe:	458e      	cmp	lr, r1
 800fbc0:	bf88      	it	hi
 800fbc2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800fbc6:	eba1 010e 	sub.w	r1, r1, lr
 800fbca:	4464      	add	r4, ip
 800fbcc:	4642      	mov	r2, r8
 800fbce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fbd2:	3f01      	subs	r7, #1
 800fbd4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fbd8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fbdc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fbe0:	d1dc      	bne.n	800fb9c <__ieee754_sqrt+0xdc>
 800fbe2:	4319      	orrs	r1, r3
 800fbe4:	d01b      	beq.n	800fc1e <__ieee754_sqrt+0x15e>
 800fbe6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800fc6c <__ieee754_sqrt+0x1ac>
 800fbea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800fc70 <__ieee754_sqrt+0x1b0>
 800fbee:	e9da 0100 	ldrd	r0, r1, [sl]
 800fbf2:	e9db 2300 	ldrd	r2, r3, [fp]
 800fbf6:	f7f0 fbbf 	bl	8000378 <__aeabi_dsub>
 800fbfa:	e9da 8900 	ldrd	r8, r9, [sl]
 800fbfe:	4602      	mov	r2, r0
 800fc00:	460b      	mov	r3, r1
 800fc02:	4640      	mov	r0, r8
 800fc04:	4649      	mov	r1, r9
 800fc06:	f7f0 ffeb 	bl	8000be0 <__aeabi_dcmple>
 800fc0a:	b140      	cbz	r0, 800fc1e <__ieee754_sqrt+0x15e>
 800fc0c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800fc10:	e9da 0100 	ldrd	r0, r1, [sl]
 800fc14:	e9db 2300 	ldrd	r2, r3, [fp]
 800fc18:	d111      	bne.n	800fc3e <__ieee754_sqrt+0x17e>
 800fc1a:	3601      	adds	r6, #1
 800fc1c:	463c      	mov	r4, r7
 800fc1e:	1072      	asrs	r2, r6, #1
 800fc20:	0863      	lsrs	r3, r4, #1
 800fc22:	07f1      	lsls	r1, r6, #31
 800fc24:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800fc28:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800fc2c:	bf48      	it	mi
 800fc2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800fc32:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800fc36:	4618      	mov	r0, r3
 800fc38:	e756      	b.n	800fae8 <__ieee754_sqrt+0x28>
 800fc3a:	4690      	mov	r8, r2
 800fc3c:	e7be      	b.n	800fbbc <__ieee754_sqrt+0xfc>
 800fc3e:	f7f0 fb9d 	bl	800037c <__adddf3>
 800fc42:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc46:	4602      	mov	r2, r0
 800fc48:	460b      	mov	r3, r1
 800fc4a:	4640      	mov	r0, r8
 800fc4c:	4649      	mov	r1, r9
 800fc4e:	f7f0 ffbd 	bl	8000bcc <__aeabi_dcmplt>
 800fc52:	b120      	cbz	r0, 800fc5e <__ieee754_sqrt+0x19e>
 800fc54:	1ca0      	adds	r0, r4, #2
 800fc56:	bf08      	it	eq
 800fc58:	3601      	addeq	r6, #1
 800fc5a:	3402      	adds	r4, #2
 800fc5c:	e7df      	b.n	800fc1e <__ieee754_sqrt+0x15e>
 800fc5e:	1c63      	adds	r3, r4, #1
 800fc60:	f023 0401 	bic.w	r4, r3, #1
 800fc64:	e7db      	b.n	800fc1e <__ieee754_sqrt+0x15e>
 800fc66:	bf00      	nop
 800fc68:	7ff00000 	.word	0x7ff00000
 800fc6c:	200000d0 	.word	0x200000d0
 800fc70:	200000c8 	.word	0x200000c8

0800fc74 <_sbrk>:
 800fc74:	4a04      	ldr	r2, [pc, #16]	@ (800fc88 <_sbrk+0x14>)
 800fc76:	6811      	ldr	r1, [r2, #0]
 800fc78:	4603      	mov	r3, r0
 800fc7a:	b909      	cbnz	r1, 800fc80 <_sbrk+0xc>
 800fc7c:	4903      	ldr	r1, [pc, #12]	@ (800fc8c <_sbrk+0x18>)
 800fc7e:	6011      	str	r1, [r2, #0]
 800fc80:	6810      	ldr	r0, [r2, #0]
 800fc82:	4403      	add	r3, r0
 800fc84:	6013      	str	r3, [r2, #0]
 800fc86:	4770      	bx	lr
 800fc88:	20014b60 	.word	0x20014b60
 800fc8c:	20014b68 	.word	0x20014b68

0800fc90 <_init>:
 800fc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc92:	bf00      	nop
 800fc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc96:	bc08      	pop	{r3}
 800fc98:	469e      	mov	lr, r3
 800fc9a:	4770      	bx	lr

0800fc9c <_fini>:
 800fc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc9e:	bf00      	nop
 800fca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fca2:	bc08      	pop	{r3}
 800fca4:	469e      	mov	lr, r3
 800fca6:	4770      	bx	lr
