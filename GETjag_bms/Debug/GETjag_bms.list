
GETjag_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfe4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800d1b4  0800d1b4  0000e1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d744  0800d744  0000f138  2**0
                  CONTENTS
  4 .ARM          00000008  0800d744  0800d744  0000e744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d74c  0800d74c  0000f138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d74c  0800d74c  0000e74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d750  0800d750  0000e750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800d754  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000149c0  20000138  0800d88c  0000f138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014af8  0800d88c  0000faf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f06  00000000  00000000  0000f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aeb  00000000  00000000  0003006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f48  00000000  00000000  00034b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000187a  00000000  00000000  00036aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008133  00000000  00000000  00038322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024938  00000000  00000000  00040455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ece71  00000000  00000000  00064d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151bfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e08  00000000  00000000  00151c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0015aa4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000138 	.word	0x20000138
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d19c 	.word	0x0800d19c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000013c 	.word	0x2000013c
 800020c:	0800d19c 	.word	0x0800d19c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200133d4 	.word	0x200133d4

080002a4 <strcmp>:
 80002a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	bf28      	it	cs
 80002b0:	429a      	cmpcs	r2, r3
 80002b2:	d0f7      	beq.n	80002a4 <strcmp>
 80002b4:	1ad0      	subs	r0, r2, r3
 80002b6:	4770      	bx	lr

080002b8 <strlen>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d1fb      	bne.n	80002ba <strlen+0x2>
 80002c2:	1a18      	subs	r0, r3, r0
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000380:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000384:	f000 b96a 	b.w	800065c <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f000 f806 	bl	80003a0 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__udivmoddi4>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	9d08      	ldr	r5, [sp, #32]
 80003a6:	460c      	mov	r4, r1
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d14e      	bne.n	800044a <__udivmoddi4+0xaa>
 80003ac:	4694      	mov	ip, r2
 80003ae:	458c      	cmp	ip, r1
 80003b0:	4686      	mov	lr, r0
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	d962      	bls.n	800047e <__udivmoddi4+0xde>
 80003b8:	b14a      	cbz	r2, 80003ce <__udivmoddi4+0x2e>
 80003ba:	f1c2 0320 	rsb	r3, r2, #32
 80003be:	4091      	lsls	r1, r2
 80003c0:	fa20 f303 	lsr.w	r3, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	4319      	orrs	r1, r3
 80003ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f f68c 	uxth.w	r6, ip
 80003d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003de:	fb07 1114 	mls	r1, r7, r4, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb04 f106 	mul.w	r1, r4, r6
 80003ea:	4299      	cmp	r1, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x64>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003f6:	f080 8112 	bcs.w	800061e <__udivmoddi4+0x27e>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 810f 	bls.w	800061e <__udivmoddi4+0x27e>
 8000400:	3c02      	subs	r4, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb1 f0f7 	udiv	r0, r1, r7
 800040e:	fb07 1110 	mls	r1, r7, r0, r1
 8000412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000416:	fb00 f606 	mul.w	r6, r0, r6
 800041a:	429e      	cmp	r6, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x94>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000426:	f080 80fc 	bcs.w	8000622 <__udivmoddi4+0x282>
 800042a:	429e      	cmp	r6, r3
 800042c:	f240 80f9 	bls.w	8000622 <__udivmoddi4+0x282>
 8000430:	4463      	add	r3, ip
 8000432:	3802      	subs	r0, #2
 8000434:	1b9b      	subs	r3, r3, r6
 8000436:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043a:	2100      	movs	r1, #0
 800043c:	b11d      	cbz	r5, 8000446 <__udivmoddi4+0xa6>
 800043e:	40d3      	lsrs	r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	e9c5 3200 	strd	r3, r2, [r5]
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	428b      	cmp	r3, r1
 800044c:	d905      	bls.n	800045a <__udivmoddi4+0xba>
 800044e:	b10d      	cbz	r5, 8000454 <__udivmoddi4+0xb4>
 8000450:	e9c5 0100 	strd	r0, r1, [r5]
 8000454:	2100      	movs	r1, #0
 8000456:	4608      	mov	r0, r1
 8000458:	e7f5      	b.n	8000446 <__udivmoddi4+0xa6>
 800045a:	fab3 f183 	clz	r1, r3
 800045e:	2900      	cmp	r1, #0
 8000460:	d146      	bne.n	80004f0 <__udivmoddi4+0x150>
 8000462:	42a3      	cmp	r3, r4
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0xcc>
 8000466:	4290      	cmp	r0, r2
 8000468:	f0c0 80f0 	bcc.w	800064c <__udivmoddi4+0x2ac>
 800046c:	1a86      	subs	r6, r0, r2
 800046e:	eb64 0303 	sbc.w	r3, r4, r3
 8000472:	2001      	movs	r0, #1
 8000474:	2d00      	cmp	r5, #0
 8000476:	d0e6      	beq.n	8000446 <__udivmoddi4+0xa6>
 8000478:	e9c5 6300 	strd	r6, r3, [r5]
 800047c:	e7e3      	b.n	8000446 <__udivmoddi4+0xa6>
 800047e:	2a00      	cmp	r2, #0
 8000480:	f040 8090 	bne.w	80005a4 <__udivmoddi4+0x204>
 8000484:	eba1 040c 	sub.w	r4, r1, ip
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa1f f78c 	uxth.w	r7, ip
 8000490:	2101      	movs	r1, #1
 8000492:	fbb4 f6f8 	udiv	r6, r4, r8
 8000496:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800049a:	fb08 4416 	mls	r4, r8, r6, r4
 800049e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004a2:	fb07 f006 	mul.w	r0, r7, r6
 80004a6:	4298      	cmp	r0, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x11c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x11a>
 80004b4:	4298      	cmp	r0, r3
 80004b6:	f200 80cd 	bhi.w	8000654 <__udivmoddi4+0x2b4>
 80004ba:	4626      	mov	r6, r4
 80004bc:	1a1c      	subs	r4, r3, r0
 80004be:	fa1f f38e 	uxth.w	r3, lr
 80004c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004c6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ce:	fb00 f707 	mul.w	r7, r0, r7
 80004d2:	429f      	cmp	r7, r3
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x148>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004de:	d202      	bcs.n	80004e6 <__udivmoddi4+0x146>
 80004e0:	429f      	cmp	r7, r3
 80004e2:	f200 80b0 	bhi.w	8000646 <__udivmoddi4+0x2a6>
 80004e6:	4620      	mov	r0, r4
 80004e8:	1bdb      	subs	r3, r3, r7
 80004ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ee:	e7a5      	b.n	800043c <__udivmoddi4+0x9c>
 80004f0:	f1c1 0620 	rsb	r6, r1, #32
 80004f4:	408b      	lsls	r3, r1
 80004f6:	fa22 f706 	lsr.w	r7, r2, r6
 80004fa:	431f      	orrs	r7, r3
 80004fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000500:	fa04 f301 	lsl.w	r3, r4, r1
 8000504:	ea43 030c 	orr.w	r3, r3, ip
 8000508:	40f4      	lsrs	r4, r6
 800050a:	fa00 f801 	lsl.w	r8, r0, r1
 800050e:	0c38      	lsrs	r0, r7, #16
 8000510:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000514:	fbb4 fef0 	udiv	lr, r4, r0
 8000518:	fa1f fc87 	uxth.w	ip, r7
 800051c:	fb00 441e 	mls	r4, r0, lr, r4
 8000520:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000524:	fb0e f90c 	mul.w	r9, lr, ip
 8000528:	45a1      	cmp	r9, r4
 800052a:	fa02 f201 	lsl.w	r2, r2, r1
 800052e:	d90a      	bls.n	8000546 <__udivmoddi4+0x1a6>
 8000530:	193c      	adds	r4, r7, r4
 8000532:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000536:	f080 8084 	bcs.w	8000642 <__udivmoddi4+0x2a2>
 800053a:	45a1      	cmp	r9, r4
 800053c:	f240 8081 	bls.w	8000642 <__udivmoddi4+0x2a2>
 8000540:	f1ae 0e02 	sub.w	lr, lr, #2
 8000544:	443c      	add	r4, r7
 8000546:	eba4 0409 	sub.w	r4, r4, r9
 800054a:	fa1f f983 	uxth.w	r9, r3
 800054e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000552:	fb00 4413 	mls	r4, r0, r3, r4
 8000556:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800055a:	fb03 fc0c 	mul.w	ip, r3, ip
 800055e:	45a4      	cmp	ip, r4
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0x1d2>
 8000562:	193c      	adds	r4, r7, r4
 8000564:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000568:	d267      	bcs.n	800063a <__udivmoddi4+0x29a>
 800056a:	45a4      	cmp	ip, r4
 800056c:	d965      	bls.n	800063a <__udivmoddi4+0x29a>
 800056e:	3b02      	subs	r3, #2
 8000570:	443c      	add	r4, r7
 8000572:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000576:	fba0 9302 	umull	r9, r3, r0, r2
 800057a:	eba4 040c 	sub.w	r4, r4, ip
 800057e:	429c      	cmp	r4, r3
 8000580:	46ce      	mov	lr, r9
 8000582:	469c      	mov	ip, r3
 8000584:	d351      	bcc.n	800062a <__udivmoddi4+0x28a>
 8000586:	d04e      	beq.n	8000626 <__udivmoddi4+0x286>
 8000588:	b155      	cbz	r5, 80005a0 <__udivmoddi4+0x200>
 800058a:	ebb8 030e 	subs.w	r3, r8, lr
 800058e:	eb64 040c 	sbc.w	r4, r4, ip
 8000592:	fa04 f606 	lsl.w	r6, r4, r6
 8000596:	40cb      	lsrs	r3, r1
 8000598:	431e      	orrs	r6, r3
 800059a:	40cc      	lsrs	r4, r1
 800059c:	e9c5 6400 	strd	r6, r4, [r5]
 80005a0:	2100      	movs	r1, #0
 80005a2:	e750      	b.n	8000446 <__udivmoddi4+0xa6>
 80005a4:	f1c2 0320 	rsb	r3, r2, #32
 80005a8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80005b0:	fa24 f303 	lsr.w	r3, r4, r3
 80005b4:	4094      	lsls	r4, r2
 80005b6:	430c      	orrs	r4, r1
 80005b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005c0:	fa1f f78c 	uxth.w	r7, ip
 80005c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005c8:	fb08 3110 	mls	r1, r8, r0, r3
 80005cc:	0c23      	lsrs	r3, r4, #16
 80005ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005d2:	fb00 f107 	mul.w	r1, r0, r7
 80005d6:	4299      	cmp	r1, r3
 80005d8:	d908      	bls.n	80005ec <__udivmoddi4+0x24c>
 80005da:	eb1c 0303 	adds.w	r3, ip, r3
 80005de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005e2:	d22c      	bcs.n	800063e <__udivmoddi4+0x29e>
 80005e4:	4299      	cmp	r1, r3
 80005e6:	d92a      	bls.n	800063e <__udivmoddi4+0x29e>
 80005e8:	3802      	subs	r0, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	1a5b      	subs	r3, r3, r1
 80005ee:	b2a4      	uxth	r4, r4
 80005f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005f4:	fb08 3311 	mls	r3, r8, r1, r3
 80005f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005fc:	fb01 f307 	mul.w	r3, r1, r7
 8000600:	42a3      	cmp	r3, r4
 8000602:	d908      	bls.n	8000616 <__udivmoddi4+0x276>
 8000604:	eb1c 0404 	adds.w	r4, ip, r4
 8000608:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800060c:	d213      	bcs.n	8000636 <__udivmoddi4+0x296>
 800060e:	42a3      	cmp	r3, r4
 8000610:	d911      	bls.n	8000636 <__udivmoddi4+0x296>
 8000612:	3902      	subs	r1, #2
 8000614:	4464      	add	r4, ip
 8000616:	1ae4      	subs	r4, r4, r3
 8000618:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800061c:	e739      	b.n	8000492 <__udivmoddi4+0xf2>
 800061e:	4604      	mov	r4, r0
 8000620:	e6f0      	b.n	8000404 <__udivmoddi4+0x64>
 8000622:	4608      	mov	r0, r1
 8000624:	e706      	b.n	8000434 <__udivmoddi4+0x94>
 8000626:	45c8      	cmp	r8, r9
 8000628:	d2ae      	bcs.n	8000588 <__udivmoddi4+0x1e8>
 800062a:	ebb9 0e02 	subs.w	lr, r9, r2
 800062e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000632:	3801      	subs	r0, #1
 8000634:	e7a8      	b.n	8000588 <__udivmoddi4+0x1e8>
 8000636:	4631      	mov	r1, r6
 8000638:	e7ed      	b.n	8000616 <__udivmoddi4+0x276>
 800063a:	4603      	mov	r3, r0
 800063c:	e799      	b.n	8000572 <__udivmoddi4+0x1d2>
 800063e:	4630      	mov	r0, r6
 8000640:	e7d4      	b.n	80005ec <__udivmoddi4+0x24c>
 8000642:	46d6      	mov	lr, sl
 8000644:	e77f      	b.n	8000546 <__udivmoddi4+0x1a6>
 8000646:	4463      	add	r3, ip
 8000648:	3802      	subs	r0, #2
 800064a:	e74d      	b.n	80004e8 <__udivmoddi4+0x148>
 800064c:	4606      	mov	r6, r0
 800064e:	4623      	mov	r3, r4
 8000650:	4608      	mov	r0, r1
 8000652:	e70f      	b.n	8000474 <__udivmoddi4+0xd4>
 8000654:	3e02      	subs	r6, #2
 8000656:	4463      	add	r3, ip
 8000658:	e730      	b.n	80004bc <__udivmoddi4+0x11c>
 800065a:	bf00      	nop

0800065c <__aeabi_idiv0>:
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <delayUS>:
static void modbus_comm_task(void *parameters);
static void task1_handler(void *parameters);
static void readVoltage_task(void *parameters);

void delayUS(uint32_t us)
{                                    // Sets the delay in microseconds.
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim10, 0); // set the counter value a 0
 8000668:	4b08      	ldr	r3, [pc, #32]	@ (800068c <delayUS+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim10) < us)
 8000670:	bf00      	nop
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <delayUS+0x2c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	429a      	cmp	r2, r3
 800067c:	d8f9      	bhi.n	8000672 <delayUS+0x12>
    ; // wait for the counter to reach the us input in the parameter
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	200002fc 	.word	0x200002fc

08000690 <Checksum>:
  }
}

unsigned char Checksum(unsigned char *ptr, unsigned char len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	70fb      	strb	r3, [r7, #3]
  unsigned char i;
  unsigned char checksum = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < len; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e009      	b.n	80006ba <Checksum+0x2a>
    checksum += ptr[i];
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	7bbb      	ldrb	r3, [r7, #14]
 80006b0:	4413      	add	r3, r2
 80006b2:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < len; i++)
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	3301      	adds	r3, #1
 80006b8:	73fb      	strb	r3, [r7, #15]
 80006ba:	7bfa      	ldrb	r2, [r7, #15]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d3f1      	bcc.n	80006a6 <Checksum+0x16>

  checksum = 0xff & ~checksum;
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	43db      	mvns	r3, r3
 80006c6:	73bb      	strb	r3, [r7, #14]

  return (checksum);
 80006c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <I2C_WriteReg>:
  }
  return (crc);
}

void I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af04      	add	r7, sp, #16
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	4613      	mov	r3, r2
 80006e6:	71bb      	strb	r3, [r7, #6]
  uint8_t TX_Buffer[MAX_BUFFER_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80006e8:	4a0c      	ldr	r2, [pc, #48]	@ (800071c <I2C_WriteReg+0x44>)
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80006f0:	c303      	stmia	r3!, {r0, r1}
 80006f2:	801a      	strh	r2, [r3, #0]
      j = j + 1;
    }
    HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, TX_Buffer, crc_count, 1000);
  }
#else
  HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000700:	9102      	str	r1, [sp, #8]
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2301      	movs	r3, #1
 800070a:	2110      	movs	r1, #16
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <I2C_WriteReg+0x48>)
 800070e:	f004 f8df 	bl	80048d0 <HAL_I2C_Mem_Write>
#endif
}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	0800d1b4 	.word	0x0800d1b4
 8000720:	20000190 	.word	0x20000190

08000724 <I2C_ReadReg>:

int I2C_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af04      	add	r7, sp, #16
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	71bb      	strb	r3, [r7, #6]
  unsigned int RX_CRC_Fail = 0; // reset to 0. If in CRC Mode and CRC fails, this will be incremented.
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  uint8_t RX_Buffer[MAX_BUFFER_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000738:	4a0c      	ldr	r2, [pc, #48]	@ (800076c <I2C_ReadReg+0x48>)
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000740:	c303      	stmia	r3!, {r0, r1}
 8000742:	801a      	strh	r2, [r3, #0]
      j = j + 1;
    }
    CopyArray(RX_Buffer, reg_data, crc_count);
  }
#else
  HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	b29a      	uxth	r2, r3
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	b29b      	uxth	r3, r3
 800074c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000750:	9102      	str	r1, [sp, #8]
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	2110      	movs	r1, #16
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <I2C_ReadReg+0x4c>)
 800075e:	f004 f9b1 	bl	8004ac4 <HAL_I2C_Mem_Read>
#endif
  return 0;
 8000762:	2300      	movs	r3, #0
}
 8000764:	4618      	mov	r0, r3
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	0800d1b4 	.word	0x0800d1b4
 8000770:	20000190 	.word	0x20000190

08000774 <BQ769x2_SetRegister>:

void BQ769x2_SetRegister(uint16_t reg_addr, uint32_t reg_data, uint8_t datalen)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	80fb      	strh	r3, [r7, #6]
 8000780:	4613      	mov	r3, r2
 8000782:	717b      	strb	r3, [r7, #5]
  uint8_t TX_Buffer[2] = {0x00, 0x00};
 8000784:	2300      	movs	r3, #0
 8000786:	82bb      	strh	r3, [r7, #20]
  uint8_t TX_RegData[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000788:	4a49      	ldr	r2, [pc, #292]	@ (80008b0 <BQ769x2_SetRegister+0x13c>)
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000792:	6018      	str	r0, [r3, #0]
 8000794:	3304      	adds	r3, #4
 8000796:	8019      	strh	r1, [r3, #0]

  // TX_RegData in little endian format
  TX_RegData[0] = reg_addr & 0xff;
 8000798:	88fb      	ldrh	r3, [r7, #6]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	733b      	strb	r3, [r7, #12]
  TX_RegData[1] = (reg_addr >> 8) & 0xff;
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	737b      	strb	r3, [r7, #13]
  TX_RegData[2] = reg_data & 0xff; // 1st byte of data
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	73bb      	strb	r3, [r7, #14]

  switch (datalen)
 80007ae:	797b      	ldrb	r3, [r7, #5]
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d04c      	beq.n	800084e <BQ769x2_SetRegister+0xda>
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	dc77      	bgt.n	80008a8 <BQ769x2_SetRegister+0x134>
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d002      	beq.n	80007c2 <BQ769x2_SetRegister+0x4e>
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d021      	beq.n	8000804 <BQ769x2_SetRegister+0x90>
    TX_Buffer[1] = 0x08;              // combined length of register address and data
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
    delayUS(2000);
    break;
  }
}
 80007c0:	e072      	b.n	80008a8 <BQ769x2_SetRegister+0x134>
    I2C_WriteReg(0x3E, TX_RegData, 3);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2203      	movs	r2, #3
 80007c8:	4619      	mov	r1, r3
 80007ca:	203e      	movs	r0, #62	@ 0x3e
 80007cc:	f7ff ff84 	bl	80006d8 <I2C_WriteReg>
    delayUS(2000);
 80007d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007d4:	f7ff ff44 	bl	8000660 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 3);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2103      	movs	r1, #3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff56 	bl	8000690 <Checksum>
 80007e4:	4603      	mov	r3, r0
 80007e6:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x05;              // combined length of register address and data
 80007e8:	2305      	movs	r3, #5
 80007ea:	757b      	strb	r3, [r7, #21]
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2202      	movs	r2, #2
 80007f2:	4619      	mov	r1, r3
 80007f4:	2060      	movs	r0, #96	@ 0x60
 80007f6:	f7ff ff6f 	bl	80006d8 <I2C_WriteReg>
    delayUS(2000);
 80007fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007fe:	f7ff ff2f 	bl	8000660 <delayUS>
    break;
 8000802:	e051      	b.n	80008a8 <BQ769x2_SetRegister+0x134>
    TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	0a1b      	lsrs	r3, r3, #8
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73fb      	strb	r3, [r7, #15]
    I2C_WriteReg(0x3E, TX_RegData, 4);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2204      	movs	r2, #4
 8000812:	4619      	mov	r1, r3
 8000814:	203e      	movs	r0, #62	@ 0x3e
 8000816:	f7ff ff5f 	bl	80006d8 <I2C_WriteReg>
    delayUS(2000);
 800081a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800081e:	f7ff ff1f 	bl	8000660 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 4);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2104      	movs	r1, #4
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff31 	bl	8000690 <Checksum>
 800082e:	4603      	mov	r3, r0
 8000830:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x06;              // combined length of register address and data
 8000832:	2306      	movs	r3, #6
 8000834:	757b      	strb	r3, [r7, #21]
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2202      	movs	r2, #2
 800083c:	4619      	mov	r1, r3
 800083e:	2060      	movs	r0, #96	@ 0x60
 8000840:	f7ff ff4a 	bl	80006d8 <I2C_WriteReg>
    delayUS(2000);
 8000844:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000848:	f7ff ff0a 	bl	8000660 <delayUS>
    break;
 800084c:	e02c      	b.n	80008a8 <BQ769x2_SetRegister+0x134>
    TX_RegData[3] = (reg_data >> 8) & 0xff;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	b2db      	uxtb	r3, r3
 8000854:	73fb      	strb	r3, [r7, #15]
    TX_RegData[4] = (reg_data >> 16) & 0xff;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	0c1b      	lsrs	r3, r3, #16
 800085a:	b2db      	uxtb	r3, r3
 800085c:	743b      	strb	r3, [r7, #16]
    TX_RegData[5] = (reg_data >> 24) & 0xff;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	0e1b      	lsrs	r3, r3, #24
 8000862:	b2db      	uxtb	r3, r3
 8000864:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x3E, TX_RegData, 6);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2206      	movs	r2, #6
 800086c:	4619      	mov	r1, r3
 800086e:	203e      	movs	r0, #62	@ 0x3e
 8000870:	f7ff ff32 	bl	80006d8 <I2C_WriteReg>
    delayUS(2000);
 8000874:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000878:	f7ff fef2 	bl	8000660 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 6);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2106      	movs	r1, #6
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff04 	bl	8000690 <Checksum>
 8000888:	4603      	mov	r3, r0
 800088a:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x08;              // combined length of register address and data
 800088c:	2308      	movs	r3, #8
 800088e:	757b      	strb	r3, [r7, #21]
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2202      	movs	r2, #2
 8000896:	4619      	mov	r1, r3
 8000898:	2060      	movs	r0, #96	@ 0x60
 800089a:	f7ff ff1d 	bl	80006d8 <I2C_WriteReg>
    delayUS(2000);
 800089e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008a2:	f7ff fedd 	bl	8000660 <delayUS>
    break;
 80008a6:	bf00      	nop
}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	0800d1c0 	.word	0x0800d1c0

080008b4 <CommandSubcommands>:
  I2C_WriteReg(0x3E, TX_RegData, datalen + 2);
}

void CommandSubcommands(uint16_t command) // For Command only Subcommands
// See the TRM or the BQ76952 header file for a full list of Command-only subcommands
{ // For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]

  uint8_t TX_Reg[2] = {0x00, 0x00};
 80008be:	2300      	movs	r3, #0
 80008c0:	81bb      	strh	r3, [r7, #12]

  // TX_Reg in little endian format
  TX_Reg[0] = command & 0xff;
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	733b      	strb	r3, [r7, #12]
  TX_Reg[1] = (command >> 8) & 0xff;
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	0a1b      	lsrs	r3, r3, #8
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	737b      	strb	r3, [r7, #13]

  I2C_WriteReg(0x3E, TX_Reg, 2);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	2202      	movs	r2, #2
 80008d8:	4619      	mov	r1, r3
 80008da:	203e      	movs	r0, #62	@ 0x3e
 80008dc:	f7ff fefc 	bl	80006d8 <I2C_WriteReg>
  delayUS(2000);
 80008e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008e4:	f7ff febc 	bl	8000660 <delayUS>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <DirectCommands>:
  }
}

void DirectCommands(uint8_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Direct Commands
{ // type: R = read, W = write
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	460b      	mov	r3, r1
 80008fc:	80bb      	strh	r3, [r7, #4]
 80008fe:	4613      	mov	r3, r2
 8000900:	71bb      	strb	r3, [r7, #6]
  uint8_t TX_data[2] = {0x00, 0x00};
 8000902:	2300      	movs	r3, #0
 8000904:	81bb      	strh	r3, [r7, #12]

  // little endian format
  TX_data[0] = data & 0xff;
 8000906:	88bb      	ldrh	r3, [r7, #4]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	733b      	strb	r3, [r7, #12]
  TX_data[1] = (data >> 8) & 0xff;
 800090c:	88bb      	ldrh	r3, [r7, #4]
 800090e:	0a1b      	lsrs	r3, r3, #8
 8000910:	b29b      	uxth	r3, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	737b      	strb	r3, [r7, #13]

  if (type == R)
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d109      	bne.n	8000930 <DirectCommands+0x40>
  {                                   // Read
    I2C_ReadReg(command, RX_data, 2); // RX_data is a global variable
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2202      	movs	r2, #2
 8000920:	490c      	ldr	r1, [pc, #48]	@ (8000954 <DirectCommands+0x64>)
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fefe 	bl	8000724 <I2C_ReadReg>
    delayUS(2000);
 8000928:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800092c:	f7ff fe98 	bl	8000660 <delayUS>
  }
  if (type == W)
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d10a      	bne.n	800094c <DirectCommands+0x5c>
  { // write
    // Control_status, alarm_status, alarm_enable all 2 bytes long
    I2C_WriteReg(command, TX_data, 2);
 8000936:	f107 010c 	add.w	r1, r7, #12
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2202      	movs	r2, #2
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff feca 	bl	80006d8 <I2C_WriteReg>
    delayUS(2000);
 8000944:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000948:	f7ff fe8a 	bl	8000660 <delayUS>
  }
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200004e4 	.word	0x200004e4

08000958 <BQ769x2_Init>:

void BQ769x2_Init()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  // Configures all parameters in device RAM

  // Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
  // See TRM for full description of CONFIG_UPDATE mode
  CommandSubcommands(SET_CFGUPDATE);
 800095c:	2090      	movs	r0, #144	@ 0x90
 800095e:	f7ff ffa9 	bl	80008b4 <CommandSubcommands>
  // a full description of the register and the bits will pop up on the screen.

  // 'Power Config' - 0x9234 = 0x2D80
  // Setting the DSLP_LDO bit allows the LDOs to remain active when the device goes into Deep Sleep mode
  // Set wake speed bits to 00 for best performance
  BQ769x2_SetRegister(PowerConfig, 0x2D80, 2);
 8000962:	2202      	movs	r2, #2
 8000964:	f44f 5136 	mov.w	r1, #11648	@ 0x2d80
 8000968:	f249 2034 	movw	r0, #37428	@ 0x9234
 800096c:	f7ff ff02 	bl	8000774 <BQ769x2_SetRegister>

  // 'REG0 Config' - set REG0_EN bit to enable pre-regulator
  BQ769x2_SetRegister(REG0Config, 0x00, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	2100      	movs	r1, #0
 8000974:	f249 2037 	movw	r0, #37431	@ 0x9237
 8000978:	f7ff fefc 	bl	8000774 <BQ769x2_SetRegister>
  // BQ769x2_SetRegister(DFETOFFPinConfig, 0x42, 1);

  // Set up ALERT Pin - 0x92FC = 0x2A
  // This configures the ALERT pin to drive high (REG1 voltage) when enabled.
  // The ALERT pin can be used as an interrupt to the MCU when a protection has triggered or new measurements are available
  BQ769x2_SetRegister(ALERTPinConfig, 0x2A, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	212a      	movs	r1, #42	@ 0x2a
 8000980:	f249 20fc 	movw	r0, #37628	@ 0x92fc
 8000984:	f7ff fef6 	bl	8000774 <BQ769x2_SetRegister>

  // Set HDQ to measure Cell Temperature - 0x9300 = 0x07
  // BQ769x2_SetRegister(HDQPinConfig, 0x00, 1);  // No thermistor installed on EVM HDQ pin, so set to 0x00

  // 'VCell Mode' - Enable 16 cells - 0x9304 = 0x0000; Writing 0x0000 sets the default of 16 cells
  BQ769x2_SetRegister(VCellMode, 0x801F, 2); // default 0x0000
 8000988:	2202      	movs	r2, #2
 800098a:	f248 011f 	movw	r1, #32799	@ 0x801f
 800098e:	f249 3004 	movw	r0, #37636	@ 0x9304
 8000992:	f7ff feef 	bl	8000774 <BQ769x2_SetRegister>

  // Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
  // Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
  // COV (over-voltage), CUV (under-voltage)
  BQ769x2_SetRegister(EnabledProtectionsA, 0xBC, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	21bc      	movs	r1, #188	@ 0xbc
 800099a:	f249 2061 	movw	r0, #37473	@ 0x9261
 800099e:	f7ff fee9 	bl	8000774 <BQ769x2_SetRegister>

  // Enable all protections in 'Enabled Protections B' 0x9262 = 0xF7
  // Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
  // OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
  BQ769x2_SetRegister(EnabledProtectionsB, 0xF7, 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	21f7      	movs	r1, #247	@ 0xf7
 80009a6:	f249 2062 	movw	r0, #37474	@ 0x9262
 80009aa:	f7ff fee3 	bl	8000774 <BQ769x2_SetRegister>

  // 'Default Alarm Mask' - 0x..82 Enables the FullScan and ADScan bits, default value = 0xF800
  BQ769x2_SetRegister(DefaultAlarmMask, 0xF882, 2);
 80009ae:	2202      	movs	r2, #2
 80009b0:	f64f 0182 	movw	r1, #63618	@ 0xf882
 80009b4:	f249 206d 	movw	r0, #37485	@ 0x926d
 80009b8:	f7ff fedc 	bl	8000774 <BQ769x2_SetRegister>

  // Set up Cell Balancing Configuration - 0x9335 = 0x03   -  Automated balancing while in Relax or Charge modes
  // Also see "Cell Balancing with BQ769x2 Battery Monitors" document on ti.com
  BQ769x2_SetRegister(BalancingConfiguration, 0x03, 1);
 80009bc:	2201      	movs	r2, #1
 80009be:	2103      	movs	r1, #3
 80009c0:	f249 3035 	movw	r0, #37685	@ 0x9335
 80009c4:	f7ff fed6 	bl	8000774 <BQ769x2_SetRegister>

  // Set up CUV (under-voltage) Threshold - 0x9275 = 0x31 (2479 mV)
  // CUV Threshold is this value multiplied by 50.6mV
  BQ769x2_SetRegister(CUVThreshold, 0x23, 1);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2123      	movs	r1, #35	@ 0x23
 80009cc:	f249 2075 	movw	r0, #37493	@ 0x9275
 80009d0:	f7ff fed0 	bl	8000774 <BQ769x2_SetRegister>

  // Set up COV (over-voltage) Threshold - 0x9278 = 0x55 (4301 mV)
  // COV Threshold is this value multiplied by 50.6mV
  BQ769x2_SetRegister(COVThreshold, 0x55, 1);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2155      	movs	r1, #85	@ 0x55
 80009d8:	f249 2078 	movw	r0, #37496	@ 0x9278
 80009dc:	f7ff feca 	bl	8000774 <BQ769x2_SetRegister>

  // Set up OCC (over-current in charge) Threshold - 0x9280 = 0x05 (10 mV = 10A across 1mOhm sense resistor) Units in 2mV
  BQ769x2_SetRegister(OCCThreshold, 0x05, 1);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2105      	movs	r1, #5
 80009e4:	f249 2080 	movw	r0, #37504	@ 0x9280
 80009e8:	f7ff fec4 	bl	8000774 <BQ769x2_SetRegister>

  // Set up OCD1 Threshold - 0x9282 = 0x0A (20 mV = 20A across 1mOhm sense resistor) units of 2mV
  BQ769x2_SetRegister(OCD1Threshold, 0x0A, 1);
 80009ec:	2201      	movs	r2, #1
 80009ee:	210a      	movs	r1, #10
 80009f0:	f249 2082 	movw	r0, #37506	@ 0x9282
 80009f4:	f7ff febe 	bl	8000774 <BQ769x2_SetRegister>

  // Set up SCD Threshold - 0x9286 = 0x05 (100 mV = 100A across 1mOhm sense resistor)  0x05=100mV
  BQ769x2_SetRegister(SCDThreshold, 0x05, 1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2105      	movs	r1, #5
 80009fc:	f249 2086 	movw	r0, #37510	@ 0x9286
 8000a00:	f7ff feb8 	bl	8000774 <BQ769x2_SetRegister>

  // Set up SCD Delay - 0x9287 = 0x03 (30 us) Enabled with a delay of (value - 1) * 15 µs; min value of 1
  BQ769x2_SetRegister(SCDDelay, 0x03, 1);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2103      	movs	r1, #3
 8000a08:	f249 2087 	movw	r0, #37511	@ 0x9287
 8000a0c:	f7ff feb2 	bl	8000774 <BQ769x2_SetRegister>

  // Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
  // If this is not set, then SCD will recover based on time (SCD Recovery Time parameter).
  BQ769x2_SetRegister(SCDLLatchLimit, 0x01, 1);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2101      	movs	r1, #1
 8000a14:	f249 2095 	movw	r0, #37525	@ 0x9295
 8000a18:	f7ff feac 	bl	8000774 <BQ769x2_SetRegister>

  // Exit CONFIGUPDATE mode  - Subcommand 0x0092
  CommandSubcommands(EXIT_CFGUPDATE);
 8000a1c:	2092      	movs	r0, #146	@ 0x92
 8000a1e:	f7ff ff49 	bl	80008b4 <CommandSubcommands>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <BQ769x2_ReadAlarmStatus>:
// ********************************* End of BQ769x2 Power Commands   *****************************************

// ********************************* BQ769x2 Status and Fault Commands   *****************************************

uint16_t BQ769x2_ReadAlarmStatus()
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  // Read this register to find out why the ALERT pin was asserted
  DirectCommands(AlarmStatus, 0x00, R);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2062      	movs	r0, #98	@ 0x62
 8000a32:	f7ff ff5d 	bl	80008f0 <DirectCommands>
  return (RX_data[1] * 256 + RX_data[0]);
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <BQ769x2_ReadAlarmStatus+0x24>)
 8000a38:	785b      	ldrb	r3, [r3, #1]
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4a03      	ldr	r2, [pc, #12]	@ (8000a4c <BQ769x2_ReadAlarmStatus+0x24>)
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b29b      	uxth	r3, r3
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200004e4 	.word	0x200004e4

08000a50 <BQ769x2_ReadVoltage>:

// ********************************* BQ769x2 Measurement Commands   *****************************************

uint16_t BQ769x2_ReadVoltage(uint8_t command)
// This function can be used to read a specific cell voltage or stack / pack / LD voltage
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
  // RX_data is global var
  DirectCommands(command, 0x00, R);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff45 	bl	80008f0 <DirectCommands>
  if (command >= Cell1Voltage && command <= Cell16Voltage)
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b13      	cmp	r3, #19
 8000a6a:	d90b      	bls.n	8000a84 <BQ769x2_ReadVoltage+0x34>
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b32      	cmp	r3, #50	@ 0x32
 8000a70:	d808      	bhi.n	8000a84 <BQ769x2_ReadVoltage+0x34>
  {                                         // Cells 1 through 16 (0x14 to 0x32)
    return (RX_data[1] * 256 + RX_data[0]); // voltage is reported in mV
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <BQ769x2_ReadVoltage+0x54>)
 8000a74:	785b      	ldrb	r3, [r3, #1]
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <BQ769x2_ReadVoltage+0x54>)
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	e00b      	b.n	8000a9c <BQ769x2_ReadVoltage+0x4c>
  }
  else
  {                                              // stack, Pack, LD
    return 10 * (RX_data[1] * 256 + RX_data[0]); // voltage is reported in 0.01V units
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <BQ769x2_ReadVoltage+0x54>)
 8000a86:	785b      	ldrb	r3, [r3, #1]
 8000a88:	021b      	lsls	r3, r3, #8
 8000a8a:	4a06      	ldr	r2, [pc, #24]	@ (8000aa4 <BQ769x2_ReadVoltage+0x54>)
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	b29b      	uxth	r3, r3
  }
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200004e4 	.word	0x200004e4

08000aa8 <BQ769x2_ReadAllVoltages>:
void BQ769x2_ReadAllVoltages()
// Reads all cell voltages, Stack voltage, PACK pin voltage, and LD pin voltage
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  int cellvoltageholder = Cell1Voltage; // Cell1Voltage is 0x14
 8000aae:	2314      	movs	r3, #20
 8000ab0:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	e010      	b.n	8000ada <BQ769x2_ReadAllVoltages+0x32>
  { // Reads all cell voltages
    CellVoltage[x] = BQ769x2_ReadVoltage(cellvoltageholder);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ffc7 	bl	8000a50 <BQ769x2_ReadVoltage>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4a13      	ldr	r2, [pc, #76]	@ (8000b14 <BQ769x2_ReadAllVoltages+0x6c>)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    cellvoltageholder = cellvoltageholder + 2;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	ddeb      	ble.n	8000ab8 <BQ769x2_ReadAllVoltages+0x10>
  }
  Stack_Voltage = BQ769x2_ReadVoltage(StackVoltage);
 8000ae0:	2034      	movs	r0, #52	@ 0x34
 8000ae2:	f7ff ffb5 	bl	8000a50 <BQ769x2_ReadVoltage>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <BQ769x2_ReadAllVoltages+0x70>)
 8000aec:	801a      	strh	r2, [r3, #0]
  Pack_Voltage = BQ769x2_ReadVoltage(PACKPinVoltage);
 8000aee:	2036      	movs	r0, #54	@ 0x36
 8000af0:	f7ff ffae 	bl	8000a50 <BQ769x2_ReadVoltage>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <BQ769x2_ReadAllVoltages+0x74>)
 8000afa:	801a      	strh	r2, [r3, #0]
  LD_Voltage = BQ769x2_ReadVoltage(LDPinVoltage);
 8000afc:	2038      	movs	r0, #56	@ 0x38
 8000afe:	f7ff ffa7 	bl	8000a50 <BQ769x2_ReadVoltage>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <BQ769x2_ReadAllVoltages+0x78>)
 8000b08:	801a      	strh	r2, [r3, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200004e8 	.word	0x200004e8
 8000b18:	20000508 	.word	0x20000508
 8000b1c:	2000050a 	.word	0x2000050a
 8000b20:	2000050c 	.word	0x2000050c

08000b24 <BQ769x2_ReadCurrent>:

uint16_t BQ769x2_ReadCurrent()
// Reads PACK current
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  DirectCommands(CC2Current, 0x00, R);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	203a      	movs	r0, #58	@ 0x3a
 8000b2e:	f7ff fedf 	bl	80008f0 <DirectCommands>
  return (RX_data[1] * 256 + RX_data[0]); // current is reported in mA
 8000b32:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <BQ769x2_ReadCurrent+0x24>)
 8000b34:	785b      	ldrb	r3, [r3, #1]
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	4a03      	ldr	r2, [pc, #12]	@ (8000b48 <BQ769x2_ReadCurrent+0x24>)
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	b29b      	uxth	r3, r3
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200004e4 	.word	0x200004e4

08000b4c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	b08c      	sub	sp, #48	@ 0x30
 8000b50:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8000b52:	4baf      	ldr	r3, [pc, #700]	@ (8000e10 <main+0x2c4>)
 8000b54:	1d3c      	adds	r4, r7, #4
 8000b56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f002 ff7a 	bl	8003a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f9b0 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f000 fb1e 	bl	80011a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b68:	f000 faf4 	bl	8001154 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000b6c:	f000 fa9e 	bl	80010ac <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000b70:	f000 fa42 	bl	8000ff8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b74:	f000 fac4 	bl	8001100 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b78:	f000 fa10 	bl	8000f9c <MX_I2C1_Init>
  MX_TIM10_Init();
 8000b7c:	f000 fa72 	bl	8001064 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // Enable cycle count for STM32

  DWT_CTRL |= (1 << 0);
 8000b80:	4ba4      	ldr	r3, [pc, #656]	@ (8000e14 <main+0x2c8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4aa3      	ldr	r2, [pc, #652]	@ (8000e14 <main+0x2c8>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000b8c:	f009 fb50 	bl	800a230 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000b90:	f00a fbbc 	bl	800b30c <SEGGER_SYSVIEW_Start>

  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000b94:	2102      	movs	r1, #2
 8000b96:	48a0      	ldr	r0, [pc, #640]	@ (8000e18 <main+0x2cc>)
 8000b98:	f003 fd3b 	bl	8004612 <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000b9c:	20c8      	movs	r0, #200	@ 0xc8
 8000b9e:	f002 ff9b 	bl	8003ad8 <HAL_Delay>
  // vTaskStartScheduler();
  /* Chip selection call back */

  // HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
  // HAL_Delay(200);
  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	489c      	ldr	r0, [pc, #624]	@ (8000e18 <main+0x2cc>)
 8000ba6:	f003 fd34 	bl	8004612 <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000baa:	20c8      	movs	r0, #200	@ 0xc8
 8000bac:	f002 ff94 	bl	8003ad8 <HAL_Delay>
  // vTaskDelay(pdMS_TO_TICKS(200));

  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	4899      	ldr	r0, [pc, #612]	@ (8000e1c <main+0x2d0>)
 8000bb6:	f003 fd13 	bl	80045e0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000bba:	2064      	movs	r0, #100	@ 0x64
 8000bbc:	f002 ff8c 	bl	8003ad8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	4895      	ldr	r0, [pc, #596]	@ (8000e1c <main+0x2d0>)
 8000bc6:	f003 fd0b 	bl	80045e0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000bca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bce:	f002 ff83 	bl	8003ad8 <HAL_Delay>

  /* SPI Read & Write callback function */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000bd2:	4993      	ldr	r1, [pc, #588]	@ (8000e20 <main+0x2d4>)
 8000bd4:	4893      	ldr	r0, [pc, #588]	@ (8000e24 <main+0x2d8>)
 8000bd6:	f002 f9fb 	bl	8002fd0 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8000bda:	4993      	ldr	r1, [pc, #588]	@ (8000e28 <main+0x2dc>)
 8000bdc:	4893      	ldr	r0, [pc, #588]	@ (8000e2c <main+0x2e0>)
 8000bde:	f002 fa1d 	bl	800301c <reg_wizchip_spi_cbfunc>

  ////////////////////////////////////////////////////////////////////////
  /* WIZCHIP SOCKET Buffer initialize */
  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	f002 fa44 	bl	8003074 <ctlwizchip>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000bf2:	d101      	bne.n	8000bf8 <main+0xac>
  {

    while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <main+0xa8>
      ;
  }

  /* Network initialization */
  network_init();
 8000bf8:	f000 fd0a 	bl	8001610 <network_init>
  wizchip_setnetinfo(&gWIZNETINFO);
 8000bfc:	488c      	ldr	r0, [pc, #560]	@ (8000e30 <main+0x2e4>)
 8000bfe:	f002 fe13 	bl	8003828 <wizchip_setnetinfo>
  PRINT_NETINFO(gWIZNETINFO);
 8000c02:	2364      	movs	r3, #100	@ 0x64
 8000c04:	2218      	movs	r2, #24
 8000c06:	498b      	ldr	r1, [pc, #556]	@ (8000e34 <main+0x2e8>)
 8000c08:	488b      	ldr	r0, [pc, #556]	@ (8000e38 <main+0x2ec>)
 8000c0a:	f006 fa17 	bl	800703c <HAL_UART_Transmit>
 8000c0e:	4b88      	ldr	r3, [pc, #544]	@ (8000e30 <main+0x2e4>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461c      	mov	r4, r3
 8000c14:	4b86      	ldr	r3, [pc, #536]	@ (8000e30 <main+0x2e4>)
 8000c16:	785b      	ldrb	r3, [r3, #1]
 8000c18:	461d      	mov	r5, r3
 8000c1a:	4b85      	ldr	r3, [pc, #532]	@ (8000e30 <main+0x2e4>)
 8000c1c:	789b      	ldrb	r3, [r3, #2]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b83      	ldr	r3, [pc, #524]	@ (8000e30 <main+0x2e4>)
 8000c22:	78db      	ldrb	r3, [r3, #3]
 8000c24:	4619      	mov	r1, r3
 8000c26:	4b82      	ldr	r3, [pc, #520]	@ (8000e30 <main+0x2e4>)
 8000c28:	791b      	ldrb	r3, [r3, #4]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	4b80      	ldr	r3, [pc, #512]	@ (8000e30 <main+0x2e4>)
 8000c2e:	795b      	ldrb	r3, [r3, #5]
 8000c30:	9303      	str	r3, [sp, #12]
 8000c32:	9002      	str	r0, [sp, #8]
 8000c34:	9101      	str	r1, [sp, #4]
 8000c36:	9200      	str	r2, [sp, #0]
 8000c38:	462b      	mov	r3, r5
 8000c3a:	4622      	mov	r2, r4
 8000c3c:	497f      	ldr	r1, [pc, #508]	@ (8000e3c <main+0x2f0>)
 8000c3e:	4880      	ldr	r0, [pc, #512]	@ (8000e40 <main+0x2f4>)
 8000c40:	f00b fa74 	bl	800c12c <siprintf>
 8000c44:	487e      	ldr	r0, [pc, #504]	@ (8000e40 <main+0x2f4>)
 8000c46:	f7ff fb37 	bl	80002b8 <strlen>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	2364      	movs	r3, #100	@ 0x64
 8000c50:	497b      	ldr	r1, [pc, #492]	@ (8000e40 <main+0x2f4>)
 8000c52:	4879      	ldr	r0, [pc, #484]	@ (8000e38 <main+0x2ec>)
 8000c54:	f006 f9f2 	bl	800703c <HAL_UART_Transmit>
 8000c58:	4b75      	ldr	r3, [pc, #468]	@ (8000e30 <main+0x2e4>)
 8000c5a:	799b      	ldrb	r3, [r3, #6]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4b74      	ldr	r3, [pc, #464]	@ (8000e30 <main+0x2e4>)
 8000c60:	79db      	ldrb	r3, [r3, #7]
 8000c62:	4618      	mov	r0, r3
 8000c64:	4b72      	ldr	r3, [pc, #456]	@ (8000e30 <main+0x2e4>)
 8000c66:	7a1b      	ldrb	r3, [r3, #8]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b71      	ldr	r3, [pc, #452]	@ (8000e30 <main+0x2e4>)
 8000c6c:	7a5b      	ldrb	r3, [r3, #9]
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	9200      	str	r2, [sp, #0]
 8000c72:	4603      	mov	r3, r0
 8000c74:	460a      	mov	r2, r1
 8000c76:	4973      	ldr	r1, [pc, #460]	@ (8000e44 <main+0x2f8>)
 8000c78:	4871      	ldr	r0, [pc, #452]	@ (8000e40 <main+0x2f4>)
 8000c7a:	f00b fa57 	bl	800c12c <siprintf>
 8000c7e:	4870      	ldr	r0, [pc, #448]	@ (8000e40 <main+0x2f4>)
 8000c80:	f7ff fb1a 	bl	80002b8 <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	2364      	movs	r3, #100	@ 0x64
 8000c8a:	496d      	ldr	r1, [pc, #436]	@ (8000e40 <main+0x2f4>)
 8000c8c:	486a      	ldr	r0, [pc, #424]	@ (8000e38 <main+0x2ec>)
 8000c8e:	f006 f9d5 	bl	800703c <HAL_UART_Transmit>
 8000c92:	4b67      	ldr	r3, [pc, #412]	@ (8000e30 <main+0x2e4>)
 8000c94:	7a9b      	ldrb	r3, [r3, #10]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4b65      	ldr	r3, [pc, #404]	@ (8000e30 <main+0x2e4>)
 8000c9a:	7adb      	ldrb	r3, [r3, #11]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	4b64      	ldr	r3, [pc, #400]	@ (8000e30 <main+0x2e4>)
 8000ca0:	7b1b      	ldrb	r3, [r3, #12]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b62      	ldr	r3, [pc, #392]	@ (8000e30 <main+0x2e4>)
 8000ca6:	7b5b      	ldrb	r3, [r3, #13]
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	9200      	str	r2, [sp, #0]
 8000cac:	4603      	mov	r3, r0
 8000cae:	460a      	mov	r2, r1
 8000cb0:	4965      	ldr	r1, [pc, #404]	@ (8000e48 <main+0x2fc>)
 8000cb2:	4863      	ldr	r0, [pc, #396]	@ (8000e40 <main+0x2f4>)
 8000cb4:	f00b fa3a 	bl	800c12c <siprintf>
 8000cb8:	4861      	ldr	r0, [pc, #388]	@ (8000e40 <main+0x2f4>)
 8000cba:	f7ff fafd 	bl	80002b8 <strlen>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	2364      	movs	r3, #100	@ 0x64
 8000cc4:	495e      	ldr	r1, [pc, #376]	@ (8000e40 <main+0x2f4>)
 8000cc6:	485c      	ldr	r0, [pc, #368]	@ (8000e38 <main+0x2ec>)
 8000cc8:	f006 f9b8 	bl	800703c <HAL_UART_Transmit>
 8000ccc:	4b58      	ldr	r3, [pc, #352]	@ (8000e30 <main+0x2e4>)
 8000cce:	7b9b      	ldrb	r3, [r3, #14]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4b57      	ldr	r3, [pc, #348]	@ (8000e30 <main+0x2e4>)
 8000cd4:	7bdb      	ldrb	r3, [r3, #15]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	4b55      	ldr	r3, [pc, #340]	@ (8000e30 <main+0x2e4>)
 8000cda:	7c1b      	ldrb	r3, [r3, #16]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b54      	ldr	r3, [pc, #336]	@ (8000e30 <main+0x2e4>)
 8000ce0:	7c5b      	ldrb	r3, [r3, #17]
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	9200      	str	r2, [sp, #0]
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	460a      	mov	r2, r1
 8000cea:	4958      	ldr	r1, [pc, #352]	@ (8000e4c <main+0x300>)
 8000cec:	4854      	ldr	r0, [pc, #336]	@ (8000e40 <main+0x2f4>)
 8000cee:	f00b fa1d 	bl	800c12c <siprintf>
 8000cf2:	4853      	ldr	r0, [pc, #332]	@ (8000e40 <main+0x2f4>)
 8000cf4:	f7ff fae0 	bl	80002b8 <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	2364      	movs	r3, #100	@ 0x64
 8000cfe:	4950      	ldr	r1, [pc, #320]	@ (8000e40 <main+0x2f4>)
 8000d00:	484d      	ldr	r0, [pc, #308]	@ (8000e38 <main+0x2ec>)
 8000d02:	f006 f99b 	bl	800703c <HAL_UART_Transmit>

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8000d06:	494a      	ldr	r1, [pc, #296]	@ (8000e30 <main+0x2e4>)
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f002 fa93 	bl	8003234 <ctlnetwork>
  // so that user can use any model w5500 board
  // else the PINs on the board configure it, which may
  // lead to different configurations in different boards.
  wiz_PhyConf phyconf;

  phyconf.by = PHY_CONFBY_SW;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	703b      	strb	r3, [r7, #0]
  phyconf.duplex = PHY_DUPLEX_FULL;
 8000d12:	2301      	movs	r3, #1
 8000d14:	70fb      	strb	r3, [r7, #3]
  phyconf.speed = PHY_SPEED_10;     // 10MBps Ethernet link speed
 8000d16:	2300      	movs	r3, #0
 8000d18:	70bb      	strb	r3, [r7, #2]
  phyconf.mode = PHY_MODE_AUTONEGO; // best to go with auto-negotiation
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	707b      	strb	r3, [r7, #1]

  ctlwizchip(CW_SET_PHYCONF, (void *)&phyconf); // PHY Configuration Command
 8000d1e:	463b      	mov	r3, r7
 8000d20:	4619      	mov	r1, r3
 8000d22:	200a      	movs	r0, #10
 8000d24:	f002 f9a6 	bl	8003074 <ctlwizchip>
  //*** End Phy Configuration

  PHYStatusCheck();
 8000d28:	f000 fc84 	bl	8001634 <PHYStatusCheck>
  PrintPHYConf();
 8000d2c:	f000 fcae 	bl	800168c <PrintPHYConf>
  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000d30:	2101      	movs	r1, #1
 8000d32:	4839      	ldr	r0, [pc, #228]	@ (8000e18 <main+0x2cc>)
 8000d34:	f003 fc6d 	bl	8004612 <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000d38:	20c8      	movs	r0, #200	@ 0xc8
 8000d3a:	f002 fecd 	bl	8003ad8 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000d3e:	2102      	movs	r1, #2
 8000d40:	4835      	ldr	r0, [pc, #212]	@ (8000e18 <main+0x2cc>)
 8000d42:	f003 fc66 	bl	8004612 <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000d46:	20c8      	movs	r0, #200	@ 0xc8
 8000d48:	f002 fec6 	bl	8003ad8 <HAL_Delay>

  HAL_TIM_Base_Start(&htim10);
 8000d4c:	4840      	ldr	r0, [pc, #256]	@ (8000e50 <main+0x304>)
 8000d4e:	f005 fe1d 	bl	800698c <HAL_TIM_Base_Start>
  delayUS(10000);
 8000d52:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000d56:	f7ff fc83 	bl	8000660 <delayUS>
  // CommandSubcommands(BQ769x2_RESET); // Resets the BQ769x2 registers
  // delayUS(60000);
  BQ769x2_Init(); // Configure all of the BQ769x2 register settings
 8000d5a:	f7ff fdfd 	bl	8000958 <BQ769x2_Init>
  delayUS(10000);
 8000d5e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000d62:	f7ff fc7d 	bl	8000660 <delayUS>
  CommandSubcommands(FET_ENABLE); // Enable the CHG and DSG FETs
 8000d66:	2022      	movs	r0, #34	@ 0x22
 8000d68:	f7ff fda4 	bl	80008b4 <CommandSubcommands>
  delayUS(10000);
 8000d6c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000d70:	f7ff fc76 	bl	8000660 <delayUS>
  CommandSubcommands(SLEEP_DISABLE); // Sleep mode is enabled by default. For this example, Sleep is disabled to
 8000d74:	209a      	movs	r0, #154	@ 0x9a
 8000d76:	f7ff fd9d 	bl	80008b4 <CommandSubcommands>
                                     // demonstrate full-speed measurements in Normal mode.

  delayUS(60000);
 8000d7a:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000d7e:	f7ff fc6f 	bl	8000660 <delayUS>
  delayUS(60000);
 8000d82:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000d86:	f7ff fc6b 	bl	8000660 <delayUS>
  delayUS(60000);
 8000d8a:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000d8e:	f7ff fc67 	bl	8000660 <delayUS>
  delayUS(60000);
 8000d92:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000d96:	f7ff fc63 	bl	8000660 <delayUS>

  status = xTaskCreate(modbus_comm_task, "Modbus_comm", 200, NULL, 3, &modbus_task_handle);
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <main+0x308>)
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	2303      	movs	r3, #3
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	22c8      	movs	r2, #200	@ 0xc8
 8000da6:	492c      	ldr	r1, [pc, #176]	@ (8000e58 <main+0x30c>)
 8000da8:	482c      	ldr	r0, [pc, #176]	@ (8000e5c <main+0x310>)
 8000daa:	f007 fb23 	bl	80083f4 <xTaskCreate>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e60 <main+0x314>)
 8000db2:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000db4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <main+0x314>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d00b      	beq.n	8000dd4 <main+0x288>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dc0:	f383 8811 	msr	BASEPRI, r3
 8000dc4:	f3bf 8f6f 	isb	sy
 8000dc8:	f3bf 8f4f 	dsb	sy
 8000dcc:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <main+0x284>

  status = xTaskCreate(task1_handler, "Led_blink", 200, NULL, 1, &task1_handle);
 8000dd4:	4b23      	ldr	r3, [pc, #140]	@ (8000e64 <main+0x318>)
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	22c8      	movs	r2, #200	@ 0xc8
 8000de0:	4921      	ldr	r1, [pc, #132]	@ (8000e68 <main+0x31c>)
 8000de2:	4822      	ldr	r0, [pc, #136]	@ (8000e6c <main+0x320>)
 8000de4:	f007 fb06 	bl	80083f4 <xTaskCreate>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a1d      	ldr	r2, [pc, #116]	@ (8000e60 <main+0x314>)
 8000dec:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000dee:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <main+0x314>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d03c      	beq.n	8000e70 <main+0x324>
        __asm volatile
 8000df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dfa:	f383 8811 	msr	BASEPRI, r3
 8000dfe:	f3bf 8f6f 	isb	sy
 8000e02:	f3bf 8f4f 	dsb	sy
 8000e06:	61bb      	str	r3, [r7, #24]
    }
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	e7fd      	b.n	8000e0a <main+0x2be>
 8000e0e:	bf00      	nop
 8000e10:	0800d290 	.word	0x0800d290
 8000e14:	e0001000 	.word	0xe0001000
 8000e18:	40020400 	.word	0x40020400
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	080015cd 	.word	0x080015cd
 8000e24:	080015b5 	.word	0x080015b5
 8000e28:	080015e5 	.word	0x080015e5
 8000e2c:	080015ff 	.word	0x080015ff
 8000e30:	20000000 	.word	0x20000000
 8000e34:	0800d1c8 	.word	0x0800d1c8
 8000e38:	2000038c 	.word	0x2000038c
 8000e3c:	0800d1e4 	.word	0x0800d1e4
 8000e40:	20000154 	.word	0x20000154
 8000e44:	0800d208 	.word	0x0800d208
 8000e48:	0800d228 	.word	0x0800d228
 8000e4c:	0800d248 	.word	0x0800d248
 8000e50:	200002fc 	.word	0x200002fc
 8000e54:	200004d4 	.word	0x200004d4
 8000e58:	0800d268 	.word	0x0800d268
 8000e5c:	080012bd 	.word	0x080012bd
 8000e60:	200004e0 	.word	0x200004e0
 8000e64:	200004d8 	.word	0x200004d8
 8000e68:	0800d274 	.word	0x0800d274
 8000e6c:	08001499 	.word	0x08001499

  status = xTaskCreate(readVoltage_task, "read_voltage", 200, NULL, 2, &readVoltage_handle);
 8000e70:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <main+0x368>)
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	2302      	movs	r3, #2
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	22c8      	movs	r2, #200	@ 0xc8
 8000e7c:	490e      	ldr	r1, [pc, #56]	@ (8000eb8 <main+0x36c>)
 8000e7e:	480f      	ldr	r0, [pc, #60]	@ (8000ebc <main+0x370>)
 8000e80:	f007 fab8 	bl	80083f4 <xTaskCreate>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec0 <main+0x374>)
 8000e88:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <main+0x374>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d00b      	beq.n	8000eaa <main+0x35e>
        __asm volatile
 8000e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e96:	f383 8811 	msr	BASEPRI, r3
 8000e9a:	f3bf 8f6f 	isb	sy
 8000e9e:	f3bf 8f4f 	dsb	sy
 8000ea2:	617b      	str	r3, [r7, #20]
    }
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	e7fd      	b.n	8000ea6 <main+0x35a>

  vTaskStartScheduler();
 8000eaa:	f007 fc41 	bl	8008730 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eae:	bf00      	nop
 8000eb0:	e7fd      	b.n	8000eae <main+0x362>
 8000eb2:	bf00      	nop
 8000eb4:	200004dc 	.word	0x200004dc
 8000eb8:	0800d280 	.word	0x0800d280
 8000ebc:	080014cd 	.word	0x080014cd
 8000ec0:	200004e0 	.word	0x200004e0

08000ec4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	@ 0x50
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	2234      	movs	r2, #52	@ 0x34
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f00b fa32 	bl	800c33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	4b29      	ldr	r3, [pc, #164]	@ (8000f94 <SystemClock_Config+0xd0>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	4a28      	ldr	r2, [pc, #160]	@ (8000f94 <SystemClock_Config+0xd0>)
 8000ef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef8:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <SystemClock_Config+0xd0>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <SystemClock_Config+0xd4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a22      	ldr	r2, [pc, #136]	@ (8000f98 <SystemClock_Config+0xd4>)
 8000f0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <SystemClock_Config+0xd4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f34:	2308      	movs	r3, #8
 8000f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f38:	23a8      	movs	r3, #168	@ 0xa8
 8000f3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 ff19 	bl	8005d84 <HAL_RCC_OscConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f58:	f000 fbee 	bl	8001738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	2302      	movs	r3, #2
 8000f62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f68:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	2105      	movs	r1, #5
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f004 fb88 	bl	8005690 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f86:	f000 fbd7 	bl	8001738 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	@ 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fa2:	4a13      	ldr	r2, [pc, #76]	@ (8000ff0 <MX_I2C1_Init+0x54>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fa8:	4a12      	ldr	r2, [pc, #72]	@ (8000ff4 <MX_I2C1_Init+0x58>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <MX_I2C1_Init+0x50>)
 8000fda:	f003 fb35 	bl	8004648 <HAL_I2C_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe4:	f000 fba8 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000190 	.word	0x20000190
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	000186a0 	.word	0x000186a0

08000ff8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	@ (800105c <MX_SPI1_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	@ (8001060 <MX_SPI1_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <MX_SPI1_Init+0x64>)
 8001004:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800100a:	4b14      	ldr	r3, [pc, #80]	@ (800105c <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <MX_SPI1_Init+0x64>)
 8001024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001028:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <MX_SPI1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_SPI1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <MX_SPI1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_SPI1_Init+0x64>)
 8001044:	220a      	movs	r2, #10
 8001046:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	@ (800105c <MX_SPI1_Init+0x64>)
 800104a:	f005 f939 	bl	80062c0 <HAL_SPI_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 fb70 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200002a4 	.word	0x200002a4
 8001060:	40013000 	.word	0x40013000

08001064 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_TIM10_Init+0x40>)
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <MX_TIM10_Init+0x44>)
 800106c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800106e:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <MX_TIM10_Init+0x40>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_TIM10_Init+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <MX_TIM10_Init+0x40>)
 800107c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001080:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_TIM10_Init+0x40>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_TIM10_Init+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_TIM10_Init+0x40>)
 8001090:	f005 fc2c 	bl	80068ec <HAL_TIM_Base_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800109a:	f000 fb4d 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200002fc 	.word	0x200002fc
 80010a8:	40014400 	.word	0x40014400

080010ac <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <MX_USART1_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010e4:	f005 ff02 	bl	8006eec <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ee:	f000 fb23 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000344 	.word	0x20000344
 80010fc:	40011000 	.word	0x40011000

08001100 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001106:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <MX_USART2_UART_Init+0x50>)
 8001108:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001138:	f005 ff28 	bl	8006f8c <HAL_HalfDuplex_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001142:	f000 faf9 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000038c 	.word	0x2000038c
 8001150:	40004400 	.word	0x40004400

08001154 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <MX_DMA_Init+0x4c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <MX_DMA_Init+0x4c>)
 8001164:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <MX_DMA_Init+0x4c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	200b      	movs	r0, #11
 800117c:	f002 fd88 	bl	8003c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001180:	200b      	movs	r0, #11
 8001182:	f002 fda1 	bl	8003cc8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	2011      	movs	r0, #17
 800118c:	f002 fd80 	bl	8003c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001190:	2011      	movs	r0, #17
 8001192:	f002 fd99 	bl	8003cc8 <HAL_NVIC_EnableIRQ>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b3b      	ldr	r3, [pc, #236]	@ (80012ac <MX_GPIO_Init+0x108>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a3a      	ldr	r2, [pc, #232]	@ (80012ac <MX_GPIO_Init+0x108>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b38      	ldr	r3, [pc, #224]	@ (80012ac <MX_GPIO_Init+0x108>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <MX_GPIO_Init+0x108>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a33      	ldr	r2, [pc, #204]	@ (80012ac <MX_GPIO_Init+0x108>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <MX_GPIO_Init+0x108>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b2d      	ldr	r3, [pc, #180]	@ (80012ac <MX_GPIO_Init+0x108>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a2c      	ldr	r2, [pc, #176]	@ (80012ac <MX_GPIO_Init+0x108>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b2a      	ldr	r3, [pc, #168]	@ (80012ac <MX_GPIO_Init+0x108>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <MX_GPIO_Init+0x108>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a25      	ldr	r2, [pc, #148]	@ (80012ac <MX_GPIO_Init+0x108>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <MX_GPIO_Init+0x108>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_W5500_RESET_Pin | GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2118      	movs	r1, #24
 800122e:	4820      	ldr	r0, [pc, #128]	@ (80012b0 <MX_GPIO_Init+0x10c>)
 8001230:	f003 f9d6 	bl	80045e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | SPI_INT_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f248 0103 	movw	r1, #32771	@ 0x8003
 800123a:	481e      	ldr	r0, [pc, #120]	@ (80012b4 <MX_GPIO_Init+0x110>)
 800123c:	f003 f9d0 	bl	80045e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001246:	481c      	ldr	r0, [pc, #112]	@ (80012b8 <MX_GPIO_Init+0x114>)
 8001248:	f003 f9ca 	bl	80045e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_W5500_RESET_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_W5500_RESET_Pin | GPIO_W5500_CS_Pin;
 800124c:	2318      	movs	r3, #24
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4813      	ldr	r0, [pc, #76]	@ (80012b0 <MX_GPIO_Init+0x10c>)
 8001264:	f003 f828 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin SPI_INT_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | SPI_INT_Pin;
 8001268:	f248 0303 	movw	r3, #32771	@ 0x8003
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <MX_GPIO_Init+0x110>)
 8001282:	f003 f819 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001286:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <MX_GPIO_Init+0x114>)
 80012a0:	f003 f80a 	bl	80042b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	@ 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020800 	.word	0x40020800

080012bc <modbus_comm_task>:

/* USER CODE BEGIN 4 */

static void modbus_comm_task(void *parameters)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  PRINT_STR("MODBUS WHILE LOOP\r\n");
 80012c4:	2364      	movs	r3, #100	@ 0x64
 80012c6:	2213      	movs	r2, #19
 80012c8:	495c      	ldr	r1, [pc, #368]	@ (800143c <modbus_comm_task+0x180>)
 80012ca:	485d      	ldr	r0, [pc, #372]	@ (8001440 <modbus_comm_task+0x184>)
 80012cc:	f005 feb6 	bl	800703c <HAL_UART_Transmit>

  while (1)
  {
    HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80012d0:	2101      	movs	r1, #1
 80012d2:	485c      	ldr	r0, [pc, #368]	@ (8001444 <modbus_comm_task+0x188>)
 80012d4:	f003 f99d 	bl	8004612 <HAL_GPIO_TogglePin>
    printf("\r\nInitializing server socket\r\n");
 80012d8:	485b      	ldr	r0, [pc, #364]	@ (8001448 <modbus_comm_task+0x18c>)
 80012da:	f00a ff1f 	bl	800c11c <puts>
    vTaskDelay(pdMS_TO_TICKS(100));
 80012de:	2064      	movs	r0, #100	@ 0x64
 80012e0:	f007 f9ec 	bl	80086bc <vTaskDelay>
    // Parameters in order socket_id, protocol TCP or UDP, Port number, Flags=0
    // Return value is socket ID on success
    if (socket(1, Sn_MR_TCP, LISTEN_PORT, 0) != 1)
 80012e4:	2300      	movs	r3, #0
 80012e6:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 80012ea:	2101      	movs	r1, #1
 80012ec:	2001      	movs	r0, #1
 80012ee:	f001 f94d 	bl	800258c <socket>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d006      	beq.n	8001306 <modbus_comm_task+0x4a>
    {
      // error
      printf("Cannot create Socket!\r\n");
 80012f8:	4854      	ldr	r0, [pc, #336]	@ (800144c <modbus_comm_task+0x190>)
 80012fa:	f00a ff0f 	bl	800c11c <puts>
      vTaskDelay(pdMS_TO_TICKS(200)); // Delay before retrying
 80012fe:	20c8      	movs	r0, #200	@ 0xc8
 8001300:	f007 f9dc 	bl	80086bc <vTaskDelay>
      continue;                       // Retry initialization
 8001304:	e099      	b.n	800143a <modbus_comm_task+0x17e>
    }

    // success
    printf("Socket Created Successfully ! \r\n");
 8001306:	4852      	ldr	r0, [pc, #328]	@ (8001450 <modbus_comm_task+0x194>)
 8001308:	f00a ff08 	bl	800c11c <puts>

    uint8_t socket_io_mode = SOCK_IO_BLOCK;
 800130c:	2300      	movs	r3, #0
 800130e:	72fb      	strb	r3, [r7, #11]
    ctlsocket(1, CS_SET_IOMODE, &socket_io_mode); // set blocking IO mode
 8001310:	f107 030b 	add.w	r3, r7, #11
 8001314:	461a      	mov	r2, r3
 8001316:	2100      	movs	r1, #0
 8001318:	2001      	movs	r0, #1
 800131a:	f001 fd35 	bl	8002d88 <ctlsocket>

    printf("Start listening on port %d ! \r\n", LISTEN_PORT);
 800131e:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8001322:	484c      	ldr	r0, [pc, #304]	@ (8001454 <modbus_comm_task+0x198>)
 8001324:	f00a fe92 	bl	800c04c <iprintf>
    printf("Waiting for a client connection. \r\n");
 8001328:	484b      	ldr	r0, [pc, #300]	@ (8001458 <modbus_comm_task+0x19c>)
 800132a:	f00a fef7 	bl	800c11c <puts>

    // Make it a passive socket (i.e. listen for connection)
    if (listen(1) != SOCK_OK) // our socket id is 1 (w5500 have 8 sockets from 0-7)
 800132e:	2001      	movs	r0, #1
 8001330:	f001 faae 	bl	8002890 <listen>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d009      	beq.n	800134e <modbus_comm_task+0x92>
    {
      // error
      printf("Cannot listen on port %d", LISTEN_PORT);
 800133a:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 800133e:	4847      	ldr	r0, [pc, #284]	@ (800145c <modbus_comm_task+0x1a0>)
 8001340:	f00a fe84 	bl	800c04c <iprintf>
      vTaskDelay(pdMS_TO_TICKS(1000)); // Delay before retrying
 8001344:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001348:	f007 f9b8 	bl	80086bc <vTaskDelay>
      continue;                        // Retry initialization
 800134c:	e075      	b.n	800143a <modbus_comm_task+0x17e>
    }

    uint8_t sr = 0x00;                                               // socket status register
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
    TickType_t xTimeOut = xTaskGetTickCount() + pdMS_TO_TICKS(5000); // 5-second timeout
 8001352:	f007 faff 	bl	8008954 <xTaskGetTickCount>
 8001356:	4603      	mov	r3, r0
 8001358:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800135c:	3308      	adds	r3, #8
 800135e:	613b      	str	r3, [r7, #16]

    // Wait for a client connection with timeout
    do
    {
      sr = getSn_SR(1);               // read status reg (SR of socket 1)
 8001360:	f44f 704a 	mov.w	r0, #808	@ 0x328
 8001364:	f000 fe72 	bl	800204c <WIZCHIP_READ>
 8001368:	4603      	mov	r3, r0
 800136a:	75fb      	strb	r3, [r7, #23]
      vTaskDelay(pdMS_TO_TICKS(100)); // Allow other tasks to run
 800136c:	2064      	movs	r0, #100	@ 0x64
 800136e:	f007 f9a5 	bl	80086bc <vTaskDelay>
    } while (sr != 0x17 && sr != 0x00 && xTaskGetTickCount() < xTimeOut);
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	2b17      	cmp	r3, #23
 8001376:	d008      	beq.n	800138a <modbus_comm_task+0xce>
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <modbus_comm_task+0xce>
 800137e:	f007 fae9 	bl	8008954 <xTaskGetTickCount>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4293      	cmp	r3, r2
 8001388:	d8ea      	bhi.n	8001360 <modbus_comm_task+0xa4>

    if (sr == 0x00)
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <modbus_comm_task+0xe4>
    {
      printf("Some error occurred on server socket. Retrying...\r\n");
 8001390:	4833      	ldr	r0, [pc, #204]	@ (8001460 <modbus_comm_task+0x1a4>)
 8001392:	f00a fec3 	bl	800c11c <puts>
      vTaskDelay(pdMS_TO_TICKS(1000)); // Delay before retrying
 8001396:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800139a:	f007 f98f 	bl	80086bc <vTaskDelay>
      continue;                        // Retry initialization
 800139e:	e04c      	b.n	800143a <modbus_comm_task+0x17e>
    }

    if (sr == 0x17)
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	2b17      	cmp	r3, #23
 80013a4:	d194      	bne.n	80012d0 <modbus_comm_task+0x14>
    {
      // we come here only when a client has connected.
      // Now we can read data from the socket
      printf("A client connected!\r\n");
 80013a6:	482f      	ldr	r0, [pc, #188]	@ (8001464 <modbus_comm_task+0x1a8>)
 80013a8:	f00a feb8 	bl	800c11c <puts>
      printf("Waiting for Client Data ...!\r\n");
 80013ac:	482e      	ldr	r0, [pc, #184]	@ (8001468 <modbus_comm_task+0x1ac>)
 80013ae:	f00a feb5 	bl	800c11c <puts>

      while (1)
      {
        int len = recv(1, RX_buffer, RX_buffer_length);
 80013b2:	2280      	movs	r2, #128	@ 0x80
 80013b4:	492d      	ldr	r1, [pc, #180]	@ (800146c <modbus_comm_task+0x1b0>)
 80013b6:	2001      	movs	r0, #1
 80013b8:	f001 fc32 	bl	8002c20 <recv>
 80013bc:	60f8      	str	r0, [r7, #12]
        if (len == SOCKERR_SOCKSTATUS)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f113 0f07 	cmn.w	r3, #7
 80013c4:	d106      	bne.n	80013d4 <modbus_comm_task+0x118>
        {
          // client has disconnected
          printf("Client has disconnected\r\n");
 80013c6:	482a      	ldr	r0, [pc, #168]	@ (8001470 <modbus_comm_task+0x1b4>)
 80013c8:	f00a fea8 	bl	800c11c <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 80013cc:	4829      	ldr	r0, [pc, #164]	@ (8001474 <modbus_comm_task+0x1b8>)
 80013ce:	f00a fea5 	bl	800c11c <puts>
          break; // Exit client communication loop
 80013d2:	e032      	b.n	800143a <modbus_comm_task+0x17e>
        }

        RX_buffer[len] = '\0';
 80013d4:	4a25      	ldr	r2, [pc, #148]	@ (800146c <modbus_comm_task+0x1b0>)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
        printf("Received %d bytes from client\r\n", len);
 80013de:	68f9      	ldr	r1, [r7, #12]
 80013e0:	4825      	ldr	r0, [pc, #148]	@ (8001478 <modbus_comm_task+0x1bc>)
 80013e2:	f00a fe33 	bl	800c04c <iprintf>
        printf("Data Received: %s", RX_buffer);
 80013e6:	4921      	ldr	r1, [pc, #132]	@ (800146c <modbus_comm_task+0x1b0>)
 80013e8:	4824      	ldr	r0, [pc, #144]	@ (800147c <modbus_comm_task+0x1c0>)
 80013ea:	f00a fe2f 	bl	800c04c <iprintf>

        memset(TX_buffer, 0, sizeof(TX_buffer));
 80013ee:	2280      	movs	r2, #128	@ 0x80
 80013f0:	2100      	movs	r1, #0
 80013f2:	4823      	ldr	r0, [pc, #140]	@ (8001480 <modbus_comm_task+0x1c4>)
 80013f4:	f00a ffa2 	bl	800c33c <memset>
        modbus_receive(RX_buffer, TX_buffer, len, holding_register);
 80013f8:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <modbus_comm_task+0x1c8>)
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4920      	ldr	r1, [pc, #128]	@ (8001480 <modbus_comm_task+0x1c4>)
 80013fe:	481b      	ldr	r0, [pc, #108]	@ (800146c <modbus_comm_task+0x1b0>)
 8001400:	f000 f9d2 	bl	80017a8 <modbus_receive>
        // holding_register[3] = holding_register[3] + 1;

        printf("\r\nECHO sent back to client\r\n");
 8001404:	4820      	ldr	r0, [pc, #128]	@ (8001488 <modbus_comm_task+0x1cc>)
 8001406:	f00a fe89 	bl	800c11c <puts>

        // Look for quit message and quit if received
        if (strcmp((char *)RX_buffer, "QUIT") == 0)
 800140a:	4920      	ldr	r1, [pc, #128]	@ (800148c <modbus_comm_task+0x1d0>)
 800140c:	4817      	ldr	r0, [pc, #92]	@ (800146c <modbus_comm_task+0x1b0>)
 800140e:	f7fe ff49 	bl	80002a4 <strcmp>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <modbus_comm_task+0x176>
        {
          printf("Received QUIT command from client\r\n");
 8001418:	481d      	ldr	r0, [pc, #116]	@ (8001490 <modbus_comm_task+0x1d4>)
 800141a:	f00a fe7f 	bl	800c11c <puts>
          printf("Disconnecting ... \r\n");
 800141e:	481d      	ldr	r0, [pc, #116]	@ (8001494 <modbus_comm_task+0x1d8>)
 8001420:	f00a fe7c 	bl	800c11c <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 8001424:	4813      	ldr	r0, [pc, #76]	@ (8001474 <modbus_comm_task+0x1b8>)
 8001426:	f00a fe79 	bl	800c11c <puts>
          disconnect(1); // disconnect from the client
 800142a:	2001      	movs	r0, #1
 800142c:	f001 fa8a 	bl	8002944 <disconnect>
          break;         // Exit client communication loop
 8001430:	e003      	b.n	800143a <modbus_comm_task+0x17e>
        }

        vTaskDelay(pdMS_TO_TICKS(100)); // Allow other tasks to run
 8001432:	2064      	movs	r0, #100	@ 0x64
 8001434:	f007 f942 	bl	80086bc <vTaskDelay>
      {
 8001438:	e7bb      	b.n	80013b2 <modbus_comm_task+0xf6>
  {
 800143a:	e749      	b.n	80012d0 <modbus_comm_task+0x14>
 800143c:	0800d2a0 	.word	0x0800d2a0
 8001440:	2000038c 	.word	0x2000038c
 8001444:	40020400 	.word	0x40020400
 8001448:	0800d2b4 	.word	0x0800d2b4
 800144c:	0800d2d4 	.word	0x0800d2d4
 8001450:	0800d2ec 	.word	0x0800d2ec
 8001454:	0800d30c 	.word	0x0800d30c
 8001458:	0800d32c 	.word	0x0800d32c
 800145c:	0800d350 	.word	0x0800d350
 8001460:	0800d36c 	.word	0x0800d36c
 8001464:	0800d3a0 	.word	0x0800d3a0
 8001468:	0800d3b8 	.word	0x0800d3b8
 800146c:	20000454 	.word	0x20000454
 8001470:	0800d3d8 	.word	0x0800d3d8
 8001474:	0800d3f4 	.word	0x0800d3f4
 8001478:	0800d40c 	.word	0x0800d40c
 800147c:	0800d42c 	.word	0x0800d42c
 8001480:	200003d4 	.word	0x200003d4
 8001484:	20000018 	.word	0x20000018
 8001488:	0800d440 	.word	0x0800d440
 800148c:	0800d45c 	.word	0x0800d45c
 8001490:	0800d464 	.word	0x0800d464
 8001494:	0800d488 	.word	0x0800d488

08001498 <task1_handler>:
    } // if block, client connect success
  } // outer while loop
}

static void task1_handler(void *parameters)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  while (1)
  {
    PRINT_STR("TASK2 WHILE LOOP\r\n");
 80014a0:	2364      	movs	r3, #100	@ 0x64
 80014a2:	2212      	movs	r2, #18
 80014a4:	4906      	ldr	r1, [pc, #24]	@ (80014c0 <task1_handler+0x28>)
 80014a6:	4807      	ldr	r0, [pc, #28]	@ (80014c4 <task1_handler+0x2c>)
 80014a8:	f005 fdc8 	bl	800703c <HAL_UART_Transmit>

    HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80014ac:	2102      	movs	r1, #2
 80014ae:	4806      	ldr	r0, [pc, #24]	@ (80014c8 <task1_handler+0x30>)
 80014b0:	f003 f8af 	bl	8004612 <HAL_GPIO_TogglePin>
    vTaskDelay(pdMS_TO_TICKS(100));
 80014b4:	2064      	movs	r0, #100	@ 0x64
 80014b6:	f007 f901 	bl	80086bc <vTaskDelay>
    PRINT_STR("TASK2 WHILE LOOP\r\n");
 80014ba:	bf00      	nop
 80014bc:	e7f0      	b.n	80014a0 <task1_handler+0x8>
 80014be:	bf00      	nop
 80014c0:	0800d49c 	.word	0x0800d49c
 80014c4:	2000038c 	.word	0x2000038c
 80014c8:	40020400 	.word	0x40020400

080014cc <readVoltage_task>:
    // taskYIELD();
  }
}

static void readVoltage_task(void *parameters)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  while (1)
  {

    BQ769x2_ReadAllVoltages();
 80014d4:	f7ff fae8 	bl	8000aa8 <BQ769x2_ReadAllVoltages>
    uint16_t stackVoltage = BQ769x2_ReadVoltage(StackVoltage);
 80014d8:	2034      	movs	r0, #52	@ 0x34
 80014da:	f7ff fab9 	bl	8000a50 <BQ769x2_ReadVoltage>
 80014de:	4603      	mov	r3, r0
 80014e0:	81fb      	strh	r3, [r7, #14]
    holding_register[0] = CellVoltage[0];
 80014e2:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <readVoltage_task+0xac>)
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	4b25      	ldr	r3, [pc, #148]	@ (800157c <readVoltage_task+0xb0>)
 80014e8:	801a      	strh	r2, [r3, #0]
    holding_register[1] = CellVoltage[1];
 80014ea:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <readVoltage_task+0xac>)
 80014ec:	885a      	ldrh	r2, [r3, #2]
 80014ee:	4b23      	ldr	r3, [pc, #140]	@ (800157c <readVoltage_task+0xb0>)
 80014f0:	805a      	strh	r2, [r3, #2]
    holding_register[2] = CellVoltage[2];
 80014f2:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <readVoltage_task+0xac>)
 80014f4:	889a      	ldrh	r2, [r3, #4]
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <readVoltage_task+0xb0>)
 80014f8:	809a      	strh	r2, [r3, #4]
    holding_register[3] = CellVoltage[3];
 80014fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <readVoltage_task+0xac>)
 80014fc:	88da      	ldrh	r2, [r3, #6]
 80014fe:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <readVoltage_task+0xb0>)
 8001500:	80da      	strh	r2, [r3, #6]
    holding_register[4] = CellVoltage[4];
 8001502:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <readVoltage_task+0xac>)
 8001504:	891a      	ldrh	r2, [r3, #8]
 8001506:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <readVoltage_task+0xb0>)
 8001508:	811a      	strh	r2, [r3, #8]
    holding_register[5] = CellVoltage[15];
 800150a:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <readVoltage_task+0xac>)
 800150c:	8bda      	ldrh	r2, [r3, #30]
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <readVoltage_task+0xb0>)
 8001510:	815a      	strh	r2, [r3, #10]
    holding_register[6] = stackVoltage;
 8001512:	4a1a      	ldr	r2, [pc, #104]	@ (800157c <readVoltage_task+0xb0>)
 8001514:	89fb      	ldrh	r3, [r7, #14]
 8001516:	8193      	strh	r3, [r2, #12]
    holding_register[7] = BQ769x2_ReadCurrent();
 8001518:	f7ff fb04 	bl	8000b24 <BQ769x2_ReadCurrent>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <readVoltage_task+0xb0>)
 8001522:	81da      	strh	r2, [r3, #14]
    holding_register[8] = BQ769x2_ReadVoltage(PACKPinVoltage);
 8001524:	2036      	movs	r0, #54	@ 0x36
 8001526:	f7ff fa93 	bl	8000a50 <BQ769x2_ReadVoltage>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <readVoltage_task+0xb0>)
 8001530:	821a      	strh	r2, [r3, #16]

    // HAL_Delay(5000);
    uint16_t alarm;
    alarm = BQ769x2_ReadAlarmStatus();
 8001532:	f7ff fa79 	bl	8000a28 <BQ769x2_ReadAlarmStatus>
 8001536:	4603      	mov	r3, r0
 8001538:	81bb      	strh	r3, [r7, #12]
    AlarmBits = BQ769x2_ReadAlarmStatus();
 800153a:	f7ff fa75 	bl	8000a28 <BQ769x2_ReadAlarmStatus>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <readVoltage_task+0xb4>)
 8001544:	801a      	strh	r2, [r3, #0]
    if (AlarmBits & 0x80)
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <readVoltage_task+0xb4>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <readVoltage_task+0xa0>
    { // Check if FULLSCAN is complete. If set, new measurements are available
      BQ769x2_ReadAllVoltages();
 8001552:	f7ff faa9 	bl	8000aa8 <BQ769x2_ReadAllVoltages>
      Pack_Current = BQ769x2_ReadCurrent();
 8001556:	f7ff fae5 	bl	8000b24 <BQ769x2_ReadCurrent>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <readVoltage_task+0xb8>)
 8001560:	801a      	strh	r2, [r3, #0]
      // Temperature[0] = BQ769x2_ReadTemperature(TS1Temperature);
      // Temperature[1] = BQ769x2_ReadTemperature(TS3Temperature);
      DirectCommands(AlarmStatus, 0x0080, W); // Clear the FULLSCAN bit
 8001562:	2201      	movs	r2, #1
 8001564:	2180      	movs	r1, #128	@ 0x80
 8001566:	2062      	movs	r0, #98	@ 0x62
 8001568:	f7ff f9c2 	bl	80008f0 <DirectCommands>
    }
    else
    {
    }

    vTaskDelay(pdMS_TO_TICKS(500));
 800156c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001570:	f007 f8a4 	bl	80086bc <vTaskDelay>
  {
 8001574:	e7ae      	b.n	80014d4 <readVoltage_task+0x8>
 8001576:	bf00      	nop
 8001578:	200004e8 	.word	0x200004e8
 800157c:	20000018 	.word	0x20000018
 8001580:	20000510 	.word	0x20000510
 8001584:	2000050e 	.word	0x2000050e

08001588 <W5500_rxtx>:
{
  DelayIncCnt();
}

uint8_t W5500_rxtx(uint8_t data)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af02      	add	r7, sp, #8
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  uint8_t rxdata;

  HAL_SPI_TransmitReceive(&hspi1, &data, &rxdata, 1, 50);
 8001592:	f107 020f 	add.w	r2, r7, #15
 8001596:	1df9      	adds	r1, r7, #7
 8001598:	2332      	movs	r3, #50	@ 0x32
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2301      	movs	r3, #1
 800159e:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <W5500_rxtx+0x28>)
 80015a0:	f004 ff17 	bl	80063d2 <HAL_SPI_TransmitReceive>

  return (rxdata);
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002a4 	.word	0x200002a4

080015b4 <wizchip_select>:

void wizchip_select(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  W5500_select();
 80015b8:	2200      	movs	r2, #0
 80015ba:	2110      	movs	r1, #16
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <wizchip_select+0x14>)
 80015be:	f003 f80f 	bl	80045e0 <HAL_GPIO_WritePin>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40020000 	.word	0x40020000

080015cc <wizchip_deselect>:

void wizchip_deselect(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  W5500_release();
 80015d0:	2201      	movs	r2, #1
 80015d2:	2110      	movs	r1, #16
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <wizchip_deselect+0x14>)
 80015d6:	f003 f803 	bl	80045e0 <HAL_GPIO_WritePin>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40020000 	.word	0x40020000

080015e4 <wizchip_write>:

void wizchip_write(uint8_t wb)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  W5500_tx(wb);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ffc9 	bl	8001588 <W5500_rxtx>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <wizchip_read>:

uint8_t wizchip_read()
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
  return W5500_rx();
 8001602:	20ff      	movs	r0, #255	@ 0xff
 8001604:	f7ff ffc0 	bl	8001588 <W5500_rxtx>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  uint8_t tmpstr[6];

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8001616:	4906      	ldr	r1, [pc, #24]	@ (8001630 <network_init+0x20>)
 8001618:	2000      	movs	r0, #0
 800161a:	f001 fe0b 	bl	8003234 <ctlnetwork>

  ctlwizchip(CW_GET_ID, (void *)tmpstr);
 800161e:	463b      	mov	r3, r7
 8001620:	4619      	mov	r1, r3
 8001622:	2008      	movs	r0, #8
 8001624:	f001 fd26 	bl	8003074 <ctlwizchip>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000000 	.word	0x20000000

08001634 <PHYStatusCheck>:
  UWriteData(ch);
  return ch;
}

void PHYStatusCheck(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  uint8_t tmp;

  do
  {
    printf("\r\nChecking Ethernet Cable Presence ...");
 800163a:	4810      	ldr	r0, [pc, #64]	@ (800167c <PHYStatusCheck+0x48>)
 800163c:	f00a fd06 	bl	800c04c <iprintf>
    ctlwizchip(CW_GET_PHYLINK, (void *)&tmp);
 8001640:	1dfb      	adds	r3, r7, #7
 8001642:	4619      	mov	r1, r3
 8001644:	200f      	movs	r0, #15
 8001646:	f001 fd15 	bl	8003074 <ctlwizchip>

    if (tmp == PHY_LINK_OFF)
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10b      	bne.n	8001668 <PHYStatusCheck+0x34>
    {
      printf("NO Cable Connected!");
 8001650:	480b      	ldr	r0, [pc, #44]	@ (8001680 <PHYStatusCheck+0x4c>)
 8001652:	f00a fcfb 	bl	800c04c <iprintf>

      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	2102      	movs	r1, #2
 800165a:	480a      	ldr	r0, [pc, #40]	@ (8001684 <PHYStatusCheck+0x50>)
 800165c:	f002 ffc0 	bl	80045e0 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8001660:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001664:	f002 fa38 	bl	8003ad8 <HAL_Delay>
      // HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
      // HAL_Delay(200);
    }
  } while (tmp == PHY_LINK_OFF);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0e5      	beq.n	800163a <PHYStatusCheck+0x6>

  printf("Good! Cable got connected!");
 800166e:	4806      	ldr	r0, [pc, #24]	@ (8001688 <PHYStatusCheck+0x54>)
 8001670:	f00a fcec 	bl	800c04c <iprintf>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	0800d4b0 	.word	0x0800d4b0
 8001680:	0800d4d8 	.word	0x0800d4d8
 8001684:	40020400 	.word	0x40020400
 8001688:	0800d4ec 	.word	0x0800d4ec

0800168c <PrintPHYConf>:

void PrintPHYConf(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  wiz_PhyConf phyconf;

  ctlwizchip(CW_GET_PHYCONF, (void *)&phyconf);
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4619      	mov	r1, r3
 8001696:	200b      	movs	r0, #11
 8001698:	f001 fcec 	bl	8003074 <ctlwizchip>

  if (phyconf.by == PHY_CONFBY_HW)
 800169c:	793b      	ldrb	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d103      	bne.n	80016aa <PrintPHYConf+0x1e>
  {
    printf("\r\nPHY Configured by Hardware Pins");
 80016a2:	4814      	ldr	r0, [pc, #80]	@ (80016f4 <PrintPHYConf+0x68>)
 80016a4:	f00a fcd2 	bl	800c04c <iprintf>
 80016a8:	e002      	b.n	80016b0 <PrintPHYConf+0x24>
  }
  else
  {
    printf("\r\nPHY Configured by Registers");
 80016aa:	4813      	ldr	r0, [pc, #76]	@ (80016f8 <PrintPHYConf+0x6c>)
 80016ac:	f00a fcce 	bl	800c04c <iprintf>
  }

  if (phyconf.mode == PHY_MODE_AUTONEGO)
 80016b0:	797b      	ldrb	r3, [r7, #5]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d103      	bne.n	80016be <PrintPHYConf+0x32>
  {
    printf("\r\nAutonegotiation Enabled");
 80016b6:	4811      	ldr	r0, [pc, #68]	@ (80016fc <PrintPHYConf+0x70>)
 80016b8:	f00a fcc8 	bl	800c04c <iprintf>
 80016bc:	e002      	b.n	80016c4 <PrintPHYConf+0x38>
  }
  else
  {
    printf("\r\nAutonegotiation NOT Enabled");
 80016be:	4810      	ldr	r0, [pc, #64]	@ (8001700 <PrintPHYConf+0x74>)
 80016c0:	f00a fcc4 	bl	800c04c <iprintf>
  }

  if (phyconf.duplex == PHY_DUPLEX_FULL)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d103      	bne.n	80016d2 <PrintPHYConf+0x46>
  {
    printf("\r\nDuplex Mode: Full");
 80016ca:	480e      	ldr	r0, [pc, #56]	@ (8001704 <PrintPHYConf+0x78>)
 80016cc:	f00a fcbe 	bl	800c04c <iprintf>
 80016d0:	e002      	b.n	80016d8 <PrintPHYConf+0x4c>
  }
  else
  {
    printf("\r\nDuplex Mode: Half");
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <PrintPHYConf+0x7c>)
 80016d4:	f00a fcba 	bl	800c04c <iprintf>
  }

  if (phyconf.speed == PHY_SPEED_10)
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <PrintPHYConf+0x5a>
  {
    printf("\r\nSpeed: 10Mbps");
 80016de:	480b      	ldr	r0, [pc, #44]	@ (800170c <PrintPHYConf+0x80>)
 80016e0:	f00a fcb4 	bl	800c04c <iprintf>
  }
  else
  {
    printf("\r\nSpeed: 100Mbps");
  }
}
 80016e4:	e002      	b.n	80016ec <PrintPHYConf+0x60>
    printf("\r\nSpeed: 100Mbps");
 80016e6:	480a      	ldr	r0, [pc, #40]	@ (8001710 <PrintPHYConf+0x84>)
 80016e8:	f00a fcb0 	bl	800c04c <iprintf>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	0800d508 	.word	0x0800d508
 80016f8:	0800d52c 	.word	0x0800d52c
 80016fc:	0800d54c 	.word	0x0800d54c
 8001700:	0800d568 	.word	0x0800d568
 8001704:	0800d588 	.word	0x0800d588
 8001708:	0800d59c 	.word	0x0800d59c
 800170c:	0800d5b0 	.word	0x0800d5b0
 8001710:	0800d5c0 	.word	0x0800d5c0

08001714 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001726:	f002 f9b7 	bl	8003a98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40001000 	.word	0x40001000

08001738 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <Error_Handler+0x8>

08001744 <get_HB_LB>:

unsigned char low_byte = 0x00;
unsigned char high_byte = 0x00;

void get_HB_LB(uint16_t value, unsigned char *HB, unsigned char *LB)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	81fb      	strh	r3, [r7, #14]
	*LB = (value & 0x00FF);
 8001752:	89fb      	ldrh	r3, [r7, #14]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	701a      	strb	r2, [r3, #0]
	*HB = ((value & 0xFF00) >> 0x08);
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	b29b      	uxth	r3, r3
 8001760:	b2da      	uxtb	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	701a      	strb	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <make_word>:

uint16_t make_word(unsigned char HB, unsigned char LB)
{
 8001772:	b480      	push	{r7}
 8001774:	b085      	sub	sp, #20
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	460a      	mov	r2, r1
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	4613      	mov	r3, r2
 8001780:	71bb      	strb	r3, [r7, #6]
	uint16_t tmp = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	81fb      	strh	r3, [r7, #14]

	tmp = HB;
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	81fb      	strh	r3, [r7, #14]
	tmp <<= 8;
 800178a:	89fb      	ldrh	r3, [r7, #14]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	81fb      	strh	r3, [r7, #14]
	tmp |= LB;
 8001790:	79bb      	ldrb	r3, [r7, #6]
 8001792:	b29a      	uxth	r2, r3
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	4313      	orrs	r3, r2
 8001798:	81fb      	strh	r3, [r7, #14]

	return tmp;
 800179a:	89fb      	ldrh	r3, [r7, #14]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <modbus_receive>:

void modbus_receive(uint8_t *rx_buffer, uint8_t *tx_buffer, int recv_lenght, uint16_t *read_registers)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b08b      	sub	sp, #44	@ 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]

	uint16_t temp1 = 0x0000;
 80017b6:	2300      	movs	r3, #0
 80017b8:	83fb      	strh	r3, [r7, #30]
	uint16_t temp2 = 0x0000;
 80017ba:	2300      	movs	r3, #0
 80017bc:	83bb      	strh	r3, [r7, #28]
	uint16_t temp3 = 0x0000;
 80017be:	2300      	movs	r3, #0
 80017c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t temp4 = 0x0000;
 80017c2:	2300      	movs	r3, #0
 80017c4:	837b      	strh	r3, [r7, #26]
	uint16_t temp5 = 0x0000;
 80017c6:	2300      	movs	r3, #0
 80017c8:	833b      	strh	r3, [r7, #24]
	uint16_t temp6 = 0x0000;
 80017ca:	2300      	movs	r3, #0
 80017cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t temp7 = 0x0000;
 80017ce:	2300      	movs	r3, #0
 80017d0:	82fb      	strh	r3, [r7, #22]

	// memset(tx_buffer,0,sizeof(tx_buffer));

	// send(1,rx_buffer,recv_lenght);// the data

	if (rx_buffer[id_byte] == Slave_ID)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3306      	adds	r3, #6
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	f040 814d 	bne.w	8001a78 <modbus_receive+0x2d0>
	{
		tx_buffer[id_byte] = rx_buffer[id_byte];
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3306      	adds	r3, #6
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	7992      	ldrb	r2, [r2, #6]
 80017e6:	701a      	strb	r2, [r3, #0]
		tx_buffer[function_code_byte] = rx_buffer[function_code_byte];
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	3307      	adds	r3, #7
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	79d2      	ldrb	r2, [r2, #7]
 80017f0:	701a      	strb	r2, [r3, #0]

		tx_buffer[protocol_nr_high_byte] = 0;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3302      	adds	r3, #2
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
		tx_buffer[protocol_nr_low_byte] = 0;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3303      	adds	r3, #3
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]

		switch (rx_buffer[function_code_byte])
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3307      	adds	r3, #7
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b10      	cmp	r3, #16
 800180a:	f000 809e 	beq.w	800194a <modbus_receive+0x1a2>
 800180e:	2b10      	cmp	r3, #16
 8001810:	f300 812e 	bgt.w	8001a70 <modbus_receive+0x2c8>
 8001814:	2b03      	cmp	r3, #3
 8001816:	d003      	beq.n	8001820 <modbus_receive+0x78>
 8001818:	2b06      	cmp	r3, #6
 800181a:	f000 8125 	beq.w	8001a68 <modbus_receive+0x2c0>
 800181e:	e127      	b.n	8001a70 <modbus_receive+0x2c8>
		{

		case FC_read_holding_registers:
		{
			// Start address to read from
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3308      	adds	r3, #8
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3309      	adds	r3, #9
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f7ff ff9f 	bl	8001772 <make_word>
 8001834:	4603      	mov	r3, r0
 8001836:	83fb      	strh	r3, [r7, #30]

			if ((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 8001838:	8bfb      	ldrh	r3, [r7, #30]
 800183a:	2b3f      	cmp	r3, #63	@ 0x3f
 800183c:	d87e      	bhi.n	800193c <modbus_receive+0x194>
			{
				// Number of consecutive addresses to read from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	330a      	adds	r3, #10
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	330b      	adds	r3, #11
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	4619      	mov	r1, r3
 800184c:	4610      	mov	r0, r2
 800184e:	f7ff ff90 	bl	8001772 <make_word>
 8001852:	4603      	mov	r3, r0
 8001854:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 8001856:	8bbb      	ldrh	r3, [r7, #28]
 8001858:	2b40      	cmp	r3, #64	@ 0x40
 800185a:	d86b      	bhi.n	8001934 <modbus_receive+0x18c>
 800185c:	8bba      	ldrh	r2, [r7, #28]
 800185e:	8bfb      	ldrh	r3, [r7, #30]
 8001860:	4413      	add	r3, r2
 8001862:	2b40      	cmp	r3, #64	@ 0x40
 8001864:	dc66      	bgt.n	8001934 <modbus_receive+0x18c>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3301      	adds	r3, #1
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	7852      	ldrb	r2, [r2, #1]
 8001876:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = (temp2 * 2) + 3;  // No of requested bytes  + slave addr(1B) + function code (1B)) + Bytes till end of message (1B)
 8001878:	8bbb      	ldrh	r3, [r7, #28]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	b2da      	uxtb	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	3305      	adds	r3, #5
 8001884:	3203      	adds	r2, #3
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]
					tx_buffer[tx_bytes_till_message_end] = (temp2 * 2); // Bytes till end of message
 800188a:	8bbb      	ldrh	r3, [r7, #28]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3308      	adds	r3, #8
 8001892:	0052      	lsls	r2, r2, #1
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	701a      	strb	r2, [r3, #0]


					if (temp2 > 1)
 8001898:	8bbb      	ldrh	r3, [r7, #28]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d92b      	bls.n	80018f6 <modbus_receive+0x14e>
					{
						int i = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]

						//Fill transmit buffer with request data
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 80018a2:	8bfb      	ldrh	r3, [r7, #30]
 80018a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80018a6:	e021      	b.n	80018ec <modbus_receive+0x144>
						{
							get_HB_LB(read_registers[((temp1 - addr_holding_reg_start) + temp3)], &high_byte, &low_byte);
 80018a8:	8bfa      	ldrh	r2, [r7, #30]
 80018aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018ac:	4413      	add	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	4a72      	ldr	r2, [pc, #456]	@ (8001a80 <modbus_receive+0x2d8>)
 80018b8:	4972      	ldr	r1, [pc, #456]	@ (8001a84 <modbus_receive+0x2dc>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff42 	bl	8001744 <get_HB_LB>
							tx_buffer[tx_start_data_high_byte + i] = high_byte;
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	3309      	adds	r3, #9
 80018c4:	461a      	mov	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001a84 <modbus_receive+0x2dc>)
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	701a      	strb	r2, [r3, #0]
							tx_buffer[tx_start_data_low_byte + i] = low_byte;
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	330a      	adds	r3, #10
 80018d4:	461a      	mov	r2, r3
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4413      	add	r3, r2
 80018da:	4a69      	ldr	r2, [pc, #420]	@ (8001a80 <modbus_receive+0x2d8>)
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	701a      	strb	r2, [r3, #0]
							i += 2;
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	3302      	adds	r3, #2
 80018e4:	623b      	str	r3, [r7, #32]
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 80018e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018e8:	3301      	adds	r3, #1
 80018ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80018ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80018ee:	8bbb      	ldrh	r3, [r7, #28]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d3d9      	bcc.n	80018a8 <modbus_receive+0x100>
 80018f4:	e013      	b.n	800191e <modbus_receive+0x176>
						}
					}

					else
					{
						get_HB_LB(read_registers[(temp1 - addr_holding_reg_start)], &high_byte, &low_byte);
 80018f6:	8bfb      	ldrh	r3, [r7, #30]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	4a5f      	ldr	r2, [pc, #380]	@ (8001a80 <modbus_receive+0x2d8>)
 8001902:	4960      	ldr	r1, [pc, #384]	@ (8001a84 <modbus_receive+0x2dc>)
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff1d 	bl	8001744 <get_HB_LB>
						tx_buffer[1] = high_byte;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	3301      	adds	r3, #1
 800190e:	4a5d      	ldr	r2, [pc, #372]	@ (8001a84 <modbus_receive+0x2dc>)
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	701a      	strb	r2, [r3, #0]
						tx_buffer[2] = low_byte;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	3302      	adds	r3, #2
 8001918:	4a59      	ldr	r2, [pc, #356]	@ (8001a80 <modbus_receive+0x2d8>)
 800191a:	7812      	ldrb	r2, [r2, #0]
 800191c:	701a      	strb	r2, [r3, #0]
					}
					send(1, tx_buffer, ((temp2 * 2) + 9));
 800191e:	8bbb      	ldrh	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	b29b      	uxth	r3, r3
 8001924:	3309      	adds	r3, #9
 8001926:	b29b      	uxth	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	2001      	movs	r0, #1
 800192e:	f001 f87f 	bl	8002a30 <send>
 8001932:	e006      	b.n	8001942 <modbus_receive+0x19a>
				}

				else
				{
					error_flag = 1;
 8001934:	4b54      	ldr	r3, [pc, #336]	@ (8001a88 <modbus_receive+0x2e0>)
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e002      	b.n	8001942 <modbus_receive+0x19a>
				}
			}

			else
			{
				error_flag = 1;
 800193c:	4b52      	ldr	r3, [pc, #328]	@ (8001a88 <modbus_receive+0x2e0>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
			}
			printf("You entered 1.\n");
 8001942:	4852      	ldr	r0, [pc, #328]	@ (8001a8c <modbus_receive+0x2e4>)
 8001944:	f00a fbea 	bl	800c11c <puts>
			break;
 8001948:	e096      	b.n	8001a78 <modbus_receive+0x2d0>
		}

		case FC_write_multiple_registers:
		{
			//Start address to write
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3308      	adds	r3, #8
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3309      	adds	r3, #9
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	4610      	mov	r0, r2
 800195a:	f7ff ff0a 	bl	8001772 <make_word>
 800195e:	4603      	mov	r3, r0
 8001960:	83fb      	strh	r3, [r7, #30]

			if((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 8001962:	8bfb      	ldrh	r3, [r7, #30]
 8001964:	2b3f      	cmp	r3, #63	@ 0x3f
 8001966:	d878      	bhi.n	8001a5a <modbus_receive+0x2b2>
			{
				// Number of consecutive addresses to write from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	330a      	adds	r3, #10
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	330b      	adds	r3, #11
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f7ff fefb 	bl	8001772 <make_word>
 800197c:	4603      	mov	r3, r0
 800197e:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 8001980:	8bbb      	ldrh	r3, [r7, #28]
 8001982:	2b40      	cmp	r3, #64	@ 0x40
 8001984:	d865      	bhi.n	8001a52 <modbus_receive+0x2aa>
 8001986:	8bba      	ldrh	r2, [r7, #28]
 8001988:	8bfb      	ldrh	r3, [r7, #30]
 800198a:	4413      	add	r3, r2
 800198c:	2b40      	cmp	r3, #64	@ 0x40
 800198e:	dc60      	bgt.n	8001a52 <modbus_receive+0x2aa>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	3301      	adds	r3, #1
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	7852      	ldrb	r2, [r2, #1]
 80019a0:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = 6;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3305      	adds	r3, #5
 80019a6:	2206      	movs	r2, #6
 80019a8:	701a      	strb	r2, [r3, #0]

					temp5 = (temp1 - addr_holding_reg_start);
 80019aa:	8bfb      	ldrh	r3, [r7, #30]
 80019ac:	833b      	strh	r3, [r7, #24]
					temp3 = rx_write_fc_first_high_byte;
 80019ae:	230d      	movs	r3, #13
 80019b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

					if(temp2 == 1)
 80019b2:	8bbb      	ldrh	r3, [r7, #28]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d111      	bne.n	80019dc <modbus_receive+0x234>
					{
						read_registers[temp1] = make_word(rx_buffer[temp3], rx_buffer[temp3+1]);
 80019b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4413      	add	r3, r2
 80019be:	7818      	ldrb	r0, [r3, #0]
 80019c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019c2:	3301      	adds	r3, #1
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	7819      	ldrb	r1, [r3, #0]
 80019ca:	8bfb      	ldrh	r3, [r7, #30]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	18d4      	adds	r4, r2, r3
 80019d2:	f7ff fece 	bl	8001772 <make_word>
 80019d6:	4603      	mov	r3, r0
 80019d8:	8023      	strh	r3, [r4, #0]
 80019da:	e020      	b.n	8001a1e <modbus_receive+0x276>

					}
					else
					{
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 80019dc:	8b3b      	ldrh	r3, [r7, #24]
 80019de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80019e0:	e017      	b.n	8001a12 <modbus_receive+0x26a>
						{
							read_registers[temp6] = make_word(rx_buffer[temp3], rx_buffer[1 + temp3]);
 80019e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	7818      	ldrb	r0, [r3, #0]
 80019ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019ec:	3301      	adds	r3, #1
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	7819      	ldrb	r1, [r3, #0]
 80019f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	18d4      	adds	r4, r2, r3
 80019fe:	f7ff feb8 	bl	8001772 <make_word>
 8001a02:	4603      	mov	r3, r0
 8001a04:	8023      	strh	r3, [r4, #0]
							temp3 += 2;
 8001a06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a08:	3302      	adds	r3, #2
 8001a0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8001a0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a0e:	3301      	adds	r3, #1
 8001a10:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001a12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a14:	8bb9      	ldrh	r1, [r7, #28]
 8001a16:	8b3b      	ldrh	r3, [r7, #24]
 8001a18:	440b      	add	r3, r1
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	dbe1      	blt.n	80019e2 <modbus_receive+0x23a>
						}

					}
					tx_buffer[location_start_high_byte] = rx_buffer[location_start_high_byte];
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3308      	adds	r3, #8
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	7a12      	ldrb	r2, [r2, #8]
 8001a26:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_start_low_byte] = rx_buffer[location_start_low_byte];
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	3309      	adds	r3, #9
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	7a52      	ldrb	r2, [r2, #9]
 8001a30:	701a      	strb	r2, [r3, #0]

					tx_buffer[location_end_high_byte] = rx_buffer[location_end_high_byte];
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	330a      	adds	r3, #10
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	7a92      	ldrb	r2, [r2, #10]
 8001a3a:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_end_low_byte] = rx_buffer[location_end_low_byte];
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	330b      	adds	r3, #11
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	7ad2      	ldrb	r2, [r2, #11]
 8001a44:	701a      	strb	r2, [r3, #0]

					send(1, tx_buffer,12);
 8001a46:	220c      	movs	r2, #12
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 fff0 	bl	8002a30 <send>
 8001a50:	e006      	b.n	8001a60 <modbus_receive+0x2b8>
				}
				else
				{
					error_flag = 1;
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <modbus_receive+0x2e0>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	e002      	b.n	8001a60 <modbus_receive+0x2b8>
				}

			}
			else
			{
				error_flag = 1;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <modbus_receive+0x2e0>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
			}

			// Code to execute if choice is 3
			printf("You entered 3.\n");
 8001a60:	480b      	ldr	r0, [pc, #44]	@ (8001a90 <modbus_receive+0x2e8>)
 8001a62:	f00a fb5b 	bl	800c11c <puts>
			break;
 8001a66:	e007      	b.n	8001a78 <modbus_receive+0x2d0>
		}

		case FC_write_single_register:
			// Code to execute if choice is 2
			printf("You entered 2.\n");
 8001a68:	480a      	ldr	r0, [pc, #40]	@ (8001a94 <modbus_receive+0x2ec>)
 8001a6a:	f00a fb57 	bl	800c11c <puts>
			break;
 8001a6e:	e003      	b.n	8001a78 <modbus_receive+0x2d0>

		default:
			// Code to execute if choice doesn't match any case
			printf("Invalid choice.\n");
 8001a70:	4809      	ldr	r0, [pc, #36]	@ (8001a98 <modbus_receive+0x2f0>)
 8001a72:	f00a fb53 	bl	800c11c <puts>
			break;
 8001a76:	bf00      	nop
		}
	}
}
 8001a78:	bf00      	nop
 8001a7a:	372c      	adds	r7, #44	@ 0x2c
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd90      	pop	{r4, r7, pc}
 8001a80:	20000513 	.word	0x20000513
 8001a84:	20000514 	.word	0x20000514
 8001a88:	20000512 	.word	0x20000512
 8001a8c:	0800d5d4 	.word	0x0800d5d4
 8001a90:	0800d5e4 	.word	0x0800d5e4
 8001a94:	0800d5f4 	.word	0x0800d5f4
 8001a98:	0800d604 	.word	0x0800d604

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001ada:	f007 ffe7 	bl	8009aac <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800

08001aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	@ 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a48      	ldr	r2, [pc, #288]	@ (8001c2c <HAL_I2C_MspInit+0x140>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	f040 8089 	bne.w	8001c22 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	4b46      	ldr	r3, [pc, #280]	@ (8001c30 <HAL_I2C_MspInit+0x144>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b18:	4a45      	ldr	r2, [pc, #276]	@ (8001c30 <HAL_I2C_MspInit+0x144>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b20:	4b43      	ldr	r3, [pc, #268]	@ (8001c30 <HAL_I2C_MspInit+0x144>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b32:	2312      	movs	r3, #18
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	483a      	ldr	r0, [pc, #232]	@ (8001c34 <HAL_I2C_MspInit+0x148>)
 8001b4a:	f002 fbb5 	bl	80042b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b37      	ldr	r3, [pc, #220]	@ (8001c30 <HAL_I2C_MspInit+0x144>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	4a36      	ldr	r2, [pc, #216]	@ (8001c30 <HAL_I2C_MspInit+0x144>)
 8001b58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5e:	4b34      	ldr	r3, [pc, #208]	@ (8001c30 <HAL_I2C_MspInit+0x144>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001b6a:	4b33      	ldr	r3, [pc, #204]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001b6c:	4a33      	ldr	r2, [pc, #204]	@ (8001c3c <HAL_I2C_MspInit+0x150>)
 8001b6e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001b70:	4b31      	ldr	r3, [pc, #196]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001b72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b76:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b78:	4b2f      	ldr	r3, [pc, #188]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b84:	4b2c      	ldr	r3, [pc, #176]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001b86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b8a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b92:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001b98:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001baa:	4823      	ldr	r0, [pc, #140]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001bac:	f002 f89a 	bl	8003ce4 <HAL_DMA_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001bb6:	f7ff fdbf 	bl	8001738 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001bbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <HAL_I2C_MspInit+0x14c>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c44 <HAL_I2C_MspInit+0x158>)
 8001bca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001bce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bd2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001bd6:	2240      	movs	r2, #64	@ 0x40
 8001bd8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bda:	4b19      	ldr	r3, [pc, #100]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001be0:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001be2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001be6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be8:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bee:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001c06:	480e      	ldr	r0, [pc, #56]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001c08:	f002 f86c 	bl	8003ce4 <HAL_DMA_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001c12:	f7ff fd91 	bl	8001738 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a09      	ldr	r2, [pc, #36]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001c1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c1c:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_I2C_MspInit+0x154>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	@ 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40005400 	.word	0x40005400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020400 	.word	0x40020400
 8001c38:	200001e4 	.word	0x200001e4
 8001c3c:	40026010 	.word	0x40026010
 8001c40:	20000244 	.word	0x20000244
 8001c44:	400260a0 	.word	0x400260a0

08001c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a19      	ldr	r2, [pc, #100]	@ (8001ccc <HAL_SPI_MspInit+0x84>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d12b      	bne.n	8001cc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	4a17      	ldr	r2, [pc, #92]	@ (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a10      	ldr	r2, [pc, #64]	@ (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ca2:	23e0      	movs	r3, #224	@ 0xe0
 8001ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <HAL_SPI_MspInit+0x8c>)
 8001cbe:	f002 fafb 	bl	80042b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cc2:	bf00      	nop
 8001cc4:	3728      	adds	r7, #40	@ 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40013000 	.word	0x40013000
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8001d14 <HAL_TIM_Base_MspInit+0x3c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d10d      	bne.n	8001d06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_TIM_Base_MspInit+0x40>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	4a09      	ldr	r2, [pc, #36]	@ (8001d18 <HAL_TIM_Base_MspInit+0x40>)
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfa:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <HAL_TIM_Base_MspInit+0x40>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40014400 	.word	0x40014400
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	@ 0x30
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a32      	ldr	r2, [pc, #200]	@ (8001e04 <HAL_UART_MspInit+0xe8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d12c      	bne.n	8001d98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	4a30      	ldr	r2, [pc, #192]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001d48:	f043 0310 	orr.w	r3, r3, #16
 8001d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4a29      	ldr	r2, [pc, #164]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d76:	23c0      	movs	r3, #192	@ 0xc0
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d86:	2307      	movs	r3, #7
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	481e      	ldr	r0, [pc, #120]	@ (8001e0c <HAL_UART_MspInit+0xf0>)
 8001d92:	f002 fa91 	bl	80042b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d96:	e030      	b.n	8001dfa <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e10 <HAL_UART_MspInit+0xf4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d12b      	bne.n	8001dfa <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	4a17      	ldr	r2, [pc, #92]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a10      	ldr	r2, [pc, #64]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <HAL_UART_MspInit+0xec>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dde:	2312      	movs	r3, #18
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dea:	2307      	movs	r3, #7
 8001dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	4619      	mov	r1, r3
 8001df4:	4807      	ldr	r0, [pc, #28]	@ (8001e14 <HAL_UART_MspInit+0xf8>)
 8001df6:	f002 fa5f 	bl	80042b8 <HAL_GPIO_Init>
}
 8001dfa:	bf00      	nop
 8001dfc:	3730      	adds	r7, #48	@ 0x30
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40011000 	.word	0x40011000
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40004400 	.word	0x40004400
 8001e14:	40020000 	.word	0x40020000

08001e18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08e      	sub	sp, #56	@ 0x38
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	4b33      	ldr	r3, [pc, #204]	@ (8001efc <HAL_InitTick+0xe4>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	4a32      	ldr	r2, [pc, #200]	@ (8001efc <HAL_InitTick+0xe4>)
 8001e32:	f043 0310 	orr.w	r3, r3, #16
 8001e36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e38:	4b30      	ldr	r3, [pc, #192]	@ (8001efc <HAL_InitTick+0xe4>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e44:	f107 0210 	add.w	r2, r7, #16
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fd38 	bl	80058c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d103      	bne.n	8001e66 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e5e:	f003 fd09 	bl	8005874 <HAL_RCC_GetPCLK1Freq>
 8001e62:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e64:	e004      	b.n	8001e70 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e66:	f003 fd05 	bl	8005874 <HAL_RCC_GetPCLK1Freq>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e72:	4a23      	ldr	r2, [pc, #140]	@ (8001f00 <HAL_InitTick+0xe8>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	0c9b      	lsrs	r3, r3, #18
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e7e:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <HAL_InitTick+0xec>)
 8001e80:	4a21      	ldr	r2, [pc, #132]	@ (8001f08 <HAL_InitTick+0xf0>)
 8001e82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e84:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <HAL_InitTick+0xec>)
 8001e86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e8a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f04 <HAL_InitTick+0xec>)
 8001e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e90:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <HAL_InitTick+0xec>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <HAL_InitTick+0xec>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_InitTick+0xec>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001ea4:	4817      	ldr	r0, [pc, #92]	@ (8001f04 <HAL_InitTick+0xec>)
 8001ea6:	f004 fd21 	bl	80068ec <HAL_TIM_Base_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001eb8:	4812      	ldr	r0, [pc, #72]	@ (8001f04 <HAL_InitTick+0xec>)
 8001eba:	f004 fdcf 	bl	8006a5c <HAL_TIM_Base_Start_IT>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ec4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d111      	bne.n	8001ef0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ecc:	2036      	movs	r0, #54	@ 0x36
 8001ece:	f001 fefb 	bl	8003cc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d808      	bhi.n	8001eea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	2036      	movs	r0, #54	@ 0x36
 8001ede:	f001 fed7 	bl	8003c90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <HAL_InitTick+0xf4>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e002      	b.n	8001ef0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3738      	adds	r7, #56	@ 0x38
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40023800 	.word	0x40023800
 8001f00:	431bde83 	.word	0x431bde83
 8001f04:	20000518 	.word	0x20000518
 8001f08:	40001000 	.word	0x40001000
 8001f0c:	200000cc 	.word	0x200000cc

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <NMI_Handler+0x4>

08001f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <HardFault_Handler+0x4>

08001f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <MemManage_Handler+0x4>

08001f28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001f4c:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <DMA1_Stream0_IRQHandler+0x10>)
 8001f4e:	f001 ff77 	bl	8003e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200001e4 	.word	0x200001e4

08001f5c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001f60:	4802      	ldr	r0, [pc, #8]	@ (8001f6c <DMA1_Stream6_IRQHandler+0x10>)
 8001f62:	f001 ff6d 	bl	8003e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000244 	.word	0x20000244

08001f70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <TIM6_DAC_IRQHandler+0x10>)
 8001f76:	f004 fde1 	bl	8006b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000518 	.word	0x20000518

08001f84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e00a      	b.n	8001fac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f96:	f3af 8000 	nop.w
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	60ba      	str	r2, [r7, #8]
 8001fa2:	b2ca      	uxtb	r2, r1
 8001fa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dbf0      	blt.n	8001f96 <_read+0x12>
  }

  return len;
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fe6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_isatty>:

int _isatty(int file)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <SystemInit+0x20>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <SystemInit+0x20>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002054:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <WIZCHIP_READ+0x94>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4798      	blx	r3
   WIZCHIP.CS._select();
 800205a:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <WIZCHIP_READ+0x94>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002060:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <WIZCHIP_READ+0x94>)
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <WIZCHIP_READ+0x24>
 8002068:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <WIZCHIP_READ+0x94>)
 800206a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206c:	2b00      	cmp	r3, #0
 800206e:	d114      	bne.n	800209a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <WIZCHIP_READ+0x94>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	0c12      	lsrs	r2, r2, #16
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	4610      	mov	r0, r2
 800207c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800207e:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <WIZCHIP_READ+0x94>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	0a12      	lsrs	r2, r2, #8
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	4610      	mov	r0, r2
 800208a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <WIZCHIP_READ+0x94>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	4610      	mov	r0, r2
 8002096:	4798      	blx	r3
 8002098:	e011      	b.n	80020be <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0c1b      	lsrs	r3, r3, #16
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <WIZCHIP_READ+0x94>)
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	f107 020c 	add.w	r2, r7, #12
 80020b8:	2103      	movs	r1, #3
 80020ba:	4610      	mov	r0, r2
 80020bc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80020be:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <WIZCHIP_READ+0x94>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4798      	blx	r3
 80020c4:	4603      	mov	r3, r0
 80020c6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <WIZCHIP_READ+0x94>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <WIZCHIP_READ+0x94>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	4798      	blx	r3
   return ret;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200000a0 	.word	0x200000a0

080020e4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80020f0:	4b22      	ldr	r3, [pc, #136]	@ (800217c <WIZCHIP_WRITE+0x98>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80020f6:	4b21      	ldr	r3, [pc, #132]	@ (800217c <WIZCHIP_WRITE+0x98>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002104:	4b1d      	ldr	r3, [pc, #116]	@ (800217c <WIZCHIP_WRITE+0x98>)
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d119      	bne.n	8002140 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800210c:	4b1b      	ldr	r3, [pc, #108]	@ (800217c <WIZCHIP_WRITE+0x98>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	0c12      	lsrs	r2, r2, #16
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	4610      	mov	r0, r2
 8002118:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800211a:	4b18      	ldr	r3, [pc, #96]	@ (800217c <WIZCHIP_WRITE+0x98>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	0a12      	lsrs	r2, r2, #8
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	4610      	mov	r0, r2
 8002126:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002128:	4b14      	ldr	r3, [pc, #80]	@ (800217c <WIZCHIP_WRITE+0x98>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	4610      	mov	r0, r2
 8002132:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <WIZCHIP_WRITE+0x98>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	4610      	mov	r0, r2
 800213c:	4798      	blx	r3
 800213e:	e013      	b.n	8002168 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0c1b      	lsrs	r3, r3, #16
 8002144:	b2db      	uxtb	r3, r3
 8002146:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b2db      	uxtb	r3, r3
 800214e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <WIZCHIP_WRITE+0x98>)
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	f107 020c 	add.w	r2, r7, #12
 8002162:	2104      	movs	r1, #4
 8002164:	4610      	mov	r0, r2
 8002166:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002168:	4b04      	ldr	r3, [pc, #16]	@ (800217c <WIZCHIP_WRITE+0x98>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800216e:	4b03      	ldr	r3, [pc, #12]	@ (800217c <WIZCHIP_WRITE+0x98>)
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	4798      	blx	r3
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200000a0 	.word	0x200000a0

08002180 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	4613      	mov	r3, r2
 800218c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800218e:	4b2b      	ldr	r3, [pc, #172]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002194:	4b29      	ldr	r3, [pc, #164]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800219a:	4b28      	ldr	r3, [pc, #160]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <WIZCHIP_READ_BUF+0x2a>
 80021a2:	4b26      	ldr	r3, [pc, #152]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 80021a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d126      	bne.n	80021f8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80021aa:	4b24      	ldr	r3, [pc, #144]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	0c12      	lsrs	r2, r2, #16
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	4610      	mov	r0, r2
 80021b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80021b8:	4b20      	ldr	r3, [pc, #128]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	0a12      	lsrs	r2, r2, #8
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	4610      	mov	r0, r2
 80021c4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80021c6:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	4610      	mov	r0, r2
 80021d0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	82fb      	strh	r3, [r7, #22]
 80021d6:	e00a      	b.n	80021ee <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80021d8:	4b18      	ldr	r3, [pc, #96]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	8afa      	ldrh	r2, [r7, #22]
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	188c      	adds	r4, r1, r2
 80021e2:	4798      	blx	r3
 80021e4:	4603      	mov	r3, r0
 80021e6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80021e8:	8afb      	ldrh	r3, [r7, #22]
 80021ea:	3301      	adds	r3, #1
 80021ec:	82fb      	strh	r3, [r7, #22]
 80021ee:	8afa      	ldrh	r2, [r7, #22]
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d3f0      	bcc.n	80021d8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80021f6:	e017      	b.n	8002228 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	0c1b      	lsrs	r3, r3, #16
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	b2db      	uxtb	r3, r3
 8002206:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 8002210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002212:	f107 0210 	add.w	r2, r7, #16
 8002216:	2103      	movs	r1, #3
 8002218:	4610      	mov	r0, r2
 800221a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	88fa      	ldrh	r2, [r7, #6]
 8002222:	4611      	mov	r1, r2
 8002224:	68b8      	ldr	r0, [r7, #8]
 8002226:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002228:	4b04      	ldr	r3, [pc, #16]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800222e:	4b03      	ldr	r3, [pc, #12]	@ (800223c <WIZCHIP_READ_BUF+0xbc>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	4798      	blx	r3
}
 8002234:	bf00      	nop
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd90      	pop	{r4, r7, pc}
 800223c:	200000a0 	.word	0x200000a0

08002240 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800224e:	4b2b      	ldr	r3, [pc, #172]	@ (80022fc <WIZCHIP_WRITE_BUF+0xbc>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002254:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <WIZCHIP_WRITE_BUF+0xbc>)
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002262:	4b26      	ldr	r3, [pc, #152]	@ (80022fc <WIZCHIP_WRITE_BUF+0xbc>)
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	d126      	bne.n	80022b8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800226a:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <WIZCHIP_WRITE_BUF+0xbc>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	0c12      	lsrs	r2, r2, #16
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4610      	mov	r0, r2
 8002276:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002278:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <WIZCHIP_WRITE_BUF+0xbc>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	0a12      	lsrs	r2, r2, #8
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	4610      	mov	r0, r2
 8002284:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002286:	4b1d      	ldr	r3, [pc, #116]	@ (80022fc <WIZCHIP_WRITE_BUF+0xbc>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	4610      	mov	r0, r2
 8002290:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002292:	2300      	movs	r3, #0
 8002294:	82fb      	strh	r3, [r7, #22]
 8002296:	e00a      	b.n	80022ae <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002298:	4b18      	ldr	r3, [pc, #96]	@ (80022fc <WIZCHIP_WRITE_BUF+0xbc>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	8afa      	ldrh	r2, [r7, #22]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	440a      	add	r2, r1
 80022a2:	7812      	ldrb	r2, [r2, #0]
 80022a4:	4610      	mov	r0, r2
 80022a6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80022a8:	8afb      	ldrh	r3, [r7, #22]
 80022aa:	3301      	adds	r3, #1
 80022ac:	82fb      	strh	r3, [r7, #22]
 80022ae:	8afa      	ldrh	r2, [r7, #22]
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3f0      	bcc.n	8002298 <WIZCHIP_WRITE_BUF+0x58>
 80022b6:	e017      	b.n	80022e8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	0c1b      	lsrs	r3, r3, #16
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80022ce:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <WIZCHIP_WRITE_BUF+0xbc>)
 80022d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d2:	f107 0210 	add.w	r2, r7, #16
 80022d6:	2103      	movs	r1, #3
 80022d8:	4610      	mov	r0, r2
 80022da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80022dc:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <WIZCHIP_WRITE_BUF+0xbc>)
 80022de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e0:	88fa      	ldrh	r2, [r7, #6]
 80022e2:	4611      	mov	r1, r2
 80022e4:	68b8      	ldr	r0, [r7, #8]
 80022e6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80022e8:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <WIZCHIP_WRITE_BUF+0xbc>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80022ee:	4b03      	ldr	r3, [pc, #12]	@ (80022fc <WIZCHIP_WRITE_BUF+0xbc>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	4798      	blx	r3
}
 80022f4:	bf00      	nop
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200000a0 	.word	0x200000a0

08002300 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800230a:	2300      	movs	r3, #0
 800230c:	81fb      	strh	r3, [r7, #14]
 800230e:	2300      	movs	r3, #0
 8002310:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	3301      	adds	r3, #1
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fe94 	bl	800204c <WIZCHIP_READ>
 8002324:	4603      	mov	r3, r0
 8002326:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002328:	89bb      	ldrh	r3, [r7, #12]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	b29c      	uxth	r4, r3
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	3301      	adds	r3, #1
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fe86 	bl	800204c <WIZCHIP_READ>
 8002340:	4603      	mov	r3, r0
 8002342:	4423      	add	r3, r4
 8002344:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002346:	89bb      	ldrh	r3, [r7, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d019      	beq.n	8002380 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	3301      	adds	r3, #1
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fe77 	bl	800204c <WIZCHIP_READ>
 800235e:	4603      	mov	r3, r0
 8002360:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002362:	89fb      	ldrh	r3, [r7, #14]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b29c      	uxth	r4, r3
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	3301      	adds	r3, #1
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fe69 	bl	800204c <WIZCHIP_READ>
 800237a:	4603      	mov	r3, r0
 800237c:	4423      	add	r3, r4
 800237e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002380:	89fa      	ldrh	r2, [r7, #14]
 8002382:	89bb      	ldrh	r3, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d1c4      	bne.n	8002312 <getSn_TX_FSR+0x12>
   return val;
 8002388:	89fb      	ldrh	r3, [r7, #14]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bd90      	pop	{r4, r7, pc}

08002392 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002392:	b590      	push	{r4, r7, lr}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800239c:	2300      	movs	r3, #0
 800239e:	81fb      	strh	r3, [r7, #14]
 80023a0:	2300      	movs	r3, #0
 80023a2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	3301      	adds	r3, #1
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fe4b 	bl	800204c <WIZCHIP_READ>
 80023b6:	4603      	mov	r3, r0
 80023b8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80023ba:	89bb      	ldrh	r3, [r7, #12]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	b29c      	uxth	r4, r3
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	3301      	adds	r3, #1
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fe3d 	bl	800204c <WIZCHIP_READ>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4423      	add	r3, r4
 80023d6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80023d8:	89bb      	ldrh	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d019      	beq.n	8002412 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	3301      	adds	r3, #1
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fe2e 	bl	800204c <WIZCHIP_READ>
 80023f0:	4603      	mov	r3, r0
 80023f2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	b29c      	uxth	r4, r3
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	3301      	adds	r3, #1
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fe20 	bl	800204c <WIZCHIP_READ>
 800240c:	4603      	mov	r3, r0
 800240e:	4423      	add	r3, r4
 8002410:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002412:	89fa      	ldrh	r2, [r7, #14]
 8002414:	89bb      	ldrh	r3, [r7, #12]
 8002416:	429a      	cmp	r2, r3
 8002418:	d1c4      	bne.n	80023a4 <getSn_RX_RSR+0x12>
   return val;
 800241a:	89fb      	ldrh	r3, [r7, #14]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}

08002424 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
 8002430:	4613      	mov	r3, r2
 8002432:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800243c:	88bb      	ldrh	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d046      	beq.n	80024d0 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	3301      	adds	r3, #1
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fdfc 	bl	800204c <WIZCHIP_READ>
 8002454:	4603      	mov	r3, r0
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	b29c      	uxth	r4, r3
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	3301      	adds	r3, #1
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fdf0 	bl	800204c <WIZCHIP_READ>
 800246c:	4603      	mov	r3, r0
 800246e:	4423      	add	r3, r4
 8002470:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002472:	89fb      	ldrh	r3, [r7, #14]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	79fa      	ldrb	r2, [r7, #7]
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	3202      	adds	r2, #2
 800247c:	00d2      	lsls	r2, r2, #3
 800247e:	4413      	add	r3, r2
 8002480:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002482:	88bb      	ldrh	r3, [r7, #4]
 8002484:	461a      	mov	r2, r3
 8002486:	6839      	ldr	r1, [r7, #0]
 8002488:	68b8      	ldr	r0, [r7, #8]
 800248a:	f7ff fed9 	bl	8002240 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800248e:	89fa      	ldrh	r2, [r7, #14]
 8002490:	88bb      	ldrh	r3, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	3301      	adds	r3, #1
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80024a2:	461a      	mov	r2, r3
 80024a4:	89fb      	ldrh	r3, [r7, #14]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f7ff fe18 	bl	80020e4 <WIZCHIP_WRITE>
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	3301      	adds	r3, #1
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80024c0:	461a      	mov	r2, r3
 80024c2:	89fb      	ldrh	r3, [r7, #14]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f7ff fe0b 	bl	80020e4 <WIZCHIP_WRITE>
 80024ce:	e000      	b.n	80024d2 <wiz_send_data+0xae>
   if(len == 0)  return;
 80024d0:	bf00      	nop
}
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}

080024d8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
 80024e4:	4613      	mov	r3, r2
 80024e6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80024f0:	88bb      	ldrh	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d046      	beq.n	8002584 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	3301      	adds	r3, #1
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fda2 	bl	800204c <WIZCHIP_READ>
 8002508:	4603      	mov	r3, r0
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	b29c      	uxth	r4, r3
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	3301      	adds	r3, #1
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fd96 	bl	800204c <WIZCHIP_READ>
 8002520:	4603      	mov	r3, r0
 8002522:	4423      	add	r3, r4
 8002524:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002526:	89fb      	ldrh	r3, [r7, #14]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	79fa      	ldrb	r2, [r7, #7]
 800252c:	0092      	lsls	r2, r2, #2
 800252e:	3203      	adds	r2, #3
 8002530:	00d2      	lsls	r2, r2, #3
 8002532:	4413      	add	r3, r2
 8002534:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002536:	88bb      	ldrh	r3, [r7, #4]
 8002538:	461a      	mov	r2, r3
 800253a:	6839      	ldr	r1, [r7, #0]
 800253c:	68b8      	ldr	r0, [r7, #8]
 800253e:	f7ff fe1f 	bl	8002180 <WIZCHIP_READ_BUF>
   ptr += len;
 8002542:	89fa      	ldrh	r2, [r7, #14]
 8002544:	88bb      	ldrh	r3, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	3301      	adds	r3, #1
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002556:	461a      	mov	r2, r3
 8002558:	89fb      	ldrh	r3, [r7, #14]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	b29b      	uxth	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f7ff fdbe 	bl	80020e4 <WIZCHIP_WRITE>
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	3301      	adds	r3, #1
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002574:	461a      	mov	r2, r3
 8002576:	89fb      	ldrh	r3, [r7, #14]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7ff fdb1 	bl	80020e4 <WIZCHIP_WRITE>
 8002582:	e000      	b.n	8002586 <wiz_recv_data+0xae>
   if(len == 0) return;
 8002584:	bf00      	nop
}
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bd90      	pop	{r4, r7, pc}

0800258c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	4604      	mov	r4, r0
 8002594:	4608      	mov	r0, r1
 8002596:	4611      	mov	r1, r2
 8002598:	461a      	mov	r2, r3
 800259a:	4623      	mov	r3, r4
 800259c:	71fb      	strb	r3, [r7, #7]
 800259e:	4603      	mov	r3, r0
 80025a0:	71bb      	strb	r3, [r7, #6]
 80025a2:	460b      	mov	r3, r1
 80025a4:	80bb      	strh	r3, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d902      	bls.n	80025b6 <socket+0x2a>
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025b4:	e0f0      	b.n	8002798 <socket+0x20c>
	switch(protocol)
 80025b6:	79bb      	ldrb	r3, [r7, #6]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d005      	beq.n	80025c8 <socket+0x3c>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	dd11      	ble.n	80025e4 <socket+0x58>
 80025c0:	3b02      	subs	r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d80e      	bhi.n	80025e4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80025c6:	e011      	b.n	80025ec <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80025c8:	f107 030c 	add.w	r3, r7, #12
 80025cc:	2204      	movs	r2, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80025d4:	f7ff fdd4 	bl	8002180 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <socket+0x5e>
 80025de:	f06f 0302 	mvn.w	r3, #2
 80025e2:	e0d9      	b.n	8002798 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80025e4:	f06f 0304 	mvn.w	r3, #4
 80025e8:	e0d6      	b.n	8002798 <socket+0x20c>
	    break;
 80025ea:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <socket+0x70>
 80025f6:	f06f 0305 	mvn.w	r3, #5
 80025fa:	e0cd      	b.n	8002798 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d028      	beq.n	8002654 <socket+0xc8>
	{
   	switch(protocol)
 8002602:	79bb      	ldrb	r3, [r7, #6]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d002      	beq.n	800260e <socket+0x82>
 8002608:	2b02      	cmp	r3, #2
 800260a:	d008      	beq.n	800261e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800260c:	e022      	b.n	8002654 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002614:	2b00      	cmp	r3, #0
 8002616:	d11a      	bne.n	800264e <socket+0xc2>
 8002618:	f06f 0305 	mvn.w	r3, #5
 800261c:	e0bc      	b.n	8002798 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d006      	beq.n	8002636 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db02      	blt.n	8002636 <socket+0xaa>
 8002630:	f06f 0305 	mvn.w	r3, #5
 8002634:	e0b0      	b.n	8002798 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db04      	blt.n	8002652 <socket+0xc6>
 8002648:	f06f 0305 	mvn.w	r3, #5
 800264c:	e0a4      	b.n	8002798 <socket+0x20c>
   	      break;
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <socket+0xc8>
   	      break;
 8002652:	bf00      	nop
   	}
   }
	close(sn);
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f8ac 	bl	80027b4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	3301      	adds	r3, #1
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4618      	mov	r0, r3
 8002666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800266a:	f023 030f 	bic.w	r3, r3, #15
 800266e:	b25a      	sxtb	r2, r3
 8002670:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002674:	4313      	orrs	r3, r2
 8002676:	b25b      	sxtb	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4619      	mov	r1, r3
 800267c:	f7ff fd32 	bl	80020e4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002680:	88bb      	ldrh	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d110      	bne.n	80026a8 <socket+0x11c>
	{
	   port = sock_any_port++;
 8002686:	4b46      	ldr	r3, [pc, #280]	@ (80027a0 <socket+0x214>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	b291      	uxth	r1, r2
 800268e:	4a44      	ldr	r2, [pc, #272]	@ (80027a0 <socket+0x214>)
 8002690:	8011      	strh	r1, [r2, #0]
 8002692:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002694:	4b42      	ldr	r3, [pc, #264]	@ (80027a0 <socket+0x214>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800269c:	4293      	cmp	r3, r2
 800269e:	d103      	bne.n	80026a8 <socket+0x11c>
 80026a0:	4b3f      	ldr	r3, [pc, #252]	@ (80027a0 <socket+0x214>)
 80026a2:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80026a6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	3301      	adds	r3, #1
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026b4:	461a      	mov	r2, r3
 80026b6:	88bb      	ldrh	r3, [r7, #4]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f7ff fd0f 	bl	80020e4 <WIZCHIP_WRITE>
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	3301      	adds	r3, #1
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	88bb      	ldrh	r3, [r7, #4]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4619      	mov	r1, r3
 80026da:	4610      	mov	r0, r2
 80026dc:	f7ff fd02 	bl	80020e4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	3301      	adds	r3, #1
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80026ec:	2101      	movs	r1, #1
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fcf8 	bl	80020e4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80026f4:	bf00      	nop
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	3301      	adds	r3, #1
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fca2 	bl	800204c <WIZCHIP_READ>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f3      	bne.n	80026f6 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2201      	movs	r2, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	b21b      	sxth	r3, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	b21a      	sxth	r2, r3
 800271c:	4b21      	ldr	r3, [pc, #132]	@ (80027a4 <socket+0x218>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b21b      	sxth	r3, r3
 8002722:	4013      	ands	r3, r2
 8002724:	b21b      	sxth	r3, r3
 8002726:	b29a      	uxth	r2, r3
 8002728:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <socket+0x218>)
 800272a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	f003 0201 	and.w	r2, r3, #1
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	b21a      	sxth	r2, r3
 800273a:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <socket+0x218>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b21b      	sxth	r3, r3
 8002740:	4313      	orrs	r3, r2
 8002742:	b21b      	sxth	r3, r3
 8002744:	b29a      	uxth	r2, r3
 8002746:	4b17      	ldr	r3, [pc, #92]	@ (80027a4 <socket+0x218>)
 8002748:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	2201      	movs	r2, #1
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	b21b      	sxth	r3, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	b21a      	sxth	r2, r3
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <socket+0x21c>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	b21b      	sxth	r3, r3
 800275e:	4013      	ands	r3, r2
 8002760:	b21b      	sxth	r3, r3
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <socket+0x21c>)
 8002766:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	4a10      	ldr	r2, [pc, #64]	@ (80027ac <socket+0x220>)
 800276c:	2100      	movs	r1, #0
 800276e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	4a0e      	ldr	r2, [pc, #56]	@ (80027b0 <socket+0x224>)
 8002776:	2100      	movs	r1, #0
 8002778:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800277a:	bf00      	nop
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	3301      	adds	r3, #1
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fc5f 	bl	800204c <WIZCHIP_READ>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f3      	beq.n	800277c <socket+0x1f0>
   return (int8_t)sn;
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bd90      	pop	{r4, r7, pc}
 80027a0:	2000009c 	.word	0x2000009c
 80027a4:	20000560 	.word	0x20000560
 80027a8:	20000562 	.word	0x20000562
 80027ac:	20000564 	.word	0x20000564
 80027b0:	20000574 	.word	0x20000574

080027b4 <close>:

int8_t close(uint8_t sn)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d902      	bls.n	80027ca <close+0x16>
 80027c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027c8:	e055      	b.n	8002876 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	3301      	adds	r3, #1
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80027d6:	2110      	movs	r1, #16
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fc83 	bl	80020e4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80027de:	bf00      	nop
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	3301      	adds	r3, #1
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fc2d 	bl	800204c <WIZCHIP_READ>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f3      	bne.n	80027e0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	3301      	adds	r3, #1
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002804:	211f      	movs	r1, #31
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fc6c 	bl	80020e4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	2201      	movs	r2, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	b21b      	sxth	r3, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	b21a      	sxth	r2, r3
 800281a:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <close+0xcc>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b21b      	sxth	r3, r3
 8002820:	4013      	ands	r3, r2
 8002822:	b21b      	sxth	r3, r3
 8002824:	b29a      	uxth	r2, r3
 8002826:	4b16      	ldr	r3, [pc, #88]	@ (8002880 <close+0xcc>)
 8002828:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	2201      	movs	r2, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	b21b      	sxth	r3, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	b21a      	sxth	r2, r3
 8002838:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <close+0xd0>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b21b      	sxth	r3, r3
 800283e:	4013      	ands	r3, r2
 8002840:	b21b      	sxth	r3, r3
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <close+0xd0>)
 8002846:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	4a0f      	ldr	r2, [pc, #60]	@ (8002888 <close+0xd4>)
 800284c:	2100      	movs	r1, #0
 800284e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <close+0xd8>)
 8002856:	2100      	movs	r1, #0
 8002858:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800285a:	bf00      	nop
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	3301      	adds	r3, #1
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fbef 	bl	800204c <WIZCHIP_READ>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f3      	bne.n	800285c <close+0xa8>
	return SOCK_OK;
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000560 	.word	0x20000560
 8002884:	20000562 	.word	0x20000562
 8002888:	20000564 	.word	0x20000564
 800288c:	20000574 	.word	0x20000574

08002890 <listen>:

int8_t listen(uint8_t sn)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b08      	cmp	r3, #8
 800289e:	d902      	bls.n	80028a6 <listen+0x16>
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028a4:	e049      	b.n	800293a <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	3301      	adds	r3, #1
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fbcc 	bl	800204c <WIZCHIP_READ>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d002      	beq.n	80028c4 <listen+0x34>
 80028be:	f06f 0304 	mvn.w	r3, #4
 80028c2:	e03a      	b.n	800293a <listen+0xaa>
	CHECK_SOCKINIT();
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3301      	adds	r3, #1
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fbbb 	bl	800204c <WIZCHIP_READ>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b13      	cmp	r3, #19
 80028da:	d002      	beq.n	80028e2 <listen+0x52>
 80028dc:	f06f 0302 	mvn.w	r3, #2
 80028e0:	e02b      	b.n	800293a <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	3301      	adds	r3, #1
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80028ee:	2102      	movs	r1, #2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fbf7 	bl	80020e4 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80028f6:	bf00      	nop
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	3301      	adds	r3, #1
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fba1 	bl	800204c <WIZCHIP_READ>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f3      	bne.n	80028f8 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002910:	e006      	b.n	8002920 <listen+0x90>
   {
         close(sn);
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff4d 	bl	80027b4 <close>
         return SOCKERR_SOCKCLOSED;
 800291a:	f06f 0303 	mvn.w	r3, #3
 800291e:	e00c      	b.n	800293a <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	3301      	adds	r3, #1
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fb8d 	bl	800204c <WIZCHIP_READ>
 8002932:	4603      	mov	r3, r0
 8002934:	2b14      	cmp	r3, #20
 8002936:	d1ec      	bne.n	8002912 <listen+0x82>
   }
   return SOCK_OK;
 8002938:	2301      	movs	r3, #1
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d902      	bls.n	800295a <disconnect+0x16>
 8002954:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002958:	e062      	b.n	8002a20 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	3301      	adds	r3, #1
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fb72 	bl	800204c <WIZCHIP_READ>
 8002968:	4603      	mov	r3, r0
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	2b01      	cmp	r3, #1
 8002970:	d002      	beq.n	8002978 <disconnect+0x34>
 8002972:	f06f 0304 	mvn.w	r3, #4
 8002976:	e053      	b.n	8002a20 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	3301      	adds	r3, #1
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002984:	2108      	movs	r1, #8
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fbac 	bl	80020e4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800298c:	bf00      	nop
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	3301      	adds	r3, #1
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fb56 	bl	800204c <WIZCHIP_READ>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f3      	bne.n	800298e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2201      	movs	r2, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a28 <disconnect+0xe4>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4013      	ands	r3, r2
 80029bc:	b21b      	sxth	r3, r3
 80029be:	b29a      	uxth	r2, r3
 80029c0:	4b19      	ldr	r3, [pc, #100]	@ (8002a28 <disconnect+0xe4>)
 80029c2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80029c4:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <disconnect+0xe8>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	fa42 f303 	asr.w	r3, r2, r3
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d016      	beq.n	8002a06 <disconnect+0xc2>
 80029d8:	2300      	movs	r3, #0
 80029da:	e021      	b.n	8002a20 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	3301      	adds	r3, #1
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fb2f 	bl	800204c <WIZCHIP_READ>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <disconnect+0xc2>
	   {
	      close(sn);
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff feda 	bl	80027b4 <close>
	      return SOCKERR_TIMEOUT;
 8002a00:	f06f 030c 	mvn.w	r3, #12
 8002a04:	e00c      	b.n	8002a20 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fb1a 	bl	800204c <WIZCHIP_READ>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1de      	bne.n	80029dc <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8002a1e:	2301      	movs	r3, #1
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000562 	.word	0x20000562
 8002a2c:	20000560 	.word	0x20000560

08002a30 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	6039      	str	r1, [r7, #0]
 8002a3a:	71fb      	strb	r3, [r7, #7]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d902      	bls.n	8002a54 <send+0x24>
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a52:	e0dd      	b.n	8002c10 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	3301      	adds	r3, #1
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff faf5 	bl	800204c <WIZCHIP_READ>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d002      	beq.n	8002a72 <send+0x42>
 8002a6c:	f06f 0304 	mvn.w	r3, #4
 8002a70:	e0ce      	b.n	8002c10 <send+0x1e0>
   CHECK_SOCKDATA();
 8002a72:	88bb      	ldrh	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d102      	bne.n	8002a7e <send+0x4e>
 8002a78:	f06f 030d 	mvn.w	r3, #13
 8002a7c:	e0c8      	b.n	8002c10 <send+0x1e0>
   tmp = getSn_SR(sn);
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	3301      	adds	r3, #1
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fade 	bl	800204c <WIZCHIP_READ>
 8002a90:	4603      	mov	r3, r0
 8002a92:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b17      	cmp	r3, #23
 8002a98:	d005      	beq.n	8002aa6 <send+0x76>
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b1c      	cmp	r3, #28
 8002a9e:	d002      	beq.n	8002aa6 <send+0x76>
 8002aa0:	f06f 0306 	mvn.w	r3, #6
 8002aa4:	e0b4      	b.n	8002c10 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c18 <send+0x1e8>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	fa42 f303 	asr.w	r3, r2, r3
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d039      	beq.n	8002b2e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	3301      	adds	r3, #1
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fac0 	bl	800204c <WIZCHIP_READ>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d019      	beq.n	8002b12 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002aea:	2110      	movs	r1, #16
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff faf9 	bl	80020e4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2201      	movs	r2, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	b21b      	sxth	r3, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	b21a      	sxth	r2, r3
 8002b00:	4b45      	ldr	r3, [pc, #276]	@ (8002c18 <send+0x1e8>)
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	4013      	ands	r3, r2
 8002b08:	b21b      	sxth	r3, r3
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	4b42      	ldr	r3, [pc, #264]	@ (8002c18 <send+0x1e8>)
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	e00d      	b.n	8002b2e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <send+0xfa>
      {
         close(sn);
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fe48 	bl	80027b4 <close>
         return SOCKERR_TIMEOUT;
 8002b24:	f06f 030c 	mvn.w	r3, #12
 8002b28:	e072      	b.n	8002c10 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e070      	b.n	8002c10 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	3301      	adds	r3, #1
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fa86 	bl	800204c <WIZCHIP_READ>
 8002b40:	4603      	mov	r3, r0
 8002b42:	029b      	lsls	r3, r3, #10
 8002b44:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002b46:	88ba      	ldrh	r2, [r7, #4]
 8002b48:	89bb      	ldrh	r3, [r7, #12]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d901      	bls.n	8002b52 <send+0x122>
 8002b4e:	89bb      	ldrh	r3, [r7, #12]
 8002b50:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fbd3 	bl	8002300 <getSn_TX_FSR>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	3301      	adds	r3, #1
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fa6e 	bl	800204c <WIZCHIP_READ>
 8002b70:	4603      	mov	r3, r0
 8002b72:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b17      	cmp	r3, #23
 8002b78:	d009      	beq.n	8002b8e <send+0x15e>
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b1c      	cmp	r3, #28
 8002b7e:	d006      	beq.n	8002b8e <send+0x15e>
      {
         close(sn);
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fe16 	bl	80027b4 <close>
         return SOCKERR_SOCKSTATUS;
 8002b88:	f06f 0306 	mvn.w	r3, #6
 8002b8c:	e040      	b.n	8002c10 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002b8e:	4b23      	ldr	r3, [pc, #140]	@ (8002c1c <send+0x1ec>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	fa42 f303 	asr.w	r3, r2, r3
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <send+0x17e>
 8002ba2:	88ba      	ldrh	r2, [r7, #4]
 8002ba4:	89bb      	ldrh	r3, [r7, #12]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d901      	bls.n	8002bae <send+0x17e>
 8002baa:	2300      	movs	r3, #0
 8002bac:	e030      	b.n	8002c10 <send+0x1e0>
      if(len <= freesize) break;
 8002bae:	88ba      	ldrh	r2, [r7, #4]
 8002bb0:	89bb      	ldrh	r3, [r7, #12]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d900      	bls.n	8002bb8 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8002bb6:	e7cc      	b.n	8002b52 <send+0x122>
      if(len <= freesize) break;
 8002bb8:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002bba:	88ba      	ldrh	r2, [r7, #4]
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fc2f 	bl	8002424 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	3301      	adds	r3, #1
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002bd2:	2120      	movs	r1, #32
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fa85 	bl	80020e4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002bda:	bf00      	nop
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	3301      	adds	r3, #1
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fa2f 	bl	800204c <WIZCHIP_READ>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f3      	bne.n	8002bdc <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <send+0x1e8>)
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b21b      	sxth	r3, r3
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	4b03      	ldr	r3, [pc, #12]	@ (8002c18 <send+0x1e8>)
 8002c0c:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002c0e:	88bb      	ldrh	r3, [r7, #4]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000562 	.word	0x20000562
 8002c1c:	20000560 	.word	0x20000560

08002c20 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	71fb      	strb	r3, [r7, #7]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d902      	bls.n	8002c44 <recv+0x24>
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c42:	e09b      	b.n	8002d7c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	3301      	adds	r3, #1
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff f9fd 	bl	800204c <WIZCHIP_READ>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d002      	beq.n	8002c62 <recv+0x42>
 8002c5c:	f06f 0304 	mvn.w	r3, #4
 8002c60:	e08c      	b.n	8002d7c <recv+0x15c>
   CHECK_SOCKDATA();
 8002c62:	88bb      	ldrh	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <recv+0x4e>
 8002c68:	f06f 030d 	mvn.w	r3, #13
 8002c6c:	e086      	b.n	8002d7c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	3301      	adds	r3, #1
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff f9e6 	bl	800204c <WIZCHIP_READ>
 8002c80:	4603      	mov	r3, r0
 8002c82:	029b      	lsls	r3, r3, #10
 8002c84:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002c86:	89ba      	ldrh	r2, [r7, #12]
 8002c88:	88bb      	ldrh	r3, [r7, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d201      	bcs.n	8002c92 <recv+0x72>
 8002c8e:	89bb      	ldrh	r3, [r7, #12]
 8002c90:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fb7c 	bl	8002392 <getSn_RX_RSR>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff f9ce 	bl	800204c <WIZCHIP_READ>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b17      	cmp	r3, #23
 8002cb8:	d026      	beq.n	8002d08 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	2b1c      	cmp	r3, #28
 8002cbe:	d11c      	bne.n	8002cfa <recv+0xda>
            {
               if(recvsize != 0) break;
 8002cc0:	89bb      	ldrh	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d133      	bne.n	8002d2e <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fb19 	bl	8002300 <getSn_TX_FSR>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461c      	mov	r4, r3
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f9b4 	bl	800204c <WIZCHIP_READ>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	429c      	cmp	r4, r3
 8002cea:	d10d      	bne.n	8002d08 <recv+0xe8>
               {
                  close(sn);
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fd60 	bl	80027b4 <close>
                  return SOCKERR_SOCKSTATUS;
 8002cf4:	f06f 0306 	mvn.w	r3, #6
 8002cf8:	e040      	b.n	8002d7c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fd59 	bl	80027b4 <close>
               return SOCKERR_SOCKSTATUS;
 8002d02:	f06f 0306 	mvn.w	r3, #6
 8002d06:	e039      	b.n	8002d7c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002d08:	4b1e      	ldr	r3, [pc, #120]	@ (8002d84 <recv+0x164>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	fa42 f303 	asr.w	r3, r2, r3
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d004      	beq.n	8002d26 <recv+0x106>
 8002d1c:	89bb      	ldrh	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <recv+0x106>
 8002d22:	2300      	movs	r3, #0
 8002d24:	e02a      	b.n	8002d7c <recv+0x15c>
         if(recvsize != 0) break;
 8002d26:	89bb      	ldrh	r3, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8002d2c:	e7b1      	b.n	8002c92 <recv+0x72>
               if(recvsize != 0) break;
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <recv+0x114>
         if(recvsize != 0) break;
 8002d32:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002d34:	89ba      	ldrh	r2, [r7, #12]
 8002d36:	88bb      	ldrh	r3, [r7, #4]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d201      	bcs.n	8002d40 <recv+0x120>
 8002d3c:	89bb      	ldrh	r3, [r7, #12]
 8002d3e:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002d40:	88ba      	ldrh	r2, [r7, #4]
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	6839      	ldr	r1, [r7, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fbc6 	bl	80024d8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	3301      	adds	r3, #1
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d58:	2140      	movs	r1, #64	@ 0x40
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff f9c2 	bl	80020e4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002d60:	bf00      	nop
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	3301      	adds	r3, #1
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff f96c 	bl	800204c <WIZCHIP_READ>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f3      	bne.n	8002d62 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002d7a:	88bb      	ldrh	r3, [r7, #4]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd90      	pop	{r4, r7, pc}
 8002d84:	20000560 	.word	0x20000560

08002d88 <ctlsocket>:
   return (int32_t)pack_len;
}


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	603a      	str	r2, [r7, #0]
 8002d92:	71fb      	strb	r3, [r7, #7]
 8002d94:	460b      	mov	r3, r1
 8002d96:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d902      	bls.n	8002da8 <ctlsocket+0x20>
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002da6:	e0c0      	b.n	8002f2a <ctlsocket+0x1a2>
   switch(cstype)
 8002da8:	79bb      	ldrb	r3, [r7, #6]
 8002daa:	2b07      	cmp	r3, #7
 8002dac:	f200 80b9 	bhi.w	8002f22 <ctlsocket+0x19a>
 8002db0:	a201      	add	r2, pc, #4	@ (adr r2, 8002db8 <ctlsocket+0x30>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002dd9 	.word	0x08002dd9
 8002dbc:	08002e2d 	.word	0x08002e2d
 8002dc0:	08002e47 	.word	0x08002e47
 8002dc4:	08002e65 	.word	0x08002e65
 8002dc8:	08002e83 	.word	0x08002e83
 8002dcc:	08002eb3 	.word	0x08002eb3
 8002dd0:	08002ed3 	.word	0x08002ed3
 8002dd4:	08002f03 	.word	0x08002f03
   {
      case CS_SET_IOMODE:
         tmp = *((uint8_t*)arg);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	73fb      	strb	r3, [r7, #15]
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10d      	bne.n	8002e00 <ctlsocket+0x78>
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	2201      	movs	r2, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	b21a      	sxth	r2, r3
 8002dee:	4b51      	ldr	r3, [pc, #324]	@ (8002f34 <ctlsocket+0x1ac>)
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	4313      	orrs	r3, r2
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	4b4e      	ldr	r3, [pc, #312]	@ (8002f34 <ctlsocket+0x1ac>)
 8002dfc:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8002dfe:	e093      	b.n	8002f28 <ctlsocket+0x1a0>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <ctlsocket+0x9e>
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	4b47      	ldr	r3, [pc, #284]	@ (8002f34 <ctlsocket+0x1ac>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	b21b      	sxth	r3, r3
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	b21b      	sxth	r3, r3
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	4b44      	ldr	r3, [pc, #272]	@ (8002f34 <ctlsocket+0x1ac>)
 8002e22:	801a      	strh	r2, [r3, #0]
         break;
 8002e24:	e080      	b.n	8002f28 <ctlsocket+0x1a0>
         else return SOCKERR_ARG;
 8002e26:	f06f 0309 	mvn.w	r3, #9
 8002e2a:	e07e      	b.n	8002f2a <ctlsocket+0x1a2>
      case CS_GET_IOMODE:   
         //M20140501 : implict type casting -> explict type casting
         //*((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 8002e2c:	4b41      	ldr	r3, [pc, #260]	@ (8002f34 <ctlsocket+0x1ac>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	fa42 f303 	asr.w	r3, r2, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	701a      	strb	r2, [r3, #0]
         //
         break;
 8002e44:	e070      	b.n	8002f28 <ctlsocket+0x1a0>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff f8fa 	bl	800204c <WIZCHIP_READ>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	029b      	lsls	r3, r3, #10
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	801a      	strh	r2, [r3, #0]
         break;
 8002e62:	e061      	b.n	8002f28 <ctlsocket+0x1a0>
      case CS_GET_MAXRXBUF:    
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	3301      	adds	r3, #1
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f8eb 	bl	800204c <WIZCHIP_READ>
 8002e76:	4603      	mov	r3, r0
 8002e78:	029b      	lsls	r3, r3, #10
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	801a      	strh	r2, [r3, #0]
         break;
 8002e80:	e052      	b.n	8002f28 <ctlsocket+0x1a0>
      case CS_CLR_INTERRUPT:
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b1f      	cmp	r3, #31
 8002e88:	d902      	bls.n	8002e90 <ctlsocket+0x108>
 8002e8a:	f06f 0309 	mvn.w	r3, #9
 8002e8e:	e04c      	b.n	8002f2a <ctlsocket+0x1a2>
         setSn_IR(sn,*(uint8_t*)arg);
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	3301      	adds	r3, #1
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f7ff f91a 	bl	80020e4 <WIZCHIP_WRITE>
         break;
 8002eb0:	e03a      	b.n	8002f28 <ctlsocket+0x1a0>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff f8c4 	bl	800204c <WIZCHIP_READ>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	701a      	strb	r2, [r3, #0]
         break;
 8002ed0:	e02a      	b.n	8002f28 <ctlsocket+0x1a0>
   #if _WIZCHIP_ != 5100
      case CS_SET_INTMASK:  
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b1f      	cmp	r3, #31
 8002ed8:	d902      	bls.n	8002ee0 <ctlsocket+0x158>
 8002eda:	f06f 0309 	mvn.w	r3, #9
 8002ede:	e024      	b.n	8002f2a <ctlsocket+0x1a2>
         setSn_IMR(sn,*(uint8_t*)arg);
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8002eec:	461a      	mov	r2, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f7ff f8f2 	bl	80020e4 <WIZCHIP_WRITE>
         break;
 8002f00:	e012      	b.n	8002f28 <ctlsocket+0x1a0>
      case CS_GET_INTMASK:   
         *((uint8_t*)arg) = getSn_IMR(sn);
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	3301      	adds	r3, #1
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff f89c 	bl	800204c <WIZCHIP_READ>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	701a      	strb	r2, [r3, #0]
         break;
 8002f20:	e002      	b.n	8002f28 <ctlsocket+0x1a0>
   #endif
      default:
         return SOCKERR_ARG;
 8002f22:	f06f 0309 	mvn.w	r3, #9
 8002f26:	e000      	b.n	8002f2a <ctlsocket+0x1a2>
   }
   return SOCK_OK;
 8002f28:	2301      	movs	r3, #1
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000560 	.word	0x20000560

08002f38 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	70fb      	strb	r3, [r7, #3]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	2300      	movs	r3, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <reg_wizchip_cs_cbfunc+0x16>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <reg_wizchip_cs_cbfunc+0x40>)
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8003014 <reg_wizchip_cs_cbfunc+0x44>)
 8002fea:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002fec:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <reg_wizchip_cs_cbfunc+0x40>)
 8002fee:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <reg_wizchip_cs_cbfunc+0x48>)
 8002ff0:	619a      	str	r2, [r3, #24]
 8002ff2:	e006      	b.n	8003002 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002ff4:	4a06      	ldr	r2, [pc, #24]	@ (8003010 <reg_wizchip_cs_cbfunc+0x40>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002ffa:	4a05      	ldr	r2, [pc, #20]	@ (8003010 <reg_wizchip_cs_cbfunc+0x40>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6193      	str	r3, [r2, #24]
   }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	200000a0 	.word	0x200000a0
 8003014:	08002f55 	.word	0x08002f55
 8003018:	08002f63 	.word	0x08002f63

0800301c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003026:	bf00      	nop
 8003028:	4b0f      	ldr	r3, [pc, #60]	@ (8003068 <reg_wizchip_spi_cbfunc+0x4c>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f9      	beq.n	8003028 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <reg_wizchip_spi_cbfunc+0x24>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <reg_wizchip_spi_cbfunc+0x4c>)
 8003042:	4a0a      	ldr	r2, [pc, #40]	@ (800306c <reg_wizchip_spi_cbfunc+0x50>)
 8003044:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <reg_wizchip_spi_cbfunc+0x4c>)
 8003048:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <reg_wizchip_spi_cbfunc+0x54>)
 800304a:	621a      	str	r2, [r3, #32]
 800304c:	e006      	b.n	800305c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800304e:	4a06      	ldr	r2, [pc, #24]	@ (8003068 <reg_wizchip_spi_cbfunc+0x4c>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003054:	4a04      	ldr	r2, [pc, #16]	@ (8003068 <reg_wizchip_spi_cbfunc+0x4c>)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6213      	str	r3, [r2, #32]
   }
}
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	200000a0 	.word	0x200000a0
 800306c:	08002fa9 	.word	0x08002fa9
 8003070:	08002fb9 	.word	0x08002fb9

08003074 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	2b0f      	cmp	r3, #15
 8003090:	f200 80c5 	bhi.w	800321e <ctlwizchip+0x1aa>
 8003094:	a201      	add	r2, pc, #4	@ (adr r2, 800309c <ctlwizchip+0x28>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030dd 	.word	0x080030dd
 80030a0:	080030e3 	.word	0x080030e3
 80030a4:	0800310f 	.word	0x0800310f
 80030a8:	08003103 	.word	0x08003103
 80030ac:	0800311d 	.word	0x0800311d
 80030b0:	08003129 	.word	0x08003129
 80030b4:	08003137 	.word	0x08003137
 80030b8:	0800315d 	.word	0x0800315d
 80030bc:	0800317f 	.word	0x0800317f
 80030c0:	080031c3 	.word	0x080031c3
 80030c4:	080031c9 	.word	0x080031c9
 80030c8:	080031d1 	.word	0x080031d1
 80030cc:	08003225 	.word	0x08003225
 80030d0:	080031d9 	.word	0x080031d9
 80030d4:	080031e7 	.word	0x080031e7
 80030d8:	08003203 	.word	0x08003203
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80030dc:	f000 f8e8 	bl	80032b0 <wizchip_sw_reset>
         break;
 80030e0:	e0a1      	b.n	8003226 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	3308      	adds	r3, #8
 80030f0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f925 	bl	8003348 <wizchip_init>
 80030fe:	4603      	mov	r3, r0
 8003100:	e092      	b.n	8003228 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f9aa 	bl	8003460 <wizchip_clrinterrupt>
         break;
 800310c:	e08b      	b.n	8003226 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800310e:	f000 f9db 	bl	80034c8 <wizchip_getinterrupt>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	801a      	strh	r2, [r3, #0]
         break;
 800311a:	e084      	b.n	8003226 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 f9f6 	bl	8003512 <wizchip_setinterruptmask>
         break;         
 8003126:	e07e      	b.n	8003226 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003128:	f000 fa0e 	bl	8003548 <wizchip_getinterruptmask>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	801a      	strh	r2, [r3, #0]
         break;
 8003134:	e077      	b.n	8003226 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	b29b      	uxth	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	4619      	mov	r1, r3
 8003142:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003146:	f7fe ffcd 	bl	80020e4 <WIZCHIP_WRITE>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4619      	mov	r1, r3
 8003152:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003156:	f7fe ffc5 	bl	80020e4 <WIZCHIP_WRITE>
         break;
 800315a:	e064      	b.n	8003226 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 800315c:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003160:	f7fe ff74 	bl	800204c <WIZCHIP_READ>
 8003164:	4603      	mov	r3, r0
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	b29c      	uxth	r4, r3
 800316a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800316e:	f7fe ff6d 	bl	800204c <WIZCHIP_READ>
 8003172:	4603      	mov	r3, r0
 8003174:	4423      	add	r3, r4
 8003176:	b29a      	uxth	r2, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	801a      	strh	r2, [r3, #0]
         break;
 800317c:	e053      	b.n	8003226 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800317e:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <ctlwizchip+0x1bc>)
 8003180:	789a      	ldrb	r2, [r3, #2]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	4a29      	ldr	r2, [pc, #164]	@ (8003230 <ctlwizchip+0x1bc>)
 800318c:	78d2      	ldrb	r2, [r2, #3]
 800318e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	3302      	adds	r3, #2
 8003194:	4a26      	ldr	r2, [pc, #152]	@ (8003230 <ctlwizchip+0x1bc>)
 8003196:	7912      	ldrb	r2, [r2, #4]
 8003198:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	3303      	adds	r3, #3
 800319e:	4a24      	ldr	r2, [pc, #144]	@ (8003230 <ctlwizchip+0x1bc>)
 80031a0:	7952      	ldrb	r2, [r2, #5]
 80031a2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4a21      	ldr	r2, [pc, #132]	@ (8003230 <ctlwizchip+0x1bc>)
 80031aa:	7992      	ldrb	r2, [r2, #6]
 80031ac:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	3305      	adds	r3, #5
 80031b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003230 <ctlwizchip+0x1bc>)
 80031b4:	79d2      	ldrb	r2, [r2, #7]
 80031b6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	3306      	adds	r3, #6
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
         break;
 80031c0:	e031      	b.n	8003226 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80031c2:	f000 fa13 	bl	80035ec <wizphy_reset>
         break;
 80031c6:	e02e      	b.n	8003226 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80031c8:	6838      	ldr	r0, [r7, #0]
 80031ca:	f000 fa36 	bl	800363a <wizphy_setphyconf>
         break;
 80031ce:	e02a      	b.n	8003226 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80031d0:	6838      	ldr	r0, [r7, #0]
 80031d2:	f000 fa75 	bl	80036c0 <wizphy_getphyconf>
         break;
 80031d6:	e026      	b.n	8003226 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fad9 	bl	8003794 <wizphy_setphypmode>
 80031e2:	4603      	mov	r3, r0
 80031e4:	e020      	b.n	8003228 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80031e6:	f000 f9e8 	bl	80035ba <wizphy_getphypmode>
 80031ea:	4603      	mov	r3, r0
 80031ec:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2bff      	cmp	r3, #255	@ 0xff
 80031f2:	d102      	bne.n	80031fa <ctlwizchip+0x186>
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031f8:	e016      	b.n	8003228 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	7dfa      	ldrb	r2, [r7, #23]
 80031fe:	701a      	strb	r2, [r3, #0]
         break;
 8003200:	e011      	b.n	8003226 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003202:	f000 f9c4 	bl	800358e <wizphy_getphylink>
 8003206:	4603      	mov	r3, r0
 8003208:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	2bff      	cmp	r3, #255	@ 0xff
 800320e:	d102      	bne.n	8003216 <ctlwizchip+0x1a2>
 8003210:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003214:	e008      	b.n	8003228 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	7dfa      	ldrb	r2, [r7, #23]
 800321a:	701a      	strb	r2, [r3, #0]
         break;
 800321c:	e003      	b.n	8003226 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003222:	e001      	b.n	8003228 <ctlwizchip+0x1b4>
         break;
 8003224:	bf00      	nop
   }
   return 0;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd90      	pop	{r4, r7, pc}
 8003230:	200000a0 	.word	0x200000a0

08003234 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	6039      	str	r1, [r7, #0]
 800323e:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	2b05      	cmp	r3, #5
 8003244:	d82c      	bhi.n	80032a0 <ctlnetwork+0x6c>
 8003246:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <ctlnetwork+0x18>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	08003265 	.word	0x08003265
 8003250:	0800326d 	.word	0x0800326d
 8003254:	08003275 	.word	0x08003275
 8003258:	08003283 	.word	0x08003283
 800325c:	08003291 	.word	0x08003291
 8003260:	08003299 	.word	0x08003299
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003264:	6838      	ldr	r0, [r7, #0]
 8003266:	f000 fadf 	bl	8003828 <wizchip_setnetinfo>
         break;
 800326a:	e01c      	b.n	80032a6 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 800326c:	6838      	ldr	r0, [r7, #0]
 800326e:	f000 fb1b 	bl	80038a8 <wizchip_getnetinfo>
         break;
 8003272:	e018      	b.n	80032a6 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fb55 	bl	8003928 <wizchip_setnetmode>
 800327e:	4603      	mov	r3, r0
 8003280:	e012      	b.n	80032a8 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003282:	f000 fb73 	bl	800396c <wizchip_getnetmode>
 8003286:	4603      	mov	r3, r0
 8003288:	461a      	mov	r2, r3
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	701a      	strb	r2, [r3, #0]
         break;
 800328e:	e00a      	b.n	80032a6 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003290:	6838      	ldr	r0, [r7, #0]
 8003292:	f000 fb73 	bl	800397c <wizchip_settimeout>
         break;
 8003296:	e006      	b.n	80032a6 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003298:	6838      	ldr	r0, [r7, #0]
 800329a:	f000 fb90 	bl	80039be <wizchip_gettimeout>
         break;
 800329e:	e002      	b.n	80032a6 <ctlnetwork+0x72>
      default:
         return -1;
 80032a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032a4:	e000      	b.n	80032a8 <ctlnetwork+0x74>
   }
   return 0;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2206      	movs	r2, #6
 80032ba:	4619      	mov	r1, r3
 80032bc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80032c0:	f7fe ff5e 	bl	8002180 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	2204      	movs	r2, #4
 80032ca:	4619      	mov	r1, r3
 80032cc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80032d0:	f7fe ff56 	bl	8002180 <WIZCHIP_READ_BUF>
 80032d4:	f107 0310 	add.w	r3, r7, #16
 80032d8:	2204      	movs	r2, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80032e0:	f7fe ff4e 	bl	8002180 <WIZCHIP_READ_BUF>
 80032e4:	f107 030c 	add.w	r3, r7, #12
 80032e8:	2204      	movs	r2, #4
 80032ea:	4619      	mov	r1, r3
 80032ec:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80032f0:	f7fe ff46 	bl	8002180 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80032f4:	2180      	movs	r1, #128	@ 0x80
 80032f6:	2000      	movs	r0, #0
 80032f8:	f7fe fef4 	bl	80020e4 <WIZCHIP_WRITE>
   getMR(); // for delay
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7fe fea5 	bl	800204c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	2206      	movs	r2, #6
 8003306:	4619      	mov	r1, r3
 8003308:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800330c:	f7fe ff98 	bl	8002240 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	2204      	movs	r2, #4
 8003316:	4619      	mov	r1, r3
 8003318:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800331c:	f7fe ff90 	bl	8002240 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	2204      	movs	r2, #4
 8003326:	4619      	mov	r1, r3
 8003328:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800332c:	f7fe ff88 	bl	8002240 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	2204      	movs	r2, #4
 8003336:	4619      	mov	r1, r3
 8003338:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800333c:	f7fe ff80 	bl	8002240 <WIZCHIP_WRITE_BUF>
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003356:	f7ff ffab 	bl	80032b0 <wizchip_sw_reset>
   if(txsize)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d03b      	beq.n	80033d8 <wizchip_init+0x90>
   {
      tmp = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
 8003368:	e015      	b.n	8003396 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	781a      	ldrb	r2, [r3, #0]
 8003374:	7bbb      	ldrb	r3, [r7, #14]
 8003376:	4413      	add	r3, r2
 8003378:	b2db      	uxtb	r3, r3
 800337a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800337c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003380:	2b10      	cmp	r3, #16
 8003382:	dd02      	ble.n	800338a <wizchip_init+0x42>
 8003384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003388:	e066      	b.n	8003458 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	3301      	adds	r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339a:	2b07      	cmp	r3, #7
 800339c:	dde5      	ble.n	800336a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
 80033a2:	e015      	b.n	80033d0 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80033a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	3301      	adds	r3, #1
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80033b2:	4618      	mov	r0, r3
 80033b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	4619      	mov	r1, r3
 80033c0:	f7fe fe90 	bl	80020e4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80033c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d4:	2b07      	cmp	r3, #7
 80033d6:	dde5      	ble.n	80033a4 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d03b      	beq.n	8003456 <wizchip_init+0x10e>
   {
      tmp = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	e015      	b.n	8003414 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80033e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	7bbb      	ldrb	r3, [r7, #14]
 80033f4:	4413      	add	r3, r2
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80033fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033fe:	2b10      	cmp	r3, #16
 8003400:	dd02      	ble.n	8003408 <wizchip_init+0xc0>
 8003402:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003406:	e027      	b.n	8003458 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	3301      	adds	r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	73fb      	strb	r3, [r7, #15]
 8003414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003418:	2b07      	cmp	r3, #7
 800341a:	dde5      	ble.n	80033e8 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	e015      	b.n	800344e <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	3301      	adds	r3, #1
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8003430:	4618      	mov	r0, r3
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	4413      	add	r3, r2
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4619      	mov	r1, r3
 800343e:	f7fe fe51 	bl	80020e4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	3301      	adds	r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003452:	2b07      	cmp	r3, #7
 8003454:	dde5      	ble.n	8003422 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	b29b      	uxth	r3, r3
 8003474:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	f023 030f 	bic.w	r3, r3, #15
 800347c:	b2db      	uxtb	r3, r3
 800347e:	4619      	mov	r1, r3
 8003480:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8003484:	f7fe fe2e 	bl	80020e4 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003488:	2300      	movs	r3, #0
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	e014      	b.n	80034b8 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800348e:	7bba      	ldrb	r2, [r7, #14]
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	fa42 f303 	asr.w	r3, r2, r3
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <wizchip_clrinterrupt+0x52>
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	3301      	adds	r3, #1
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80034aa:	211f      	movs	r1, #31
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe fe19 	bl	80020e4 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	3301      	adds	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b07      	cmp	r3, #7
 80034bc:	d9e7      	bls.n	800348e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80034da:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80034de:	f7fe fdb5 	bl	800204c <WIZCHIP_READ>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f023 030f 	bic.w	r3, r3, #15
 80034e8:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80034ea:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 80034ee:	f7fe fdad 	bl	800204c <WIZCHIP_READ>
 80034f2:	4603      	mov	r3, r0
 80034f4:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80034f6:	79bb      	ldrb	r3, [r7, #6]
 80034f8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80034fa:	88bb      	ldrh	r3, [r7, #4]
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	b29a      	uxth	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	b29b      	uxth	r3, r3
 8003504:	4413      	add	r3, r2
 8003506:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003508:	88bb      	ldrh	r3, [r7, #4]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	b29b      	uxth	r3, r3
 8003526:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	4619      	mov	r1, r3
 800352c:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8003530:	f7fe fdd8 	bl	80020e4 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003534:	7bbb      	ldrb	r3, [r7, #14]
 8003536:	4619      	mov	r1, r3
 8003538:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800353c:	f7fe fdd2 	bl	80020e4 <WIZCHIP_WRITE>
#endif   
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800355a:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800355e:	f7fe fd75 	bl	800204c <WIZCHIP_READ>
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003566:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800356a:	f7fe fd6f 	bl	800204c <WIZCHIP_READ>
 800356e:	4603      	mov	r3, r0
 8003570:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003572:	79bb      	ldrb	r3, [r7, #6]
 8003574:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003576:	88bb      	ldrh	r3, [r7, #4]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	b29a      	uxth	r2, r3
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	b29b      	uxth	r3, r3
 8003580:	4413      	add	r3, r2
 8003582:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003584:	88bb      	ldrh	r3, [r7, #4]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003594:	2300      	movs	r3, #0
 8003596:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003598:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800359c:	f7fe fd56 	bl	800204c <WIZCHIP_READ>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80035aa:	2301      	movs	r3, #1
 80035ac:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80035c4:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80035c8:	f7fe fd40 	bl	800204c <WIZCHIP_READ>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035d2:	2b30      	cmp	r3, #48	@ 0x30
 80035d4:	d102      	bne.n	80035dc <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80035d6:	2301      	movs	r3, #1
 80035d8:	71fb      	strb	r3, [r7, #7]
 80035da:	e001      	b.n	80035e0 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80035dc:	2300      	movs	r3, #0
 80035de:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80035f2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80035f6:	f7fe fd29 	bl	800204c <WIZCHIP_READ>
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003604:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	4619      	mov	r1, r3
 800360a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800360e:	f7fe fd69 	bl	80020e4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003612:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8003616:	f7fe fd19 	bl	800204c <WIZCHIP_READ>
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003624:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	4619      	mov	r1, r3
 800362a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800362e:	f7fe fd59 	bl	80020e4 <WIZCHIP_WRITE>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d104      	bne.n	8003658 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	e003      	b.n	8003660 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800365e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d104      	bne.n	8003672 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e019      	b.n	80036a6 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	78db      	ldrb	r3, [r3, #3]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10d      	bne.n	8003696 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	789b      	ldrb	r3, [r3, #2]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d104      	bne.n	800368c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	f043 0318 	orr.w	r3, r3, #24
 8003688:	73fb      	strb	r3, [r7, #15]
 800368a:	e00c      	b.n	80036a6 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	f043 0308 	orr.w	r3, r3, #8
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e007      	b.n	80036a6 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	789b      	ldrb	r3, [r3, #2]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d103      	bne.n	80036a6 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	f043 0310 	orr.w	r3, r3, #16
 80036a4:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	4619      	mov	r1, r3
 80036aa:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80036ae:	f7fe fd19 	bl	80020e4 <WIZCHIP_WRITE>
   wizphy_reset();
 80036b2:	f7ff ff9b 	bl	80035ec <wizphy_reset>
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80036cc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80036d0:	f7fe fcbc 	bl	800204c <WIZCHIP_READ>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	119b      	asrs	r3, r3, #6
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d001      	beq.n	80036f6 <wizphy_getphyconf+0x36>
 80036f2:	2b38      	cmp	r3, #56	@ 0x38
 80036f4:	d103      	bne.n	80036fe <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	705a      	strb	r2, [r3, #1]
         break;
 80036fc:	e003      	b.n	8003706 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	705a      	strb	r2, [r3, #1]
         break;
 8003704:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800370c:	3b10      	subs	r3, #16
 800370e:	2b10      	cmp	r3, #16
 8003710:	bf8c      	ite	hi
 8003712:	2201      	movhi	r2, #1
 8003714:	2200      	movls	r2, #0
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	2a00      	cmp	r2, #0
 800371a:	d10f      	bne.n	800373c <wizphy_getphyconf+0x7c>
 800371c:	4a1b      	ldr	r2, [pc, #108]	@ (800378c <wizphy_getphyconf+0xcc>)
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	bf14      	ite	ne
 800372a:	2301      	movne	r3, #1
 800372c:	2300      	moveq	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	709a      	strb	r2, [r3, #2]
         break;
 800373a:	e003      	b.n	8003744 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	709a      	strb	r2, [r3, #2]
         break;
 8003742:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800374a:	3b08      	subs	r3, #8
 800374c:	2b18      	cmp	r3, #24
 800374e:	bf8c      	ite	hi
 8003750:	2201      	movhi	r2, #1
 8003752:	2200      	movls	r2, #0
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	2a00      	cmp	r2, #0
 8003758:	d10f      	bne.n	800377a <wizphy_getphyconf+0xba>
 800375a:	4a0d      	ldr	r2, [pc, #52]	@ (8003790 <wizphy_getphyconf+0xd0>)
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	70da      	strb	r2, [r3, #3]
         break;
 8003778:	e003      	b.n	8003782 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	70da      	strb	r2, [r3, #3]
         break;
 8003780:	bf00      	nop
   }
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	00010101 	.word	0x00010101
 8003790:	01010001 	.word	0x01010001

08003794 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80037a2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80037a6:	f7fe fc51 	bl	800204c <WIZCHIP_READ>
 80037aa:	4603      	mov	r3, r0
 80037ac:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <wizphy_setphypmode+0x2a>
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037bc:	e030      	b.n	8003820 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80037c4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d104      	bne.n	80037d6 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80037d2:	73fb      	strb	r3, [r7, #15]
 80037d4:	e003      	b.n	80037de <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80037dc:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	4619      	mov	r1, r3
 80037e2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80037e6:	f7fe fc7d 	bl	80020e4 <WIZCHIP_WRITE>
   wizphy_reset();
 80037ea:	f7ff feff 	bl	80035ec <wizphy_reset>
   tmp = getPHYCFGR();
 80037ee:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80037f2:	f7fe fc2b 	bl	800204c <WIZCHIP_READ>
 80037f6:	4603      	mov	r3, r0
 80037f8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d106      	bne.n	800380e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <wizphy_setphypmode+0x88>
 800380a:	2300      	movs	r3, #0
 800380c:	e008      	b.n	8003820 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <wizphy_setphypmode+0x88>
 8003818:	2300      	movs	r3, #0
 800381a:	e001      	b.n	8003820 <wizphy_setphypmode+0x8c>
   }
   return -1;
 800381c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2206      	movs	r2, #6
 8003834:	4619      	mov	r1, r3
 8003836:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800383a:	f7fe fd01 	bl	8002240 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	330e      	adds	r3, #14
 8003842:	2204      	movs	r2, #4
 8003844:	4619      	mov	r1, r3
 8003846:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800384a:	f7fe fcf9 	bl	8002240 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	330a      	adds	r3, #10
 8003852:	2204      	movs	r2, #4
 8003854:	4619      	mov	r1, r3
 8003856:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800385a:	f7fe fcf1 	bl	8002240 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3306      	adds	r3, #6
 8003862:	2204      	movs	r2, #4
 8003864:	4619      	mov	r1, r3
 8003866:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800386a:	f7fe fce9 	bl	8002240 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7c9a      	ldrb	r2, [r3, #18]
 8003872:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <wizchip_setnetinfo+0x78>)
 8003874:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7cda      	ldrb	r2, [r3, #19]
 800387a:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <wizchip_setnetinfo+0x78>)
 800387c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7d1a      	ldrb	r2, [r3, #20]
 8003882:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <wizchip_setnetinfo+0x78>)
 8003884:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7d5a      	ldrb	r2, [r3, #21]
 800388a:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <wizchip_setnetinfo+0x78>)
 800388c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7d9a      	ldrb	r2, [r3, #22]
 8003892:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <wizchip_setnetinfo+0x7c>)
 8003894:	701a      	strb	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	2000057c 	.word	0x2000057c
 80038a4:	20000580 	.word	0x20000580

080038a8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2206      	movs	r2, #6
 80038b4:	4619      	mov	r1, r3
 80038b6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80038ba:	f7fe fc61 	bl	8002180 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	330e      	adds	r3, #14
 80038c2:	2204      	movs	r2, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80038ca:	f7fe fc59 	bl	8002180 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	330a      	adds	r3, #10
 80038d2:	2204      	movs	r2, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80038da:	f7fe fc51 	bl	8002180 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3306      	adds	r3, #6
 80038e2:	2204      	movs	r2, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80038ea:	f7fe fc49 	bl	8002180 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80038ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <wizchip_getnetinfo+0x78>)
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80038f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003920 <wizchip_getnetinfo+0x78>)
 80038f8:	785a      	ldrb	r2, [r3, #1]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <wizchip_getnetinfo+0x78>)
 8003900:	789a      	ldrb	r2, [r3, #2]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003906:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <wizchip_getnetinfo+0x78>)
 8003908:	78da      	ldrb	r2, [r3, #3]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800390e:	4b05      	ldr	r3, [pc, #20]	@ (8003924 <wizchip_getnetinfo+0x7c>)
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	759a      	strb	r2, [r3, #22]
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	2000057c 	.word	0x2000057c
 8003924:	20000580 	.word	0x20000580

08003928 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <wizchip_setnetmode+0x1e>
 8003940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003944:	e00e      	b.n	8003964 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8003946:	2000      	movs	r0, #0
 8003948:	f7fe fb80 	bl	800204c <WIZCHIP_READ>
 800394c:	4603      	mov	r3, r0
 800394e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	4313      	orrs	r3, r2
 8003956:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	4619      	mov	r1, r3
 800395c:	2000      	movs	r0, #0
 800395e:	f7fe fbc1 	bl	80020e4 <WIZCHIP_WRITE>
   return 0;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003970:	2000      	movs	r0, #0
 8003972:	f7fe fb6b 	bl	800204c <WIZCHIP_READ>
 8003976:	4603      	mov	r3, r0
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}

0800397c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	4619      	mov	r1, r3
 800398a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800398e:	f7fe fba9 	bl	80020e4 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	885b      	ldrh	r3, [r3, #2]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	b29b      	uxth	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	4619      	mov	r1, r3
 800399e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80039a2:	f7fe fb9f 	bl	80020e4 <WIZCHIP_WRITE>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	885b      	ldrh	r3, [r3, #2]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	4619      	mov	r1, r3
 80039ae:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80039b2:	f7fe fb97 	bl	80020e4 <WIZCHIP_WRITE>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80039be:	b590      	push	{r4, r7, lr}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80039c6:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80039ca:	f7fe fb3f 	bl	800204c <WIZCHIP_READ>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80039d6:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80039da:	f7fe fb37 	bl	800204c <WIZCHIP_READ>
 80039de:	4603      	mov	r3, r0
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	b29c      	uxth	r4, r3
 80039e4:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80039e8:	f7fe fb30 	bl	800204c <WIZCHIP_READ>
 80039ec:	4603      	mov	r3, r0
 80039ee:	4423      	add	r3, r4
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	805a      	strh	r2, [r3, #2]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd90      	pop	{r4, r7, pc}
	...

08003a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003a04:	f7fe fb10 	bl	8002028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a08:	480c      	ldr	r0, [pc, #48]	@ (8003a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a0a:	490d      	ldr	r1, [pc, #52]	@ (8003a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a10:	e002      	b.n	8003a18 <LoopCopyDataInit>

08003a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a16:	3304      	adds	r3, #4

08003a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a1c:	d3f9      	bcc.n	8003a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a20:	4c0a      	ldr	r4, [pc, #40]	@ (8003a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a24:	e001      	b.n	8003a2a <LoopFillZerobss>

08003a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a28:	3204      	adds	r2, #4

08003a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a2c:	d3fb      	bcc.n	8003a26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a2e:	f008 fcc1 	bl	800c3b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a32:	f7fd f88b 	bl	8000b4c <main>
  bx  lr    
 8003a36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a40:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8003a44:	0800d754 	.word	0x0800d754
  ldr r2, =_sbss
 8003a48:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8003a4c:	20014af8 	.word	0x20014af8

08003a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a50:	e7fe      	b.n	8003a50 <ADC_IRQHandler>
	...

08003a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a58:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <HAL_Init+0x40>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a94 <HAL_Init+0x40>)
 8003a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a64:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <HAL_Init+0x40>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0a      	ldr	r2, [pc, #40]	@ (8003a94 <HAL_Init+0x40>)
 8003a6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a70:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <HAL_Init+0x40>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a07      	ldr	r2, [pc, #28]	@ (8003a94 <HAL_Init+0x40>)
 8003a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a7c:	2003      	movs	r0, #3
 8003a7e:	f000 f8fc 	bl	8003c7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a82:	200f      	movs	r0, #15
 8003a84:	f7fe f9c8 	bl	8001e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a88:	f7fe f808 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40023c00 	.word	0x40023c00

08003a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <HAL_IncTick+0x20>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_IncTick+0x24>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	4a04      	ldr	r2, [pc, #16]	@ (8003abc <HAL_IncTick+0x24>)
 8003aaa:	6013      	str	r3, [r2, #0]
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	200000d0 	.word	0x200000d0
 8003abc:	20000584 	.word	0x20000584

08003ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <HAL_GetTick+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000584 	.word	0x20000584

08003ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7ff ffee 	bl	8003ac0 <HAL_GetTick>
 8003ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003af0:	d005      	beq.n	8003afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003af2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <HAL_Delay+0x44>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003afe:	bf00      	nop
 8003b00:	f7ff ffde 	bl	8003ac0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d8f7      	bhi.n	8003b00 <HAL_Delay+0x28>
  {
  }
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200000d0 	.word	0x200000d0

08003b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b30:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b52:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	60d3      	str	r3, [r2, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b6c:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <__NVIC_GetPriorityGrouping+0x18>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	f003 0307 	and.w	r3, r3, #7
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	db0b      	blt.n	8003bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	4907      	ldr	r1, [pc, #28]	@ (8003bbc <__NVIC_EnableIRQ+0x38>)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000e100 	.word	0xe000e100

08003bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db0a      	blt.n	8003bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	490c      	ldr	r1, [pc, #48]	@ (8003c0c <__NVIC_SetPriority+0x4c>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	0112      	lsls	r2, r2, #4
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	440b      	add	r3, r1
 8003be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be8:	e00a      	b.n	8003c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4908      	ldr	r1, [pc, #32]	@ (8003c10 <__NVIC_SetPriority+0x50>)
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	3b04      	subs	r3, #4
 8003bf8:	0112      	lsls	r2, r2, #4
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	761a      	strb	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000e100 	.word	0xe000e100
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b089      	sub	sp, #36	@ 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f1c3 0307 	rsb	r3, r3, #7
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	bf28      	it	cs
 8003c32:	2304      	movcs	r3, #4
 8003c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d902      	bls.n	8003c44 <NVIC_EncodePriority+0x30>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3b03      	subs	r3, #3
 8003c42:	e000      	b.n	8003c46 <NVIC_EncodePriority+0x32>
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43da      	mvns	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	401a      	ands	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	43d9      	mvns	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c6c:	4313      	orrs	r3, r2
         );
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	@ 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ff4c 	bl	8003b20 <__NVIC_SetPriorityGrouping>
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca2:	f7ff ff61 	bl	8003b68 <__NVIC_GetPriorityGrouping>
 8003ca6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	6978      	ldr	r0, [r7, #20]
 8003cae:	f7ff ffb1 	bl	8003c14 <NVIC_EncodePriority>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff ff80 	bl	8003bc0 <__NVIC_SetPriority>
}
 8003cc0:	bf00      	nop
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff ff54 	bl	8003b84 <__NVIC_EnableIRQ>
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cf0:	f7ff fee6 	bl	8003ac0 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e099      	b.n	8003e34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d20:	e00f      	b.n	8003d42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d22:	f7ff fecd 	bl	8003ac0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b05      	cmp	r3, #5
 8003d2e:	d908      	bls.n	8003d42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2203      	movs	r2, #3
 8003d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e078      	b.n	8003e34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e8      	bne.n	8003d22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4b38      	ldr	r3, [pc, #224]	@ (8003e3c <HAL_DMA_Init+0x158>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d107      	bne.n	8003dac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	4313      	orrs	r3, r2
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f023 0307 	bic.w	r3, r3, #7
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d117      	bne.n	8003e06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00e      	beq.n	8003e06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f9e9 	bl	80041c0 <DMA_CheckFifoParam>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2240      	movs	r2, #64	@ 0x40
 8003df8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003e02:	2301      	movs	r3, #1
 8003e04:	e016      	b.n	8003e34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f9a0 	bl	8004154 <DMA_CalcBaseAndBitshift>
 8003e14:	4603      	mov	r3, r0
 8003e16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1c:	223f      	movs	r2, #63	@ 0x3f
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	f010803f 	.word	0xf010803f

08003e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8004088 <HAL_DMA_IRQHandler+0x248>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a8e      	ldr	r2, [pc, #568]	@ (800408c <HAL_DMA_IRQHandler+0x24c>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0a9b      	lsrs	r3, r3, #10
 8003e58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01a      	beq.n	8003eac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0204 	bic.w	r2, r2, #4
 8003e92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e98:	2208      	movs	r2, #8
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea4:	f043 0201 	orr.w	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d012      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ece:	2201      	movs	r2, #1
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eda:	f043 0202 	orr.w	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d012      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f04:	2204      	movs	r2, #4
 8003f06:	409a      	lsls	r2, r3
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f10:	f043 0204 	orr.w	r2, r3, #4
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d043      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d03c      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d018      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d108      	bne.n	8003f70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d024      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
 8003f6e:	e01f      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
 8003f80:	e016      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d107      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0208 	bic.w	r2, r2, #8
 8003f9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 808f 	beq.w	80040e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8087 	beq.w	80040e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d136      	bne.n	8004058 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0216 	bic.w	r2, r2, #22
 8003ff8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004008:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <HAL_DMA_IRQHandler+0x1da>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0208 	bic.w	r2, r2, #8
 8004028:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402e:	223f      	movs	r2, #63	@ 0x3f
 8004030:	409a      	lsls	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404a:	2b00      	cmp	r3, #0
 800404c:	d07e      	beq.n	800414c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
        }
        return;
 8004056:	e079      	b.n	800414c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01d      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10d      	bne.n	8004090 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004078:	2b00      	cmp	r3, #0
 800407a:	d031      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
 8004084:	e02c      	b.n	80040e0 <HAL_DMA_IRQHandler+0x2a0>
 8004086:	bf00      	nop
 8004088:	20000098 	.word	0x20000098
 800408c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d023      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
 80040a0:	e01e      	b.n	80040e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10f      	bne.n	80040d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0210 	bic.w	r2, r2, #16
 80040be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d032      	beq.n	800414e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d022      	beq.n	800413a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2205      	movs	r2, #5
 80040f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3301      	adds	r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	429a      	cmp	r2, r3
 8004116:	d307      	bcc.n	8004128 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f2      	bne.n	800410c <HAL_DMA_IRQHandler+0x2cc>
 8004126:	e000      	b.n	800412a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004128:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
 800414a:	e000      	b.n	800414e <HAL_DMA_IRQHandler+0x30e>
        return;
 800414c:	bf00      	nop
    }
  }
}
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	3b10      	subs	r3, #16
 8004164:	4a14      	ldr	r2, [pc, #80]	@ (80041b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800416e:	4a13      	ldr	r2, [pc, #76]	@ (80041bc <DMA_CalcBaseAndBitshift+0x68>)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d909      	bls.n	8004196 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	1d1a      	adds	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	659a      	str	r2, [r3, #88]	@ 0x58
 8004194:	e007      	b.n	80041a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	aaaaaaab 	.word	0xaaaaaaab
 80041bc:	0800d6f4 	.word	0x0800d6f4

080041c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11f      	bne.n	800421a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d856      	bhi.n	800428e <DMA_CheckFifoParam+0xce>
 80041e0:	a201      	add	r2, pc, #4	@ (adr r2, 80041e8 <DMA_CheckFifoParam+0x28>)
 80041e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e6:	bf00      	nop
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	0800420b 	.word	0x0800420b
 80041f0:	080041f9 	.word	0x080041f9
 80041f4:	0800428f 	.word	0x0800428f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d046      	beq.n	8004292 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004208:	e043      	b.n	8004292 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004212:	d140      	bne.n	8004296 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004218:	e03d      	b.n	8004296 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004222:	d121      	bne.n	8004268 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d837      	bhi.n	800429a <DMA_CheckFifoParam+0xda>
 800422a:	a201      	add	r2, pc, #4	@ (adr r2, 8004230 <DMA_CheckFifoParam+0x70>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	08004241 	.word	0x08004241
 8004234:	08004247 	.word	0x08004247
 8004238:	08004241 	.word	0x08004241
 800423c:	08004259 	.word	0x08004259
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
      break;
 8004244:	e030      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d025      	beq.n	800429e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004256:	e022      	b.n	800429e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004260:	d11f      	bne.n	80042a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004266:	e01c      	b.n	80042a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d903      	bls.n	8004276 <DMA_CheckFifoParam+0xb6>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d003      	beq.n	800427c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004274:	e018      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
      break;
 800427a:	e015      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00e      	beq.n	80042a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      break;
 800428c:	e00b      	b.n	80042a6 <DMA_CheckFifoParam+0xe6>
      break;
 800428e:	bf00      	nop
 8004290:	e00a      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004292:	bf00      	nop
 8004294:	e008      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004296:	bf00      	nop
 8004298:	e006      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 800429a:	bf00      	nop
 800429c:	e004      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 80042a6:	bf00      	nop
    }
  } 
  
  return status; 
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop

080042b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	@ 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e165      	b.n	80045a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042d4:	2201      	movs	r2, #1
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	f040 8154 	bne.w	800459a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d005      	beq.n	800430a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004306:	2b02      	cmp	r3, #2
 8004308:	d130      	bne.n	800436c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	2203      	movs	r2, #3
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004340:	2201      	movs	r2, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 0201 	and.w	r2, r3, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b03      	cmp	r3, #3
 8004376:	d017      	beq.n	80043a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	2203      	movs	r2, #3
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d123      	bne.n	80043fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	08da      	lsrs	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3208      	adds	r2, #8
 80043bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	220f      	movs	r2, #15
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	08da      	lsrs	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3208      	adds	r2, #8
 80043f6:	69b9      	ldr	r1, [r7, #24]
 80043f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80ae 	beq.w	800459a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b5d      	ldr	r3, [pc, #372]	@ (80045b8 <HAL_GPIO_Init+0x300>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004446:	4a5c      	ldr	r2, [pc, #368]	@ (80045b8 <HAL_GPIO_Init+0x300>)
 8004448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800444c:	6453      	str	r3, [r2, #68]	@ 0x44
 800444e:	4b5a      	ldr	r3, [pc, #360]	@ (80045b8 <HAL_GPIO_Init+0x300>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800445a:	4a58      	ldr	r2, [pc, #352]	@ (80045bc <HAL_GPIO_Init+0x304>)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	3302      	adds	r3, #2
 8004462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	220f      	movs	r2, #15
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a4f      	ldr	r2, [pc, #316]	@ (80045c0 <HAL_GPIO_Init+0x308>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d025      	beq.n	80044d2 <HAL_GPIO_Init+0x21a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a4e      	ldr	r2, [pc, #312]	@ (80045c4 <HAL_GPIO_Init+0x30c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01f      	beq.n	80044ce <HAL_GPIO_Init+0x216>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a4d      	ldr	r2, [pc, #308]	@ (80045c8 <HAL_GPIO_Init+0x310>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d019      	beq.n	80044ca <HAL_GPIO_Init+0x212>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a4c      	ldr	r2, [pc, #304]	@ (80045cc <HAL_GPIO_Init+0x314>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <HAL_GPIO_Init+0x20e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4b      	ldr	r2, [pc, #300]	@ (80045d0 <HAL_GPIO_Init+0x318>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00d      	beq.n	80044c2 <HAL_GPIO_Init+0x20a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4a      	ldr	r2, [pc, #296]	@ (80045d4 <HAL_GPIO_Init+0x31c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d007      	beq.n	80044be <HAL_GPIO_Init+0x206>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a49      	ldr	r2, [pc, #292]	@ (80045d8 <HAL_GPIO_Init+0x320>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d101      	bne.n	80044ba <HAL_GPIO_Init+0x202>
 80044b6:	2306      	movs	r3, #6
 80044b8:	e00c      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044ba:	2307      	movs	r3, #7
 80044bc:	e00a      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044be:	2305      	movs	r3, #5
 80044c0:	e008      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044c2:	2304      	movs	r3, #4
 80044c4:	e006      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044c6:	2303      	movs	r3, #3
 80044c8:	e004      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e002      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <HAL_GPIO_Init+0x21c>
 80044d2:	2300      	movs	r3, #0
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	f002 0203 	and.w	r2, r2, #3
 80044da:	0092      	lsls	r2, r2, #2
 80044dc:	4093      	lsls	r3, r2
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044e4:	4935      	ldr	r1, [pc, #212]	@ (80045bc <HAL_GPIO_Init+0x304>)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	3302      	adds	r3, #2
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044f2:	4b3a      	ldr	r3, [pc, #232]	@ (80045dc <HAL_GPIO_Init+0x324>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004516:	4a31      	ldr	r2, [pc, #196]	@ (80045dc <HAL_GPIO_Init+0x324>)
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800451c:	4b2f      	ldr	r3, [pc, #188]	@ (80045dc <HAL_GPIO_Init+0x324>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004540:	4a26      	ldr	r2, [pc, #152]	@ (80045dc <HAL_GPIO_Init+0x324>)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004546:	4b25      	ldr	r3, [pc, #148]	@ (80045dc <HAL_GPIO_Init+0x324>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	43db      	mvns	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4013      	ands	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800456a:	4a1c      	ldr	r2, [pc, #112]	@ (80045dc <HAL_GPIO_Init+0x324>)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004570:	4b1a      	ldr	r3, [pc, #104]	@ (80045dc <HAL_GPIO_Init+0x324>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	43db      	mvns	r3, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004594:	4a11      	ldr	r2, [pc, #68]	@ (80045dc <HAL_GPIO_Init+0x324>)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3301      	adds	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2b0f      	cmp	r3, #15
 80045a4:	f67f ae96 	bls.w	80042d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	3724      	adds	r7, #36	@ 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40013800 	.word	0x40013800
 80045c0:	40020000 	.word	0x40020000
 80045c4:	40020400 	.word	0x40020400
 80045c8:	40020800 	.word	0x40020800
 80045cc:	40020c00 	.word	0x40020c00
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40021400 	.word	0x40021400
 80045d8:	40021800 	.word	0x40021800
 80045dc:	40013c00 	.word	0x40013c00

080045e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	807b      	strh	r3, [r7, #2]
 80045ec:	4613      	mov	r3, r2
 80045ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045f0:	787b      	ldrb	r3, [r7, #1]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045f6:	887a      	ldrh	r2, [r7, #2]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045fc:	e003      	b.n	8004606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045fe:	887b      	ldrh	r3, [r7, #2]
 8004600:	041a      	lsls	r2, r3, #16
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	619a      	str	r2, [r3, #24]
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	460b      	mov	r3, r1
 800461c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004624:	887a      	ldrh	r2, [r7, #2]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4013      	ands	r3, r2
 800462a:	041a      	lsls	r2, r3, #16
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	43d9      	mvns	r1, r3
 8004630:	887b      	ldrh	r3, [r7, #2]
 8004632:	400b      	ands	r3, r1
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	619a      	str	r2, [r3, #24]
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e12b      	b.n	80048b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fd fa3c 	bl	8001aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2224      	movs	r2, #36	@ 0x24
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800469a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046ac:	f001 f8e2 	bl	8005874 <HAL_RCC_GetPCLK1Freq>
 80046b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4a81      	ldr	r2, [pc, #516]	@ (80048bc <HAL_I2C_Init+0x274>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d807      	bhi.n	80046cc <HAL_I2C_Init+0x84>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4a80      	ldr	r2, [pc, #512]	@ (80048c0 <HAL_I2C_Init+0x278>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	bf94      	ite	ls
 80046c4:	2301      	movls	r3, #1
 80046c6:	2300      	movhi	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	e006      	b.n	80046da <HAL_I2C_Init+0x92>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a7d      	ldr	r2, [pc, #500]	@ (80048c4 <HAL_I2C_Init+0x27c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	bf94      	ite	ls
 80046d4:	2301      	movls	r3, #1
 80046d6:	2300      	movhi	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e0e7      	b.n	80048b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4a78      	ldr	r2, [pc, #480]	@ (80048c8 <HAL_I2C_Init+0x280>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	0c9b      	lsrs	r3, r3, #18
 80046ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4a6a      	ldr	r2, [pc, #424]	@ (80048bc <HAL_I2C_Init+0x274>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d802      	bhi.n	800471c <HAL_I2C_Init+0xd4>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3301      	adds	r3, #1
 800471a:	e009      	b.n	8004730 <HAL_I2C_Init+0xe8>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	4a69      	ldr	r2, [pc, #420]	@ (80048cc <HAL_I2C_Init+0x284>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	3301      	adds	r3, #1
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	430b      	orrs	r3, r1
 8004736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004742:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	495c      	ldr	r1, [pc, #368]	@ (80048bc <HAL_I2C_Init+0x274>)
 800474c:	428b      	cmp	r3, r1
 800474e:	d819      	bhi.n	8004784 <HAL_I2C_Init+0x13c>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1e59      	subs	r1, r3, #1
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	fbb1 f3f3 	udiv	r3, r1, r3
 800475e:	1c59      	adds	r1, r3, #1
 8004760:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004764:	400b      	ands	r3, r1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_I2C_Init+0x138>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1e59      	subs	r1, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	fbb1 f3f3 	udiv	r3, r1, r3
 8004778:	3301      	adds	r3, #1
 800477a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477e:	e051      	b.n	8004824 <HAL_I2C_Init+0x1dc>
 8004780:	2304      	movs	r3, #4
 8004782:	e04f      	b.n	8004824 <HAL_I2C_Init+0x1dc>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d111      	bne.n	80047b0 <HAL_I2C_Init+0x168>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1e58      	subs	r0, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6859      	ldr	r1, [r3, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	440b      	add	r3, r1
 800479a:	fbb0 f3f3 	udiv	r3, r0, r3
 800479e:	3301      	adds	r3, #1
 80047a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf0c      	ite	eq
 80047a8:	2301      	moveq	r3, #1
 80047aa:	2300      	movne	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e012      	b.n	80047d6 <HAL_I2C_Init+0x18e>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1e58      	subs	r0, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6859      	ldr	r1, [r3, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	0099      	lsls	r1, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c6:	3301      	adds	r3, #1
 80047c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_I2C_Init+0x196>
 80047da:	2301      	movs	r3, #1
 80047dc:	e022      	b.n	8004824 <HAL_I2C_Init+0x1dc>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10e      	bne.n	8004804 <HAL_I2C_Init+0x1bc>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1e58      	subs	r0, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6859      	ldr	r1, [r3, #4]
 80047ee:	460b      	mov	r3, r1
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	440b      	add	r3, r1
 80047f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004802:	e00f      	b.n	8004824 <HAL_I2C_Init+0x1dc>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1e58      	subs	r0, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	0099      	lsls	r1, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	fbb0 f3f3 	udiv	r3, r0, r3
 800481a:	3301      	adds	r3, #1
 800481c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004820:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	6809      	ldr	r1, [r1, #0]
 8004828:	4313      	orrs	r3, r2
 800482a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004852:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6911      	ldr	r1, [r2, #16]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68d2      	ldr	r2, [r2, #12]
 800485e:	4311      	orrs	r1, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	430b      	orrs	r3, r1
 8004866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	000186a0 	.word	0x000186a0
 80048c0:	001e847f 	.word	0x001e847f
 80048c4:	003d08ff 	.word	0x003d08ff
 80048c8:	431bde83 	.word	0x431bde83
 80048cc:	10624dd3 	.word	0x10624dd3

080048d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	4608      	mov	r0, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	461a      	mov	r2, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	817b      	strh	r3, [r7, #10]
 80048e2:	460b      	mov	r3, r1
 80048e4:	813b      	strh	r3, [r7, #8]
 80048e6:	4613      	mov	r3, r2
 80048e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ea:	f7ff f8e9 	bl	8003ac0 <HAL_GetTick>
 80048ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	f040 80d9 	bne.w	8004ab0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	2319      	movs	r3, #25
 8004904:	2201      	movs	r2, #1
 8004906:	496d      	ldr	r1, [pc, #436]	@ (8004abc <HAL_I2C_Mem_Write+0x1ec>)
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fc8b 	bl	8005224 <I2C_WaitOnFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004914:	2302      	movs	r3, #2
 8004916:	e0cc      	b.n	8004ab2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_I2C_Mem_Write+0x56>
 8004922:	2302      	movs	r3, #2
 8004924:	e0c5      	b.n	8004ab2 <HAL_I2C_Mem_Write+0x1e2>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d007      	beq.n	800494c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800495a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2221      	movs	r2, #33	@ 0x21
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2240      	movs	r2, #64	@ 0x40
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a3a      	ldr	r2, [r7, #32]
 8004976:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800497c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a4d      	ldr	r2, [pc, #308]	@ (8004ac0 <HAL_I2C_Mem_Write+0x1f0>)
 800498c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800498e:	88f8      	ldrh	r0, [r7, #6]
 8004990:	893a      	ldrh	r2, [r7, #8]
 8004992:	8979      	ldrh	r1, [r7, #10]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	4603      	mov	r3, r0
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fac2 	bl	8004f28 <I2C_RequestMemoryWrite>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d052      	beq.n	8004a50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e081      	b.n	8004ab2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fd50 	bl	8005458 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d107      	bne.n	80049d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e06b      	b.n	8004ab2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d11b      	bne.n	8004a50 <HAL_I2C_Mem_Write+0x180>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1aa      	bne.n	80049ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fd43 	bl	80054e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00d      	beq.n	8004a84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d107      	bne.n	8004a80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e016      	b.n	8004ab2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e000      	b.n	8004ab2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
  }
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	00100002 	.word	0x00100002
 8004ac0:	ffff0000 	.word	0xffff0000

08004ac4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08c      	sub	sp, #48	@ 0x30
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	4608      	mov	r0, r1
 8004ace:	4611      	mov	r1, r2
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	817b      	strh	r3, [r7, #10]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	813b      	strh	r3, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ade:	f7fe ffef 	bl	8003ac0 <HAL_GetTick>
 8004ae2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	f040 8214 	bne.w	8004f1a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	2319      	movs	r3, #25
 8004af8:	2201      	movs	r2, #1
 8004afa:	497b      	ldr	r1, [pc, #492]	@ (8004ce8 <HAL_I2C_Mem_Read+0x224>)
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fb91 	bl	8005224 <I2C_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e207      	b.n	8004f1c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_I2C_Mem_Read+0x56>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e200      	b.n	8004f1c <HAL_I2C_Mem_Read+0x458>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d007      	beq.n	8004b40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2222      	movs	r2, #34	@ 0x22
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2240      	movs	r2, #64	@ 0x40
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8004cec <HAL_I2C_Mem_Read+0x228>)
 8004b80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b82:	88f8      	ldrh	r0, [r7, #6]
 8004b84:	893a      	ldrh	r2, [r7, #8]
 8004b86:	8979      	ldrh	r1, [r7, #10]
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	4603      	mov	r3, r0
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fa5e 	bl	8005054 <I2C_RequestMemoryRead>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1bc      	b.n	8004f1c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d113      	bne.n	8004bd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004baa:	2300      	movs	r3, #0
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	623b      	str	r3, [r7, #32]
 8004bbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e190      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d11b      	bne.n	8004c12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004be8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e170      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d11b      	bne.n	8004c52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	e150      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c68:	e144      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	f200 80f1 	bhi.w	8004e56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d123      	bne.n	8004cc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fc79 	bl	8005578 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e145      	b.n	8004f1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cc2:	e117      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d14e      	bne.n	8004d6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	4906      	ldr	r1, [pc, #24]	@ (8004cf0 <HAL_I2C_Mem_Read+0x22c>)
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 faa4 	bl	8005224 <I2C_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e11a      	b.n	8004f1c <HAL_I2C_Mem_Read+0x458>
 8004ce6:	bf00      	nop
 8004ce8:	00100002 	.word	0x00100002
 8004cec:	ffff0000 	.word	0xffff0000
 8004cf0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d68:	e0c4      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d70:	2200      	movs	r2, #0
 8004d72:	496c      	ldr	r1, [pc, #432]	@ (8004f24 <HAL_I2C_Mem_Read+0x460>)
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fa55 	bl	8005224 <I2C_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0cb      	b.n	8004f1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dcc:	2200      	movs	r2, #0
 8004dce:	4955      	ldr	r1, [pc, #340]	@ (8004f24 <HAL_I2C_Mem_Read+0x460>)
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fa27 	bl	8005224 <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e09d      	b.n	8004f1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e54:	e04e      	b.n	8004ef4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fb8c 	bl	8005578 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e058      	b.n	8004f1c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d124      	bne.n	8004ef4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d107      	bne.n	8004ec2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f47f aeb6 	bne.w	8004c6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e000      	b.n	8004f1c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
  }
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3728      	adds	r7, #40	@ 0x28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	00010004 	.word	0x00010004

08004f28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	4608      	mov	r0, r1
 8004f32:	4611      	mov	r1, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	817b      	strh	r3, [r7, #10]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	813b      	strh	r3, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f960 	bl	8005224 <I2C_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00d      	beq.n	8004f86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f78:	d103      	bne.n	8004f82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e05f      	b.n	8005046 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f86:	897b      	ldrh	r3, [r7, #10]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	6a3a      	ldr	r2, [r7, #32]
 8004f9a:	492d      	ldr	r1, [pc, #180]	@ (8005050 <I2C_RequestMemoryWrite+0x128>)
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f9bb 	bl	8005318 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e04c      	b.n	8005046 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc4:	6a39      	ldr	r1, [r7, #32]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fa46 	bl	8005458 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00d      	beq.n	8004fee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d107      	bne.n	8004fea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fe8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e02b      	b.n	8005046 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d105      	bne.n	8005000 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff4:	893b      	ldrh	r3, [r7, #8]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	611a      	str	r2, [r3, #16]
 8004ffe:	e021      	b.n	8005044 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005000:	893b      	ldrh	r3, [r7, #8]
 8005002:	0a1b      	lsrs	r3, r3, #8
 8005004:	b29b      	uxth	r3, r3
 8005006:	b2da      	uxtb	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800500e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005010:	6a39      	ldr	r1, [r7, #32]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fa20 	bl	8005458 <I2C_WaitOnTXEFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	2b04      	cmp	r3, #4
 8005024:	d107      	bne.n	8005036 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005034:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e005      	b.n	8005046 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800503a:	893b      	ldrh	r3, [r7, #8]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	00010002 	.word	0x00010002

08005054 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	4608      	mov	r0, r1
 800505e:	4611      	mov	r1, r2
 8005060:	461a      	mov	r2, r3
 8005062:	4603      	mov	r3, r0
 8005064:	817b      	strh	r3, [r7, #10]
 8005066:	460b      	mov	r3, r1
 8005068:	813b      	strh	r3, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800507c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800508c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	2200      	movs	r2, #0
 8005096:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f8c2 	bl	8005224 <I2C_WaitOnFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00d      	beq.n	80050c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050b4:	d103      	bne.n	80050be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e0aa      	b.n	8005218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050c2:	897b      	ldrh	r3, [r7, #10]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	461a      	mov	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	6a3a      	ldr	r2, [r7, #32]
 80050d6:	4952      	ldr	r1, [pc, #328]	@ (8005220 <I2C_RequestMemoryRead+0x1cc>)
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f91d 	bl	8005318 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e097      	b.n	8005218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005100:	6a39      	ldr	r1, [r7, #32]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f9a8 	bl	8005458 <I2C_WaitOnTXEFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	2b04      	cmp	r3, #4
 8005114:	d107      	bne.n	8005126 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e076      	b.n	8005218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d105      	bne.n	800513c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005130:	893b      	ldrh	r3, [r7, #8]
 8005132:	b2da      	uxtb	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	611a      	str	r2, [r3, #16]
 800513a:	e021      	b.n	8005180 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800513c:	893b      	ldrh	r3, [r7, #8]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	b29b      	uxth	r3, r3
 8005142:	b2da      	uxtb	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800514a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800514c:	6a39      	ldr	r1, [r7, #32]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f982 	bl	8005458 <I2C_WaitOnTXEFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00d      	beq.n	8005176 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	2b04      	cmp	r3, #4
 8005160:	d107      	bne.n	8005172 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e050      	b.n	8005218 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005176:	893b      	ldrh	r3, [r7, #8]
 8005178:	b2da      	uxtb	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005182:	6a39      	ldr	r1, [r7, #32]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f967 	bl	8005458 <I2C_WaitOnTXEFlagUntilTimeout>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00d      	beq.n	80051ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	2b04      	cmp	r3, #4
 8005196:	d107      	bne.n	80051a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e035      	b.n	8005218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f82b 	bl	8005224 <I2C_WaitOnFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00d      	beq.n	80051f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051e2:	d103      	bne.n	80051ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e013      	b.n	8005218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051f0:	897b      	ldrh	r3, [r7, #10]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	f043 0301 	orr.w	r3, r3, #1
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	4906      	ldr	r1, [pc, #24]	@ (8005220 <I2C_RequestMemoryRead+0x1cc>)
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f886 	bl	8005318 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	00010002 	.word	0x00010002

08005224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005234:	e048      	b.n	80052c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800523c:	d044      	beq.n	80052c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523e:	f7fe fc3f 	bl	8003ac0 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d302      	bcc.n	8005254 <I2C_WaitOnFlagUntilTimeout+0x30>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d139      	bne.n	80052c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	0c1b      	lsrs	r3, r3, #16
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b01      	cmp	r3, #1
 800525c:	d10d      	bne.n	800527a <I2C_WaitOnFlagUntilTimeout+0x56>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	43da      	mvns	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4013      	ands	r3, r2
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	e00c      	b.n	8005294 <I2C_WaitOnFlagUntilTimeout+0x70>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	43da      	mvns	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4013      	ands	r3, r2
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	429a      	cmp	r2, r3
 8005298:	d116      	bne.n	80052c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e023      	b.n	8005310 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d10d      	bne.n	80052ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	43da      	mvns	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4013      	ands	r3, r2
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	bf0c      	ite	eq
 80052e4:	2301      	moveq	r3, #1
 80052e6:	2300      	movne	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	e00c      	b.n	8005308 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	43da      	mvns	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4013      	ands	r3, r2
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	bf0c      	ite	eq
 8005300:	2301      	moveq	r3, #1
 8005302:	2300      	movne	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	429a      	cmp	r2, r3
 800530c:	d093      	beq.n	8005236 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005326:	e071      	b.n	800540c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005336:	d123      	bne.n	8005380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005346:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005350:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536c:	f043 0204 	orr.w	r2, r3, #4
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e067      	b.n	8005450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005386:	d041      	beq.n	800540c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005388:	f7fe fb9a 	bl	8003ac0 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	429a      	cmp	r2, r3
 8005396:	d302      	bcc.n	800539e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d136      	bne.n	800540c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d10c      	bne.n	80053c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	43da      	mvns	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4013      	ands	r3, r2
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	bf14      	ite	ne
 80053ba:	2301      	movne	r3, #1
 80053bc:	2300      	moveq	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	e00b      	b.n	80053da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	43da      	mvns	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4013      	ands	r3, r2
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f8:	f043 0220 	orr.w	r2, r3, #32
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e021      	b.n	8005450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	0c1b      	lsrs	r3, r3, #16
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b01      	cmp	r3, #1
 8005414:	d10c      	bne.n	8005430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	43da      	mvns	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e00b      	b.n	8005448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	43da      	mvns	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf14      	ite	ne
 8005442:	2301      	movne	r3, #1
 8005444:	2300      	moveq	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	f47f af6d 	bne.w	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005464:	e034      	b.n	80054d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f8e3 	bl	8005632 <I2C_IsAcknowledgeFailed>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e034      	b.n	80054e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800547c:	d028      	beq.n	80054d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547e:	f7fe fb1f 	bl	8003ac0 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	429a      	cmp	r2, r3
 800548c:	d302      	bcc.n	8005494 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11d      	bne.n	80054d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549e:	2b80      	cmp	r3, #128	@ 0x80
 80054a0:	d016      	beq.n	80054d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054bc:	f043 0220 	orr.w	r2, r3, #32
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e007      	b.n	80054e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054da:	2b80      	cmp	r3, #128	@ 0x80
 80054dc:	d1c3      	bne.n	8005466 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054f4:	e034      	b.n	8005560 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f89b 	bl	8005632 <I2C_IsAcknowledgeFailed>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e034      	b.n	8005570 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800550c:	d028      	beq.n	8005560 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550e:	f7fe fad7 	bl	8003ac0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11d      	bne.n	8005560 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b04      	cmp	r3, #4
 8005530:	d016      	beq.n	8005560 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e007      	b.n	8005570 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b04      	cmp	r3, #4
 800556c:	d1c3      	bne.n	80054f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005584:	e049      	b.n	800561a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b10      	cmp	r3, #16
 8005592:	d119      	bne.n	80055c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0210 	mvn.w	r2, #16
 800559c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e030      	b.n	800562a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c8:	f7fe fa7a 	bl	8003ac0 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d302      	bcc.n	80055de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d11d      	bne.n	800561a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e8:	2b40      	cmp	r3, #64	@ 0x40
 80055ea:	d016      	beq.n	800561a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	f043 0220 	orr.w	r2, r3, #32
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e007      	b.n	800562a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	d1ae      	bne.n	8005586 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005648:	d11b      	bne.n	8005682 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005652:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	f043 0204 	orr.w	r2, r3, #4
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0cc      	b.n	800583e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056a4:	4b68      	ldr	r3, [pc, #416]	@ (8005848 <HAL_RCC_ClockConfig+0x1b8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d90c      	bls.n	80056cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b2:	4b65      	ldr	r3, [pc, #404]	@ (8005848 <HAL_RCC_ClockConfig+0x1b8>)
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ba:	4b63      	ldr	r3, [pc, #396]	@ (8005848 <HAL_RCC_ClockConfig+0x1b8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0b8      	b.n	800583e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d020      	beq.n	800571a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056e4:	4b59      	ldr	r3, [pc, #356]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	4a58      	ldr	r2, [pc, #352]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056fc:	4b53      	ldr	r3, [pc, #332]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4a52      	ldr	r2, [pc, #328]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005708:	4b50      	ldr	r3, [pc, #320]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	494d      	ldr	r1, [pc, #308]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d044      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572e:	4b47      	ldr	r3, [pc, #284]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d119      	bne.n	800576e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e07f      	b.n	800583e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d003      	beq.n	800574e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800574a:	2b03      	cmp	r3, #3
 800574c:	d107      	bne.n	800575e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574e:	4b3f      	ldr	r3, [pc, #252]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e06f      	b.n	800583e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575e:	4b3b      	ldr	r3, [pc, #236]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e067      	b.n	800583e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800576e:	4b37      	ldr	r3, [pc, #220]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f023 0203 	bic.w	r2, r3, #3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	4934      	ldr	r1, [pc, #208]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 800577c:	4313      	orrs	r3, r2
 800577e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005780:	f7fe f99e 	bl	8003ac0 <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005786:	e00a      	b.n	800579e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005788:	f7fe f99a 	bl	8003ac0 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e04f      	b.n	800583e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579e:	4b2b      	ldr	r3, [pc, #172]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 020c 	and.w	r2, r3, #12
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d1eb      	bne.n	8005788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057b0:	4b25      	ldr	r3, [pc, #148]	@ (8005848 <HAL_RCC_ClockConfig+0x1b8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d20c      	bcs.n	80057d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057be:	4b22      	ldr	r3, [pc, #136]	@ (8005848 <HAL_RCC_ClockConfig+0x1b8>)
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c6:	4b20      	ldr	r3, [pc, #128]	@ (8005848 <HAL_RCC_ClockConfig+0x1b8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d001      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e032      	b.n	800583e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e4:	4b19      	ldr	r3, [pc, #100]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4916      	ldr	r1, [pc, #88]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005802:	4b12      	ldr	r3, [pc, #72]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	490e      	ldr	r1, [pc, #56]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	4313      	orrs	r3, r2
 8005814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005816:	f000 f887 	bl	8005928 <HAL_RCC_GetSysClockFreq>
 800581a:	4602      	mov	r2, r0
 800581c:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	091b      	lsrs	r3, r3, #4
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	490a      	ldr	r1, [pc, #40]	@ (8005850 <HAL_RCC_ClockConfig+0x1c0>)
 8005828:	5ccb      	ldrb	r3, [r1, r3]
 800582a:	fa22 f303 	lsr.w	r3, r2, r3
 800582e:	4a09      	ldr	r2, [pc, #36]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 8005830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005832:	4b09      	ldr	r3, [pc, #36]	@ (8005858 <HAL_RCC_ClockConfig+0x1c8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f7fc faee 	bl	8001e18 <HAL_InitTick>

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40023c00 	.word	0x40023c00
 800584c:	40023800 	.word	0x40023800
 8005850:	0800d6dc 	.word	0x0800d6dc
 8005854:	20000098 	.word	0x20000098
 8005858:	200000cc 	.word	0x200000cc

0800585c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005860:	4b03      	ldr	r3, [pc, #12]	@ (8005870 <HAL_RCC_GetHCLKFreq+0x14>)
 8005862:	681b      	ldr	r3, [r3, #0]
}
 8005864:	4618      	mov	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20000098 	.word	0x20000098

08005874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005878:	f7ff fff0 	bl	800585c <HAL_RCC_GetHCLKFreq>
 800587c:	4602      	mov	r2, r0
 800587e:	4b05      	ldr	r3, [pc, #20]	@ (8005894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	0a9b      	lsrs	r3, r3, #10
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	4903      	ldr	r1, [pc, #12]	@ (8005898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800588a:	5ccb      	ldrb	r3, [r1, r3]
 800588c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005890:	4618      	mov	r0, r3
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40023800 	.word	0x40023800
 8005898:	0800d6ec 	.word	0x0800d6ec

0800589c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058a0:	f7ff ffdc 	bl	800585c <HAL_RCC_GetHCLKFreq>
 80058a4:	4602      	mov	r2, r0
 80058a6:	4b05      	ldr	r3, [pc, #20]	@ (80058bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	0b5b      	lsrs	r3, r3, #13
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	4903      	ldr	r1, [pc, #12]	@ (80058c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058b2:	5ccb      	ldrb	r3, [r1, r3]
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40023800 	.word	0x40023800
 80058c0:	0800d6ec 	.word	0x0800d6ec

080058c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	220f      	movs	r2, #15
 80058d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058d4:	4b12      	ldr	r3, [pc, #72]	@ (8005920 <HAL_RCC_GetClockConfig+0x5c>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 0203 	and.w	r2, r3, #3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005920 <HAL_RCC_GetClockConfig+0x5c>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <HAL_RCC_GetClockConfig+0x5c>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80058f8:	4b09      	ldr	r3, [pc, #36]	@ (8005920 <HAL_RCC_GetClockConfig+0x5c>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	08db      	lsrs	r3, r3, #3
 80058fe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005906:	4b07      	ldr	r3, [pc, #28]	@ (8005924 <HAL_RCC_GetClockConfig+0x60>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 020f 	and.w	r2, r3, #15
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	601a      	str	r2, [r3, #0]
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40023800 	.word	0x40023800
 8005924:	40023c00 	.word	0x40023c00

08005928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800592c:	b0ae      	sub	sp, #184	@ 0xb8
 800592e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800594e:	4bcb      	ldr	r3, [pc, #812]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b0c      	cmp	r3, #12
 8005958:	f200 8204 	bhi.w	8005d64 <HAL_RCC_GetSysClockFreq+0x43c>
 800595c:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <HAL_RCC_GetSysClockFreq+0x3c>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005999 	.word	0x08005999
 8005968:	08005d65 	.word	0x08005d65
 800596c:	08005d65 	.word	0x08005d65
 8005970:	08005d65 	.word	0x08005d65
 8005974:	080059a1 	.word	0x080059a1
 8005978:	08005d65 	.word	0x08005d65
 800597c:	08005d65 	.word	0x08005d65
 8005980:	08005d65 	.word	0x08005d65
 8005984:	080059a9 	.word	0x080059a9
 8005988:	08005d65 	.word	0x08005d65
 800598c:	08005d65 	.word	0x08005d65
 8005990:	08005d65 	.word	0x08005d65
 8005994:	08005b99 	.word	0x08005b99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005998:	4bb9      	ldr	r3, [pc, #740]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x358>)
 800599a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800599e:	e1e5      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059a0:	4bb7      	ldr	r3, [pc, #732]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x358>)
 80059a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80059a6:	e1e1      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059a8:	4bb4      	ldr	r3, [pc, #720]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059b4:	4bb1      	ldr	r3, [pc, #708]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d071      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c0:	4bae      	ldr	r3, [pc, #696]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	099b      	lsrs	r3, r3, #6
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80059d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059dc:	2300      	movs	r3, #0
 80059de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059e6:	4622      	mov	r2, r4
 80059e8:	462b      	mov	r3, r5
 80059ea:	f04f 0000 	mov.w	r0, #0
 80059ee:	f04f 0100 	mov.w	r1, #0
 80059f2:	0159      	lsls	r1, r3, #5
 80059f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059f8:	0150      	lsls	r0, r2, #5
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4621      	mov	r1, r4
 8005a00:	1a51      	subs	r1, r2, r1
 8005a02:	6439      	str	r1, [r7, #64]	@ 0x40
 8005a04:	4629      	mov	r1, r5
 8005a06:	eb63 0301 	sbc.w	r3, r3, r1
 8005a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005a18:	4649      	mov	r1, r9
 8005a1a:	018b      	lsls	r3, r1, #6
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a22:	4641      	mov	r1, r8
 8005a24:	018a      	lsls	r2, r1, #6
 8005a26:	4641      	mov	r1, r8
 8005a28:	1a51      	subs	r1, r2, r1
 8005a2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8005a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005a40:	4649      	mov	r1, r9
 8005a42:	00cb      	lsls	r3, r1, #3
 8005a44:	4641      	mov	r1, r8
 8005a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	00ca      	lsls	r2, r1, #3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4619      	mov	r1, r3
 8005a52:	4603      	mov	r3, r0
 8005a54:	4622      	mov	r2, r4
 8005a56:	189b      	adds	r3, r3, r2
 8005a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a5a:	462b      	mov	r3, r5
 8005a5c:	460a      	mov	r2, r1
 8005a5e:	eb42 0303 	adc.w	r3, r2, r3
 8005a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005a70:	4629      	mov	r1, r5
 8005a72:	028b      	lsls	r3, r1, #10
 8005a74:	4621      	mov	r1, r4
 8005a76:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	028a      	lsls	r2, r1, #10
 8005a7e:	4610      	mov	r0, r2
 8005a80:	4619      	mov	r1, r3
 8005a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005a94:	f7fa fc6c 	bl	8000370 <__aeabi_uldivmod>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aa2:	e067      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa4:	4b75      	ldr	r3, [pc, #468]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	099b      	lsrs	r3, r3, #6
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ab0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005abe:	2300      	movs	r3, #0
 8005ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ac2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	f04f 0000 	mov.w	r0, #0
 8005ace:	f04f 0100 	mov.w	r1, #0
 8005ad2:	0159      	lsls	r1, r3, #5
 8005ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ad8:	0150      	lsls	r0, r2, #5
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4621      	mov	r1, r4
 8005ae0:	1a51      	subs	r1, r2, r1
 8005ae2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8005aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005af8:	4649      	mov	r1, r9
 8005afa:	018b      	lsls	r3, r1, #6
 8005afc:	4641      	mov	r1, r8
 8005afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b02:	4641      	mov	r1, r8
 8005b04:	018a      	lsls	r2, r1, #6
 8005b06:	4641      	mov	r1, r8
 8005b08:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b26:	4692      	mov	sl, r2
 8005b28:	469b      	mov	fp, r3
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	eb1a 0303 	adds.w	r3, sl, r3
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	462b      	mov	r3, r5
 8005b34:	eb4b 0303 	adc.w	r3, fp, r3
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005b46:	4629      	mov	r1, r5
 8005b48:	028b      	lsls	r3, r1, #10
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b50:	4621      	mov	r1, r4
 8005b52:	028a      	lsls	r2, r1, #10
 8005b54:	4610      	mov	r0, r2
 8005b56:	4619      	mov	r1, r3
 8005b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b60:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005b66:	f7fa fc03 	bl	8000370 <__aeabi_uldivmod>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4613      	mov	r3, r2
 8005b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b74:	4b41      	ldr	r3, [pc, #260]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	0c1b      	lsrs	r3, r3, #16
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	3301      	adds	r3, #1
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8005b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b96:	e0e9      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b98:	4b38      	ldr	r3, [pc, #224]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ba4:	4b35      	ldr	r3, [pc, #212]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d069      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb0:	4b32      	ldr	r3, [pc, #200]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	099b      	lsrs	r3, r3, #6
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005bcc:	4622      	mov	r2, r4
 8005bce:	462b      	mov	r3, r5
 8005bd0:	f04f 0000 	mov.w	r0, #0
 8005bd4:	f04f 0100 	mov.w	r1, #0
 8005bd8:	0159      	lsls	r1, r3, #5
 8005bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bde:	0150      	lsls	r0, r2, #5
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4621      	mov	r1, r4
 8005be6:	1a51      	subs	r1, r2, r1
 8005be8:	61b9      	str	r1, [r7, #24]
 8005bea:	4629      	mov	r1, r5
 8005bec:	eb63 0301 	sbc.w	r3, r3, r1
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	f04f 0300 	mov.w	r3, #0
 8005bfa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005bfe:	4659      	mov	r1, fp
 8005c00:	018b      	lsls	r3, r1, #6
 8005c02:	4651      	mov	r1, sl
 8005c04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c08:	4651      	mov	r1, sl
 8005c0a:	018a      	lsls	r2, r1, #6
 8005c0c:	4651      	mov	r1, sl
 8005c0e:	ebb2 0801 	subs.w	r8, r2, r1
 8005c12:	4659      	mov	r1, fp
 8005c14:	eb63 0901 	sbc.w	r9, r3, r1
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c2c:	4690      	mov	r8, r2
 8005c2e:	4699      	mov	r9, r3
 8005c30:	4623      	mov	r3, r4
 8005c32:	eb18 0303 	adds.w	r3, r8, r3
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	462b      	mov	r3, r5
 8005c3a:	eb49 0303 	adc.w	r3, r9, r3
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	028b      	lsls	r3, r1, #10
 8005c50:	4621      	mov	r1, r4
 8005c52:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c56:	4621      	mov	r1, r4
 8005c58:	028a      	lsls	r2, r1, #10
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c62:	2200      	movs	r2, #0
 8005c64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005c68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c6c:	f7fa fb80 	bl	8000370 <__aeabi_uldivmod>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4613      	mov	r3, r2
 8005c76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c7a:	e063      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x41c>
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c84:	4b3d      	ldr	r3, [pc, #244]	@ (8005d7c <HAL_RCC_GetSysClockFreq+0x454>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	099b      	lsrs	r3, r3, #6
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	4611      	mov	r1, r2
 8005c90:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c94:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c96:	2300      	movs	r3, #0
 8005c98:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c9a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f04f 0100 	mov.w	r1, #0
 8005caa:	0159      	lsls	r1, r3, #5
 8005cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cb0:	0150      	lsls	r0, r2, #5
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4641      	mov	r1, r8
 8005cb8:	1a51      	subs	r1, r2, r1
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005cd0:	4659      	mov	r1, fp
 8005cd2:	018b      	lsls	r3, r1, #6
 8005cd4:	4651      	mov	r1, sl
 8005cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cda:	4651      	mov	r1, sl
 8005cdc:	018a      	lsls	r2, r1, #6
 8005cde:	4651      	mov	r1, sl
 8005ce0:	1a54      	subs	r4, r2, r1
 8005ce2:	4659      	mov	r1, fp
 8005ce4:	eb63 0501 	sbc.w	r5, r3, r1
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	00eb      	lsls	r3, r5, #3
 8005cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cf6:	00e2      	lsls	r2, r4, #3
 8005cf8:	4614      	mov	r4, r2
 8005cfa:	461d      	mov	r5, r3
 8005cfc:	4643      	mov	r3, r8
 8005cfe:	18e3      	adds	r3, r4, r3
 8005d00:	603b      	str	r3, [r7, #0]
 8005d02:	464b      	mov	r3, r9
 8005d04:	eb45 0303 	adc.w	r3, r5, r3
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d16:	4629      	mov	r1, r5
 8005d18:	028b      	lsls	r3, r1, #10
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d20:	4621      	mov	r1, r4
 8005d22:	028a      	lsls	r2, r1, #10
 8005d24:	4610      	mov	r0, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d30:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005d32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d36:	f7fa fb1b 	bl	8000370 <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4613      	mov	r3, r2
 8005d40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005d44:	4b0d      	ldr	r3, [pc, #52]	@ (8005d7c <HAL_RCC_GetSysClockFreq+0x454>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	0f1b      	lsrs	r3, r3, #28
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8005d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d62:	e003      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d64:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x458>)
 8005d66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	37b8      	adds	r7, #184	@ 0xb8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	00f42400 	.word	0x00f42400

08005d84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e28d      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8083 	beq.w	8005eaa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005da4:	4b94      	ldr	r3, [pc, #592]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 030c 	and.w	r3, r3, #12
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d019      	beq.n	8005de4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005db0:	4b91      	ldr	r3, [pc, #580]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d106      	bne.n	8005dca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dc8:	d00c      	beq.n	8005de4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dca:	4b8b      	ldr	r3, [pc, #556]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005dd2:	2b0c      	cmp	r3, #12
 8005dd4:	d112      	bne.n	8005dfc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dd6:	4b88      	ldr	r3, [pc, #544]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005de2:	d10b      	bne.n	8005dfc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de4:	4b84      	ldr	r3, [pc, #528]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d05b      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x124>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d157      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e25a      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e04:	d106      	bne.n	8005e14 <HAL_RCC_OscConfig+0x90>
 8005e06:	4b7c      	ldr	r3, [pc, #496]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a7b      	ldr	r2, [pc, #492]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e01d      	b.n	8005e50 <HAL_RCC_OscConfig+0xcc>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0xb4>
 8005e1e:	4b76      	ldr	r3, [pc, #472]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a75      	ldr	r2, [pc, #468]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b73      	ldr	r3, [pc, #460]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a72      	ldr	r2, [pc, #456]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e00b      	b.n	8005e50 <HAL_RCC_OscConfig+0xcc>
 8005e38:	4b6f      	ldr	r3, [pc, #444]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a6e      	ldr	r2, [pc, #440]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	4b6c      	ldr	r3, [pc, #432]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a6b      	ldr	r2, [pc, #428]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d013      	beq.n	8005e80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fd fe32 	bl	8003ac0 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e60:	f7fd fe2e 	bl	8003ac0 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	@ 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e21f      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e72:	4b61      	ldr	r3, [pc, #388]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0xdc>
 8005e7e:	e014      	b.n	8005eaa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fd fe1e 	bl	8003ac0 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e88:	f7fd fe1a 	bl	8003ac0 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	@ 0x64
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e20b      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9a:	4b57      	ldr	r3, [pc, #348]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x104>
 8005ea6:	e000      	b.n	8005eaa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d06f      	beq.n	8005f96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005eb6:	4b50      	ldr	r3, [pc, #320]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d017      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ec2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d105      	bne.n	8005eda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ece:	4b4a      	ldr	r3, [pc, #296]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00b      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eda:	4b47      	ldr	r3, [pc, #284]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d11c      	bne.n	8005f20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ee6:	4b44      	ldr	r3, [pc, #272]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d116      	bne.n	8005f20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ef2:	4b41      	ldr	r3, [pc, #260]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <HAL_RCC_OscConfig+0x186>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d001      	beq.n	8005f0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e1d3      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4937      	ldr	r1, [pc, #220]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1e:	e03a      	b.n	8005f96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d020      	beq.n	8005f6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f28:	4b34      	ldr	r3, [pc, #208]	@ (8005ffc <HAL_RCC_OscConfig+0x278>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2e:	f7fd fdc7 	bl	8003ac0 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f36:	f7fd fdc3 	bl	8003ac0 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e1b4      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f48:	4b2b      	ldr	r3, [pc, #172]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0f0      	beq.n	8005f36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f54:	4b28      	ldr	r3, [pc, #160]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	4925      	ldr	r1, [pc, #148]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	600b      	str	r3, [r1, #0]
 8005f68:	e015      	b.n	8005f96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f6a:	4b24      	ldr	r3, [pc, #144]	@ (8005ffc <HAL_RCC_OscConfig+0x278>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f7fd fda6 	bl	8003ac0 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f78:	f7fd fda2 	bl	8003ac0 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e193      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d036      	beq.n	8006010 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d016      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005faa:	4b15      	ldr	r3, [pc, #84]	@ (8006000 <HAL_RCC_OscConfig+0x27c>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb0:	f7fd fd86 	bl	8003ac0 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fb8:	f7fd fd82 	bl	8003ac0 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e173      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff8 <HAL_RCC_OscConfig+0x274>)
 8005fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f0      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x234>
 8005fd6:	e01b      	b.n	8006010 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fd8:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <HAL_RCC_OscConfig+0x27c>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fde:	f7fd fd6f 	bl	8003ac0 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe4:	e00e      	b.n	8006004 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fe6:	f7fd fd6b 	bl	8003ac0 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d907      	bls.n	8006004 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e15c      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	42470000 	.word	0x42470000
 8006000:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006004:	4b8a      	ldr	r3, [pc, #552]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1ea      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8097 	beq.w	800614c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800601e:	2300      	movs	r3, #0
 8006020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006022:	4b83      	ldr	r3, [pc, #524]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10f      	bne.n	800604e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800602e:	2300      	movs	r3, #0
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	4b7f      	ldr	r3, [pc, #508]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006036:	4a7e      	ldr	r2, [pc, #504]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800603c:	6413      	str	r3, [r2, #64]	@ 0x40
 800603e:	4b7c      	ldr	r3, [pc, #496]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800604a:	2301      	movs	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800604e:	4b79      	ldr	r3, [pc, #484]	@ (8006234 <HAL_RCC_OscConfig+0x4b0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d118      	bne.n	800608c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800605a:	4b76      	ldr	r3, [pc, #472]	@ (8006234 <HAL_RCC_OscConfig+0x4b0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a75      	ldr	r2, [pc, #468]	@ (8006234 <HAL_RCC_OscConfig+0x4b0>)
 8006060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006066:	f7fd fd2b 	bl	8003ac0 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606e:	f7fd fd27 	bl	8003ac0 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e118      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006080:	4b6c      	ldr	r3, [pc, #432]	@ (8006234 <HAL_RCC_OscConfig+0x4b0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0f0      	beq.n	800606e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d106      	bne.n	80060a2 <HAL_RCC_OscConfig+0x31e>
 8006094:	4b66      	ldr	r3, [pc, #408]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006098:	4a65      	ldr	r2, [pc, #404]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6713      	str	r3, [r2, #112]	@ 0x70
 80060a0:	e01c      	b.n	80060dc <HAL_RCC_OscConfig+0x358>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b05      	cmp	r3, #5
 80060a8:	d10c      	bne.n	80060c4 <HAL_RCC_OscConfig+0x340>
 80060aa:	4b61      	ldr	r3, [pc, #388]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ae:	4a60      	ldr	r2, [pc, #384]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 80060b0:	f043 0304 	orr.w	r3, r3, #4
 80060b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060b6:	4b5e      	ldr	r3, [pc, #376]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ba:	4a5d      	ldr	r2, [pc, #372]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060c2:	e00b      	b.n	80060dc <HAL_RCC_OscConfig+0x358>
 80060c4:	4b5a      	ldr	r3, [pc, #360]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 80060c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c8:	4a59      	ldr	r2, [pc, #356]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d0:	4b57      	ldr	r3, [pc, #348]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 80060d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d4:	4a56      	ldr	r2, [pc, #344]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 80060d6:	f023 0304 	bic.w	r3, r3, #4
 80060da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d015      	beq.n	8006110 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e4:	f7fd fcec 	bl	8003ac0 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ea:	e00a      	b.n	8006102 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ec:	f7fd fce8 	bl	8003ac0 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e0d7      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006102:	4b4b      	ldr	r3, [pc, #300]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ee      	beq.n	80060ec <HAL_RCC_OscConfig+0x368>
 800610e:	e014      	b.n	800613a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006110:	f7fd fcd6 	bl	8003ac0 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006116:	e00a      	b.n	800612e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006118:	f7fd fcd2 	bl	8003ac0 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006126:	4293      	cmp	r3, r2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e0c1      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800612e:	4b40      	ldr	r3, [pc, #256]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1ee      	bne.n	8006118 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d105      	bne.n	800614c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006140:	4b3b      	ldr	r3, [pc, #236]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006144:	4a3a      	ldr	r2, [pc, #232]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800614a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80ad 	beq.w	80062b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006156:	4b36      	ldr	r3, [pc, #216]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	2b08      	cmp	r3, #8
 8006160:	d060      	beq.n	8006224 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d145      	bne.n	80061f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800616a:	4b33      	ldr	r3, [pc, #204]	@ (8006238 <HAL_RCC_OscConfig+0x4b4>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006170:	f7fd fca6 	bl	8003ac0 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006178:	f7fd fca2 	bl	8003ac0 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e093      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618a:	4b29      	ldr	r3, [pc, #164]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1f0      	bne.n	8006178 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69da      	ldr	r2, [r3, #28]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	019b      	lsls	r3, r3, #6
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	3b01      	subs	r3, #1
 80061b0:	041b      	lsls	r3, r3, #16
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	061b      	lsls	r3, r3, #24
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c0:	071b      	lsls	r3, r3, #28
 80061c2:	491b      	ldr	r1, [pc, #108]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006238 <HAL_RCC_OscConfig+0x4b4>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ce:	f7fd fc77 	bl	8003ac0 <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d6:	f7fd fc73 	bl	8003ac0 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e064      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061e8:	4b11      	ldr	r3, [pc, #68]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0f0      	beq.n	80061d6 <HAL_RCC_OscConfig+0x452>
 80061f4:	e05c      	b.n	80062b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f6:	4b10      	ldr	r3, [pc, #64]	@ (8006238 <HAL_RCC_OscConfig+0x4b4>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fc:	f7fd fc60 	bl	8003ac0 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006204:	f7fd fc5c 	bl	8003ac0 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e04d      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006216:	4b06      	ldr	r3, [pc, #24]	@ (8006230 <HAL_RCC_OscConfig+0x4ac>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f0      	bne.n	8006204 <HAL_RCC_OscConfig+0x480>
 8006222:	e045      	b.n	80062b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d107      	bne.n	800623c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e040      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
 8006230:	40023800 	.word	0x40023800
 8006234:	40007000 	.word	0x40007000
 8006238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800623c:	4b1f      	ldr	r3, [pc, #124]	@ (80062bc <HAL_RCC_OscConfig+0x538>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d030      	beq.n	80062ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006254:	429a      	cmp	r2, r3
 8006256:	d129      	bne.n	80062ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006262:	429a      	cmp	r2, r3
 8006264:	d122      	bne.n	80062ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800626c:	4013      	ands	r3, r2
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006272:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006274:	4293      	cmp	r3, r2
 8006276:	d119      	bne.n	80062ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006282:	085b      	lsrs	r3, r3, #1
 8006284:	3b01      	subs	r3, #1
 8006286:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006288:	429a      	cmp	r2, r3
 800628a:	d10f      	bne.n	80062ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006296:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006298:	429a      	cmp	r2, r3
 800629a:	d107      	bne.n	80062ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40023800 	.word	0x40023800

080062c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e07b      	b.n	80063ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d108      	bne.n	80062ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062e2:	d009      	beq.n	80062f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	61da      	str	r2, [r3, #28]
 80062ea:	e005      	b.n	80062f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fb fc98 	bl	8001c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800632e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637c:	ea42 0103 	orr.w	r1, r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006384:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	0c1b      	lsrs	r3, r3, #16
 8006396:	f003 0104 	and.w	r1, r3, #4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	f003 0210 	and.w	r2, r3, #16
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b08c      	sub	sp, #48	@ 0x30
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
 80063de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063e0:	2301      	movs	r3, #1
 80063e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x26>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e198      	b.n	800672a <HAL_SPI_TransmitReceive+0x358>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006400:	f7fd fb5e 	bl	8003ac0 <HAL_GetTick>
 8006404:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800640c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006416:	887b      	ldrh	r3, [r7, #2]
 8006418:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800641a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800641e:	2b01      	cmp	r3, #1
 8006420:	d00f      	beq.n	8006442 <HAL_SPI_TransmitReceive+0x70>
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006428:	d107      	bne.n	800643a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d103      	bne.n	800643a <HAL_SPI_TransmitReceive+0x68>
 8006432:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006436:	2b04      	cmp	r3, #4
 8006438:	d003      	beq.n	8006442 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800643a:	2302      	movs	r3, #2
 800643c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006440:	e16d      	b.n	800671e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x82>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x82>
 800644e:	887b      	ldrh	r3, [r7, #2]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d103      	bne.n	800645c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800645a:	e160      	b.n	800671e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b04      	cmp	r3, #4
 8006466:	d003      	beq.n	8006470 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2205      	movs	r2, #5
 800646c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	887a      	ldrh	r2, [r7, #2]
 8006480:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	887a      	ldrh	r2, [r7, #2]
 8006486:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	887a      	ldrh	r2, [r7, #2]
 8006492:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	887a      	ldrh	r2, [r7, #2]
 8006498:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b0:	2b40      	cmp	r3, #64	@ 0x40
 80064b2:	d007      	beq.n	80064c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064cc:	d17c      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <HAL_SPI_TransmitReceive+0x10a>
 80064d6:	8b7b      	ldrh	r3, [r7, #26]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d16a      	bne.n	80065b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e0:	881a      	ldrh	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ec:	1c9a      	adds	r2, r3, #2
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006500:	e057      	b.n	80065b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b02      	cmp	r3, #2
 800650e:	d11b      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x176>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d016      	beq.n	8006548 <HAL_SPI_TransmitReceive+0x176>
 800651a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651c:	2b01      	cmp	r3, #1
 800651e:	d113      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006524:	881a      	ldrh	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006530:	1c9a      	adds	r2, r3, #2
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800653a:	b29b      	uxth	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b01      	cmp	r3, #1
 8006554:	d119      	bne.n	800658a <HAL_SPI_TransmitReceive+0x1b8>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d014      	beq.n	800658a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656a:	b292      	uxth	r2, r2
 800656c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006572:	1c9a      	adds	r2, r3, #2
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006586:	2301      	movs	r3, #1
 8006588:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800658a:	f7fd fa99 	bl	8003ac0 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006596:	429a      	cmp	r2, r3
 8006598:	d80b      	bhi.n	80065b2 <HAL_SPI_TransmitReceive+0x1e0>
 800659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065a0:	d007      	beq.n	80065b2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80065b0:	e0b5      	b.n	800671e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1a2      	bne.n	8006502 <HAL_SPI_TransmitReceive+0x130>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d19d      	bne.n	8006502 <HAL_SPI_TransmitReceive+0x130>
 80065c6:	e080      	b.n	80066ca <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_SPI_TransmitReceive+0x204>
 80065d0:	8b7b      	ldrh	r3, [r7, #26]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d16f      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	330c      	adds	r3, #12
 80065e0:	7812      	ldrb	r2, [r2, #0]
 80065e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065fc:	e05b      	b.n	80066b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b02      	cmp	r3, #2
 800660a:	d11c      	bne.n	8006646 <HAL_SPI_TransmitReceive+0x274>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d017      	beq.n	8006646 <HAL_SPI_TransmitReceive+0x274>
 8006616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d114      	bne.n	8006646 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	330c      	adds	r3, #12
 8006626:	7812      	ldrb	r2, [r2, #0]
 8006628:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006638:	b29b      	uxth	r3, r3
 800663a:	3b01      	subs	r3, #1
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b01      	cmp	r3, #1
 8006652:	d119      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x2b6>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d014      	beq.n	8006688 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006684:	2301      	movs	r3, #1
 8006686:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006688:	f7fd fa1a 	bl	8003ac0 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006694:	429a      	cmp	r2, r3
 8006696:	d803      	bhi.n	80066a0 <HAL_SPI_TransmitReceive+0x2ce>
 8006698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800669e:	d102      	bne.n	80066a6 <HAL_SPI_TransmitReceive+0x2d4>
 80066a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d107      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80066b4:	e033      	b.n	800671e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d19e      	bne.n	80065fe <HAL_SPI_TransmitReceive+0x22c>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d199      	bne.n	80065fe <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f8b8 	bl	8006844 <SPI_EndRxTxTransaction>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80066e6:	e01a      	b.n	800671e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006714:	e003      	b.n	800671e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006726:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800672a:	4618      	mov	r0, r3
 800672c:	3730      	adds	r7, #48	@ 0x30
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	4613      	mov	r3, r2
 8006742:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006744:	f7fd f9bc 	bl	8003ac0 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674c:	1a9b      	subs	r3, r3, r2
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	4413      	add	r3, r2
 8006752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006754:	f7fd f9b4 	bl	8003ac0 <HAL_GetTick>
 8006758:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800675a:	4b39      	ldr	r3, [pc, #228]	@ (8006840 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	015b      	lsls	r3, r3, #5
 8006760:	0d1b      	lsrs	r3, r3, #20
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	fb02 f303 	mul.w	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800676a:	e054      	b.n	8006816 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006772:	d050      	beq.n	8006816 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006774:	f7fd f9a4 	bl	8003ac0 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	429a      	cmp	r2, r3
 8006782:	d902      	bls.n	800678a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d13d      	bne.n	8006806 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067a2:	d111      	bne.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ac:	d004      	beq.n	80067b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067b6:	d107      	bne.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d0:	d10f      	bne.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e017      	b.n	8006836 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	3b01      	subs	r3, #1
 8006814:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4013      	ands	r3, r2
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	429a      	cmp	r2, r3
 8006832:	d19b      	bne.n	800676c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000098 	.word	0x20000098

08006844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2201      	movs	r2, #1
 8006858:	2102      	movs	r1, #2
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff ff6a 	bl	8006734 <SPI_WaitFlagStateUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d007      	beq.n	8006876 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800686a:	f043 0220 	orr.w	r2, r3, #32
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e032      	b.n	80068dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006876:	4b1b      	ldr	r3, [pc, #108]	@ (80068e4 <SPI_EndRxTxTransaction+0xa0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1b      	ldr	r2, [pc, #108]	@ (80068e8 <SPI_EndRxTxTransaction+0xa4>)
 800687c:	fba2 2303 	umull	r2, r3, r2, r3
 8006880:	0d5b      	lsrs	r3, r3, #21
 8006882:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006894:	d112      	bne.n	80068bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2200      	movs	r2, #0
 800689e:	2180      	movs	r1, #128	@ 0x80
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff ff47 	bl	8006734 <SPI_WaitFlagStateUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d016      	beq.n	80068da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b0:	f043 0220 	orr.w	r2, r3, #32
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e00f      	b.n	80068dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068d2:	2b80      	cmp	r3, #128	@ 0x80
 80068d4:	d0f2      	beq.n	80068bc <SPI_EndRxTxTransaction+0x78>
 80068d6:	e000      	b.n	80068da <SPI_EndRxTxTransaction+0x96>
        break;
 80068d8:	bf00      	nop
  }

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000098 	.word	0x20000098
 80068e8:	165e9f81 	.word	0x165e9f81

080068ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e041      	b.n	8006982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7fb f9e0 	bl	8001cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3304      	adds	r3, #4
 8006928:	4619      	mov	r1, r3
 800692a:	4610      	mov	r0, r2
 800692c:	f000 fa1e 	bl	8006d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	d001      	beq.n	80069a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e046      	b.n	8006a32 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a23      	ldr	r2, [pc, #140]	@ (8006a40 <HAL_TIM_Base_Start+0xb4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d022      	beq.n	80069fc <HAL_TIM_Base_Start+0x70>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069be:	d01d      	beq.n	80069fc <HAL_TIM_Base_Start+0x70>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a44 <HAL_TIM_Base_Start+0xb8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d018      	beq.n	80069fc <HAL_TIM_Base_Start+0x70>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006a48 <HAL_TIM_Base_Start+0xbc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d013      	beq.n	80069fc <HAL_TIM_Base_Start+0x70>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a4c <HAL_TIM_Base_Start+0xc0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00e      	beq.n	80069fc <HAL_TIM_Base_Start+0x70>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006a50 <HAL_TIM_Base_Start+0xc4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d009      	beq.n	80069fc <HAL_TIM_Base_Start+0x70>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a19      	ldr	r2, [pc, #100]	@ (8006a54 <HAL_TIM_Base_Start+0xc8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <HAL_TIM_Base_Start+0x70>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a18      	ldr	r2, [pc, #96]	@ (8006a58 <HAL_TIM_Base_Start+0xcc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d111      	bne.n	8006a20 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b06      	cmp	r3, #6
 8006a0c:	d010      	beq.n	8006a30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0201 	orr.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1e:	e007      	b.n	8006a30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40010000 	.word	0x40010000
 8006a44:	40000400 	.word	0x40000400
 8006a48:	40000800 	.word	0x40000800
 8006a4c:	40000c00 	.word	0x40000c00
 8006a50:	40010400 	.word	0x40010400
 8006a54:	40014000 	.word	0x40014000
 8006a58:	40001800 	.word	0x40001800

08006a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d001      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e04e      	b.n	8006b12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a23      	ldr	r2, [pc, #140]	@ (8006b20 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d022      	beq.n	8006adc <HAL_TIM_Base_Start_IT+0x80>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9e:	d01d      	beq.n	8006adc <HAL_TIM_Base_Start_IT+0x80>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b24 <HAL_TIM_Base_Start_IT+0xc8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d018      	beq.n	8006adc <HAL_TIM_Base_Start_IT+0x80>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1e      	ldr	r2, [pc, #120]	@ (8006b28 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d013      	beq.n	8006adc <HAL_TIM_Base_Start_IT+0x80>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8006b2c <HAL_TIM_Base_Start_IT+0xd0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00e      	beq.n	8006adc <HAL_TIM_Base_Start_IT+0x80>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b30 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d009      	beq.n	8006adc <HAL_TIM_Base_Start_IT+0x80>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a19      	ldr	r2, [pc, #100]	@ (8006b34 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d004      	beq.n	8006adc <HAL_TIM_Base_Start_IT+0x80>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a18      	ldr	r2, [pc, #96]	@ (8006b38 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d111      	bne.n	8006b00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b06      	cmp	r3, #6
 8006aec:	d010      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afe:	e007      	b.n	8006b10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40010000 	.word	0x40010000
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40000800 	.word	0x40000800
 8006b2c:	40000c00 	.word	0x40000c00
 8006b30:	40010400 	.word	0x40010400
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40001800 	.word	0x40001800

08006b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d020      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01b      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0202 	mvn.w	r2, #2
 8006b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f8d2 	bl	8006d30 <HAL_TIM_IC_CaptureCallback>
 8006b8c:	e005      	b.n	8006b9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f8c4 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f8d5 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d020      	beq.n	8006bec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01b      	beq.n	8006bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0204 	mvn.w	r2, #4
 8006bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f8ac 	bl	8006d30 <HAL_TIM_IC_CaptureCallback>
 8006bd8:	e005      	b.n	8006be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f89e 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f8af 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d020      	beq.n	8006c38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01b      	beq.n	8006c38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f06f 0208 	mvn.w	r2, #8
 8006c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2204      	movs	r2, #4
 8006c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f886 	bl	8006d30 <HAL_TIM_IC_CaptureCallback>
 8006c24:	e005      	b.n	8006c32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f878 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f889 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f003 0310 	and.w	r3, r3, #16
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d020      	beq.n	8006c84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f003 0310 	and.w	r3, r3, #16
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01b      	beq.n	8006c84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f06f 0210 	mvn.w	r2, #16
 8006c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2208      	movs	r2, #8
 8006c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f860 	bl	8006d30 <HAL_TIM_IC_CaptureCallback>
 8006c70:	e005      	b.n	8006c7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f852 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f863 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00c      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f06f 0201 	mvn.w	r2, #1
 8006ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fa fd36 	bl	8001714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00c      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f906 	bl	8006ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00c      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d007      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f834 	bl	8006d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00c      	beq.n	8006d14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d007      	beq.n	8006d14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f06f 0220 	mvn.w	r2, #32
 8006d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f8d8 	bl	8006ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a46      	ldr	r2, [pc, #280]	@ (8006e98 <TIM_Base_SetConfig+0x12c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d013      	beq.n	8006dac <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8a:	d00f      	beq.n	8006dac <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a43      	ldr	r2, [pc, #268]	@ (8006e9c <TIM_Base_SetConfig+0x130>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00b      	beq.n	8006dac <TIM_Base_SetConfig+0x40>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a42      	ldr	r2, [pc, #264]	@ (8006ea0 <TIM_Base_SetConfig+0x134>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d007      	beq.n	8006dac <TIM_Base_SetConfig+0x40>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a41      	ldr	r2, [pc, #260]	@ (8006ea4 <TIM_Base_SetConfig+0x138>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d003      	beq.n	8006dac <TIM_Base_SetConfig+0x40>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a40      	ldr	r2, [pc, #256]	@ (8006ea8 <TIM_Base_SetConfig+0x13c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d108      	bne.n	8006dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a35      	ldr	r2, [pc, #212]	@ (8006e98 <TIM_Base_SetConfig+0x12c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d02b      	beq.n	8006e1e <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dcc:	d027      	beq.n	8006e1e <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a32      	ldr	r2, [pc, #200]	@ (8006e9c <TIM_Base_SetConfig+0x130>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d023      	beq.n	8006e1e <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a31      	ldr	r2, [pc, #196]	@ (8006ea0 <TIM_Base_SetConfig+0x134>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d01f      	beq.n	8006e1e <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a30      	ldr	r2, [pc, #192]	@ (8006ea4 <TIM_Base_SetConfig+0x138>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d01b      	beq.n	8006e1e <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a2f      	ldr	r2, [pc, #188]	@ (8006ea8 <TIM_Base_SetConfig+0x13c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d017      	beq.n	8006e1e <TIM_Base_SetConfig+0xb2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a2e      	ldr	r2, [pc, #184]	@ (8006eac <TIM_Base_SetConfig+0x140>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d013      	beq.n	8006e1e <TIM_Base_SetConfig+0xb2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb0 <TIM_Base_SetConfig+0x144>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00f      	beq.n	8006e1e <TIM_Base_SetConfig+0xb2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a2c      	ldr	r2, [pc, #176]	@ (8006eb4 <TIM_Base_SetConfig+0x148>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00b      	beq.n	8006e1e <TIM_Base_SetConfig+0xb2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a2b      	ldr	r2, [pc, #172]	@ (8006eb8 <TIM_Base_SetConfig+0x14c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d007      	beq.n	8006e1e <TIM_Base_SetConfig+0xb2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a2a      	ldr	r2, [pc, #168]	@ (8006ebc <TIM_Base_SetConfig+0x150>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d003      	beq.n	8006e1e <TIM_Base_SetConfig+0xb2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a29      	ldr	r2, [pc, #164]	@ (8006ec0 <TIM_Base_SetConfig+0x154>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d108      	bne.n	8006e30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a10      	ldr	r2, [pc, #64]	@ (8006e98 <TIM_Base_SetConfig+0x12c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_Base_SetConfig+0xf8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a12      	ldr	r2, [pc, #72]	@ (8006ea8 <TIM_Base_SetConfig+0x13c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d103      	bne.n	8006e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d105      	bne.n	8006e8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f023 0201 	bic.w	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	611a      	str	r2, [r3, #16]
  }
}
 8006e8a:	bf00      	nop
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40010000 	.word	0x40010000
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40000800 	.word	0x40000800
 8006ea4:	40000c00 	.word	0x40000c00
 8006ea8:	40010400 	.word	0x40010400
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	40014400 	.word	0x40014400
 8006eb4:	40014800 	.word	0x40014800
 8006eb8:	40001800 	.word	0x40001800
 8006ebc:	40001c00 	.word	0x40001c00
 8006ec0:	40002000 	.word	0x40002000

08006ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e042      	b.n	8006f84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fa ff02 	bl	8001d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2224      	movs	r2, #36	@ 0x24
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f9cb 	bl	80072cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695a      	ldr	r2, [r3, #20]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e04a      	b.n	8007034 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fa feb2 	bl	8001d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2224      	movs	r2, #36	@ 0x24
 8006fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f97b 	bl	80072cc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695a      	ldr	r2, [r3, #20]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8006ff4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695a      	ldr	r2, [r3, #20]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0208 	orr.w	r2, r2, #8
 8007004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	@ 0x28
 8007040:	af02      	add	r7, sp, #8
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	4613      	mov	r3, r2
 800704a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b20      	cmp	r3, #32
 800705a:	d175      	bne.n	8007148 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <HAL_UART_Transmit+0x2c>
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e06e      	b.n	800714a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2221      	movs	r2, #33	@ 0x21
 8007076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800707a:	f7fc fd21 	bl	8003ac0 <HAL_GetTick>
 800707e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	88fa      	ldrh	r2, [r7, #6]
 8007084:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	88fa      	ldrh	r2, [r7, #6]
 800708a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007094:	d108      	bne.n	80070a8 <HAL_UART_Transmit+0x6c>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d104      	bne.n	80070a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	e003      	b.n	80070b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070b0:	e02e      	b.n	8007110 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2200      	movs	r2, #0
 80070ba:	2180      	movs	r1, #128	@ 0x80
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f848 	bl	8007152 <UART_WaitOnFlagUntilTimeout>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e03a      	b.n	800714a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10b      	bne.n	80070f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	3302      	adds	r3, #2
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	e007      	b.n	8007102 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	781a      	ldrb	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	3301      	adds	r3, #1
 8007100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1cb      	bne.n	80070b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2200      	movs	r2, #0
 8007122:	2140      	movs	r1, #64	@ 0x40
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f814 	bl	8007152 <UART_WaitOnFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e006      	b.n	800714a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	e000      	b.n	800714a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007148:	2302      	movs	r3, #2
  }
}
 800714a:	4618      	mov	r0, r3
 800714c:	3720      	adds	r7, #32
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b086      	sub	sp, #24
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	603b      	str	r3, [r7, #0]
 800715e:	4613      	mov	r3, r2
 8007160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007162:	e03b      	b.n	80071dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800716a:	d037      	beq.n	80071dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800716c:	f7fc fca8 	bl	8003ac0 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	6a3a      	ldr	r2, [r7, #32]
 8007178:	429a      	cmp	r2, r3
 800717a:	d302      	bcc.n	8007182 <UART_WaitOnFlagUntilTimeout+0x30>
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e03a      	b.n	80071fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d023      	beq.n	80071dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b80      	cmp	r3, #128	@ 0x80
 8007198:	d020      	beq.n	80071dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b40      	cmp	r3, #64	@ 0x40
 800719e:	d01d      	beq.n	80071dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d116      	bne.n	80071dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80071ae:	2300      	movs	r3, #0
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f81d 	bl	8007204 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2208      	movs	r2, #8
 80071ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e00f      	b.n	80071fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	4013      	ands	r3, r2
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	bf0c      	ite	eq
 80071ec:	2301      	moveq	r3, #1
 80071ee:	2300      	movne	r3, #0
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d0b4      	beq.n	8007164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007204:	b480      	push	{r7}
 8007206:	b095      	sub	sp, #84	@ 0x54
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	330c      	adds	r3, #12
 8007212:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	330c      	adds	r3, #12
 800722a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800722c:	643a      	str	r2, [r7, #64]	@ 0x40
 800722e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007232:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007234:	e841 2300 	strex	r3, r2, [r1]
 8007238:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800723a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e5      	bne.n	800720c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3314      	adds	r3, #20
 8007246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f023 0301 	bic.w	r3, r3, #1
 8007256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3314      	adds	r3, #20
 800725e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007260:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e5      	bne.n	8007240 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007278:	2b01      	cmp	r3, #1
 800727a:	d119      	bne.n	80072b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	330c      	adds	r3, #12
 8007282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	e853 3f00 	ldrex	r3, [r3]
 800728a:	60bb      	str	r3, [r7, #8]
   return(result);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f023 0310 	bic.w	r3, r3, #16
 8007292:	647b      	str	r3, [r7, #68]	@ 0x44
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	330c      	adds	r3, #12
 800729a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800729c:	61ba      	str	r2, [r7, #24]
 800729e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	6979      	ldr	r1, [r7, #20]
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	613b      	str	r3, [r7, #16]
   return(result);
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e5      	bne.n	800727c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80072be:	bf00      	nop
 80072c0:	3754      	adds	r7, #84	@ 0x54
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
	...

080072cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d0:	b0c0      	sub	sp, #256	@ 0x100
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e8:	68d9      	ldr	r1, [r3, #12]
 80072ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	ea40 0301 	orr.w	r3, r0, r1
 80072f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	431a      	orrs	r2, r3
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	431a      	orrs	r2, r3
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	4313      	orrs	r3, r2
 8007314:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007324:	f021 010c 	bic.w	r1, r1, #12
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007332:	430b      	orrs	r3, r1
 8007334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007346:	6999      	ldr	r1, [r3, #24]
 8007348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	ea40 0301 	orr.w	r3, r0, r1
 8007352:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	4b8f      	ldr	r3, [pc, #572]	@ (8007598 <UART_SetConfig+0x2cc>)
 800735c:	429a      	cmp	r2, r3
 800735e:	d005      	beq.n	800736c <UART_SetConfig+0xa0>
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b8d      	ldr	r3, [pc, #564]	@ (800759c <UART_SetConfig+0x2d0>)
 8007368:	429a      	cmp	r2, r3
 800736a:	d104      	bne.n	8007376 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800736c:	f7fe fa96 	bl	800589c <HAL_RCC_GetPCLK2Freq>
 8007370:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007374:	e003      	b.n	800737e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007376:	f7fe fa7d 	bl	8005874 <HAL_RCC_GetPCLK1Freq>
 800737a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800737e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007388:	f040 810c 	bne.w	80075a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800738c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007390:	2200      	movs	r2, #0
 8007392:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007396:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800739a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800739e:	4622      	mov	r2, r4
 80073a0:	462b      	mov	r3, r5
 80073a2:	1891      	adds	r1, r2, r2
 80073a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073a6:	415b      	adcs	r3, r3
 80073a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073ae:	4621      	mov	r1, r4
 80073b0:	eb12 0801 	adds.w	r8, r2, r1
 80073b4:	4629      	mov	r1, r5
 80073b6:	eb43 0901 	adc.w	r9, r3, r1
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073ce:	4690      	mov	r8, r2
 80073d0:	4699      	mov	r9, r3
 80073d2:	4623      	mov	r3, r4
 80073d4:	eb18 0303 	adds.w	r3, r8, r3
 80073d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073dc:	462b      	mov	r3, r5
 80073de:	eb49 0303 	adc.w	r3, r9, r3
 80073e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80073f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073fa:	460b      	mov	r3, r1
 80073fc:	18db      	adds	r3, r3, r3
 80073fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007400:	4613      	mov	r3, r2
 8007402:	eb42 0303 	adc.w	r3, r2, r3
 8007406:	657b      	str	r3, [r7, #84]	@ 0x54
 8007408:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800740c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007410:	f7f8 ffae 	bl	8000370 <__aeabi_uldivmod>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4b61      	ldr	r3, [pc, #388]	@ (80075a0 <UART_SetConfig+0x2d4>)
 800741a:	fba3 2302 	umull	r2, r3, r3, r2
 800741e:	095b      	lsrs	r3, r3, #5
 8007420:	011c      	lsls	r4, r3, #4
 8007422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007426:	2200      	movs	r2, #0
 8007428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800742c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007430:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007434:	4642      	mov	r2, r8
 8007436:	464b      	mov	r3, r9
 8007438:	1891      	adds	r1, r2, r2
 800743a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800743c:	415b      	adcs	r3, r3
 800743e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007444:	4641      	mov	r1, r8
 8007446:	eb12 0a01 	adds.w	sl, r2, r1
 800744a:	4649      	mov	r1, r9
 800744c:	eb43 0b01 	adc.w	fp, r3, r1
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800745c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007464:	4692      	mov	sl, r2
 8007466:	469b      	mov	fp, r3
 8007468:	4643      	mov	r3, r8
 800746a:	eb1a 0303 	adds.w	r3, sl, r3
 800746e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007472:	464b      	mov	r3, r9
 8007474:	eb4b 0303 	adc.w	r3, fp, r3
 8007478:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800747c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007488:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800748c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007490:	460b      	mov	r3, r1
 8007492:	18db      	adds	r3, r3, r3
 8007494:	643b      	str	r3, [r7, #64]	@ 0x40
 8007496:	4613      	mov	r3, r2
 8007498:	eb42 0303 	adc.w	r3, r2, r3
 800749c:	647b      	str	r3, [r7, #68]	@ 0x44
 800749e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80074a6:	f7f8 ff63 	bl	8000370 <__aeabi_uldivmod>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	4b3b      	ldr	r3, [pc, #236]	@ (80075a0 <UART_SetConfig+0x2d4>)
 80074b2:	fba3 2301 	umull	r2, r3, r3, r1
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	2264      	movs	r2, #100	@ 0x64
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	1acb      	subs	r3, r1, r3
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80074c6:	4b36      	ldr	r3, [pc, #216]	@ (80075a0 <UART_SetConfig+0x2d4>)
 80074c8:	fba3 2302 	umull	r2, r3, r3, r2
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80074d4:	441c      	add	r4, r3
 80074d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80074e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80074e8:	4642      	mov	r2, r8
 80074ea:	464b      	mov	r3, r9
 80074ec:	1891      	adds	r1, r2, r2
 80074ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80074f0:	415b      	adcs	r3, r3
 80074f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80074f8:	4641      	mov	r1, r8
 80074fa:	1851      	adds	r1, r2, r1
 80074fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80074fe:	4649      	mov	r1, r9
 8007500:	414b      	adcs	r3, r1
 8007502:	637b      	str	r3, [r7, #52]	@ 0x34
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007510:	4659      	mov	r1, fp
 8007512:	00cb      	lsls	r3, r1, #3
 8007514:	4651      	mov	r1, sl
 8007516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800751a:	4651      	mov	r1, sl
 800751c:	00ca      	lsls	r2, r1, #3
 800751e:	4610      	mov	r0, r2
 8007520:	4619      	mov	r1, r3
 8007522:	4603      	mov	r3, r0
 8007524:	4642      	mov	r2, r8
 8007526:	189b      	adds	r3, r3, r2
 8007528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800752c:	464b      	mov	r3, r9
 800752e:	460a      	mov	r2, r1
 8007530:	eb42 0303 	adc.w	r3, r2, r3
 8007534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007544:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800754c:	460b      	mov	r3, r1
 800754e:	18db      	adds	r3, r3, r3
 8007550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007552:	4613      	mov	r3, r2
 8007554:	eb42 0303 	adc.w	r3, r2, r3
 8007558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800755a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800755e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007562:	f7f8 ff05 	bl	8000370 <__aeabi_uldivmod>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4b0d      	ldr	r3, [pc, #52]	@ (80075a0 <UART_SetConfig+0x2d4>)
 800756c:	fba3 1302 	umull	r1, r3, r3, r2
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	2164      	movs	r1, #100	@ 0x64
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	3332      	adds	r3, #50	@ 0x32
 800757e:	4a08      	ldr	r2, [pc, #32]	@ (80075a0 <UART_SetConfig+0x2d4>)
 8007580:	fba2 2303 	umull	r2, r3, r2, r3
 8007584:	095b      	lsrs	r3, r3, #5
 8007586:	f003 0207 	and.w	r2, r3, #7
 800758a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4422      	add	r2, r4
 8007592:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007594:	e106      	b.n	80077a4 <UART_SetConfig+0x4d8>
 8007596:	bf00      	nop
 8007598:	40011000 	.word	0x40011000
 800759c:	40011400 	.word	0x40011400
 80075a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075a8:	2200      	movs	r2, #0
 80075aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80075b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80075b6:	4642      	mov	r2, r8
 80075b8:	464b      	mov	r3, r9
 80075ba:	1891      	adds	r1, r2, r2
 80075bc:	6239      	str	r1, [r7, #32]
 80075be:	415b      	adcs	r3, r3
 80075c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075c6:	4641      	mov	r1, r8
 80075c8:	1854      	adds	r4, r2, r1
 80075ca:	4649      	mov	r1, r9
 80075cc:	eb43 0501 	adc.w	r5, r3, r1
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	00eb      	lsls	r3, r5, #3
 80075da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075de:	00e2      	lsls	r2, r4, #3
 80075e0:	4614      	mov	r4, r2
 80075e2:	461d      	mov	r5, r3
 80075e4:	4643      	mov	r3, r8
 80075e6:	18e3      	adds	r3, r4, r3
 80075e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80075ec:	464b      	mov	r3, r9
 80075ee:	eb45 0303 	adc.w	r3, r5, r3
 80075f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007602:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007606:	f04f 0200 	mov.w	r2, #0
 800760a:	f04f 0300 	mov.w	r3, #0
 800760e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007612:	4629      	mov	r1, r5
 8007614:	008b      	lsls	r3, r1, #2
 8007616:	4621      	mov	r1, r4
 8007618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800761c:	4621      	mov	r1, r4
 800761e:	008a      	lsls	r2, r1, #2
 8007620:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007624:	f7f8 fea4 	bl	8000370 <__aeabi_uldivmod>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	4b60      	ldr	r3, [pc, #384]	@ (80077b0 <UART_SetConfig+0x4e4>)
 800762e:	fba3 2302 	umull	r2, r3, r3, r2
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	011c      	lsls	r4, r3, #4
 8007636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800763a:	2200      	movs	r2, #0
 800763c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007640:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007644:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007648:	4642      	mov	r2, r8
 800764a:	464b      	mov	r3, r9
 800764c:	1891      	adds	r1, r2, r2
 800764e:	61b9      	str	r1, [r7, #24]
 8007650:	415b      	adcs	r3, r3
 8007652:	61fb      	str	r3, [r7, #28]
 8007654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007658:	4641      	mov	r1, r8
 800765a:	1851      	adds	r1, r2, r1
 800765c:	6139      	str	r1, [r7, #16]
 800765e:	4649      	mov	r1, r9
 8007660:	414b      	adcs	r3, r1
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007670:	4659      	mov	r1, fp
 8007672:	00cb      	lsls	r3, r1, #3
 8007674:	4651      	mov	r1, sl
 8007676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800767a:	4651      	mov	r1, sl
 800767c:	00ca      	lsls	r2, r1, #3
 800767e:	4610      	mov	r0, r2
 8007680:	4619      	mov	r1, r3
 8007682:	4603      	mov	r3, r0
 8007684:	4642      	mov	r2, r8
 8007686:	189b      	adds	r3, r3, r2
 8007688:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800768c:	464b      	mov	r3, r9
 800768e:	460a      	mov	r2, r1
 8007690:	eb42 0303 	adc.w	r3, r2, r3
 8007694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	f04f 0300 	mov.w	r3, #0
 80076ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80076b0:	4649      	mov	r1, r9
 80076b2:	008b      	lsls	r3, r1, #2
 80076b4:	4641      	mov	r1, r8
 80076b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076ba:	4641      	mov	r1, r8
 80076bc:	008a      	lsls	r2, r1, #2
 80076be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80076c2:	f7f8 fe55 	bl	8000370 <__aeabi_uldivmod>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	4b38      	ldr	r3, [pc, #224]	@ (80077b0 <UART_SetConfig+0x4e4>)
 80076ce:	fba3 2301 	umull	r2, r3, r3, r1
 80076d2:	095b      	lsrs	r3, r3, #5
 80076d4:	2264      	movs	r2, #100	@ 0x64
 80076d6:	fb02 f303 	mul.w	r3, r2, r3
 80076da:	1acb      	subs	r3, r1, r3
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	3332      	adds	r3, #50	@ 0x32
 80076e0:	4a33      	ldr	r2, [pc, #204]	@ (80077b0 <UART_SetConfig+0x4e4>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076ec:	441c      	add	r4, r3
 80076ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076f2:	2200      	movs	r2, #0
 80076f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80076f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80076f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80076fc:	4642      	mov	r2, r8
 80076fe:	464b      	mov	r3, r9
 8007700:	1891      	adds	r1, r2, r2
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	415b      	adcs	r3, r3
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800770c:	4641      	mov	r1, r8
 800770e:	1851      	adds	r1, r2, r1
 8007710:	6039      	str	r1, [r7, #0]
 8007712:	4649      	mov	r1, r9
 8007714:	414b      	adcs	r3, r1
 8007716:	607b      	str	r3, [r7, #4]
 8007718:	f04f 0200 	mov.w	r2, #0
 800771c:	f04f 0300 	mov.w	r3, #0
 8007720:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007724:	4659      	mov	r1, fp
 8007726:	00cb      	lsls	r3, r1, #3
 8007728:	4651      	mov	r1, sl
 800772a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800772e:	4651      	mov	r1, sl
 8007730:	00ca      	lsls	r2, r1, #3
 8007732:	4610      	mov	r0, r2
 8007734:	4619      	mov	r1, r3
 8007736:	4603      	mov	r3, r0
 8007738:	4642      	mov	r2, r8
 800773a:	189b      	adds	r3, r3, r2
 800773c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800773e:	464b      	mov	r3, r9
 8007740:	460a      	mov	r2, r1
 8007742:	eb42 0303 	adc.w	r3, r2, r3
 8007746:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	663b      	str	r3, [r7, #96]	@ 0x60
 8007752:	667a      	str	r2, [r7, #100]	@ 0x64
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007760:	4649      	mov	r1, r9
 8007762:	008b      	lsls	r3, r1, #2
 8007764:	4641      	mov	r1, r8
 8007766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800776a:	4641      	mov	r1, r8
 800776c:	008a      	lsls	r2, r1, #2
 800776e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007772:	f7f8 fdfd 	bl	8000370 <__aeabi_uldivmod>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4b0d      	ldr	r3, [pc, #52]	@ (80077b0 <UART_SetConfig+0x4e4>)
 800777c:	fba3 1302 	umull	r1, r3, r3, r2
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	2164      	movs	r1, #100	@ 0x64
 8007784:	fb01 f303 	mul.w	r3, r1, r3
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	3332      	adds	r3, #50	@ 0x32
 800778e:	4a08      	ldr	r2, [pc, #32]	@ (80077b0 <UART_SetConfig+0x4e4>)
 8007790:	fba2 2303 	umull	r2, r3, r2, r3
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	f003 020f 	and.w	r2, r3, #15
 800779a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4422      	add	r2, r4
 80077a2:	609a      	str	r2, [r3, #8]
}
 80077a4:	bf00      	nop
 80077a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80077aa:	46bd      	mov	sp, r7
 80077ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077b0:	51eb851f 	.word	0x51eb851f

080077b4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f103 0208 	add.w	r2, r3, #8
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077cc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f103 0208 	add.w	r2, r3, #8
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f103 0208 	add.w	r2, r3, #8
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800780e:	b480      	push	{r7}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
}
 800784a:	bf00      	nop
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800786c:	d103      	bne.n	8007876 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e00c      	b.n	8007890 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3308      	adds	r3, #8
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	e002      	b.n	8007884 <vListInsert+0x2e>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	429a      	cmp	r2, r3
 800788e:	d2f6      	bcs.n	800787e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	601a      	str	r2, [r3, #0]
}
 80078bc:	bf00      	nop
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6892      	ldr	r2, [r2, #8]
 80078de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6852      	ldr	r2, [r2, #4]
 80078e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d103      	bne.n	80078fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	1e5a      	subs	r2, r3, #1
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10b      	bne.n	8007948 <xQueueGenericReset+0x2c>
        __asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	60bb      	str	r3, [r7, #8]
    }
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	e7fd      	b.n	8007944 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8007948:	f002 f930 	bl	8009bac <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007954:	68f9      	ldr	r1, [r7, #12]
 8007956:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007958:	fb01 f303 	mul.w	r3, r1, r3
 800795c:	441a      	add	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007978:	3b01      	subs	r3, #1
 800797a:	68f9      	ldr	r1, [r7, #12]
 800797c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800797e:	fb01 f303 	mul.w	r3, r1, r3
 8007982:	441a      	add	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	22ff      	movs	r2, #255	@ 0xff
 800798c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	22ff      	movs	r2, #255	@ 0xff
 8007994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d114      	bne.n	80079c8 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d01a      	beq.n	80079dc <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3310      	adds	r3, #16
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 f972 	bl	8008c94 <xTaskRemoveFromEventList>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d012      	beq.n	80079dc <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80079b6:	4b0d      	ldr	r3, [pc, #52]	@ (80079ec <xQueueGenericReset+0xd0>)
 80079b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	e009      	b.n	80079dc <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3310      	adds	r3, #16
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff fef1 	bl	80077b4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3324      	adds	r3, #36	@ 0x24
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff feec 	bl	80077b4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80079dc:	f002 f918 	bl	8009c10 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80079e0:	2301      	movs	r3, #1
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	e000ed04 	.word	0xe000ed04

080079f0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08c      	sub	sp, #48	@ 0x30
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10b      	bne.n	8007a1c <xQueueGenericCreate+0x2c>
        __asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	61bb      	str	r3, [r7, #24]
    }
 8007a16:	bf00      	nop
 8007a18:	bf00      	nop
 8007a1a:	e7fd      	b.n	8007a18 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	fb02 f303 	mul.w	r3, r2, r3
 8007a24:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d006      	beq.n	8007a3a <xQueueGenericCreate+0x4a>
 8007a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d101      	bne.n	8007a3e <xQueueGenericCreate+0x4e>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <xQueueGenericCreate+0x50>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10b      	bne.n	8007a5c <xQueueGenericCreate+0x6c>
        __asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	617b      	str	r3, [r7, #20]
    }
 8007a56:	bf00      	nop
 8007a58:	bf00      	nop
 8007a5a:	e7fd      	b.n	8007a58 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8007a62:	d90b      	bls.n	8007a7c <xQueueGenericCreate+0x8c>
        __asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	613b      	str	r3, [r7, #16]
    }
 8007a76:	bf00      	nop
 8007a78:	bf00      	nop
 8007a7a:	e7fd      	b.n	8007a78 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7e:	3350      	adds	r3, #80	@ 0x50
 8007a80:	4618      	mov	r0, r3
 8007a82:	f002 f9c5 	bl	8009e10 <pvPortMalloc>
 8007a86:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00d      	beq.n	8007aaa <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	3350      	adds	r3, #80	@ 0x50
 8007a96:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a98:	79fa      	ldrb	r2, [r7, #7]
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	69fa      	ldr	r2, [r7, #28]
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f805 	bl	8007ab4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
    }
 8007aac:	4618      	mov	r0, r3
 8007aae:	3728      	adds	r7, #40	@ 0x28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d103      	bne.n	8007ad0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	e002      	b.n	8007ad6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	69b8      	ldr	r0, [r7, #24]
 8007ae6:	f7ff ff19 	bl	800791c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	78fa      	ldrb	r2, [r7, #3]
 8007aee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	68f9      	ldr	r1, [r7, #12]
 8007af8:	2073      	movs	r0, #115	@ 0x73
 8007afa:	f003 faff 	bl	800b0fc <SEGGER_SYSVIEW_RecordU32x3>
}
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b090      	sub	sp, #64	@ 0x40
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b16:	2300      	movs	r3, #0
 8007b18:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10b      	bne.n	8007b3c <xQueueGenericSend+0x34>
        __asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
 8007b3a:	e7fd      	b.n	8007b38 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d103      	bne.n	8007b4a <xQueueGenericSend+0x42>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <xQueueGenericSend+0x46>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e000      	b.n	8007b50 <xQueueGenericSend+0x48>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10b      	bne.n	8007b6c <xQueueGenericSend+0x64>
        __asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8007b66:	bf00      	nop
 8007b68:	bf00      	nop
 8007b6a:	e7fd      	b.n	8007b68 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d103      	bne.n	8007b7a <xQueueGenericSend+0x72>
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d101      	bne.n	8007b7e <xQueueGenericSend+0x76>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <xQueueGenericSend+0x78>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10b      	bne.n	8007b9c <xQueueGenericSend+0x94>
        __asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	623b      	str	r3, [r7, #32]
    }
 8007b96:	bf00      	nop
 8007b98:	bf00      	nop
 8007b9a:	e7fd      	b.n	8007b98 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b9c:	f001 fa1e 	bl	8008fdc <xTaskGetSchedulerState>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d102      	bne.n	8007bac <xQueueGenericSend+0xa4>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <xQueueGenericSend+0xa8>
 8007bac:	2301      	movs	r3, #1
 8007bae:	e000      	b.n	8007bb2 <xQueueGenericSend+0xaa>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10b      	bne.n	8007bce <xQueueGenericSend+0xc6>
        __asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	61fb      	str	r3, [r7, #28]
    }
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	e7fd      	b.n	8007bca <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007bce:	f001 ffed 	bl	8009bac <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d302      	bcc.n	8007be4 <xQueueGenericSend+0xdc>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d136      	bne.n	8007c52 <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8007be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be6:	4618      	mov	r0, r3
 8007be8:	f004 f814 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	205a      	movs	r0, #90	@ 0x5a
 8007bfa:	f003 faf5 	bl	800b1e8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c04:	f000 fa80 	bl	8008108 <prvCopyDataToQueue>
 8007c08:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d010      	beq.n	8007c34 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c14:	3324      	adds	r3, #36	@ 0x24
 8007c16:	4618      	mov	r0, r3
 8007c18:	f001 f83c 	bl	8008c94 <xTaskRemoveFromEventList>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d013      	beq.n	8007c4a <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8007c22:	4b4d      	ldr	r3, [pc, #308]	@ (8007d58 <xQueueGenericSend+0x250>)
 8007c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	e00a      	b.n	8007c4a <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8007c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d007      	beq.n	8007c4a <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8007c3a:	4b47      	ldr	r3, [pc, #284]	@ (8007d58 <xQueueGenericSend+0x250>)
 8007c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8007c4a:	f001 ffe1 	bl	8009c10 <vPortExitCritical>
                return pdPASS;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e07d      	b.n	8007d4e <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d110      	bne.n	8007c7a <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007c58:	f001 ffda 	bl	8009c10 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f003 ffd8 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4601      	mov	r1, r0
 8007c70:	205a      	movs	r0, #90	@ 0x5a
 8007c72:	f003 fab9 	bl	800b1e8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	e069      	b.n	8007d4e <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d106      	bne.n	8007c8e <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007c80:	f107 0314 	add.w	r3, r7, #20
 8007c84:	4618      	mov	r0, r3
 8007c86:	f001 f86d 	bl	8008d64 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007c8e:	f001 ffbf 	bl	8009c10 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007c92:	f000 fdaf 	bl	80087f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007c96:	f001 ff89 	bl	8009bac <vPortEnterCritical>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ca0:	b25b      	sxtb	r3, r3
 8007ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ca6:	d103      	bne.n	8007cb0 <xQueueGenericSend+0x1a8>
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cb6:	b25b      	sxtb	r3, r3
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cbc:	d103      	bne.n	8007cc6 <xQueueGenericSend+0x1be>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cc6:	f001 ffa3 	bl	8009c10 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cca:	1d3a      	adds	r2, r7, #4
 8007ccc:	f107 0314 	add.w	r3, r7, #20
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 f85c 	bl	8008d90 <xTaskCheckForTimeOut>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d124      	bne.n	8007d28 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ce0:	f000 fb0a 	bl	80082f8 <prvIsQueueFull>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d018      	beq.n	8007d1c <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	3310      	adds	r3, #16
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 ff78 	bl	8008be8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8007cf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cfa:	f000 fa95 	bl	8008228 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8007cfe:	f000 fd87 	bl	8008810 <xTaskResumeAll>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f47f af62 	bne.w	8007bce <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8007d0a:	4b13      	ldr	r3, [pc, #76]	@ (8007d58 <xQueueGenericSend+0x250>)
 8007d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	e758      	b.n	8007bce <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8007d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d1e:	f000 fa83 	bl	8008228 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007d22:	f000 fd75 	bl	8008810 <xTaskResumeAll>
 8007d26:	e752      	b.n	8007bce <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8007d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d2a:	f000 fa7d 	bl	8008228 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007d2e:	f000 fd6f 	bl	8008810 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8007d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d34:	4618      	mov	r0, r3
 8007d36:	f003 ff6d 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	460b      	mov	r3, r1
 8007d44:	4601      	mov	r1, r0
 8007d46:	205a      	movs	r0, #90	@ 0x5a
 8007d48:	f003 fa4e 	bl	800b1e8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8007d4c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3738      	adds	r7, #56	@ 0x38
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b090      	sub	sp, #64	@ 0x40
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10b      	bne.n	8007d8c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	e7fd      	b.n	8007d88 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d103      	bne.n	8007d9a <xQueueGenericSendFromISR+0x3e>
 8007d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <xQueueGenericSendFromISR+0x42>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <xQueueGenericSendFromISR+0x44>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10b      	bne.n	8007dbc <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8007db6:	bf00      	nop
 8007db8:	bf00      	nop
 8007dba:	e7fd      	b.n	8007db8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d103      	bne.n	8007dca <xQueueGenericSendFromISR+0x6e>
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d101      	bne.n	8007dce <xQueueGenericSendFromISR+0x72>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <xQueueGenericSendFromISR+0x74>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10b      	bne.n	8007dec <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	623b      	str	r3, [r7, #32]
    }
 8007de6:	bf00      	nop
 8007de8:	bf00      	nop
 8007dea:	e7fd      	b.n	8007de8 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007dec:	f001 ffce 	bl	8009d8c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8007df0:	f3ef 8211 	mrs	r2, BASEPRI
 8007df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	61fa      	str	r2, [r7, #28]
 8007e06:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8007e08:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e0a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d302      	bcc.n	8007e1e <xQueueGenericSendFromISR+0xc2>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d149      	bne.n	8007eb2 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e30:	4618      	mov	r0, r3
 8007e32:	f003 feef 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 8007e36:	4601      	mov	r1, r0
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	2060      	movs	r0, #96	@ 0x60
 8007e3e:	f003 f903 	bl	800b048 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	68b9      	ldr	r1, [r7, #8]
 8007e46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007e48:	f000 f95e 	bl	8008108 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8007e4c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e54:	d112      	bne.n	8007e7c <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d026      	beq.n	8007eac <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e60:	3324      	adds	r3, #36	@ 0x24
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 ff16 	bl	8008c94 <xTaskRemoveFromEventList>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d01e      	beq.n	8007eac <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d01b      	beq.n	8007eac <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e017      	b.n	8007eac <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8007e7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007e80:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e82:	d10b      	bne.n	8007e9c <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	617b      	str	r3, [r7, #20]
    }
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	e7fd      	b.n	8007e98 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	b25a      	sxtb	r2, r3
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8007eac:	2301      	movs	r3, #1
 8007eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8007eb0:	e00b      	b.n	8007eca <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f003 fead 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 8007eba:	4601      	mov	r1, r0
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	2060      	movs	r0, #96	@ 0x60
 8007ec2:	f003 f8c1 	bl	800b048 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ecc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007ed4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8007ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3740      	adds	r7, #64	@ 0x40
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8007ee0:	b590      	push	{r4, r7, lr}
 8007ee2:	b08f      	sub	sp, #60	@ 0x3c
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <xQueueReceive+0x32>
        __asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	623b      	str	r3, [r7, #32]
    }
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	e7fd      	b.n	8007f0e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d103      	bne.n	8007f20 <xQueueReceive+0x40>
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <xQueueReceive+0x44>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <xQueueReceive+0x46>
 8007f24:	2300      	movs	r3, #0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <xQueueReceive+0x62>
        __asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	61fb      	str	r3, [r7, #28]
    }
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f42:	f001 f84b 	bl	8008fdc <xTaskGetSchedulerState>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <xQueueReceive+0x72>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <xQueueReceive+0x76>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e000      	b.n	8007f58 <xQueueReceive+0x78>
 8007f56:	2300      	movs	r3, #0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10b      	bne.n	8007f74 <xQueueReceive+0x94>
        __asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	61bb      	str	r3, [r7, #24]
    }
 8007f6e:	bf00      	nop
 8007f70:	bf00      	nop
 8007f72:	e7fd      	b.n	8007f70 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007f74:	f001 fe1a 	bl	8009bac <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d02f      	beq.n	8007fe4 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f84:	68b9      	ldr	r1, [r7, #8]
 8007f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f88:	f000 f928 	bl	80081dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8007f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f003 fe40 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 8007f94:	4604      	mov	r4, r0
 8007f96:	2000      	movs	r0, #0
 8007f98:	f003 fe3c 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	9100      	str	r1, [sp, #0]
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	205c      	movs	r0, #92	@ 0x5c
 8007fa8:	f003 f91e 	bl	800b1e8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	1e5a      	subs	r2, r3, #1
 8007fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00f      	beq.n	8007fdc <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	3310      	adds	r3, #16
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fe67 	bl	8008c94 <xTaskRemoveFromEventList>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8008104 <xQueueReceive+0x224>)
 8007fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007fdc:	f001 fe18 	bl	8009c10 <vPortExitCritical>
                return pdPASS;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e08a      	b.n	80080fa <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d113      	bne.n	8008012 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007fea:	f001 fe11 	bl	8009c10 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f003 fe0f 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	f003 fe0b 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 8007ffe:	4602      	mov	r2, r0
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2101      	movs	r1, #1
 8008004:	9100      	str	r1, [sp, #0]
 8008006:	4621      	mov	r1, r4
 8008008:	205c      	movs	r0, #92	@ 0x5c
 800800a:	f003 f8ed 	bl	800b1e8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800800e:	2300      	movs	r3, #0
 8008010:	e073      	b.n	80080fa <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d106      	bne.n	8008026 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008018:	f107 0310 	add.w	r3, r7, #16
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fea1 	bl	8008d64 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008022:	2301      	movs	r3, #1
 8008024:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008026:	f001 fdf3 	bl	8009c10 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800802a:	f000 fbe3 	bl	80087f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800802e:	f001 fdbd 	bl	8009bac <vPortEnterCritical>
 8008032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008038:	b25b      	sxtb	r3, r3
 800803a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800803e:	d103      	bne.n	8008048 <xQueueReceive+0x168>
 8008040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800804e:	b25b      	sxtb	r3, r3
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008054:	d103      	bne.n	800805e <xQueueReceive+0x17e>
 8008056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800805e:	f001 fdd7 	bl	8009c10 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008062:	1d3a      	adds	r2, r7, #4
 8008064:	f107 0310 	add.w	r3, r7, #16
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fe90 	bl	8008d90 <xTaskCheckForTimeOut>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d124      	bne.n	80080c0 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008078:	f000 f928 	bl	80082cc <prvIsQueueEmpty>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d018      	beq.n	80080b4 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008084:	3324      	adds	r3, #36	@ 0x24
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	4611      	mov	r1, r2
 800808a:	4618      	mov	r0, r3
 800808c:	f000 fdac 	bl	8008be8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008092:	f000 f8c9 	bl	8008228 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008096:	f000 fbbb 	bl	8008810 <xTaskResumeAll>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	f47f af69 	bne.w	8007f74 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80080a2:	4b18      	ldr	r3, [pc, #96]	@ (8008104 <xQueueReceive+0x224>)
 80080a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	e75f      	b.n	8007f74 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80080b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080b6:	f000 f8b7 	bl	8008228 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80080ba:	f000 fba9 	bl	8008810 <xTaskResumeAll>
 80080be:	e759      	b.n	8007f74 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80080c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080c2:	f000 f8b1 	bl	8008228 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80080c6:	f000 fba3 	bl	8008810 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080cc:	f000 f8fe 	bl	80082cc <prvIsQueueEmpty>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f43f af4e 	beq.w	8007f74 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80080d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080da:	4618      	mov	r0, r3
 80080dc:	f003 fd9a 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 80080e0:	4604      	mov	r4, r0
 80080e2:	2000      	movs	r0, #0
 80080e4:	f003 fd96 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 80080e8:	4602      	mov	r2, r0
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2101      	movs	r1, #1
 80080ee:	9100      	str	r1, [sp, #0]
 80080f0:	4621      	mov	r1, r4
 80080f2:	205c      	movs	r0, #92	@ 0x5c
 80080f4:	f003 f878 	bl	800b1e8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80080f8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3734      	adds	r7, #52	@ 0x34
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd90      	pop	{r4, r7, pc}
 8008102:	bf00      	nop
 8008104:	e000ed04 	.word	0xe000ed04

08008108 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10d      	bne.n	8008142 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d14d      	bne.n	80081ca <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	4618      	mov	r0, r3
 8008134:	f000 ff70 	bl	8009018 <xTaskPriorityDisinherit>
 8008138:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	609a      	str	r2, [r3, #8]
 8008140:	e043      	b.n	80081ca <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d119      	bne.n	800817c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6858      	ldr	r0, [r3, #4]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008150:	461a      	mov	r2, r3
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	f004 f955 	bl	800c402 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008160:	441a      	add	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	429a      	cmp	r2, r3
 8008170:	d32b      	bcc.n	80081ca <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	605a      	str	r2, [r3, #4]
 800817a:	e026      	b.n	80081ca <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	68d8      	ldr	r0, [r3, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008184:	461a      	mov	r2, r3
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	f004 f93b 	bl	800c402 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008194:	425b      	negs	r3, r3
 8008196:	441a      	add	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d207      	bcs.n	80081b8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b0:	425b      	negs	r3, r3
 80081b2:	441a      	add	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d105      	bne.n	80081ca <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80081d2:	697b      	ldr	r3, [r7, #20]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d018      	beq.n	8008220 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68da      	ldr	r2, [r3, #12]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f6:	441a      	add	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	429a      	cmp	r2, r3
 8008206:	d303      	bcc.n	8008210 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68d9      	ldr	r1, [r3, #12]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008218:	461a      	mov	r2, r3
 800821a:	6838      	ldr	r0, [r7, #0]
 800821c:	f004 f8f1 	bl	800c402 <memcpy>
    }
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008230:	f001 fcbc 	bl	8009bac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800823a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800823c:	e011      	b.n	8008262 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008242:	2b00      	cmp	r3, #0
 8008244:	d012      	beq.n	800826c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3324      	adds	r3, #36	@ 0x24
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fd22 	bl	8008c94 <xTaskRemoveFromEventList>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8008256:	f000 fe03 	bl	8008e60 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	3b01      	subs	r3, #1
 800825e:	b2db      	uxtb	r3, r3
 8008260:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008266:	2b00      	cmp	r3, #0
 8008268:	dce9      	bgt.n	800823e <prvUnlockQueue+0x16>
 800826a:	e000      	b.n	800826e <prvUnlockQueue+0x46>
                        break;
 800826c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	22ff      	movs	r2, #255	@ 0xff
 8008272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8008276:	f001 fccb 	bl	8009c10 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800827a:	f001 fc97 	bl	8009bac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008284:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008286:	e011      	b.n	80082ac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d012      	beq.n	80082b6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3310      	adds	r3, #16
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fcfd 	bl	8008c94 <xTaskRemoveFromEventList>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80082a0:	f000 fdde 	bl	8008e60 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80082ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	dce9      	bgt.n	8008288 <prvUnlockQueue+0x60>
 80082b4:	e000      	b.n	80082b8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80082b6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	22ff      	movs	r2, #255	@ 0xff
 80082bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80082c0:	f001 fca6 	bl	8009c10 <vPortExitCritical>
}
 80082c4:	bf00      	nop
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80082d4:	f001 fc6a 	bl	8009bac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d102      	bne.n	80082e6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80082e0:	2301      	movs	r3, #1
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	e001      	b.n	80082ea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80082ea:	f001 fc91 	bl	8009c10 <vPortExitCritical>

    return xReturn;
 80082ee:	68fb      	ldr	r3, [r7, #12]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008300:	f001 fc54 	bl	8009bac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800830c:	429a      	cmp	r2, r3
 800830e:	d102      	bne.n	8008316 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8008310:	2301      	movs	r3, #1
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e001      	b.n	800831a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8008316:	2300      	movs	r3, #0
 8008318:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800831a:	f001 fc79 	bl	8009c10 <vPortExitCritical>

    return xReturn;
 800831e:	68fb      	ldr	r3, [r7, #12]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008332:	2300      	movs	r3, #0
 8008334:	60fb      	str	r3, [r7, #12]
 8008336:	e01e      	b.n	8008376 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008338:	4a13      	ldr	r2, [pc, #76]	@ (8008388 <vQueueAddToRegistry+0x60>)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d115      	bne.n	8008370 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008344:	4910      	ldr	r1, [pc, #64]	@ (8008388 <vQueueAddToRegistry+0x60>)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800834e:	4a0e      	ldr	r2, [pc, #56]	@ (8008388 <vQueueAddToRegistry+0x60>)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	4413      	add	r3, r2
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4618      	mov	r0, r3
 800835e:	f003 fc59 	bl	800bc14 <SEGGER_SYSVIEW_ShrinkId>
 8008362:	4601      	mov	r1, r0
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	2071      	movs	r0, #113	@ 0x71
 800836a:	f002 fe6d 	bl	800b048 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800836e:	e006      	b.n	800837e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	3301      	adds	r3, #1
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b07      	cmp	r3, #7
 800837a:	d9dd      	bls.n	8008338 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20000588 	.word	0x20000588

0800838c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800839c:	f001 fc06 	bl	8009bac <vPortEnterCritical>
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083a6:	b25b      	sxtb	r3, r3
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083ac:	d103      	bne.n	80083b6 <vQueueWaitForMessageRestricted+0x2a>
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083bc:	b25b      	sxtb	r3, r3
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083c2:	d103      	bne.n	80083cc <vQueueWaitForMessageRestricted+0x40>
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083cc:	f001 fc20 	bl	8009c10 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d106      	bne.n	80083e6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	3324      	adds	r3, #36	@ 0x24
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	68b9      	ldr	r1, [r7, #8]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 fc27 	bl	8008c34 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80083e6:	6978      	ldr	r0, [r7, #20]
 80083e8:	f7ff ff1e 	bl	8008228 <prvUnlockQueue>
    }
 80083ec:	bf00      	nop
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08c      	sub	sp, #48	@ 0x30
 80083f8:	af04      	add	r7, sp, #16
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008404:	88fb      	ldrh	r3, [r7, #6]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4618      	mov	r0, r3
 800840a:	f001 fd01 	bl	8009e10 <pvPortMalloc>
 800840e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00e      	beq.n	8008434 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008416:	2058      	movs	r0, #88	@ 0x58
 8008418:	f001 fcfa 	bl	8009e10 <pvPortMalloc>
 800841c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d003      	beq.n	800842c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	631a      	str	r2, [r3, #48]	@ 0x30
 800842a:	e005      	b.n	8008438 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800842c:	6978      	ldr	r0, [r7, #20]
 800842e:	f001 fdd1 	bl	8009fd4 <vPortFree>
 8008432:	e001      	b.n	8008438 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8008434:	2300      	movs	r3, #0
 8008436:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d013      	beq.n	8008466 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800843e:	88fa      	ldrh	r2, [r7, #6]
 8008440:	2300      	movs	r3, #0
 8008442:	9303      	str	r3, [sp, #12]
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	9302      	str	r3, [sp, #8]
 8008448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	68b9      	ldr	r1, [r7, #8]
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 f80e 	bl	8008476 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800845a:	69f8      	ldr	r0, [r7, #28]
 800845c:	f000 f8a2 	bl	80085a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008460:	2301      	movs	r3, #1
 8008462:	61bb      	str	r3, [r7, #24]
 8008464:	e002      	b.n	800846c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800846a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800846c:	69bb      	ldr	r3, [r7, #24]
    }
 800846e:	4618      	mov	r0, r3
 8008470:	3720      	adds	r7, #32
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b088      	sub	sp, #32
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	607a      	str	r2, [r7, #4]
 8008482:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	461a      	mov	r2, r3
 800848e:	21a5      	movs	r1, #165	@ 0xa5
 8008490:	f003 ff54 	bl	800c33c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800849e:	3b01      	subs	r3, #1
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	f023 0307 	bic.w	r3, r3, #7
 80084ac:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00b      	beq.n	80084d0 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	617b      	str	r3, [r7, #20]
    }
 80084ca:	bf00      	nop
 80084cc:	bf00      	nop
 80084ce:	e7fd      	b.n	80084cc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01f      	beq.n	8008516 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084d6:	2300      	movs	r3, #0
 80084d8:	61fb      	str	r3, [r7, #28]
 80084da:	e012      	b.n	8008502 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	4413      	add	r3, r2
 80084e2:	7819      	ldrb	r1, [r3, #0]
 80084e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	4413      	add	r3, r2
 80084ea:	3334      	adds	r3, #52	@ 0x34
 80084ec:	460a      	mov	r2, r1
 80084ee:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	4413      	add	r3, r2
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d006      	beq.n	800850a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	3301      	adds	r3, #1
 8008500:	61fb      	str	r3, [r7, #28]
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	2b09      	cmp	r3, #9
 8008506:	d9e9      	bls.n	80084dc <prvInitialiseNewTask+0x66>
 8008508:	e000      	b.n	800850c <prvInitialiseNewTask+0x96>
            {
                break;
 800850a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800850c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850e:	2200      	movs	r2, #0
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008514:	e003      	b.n	800851e <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800851e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008520:	2b04      	cmp	r3, #4
 8008522:	d901      	bls.n	8008528 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008524:	2304      	movs	r3, #4
 8008526:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800852c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008532:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8008534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008536:	2200      	movs	r2, #0
 8008538:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	3304      	adds	r3, #4
 800853e:	4618      	mov	r0, r3
 8008540:	f7ff f958 	bl	80077f4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008546:	3318      	adds	r3, #24
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff f953 	bl	80077f4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008552:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008556:	f1c3 0205 	rsb	r2, r3, #5
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008562:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	3350      	adds	r3, #80	@ 0x50
 8008568:	2204      	movs	r2, #4
 800856a:	2100      	movs	r1, #0
 800856c:	4618      	mov	r0, r3
 800856e:	f003 fee5 	bl	800c33c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8008572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008574:	3354      	adds	r3, #84	@ 0x54
 8008576:	2201      	movs	r2, #1
 8008578:	2100      	movs	r1, #0
 800857a:	4618      	mov	r0, r3
 800857c:	f003 fede 	bl	800c33c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	69b8      	ldr	r0, [r7, #24]
 8008586:	f001 f95f 	bl	8009848 <pxPortInitialiseStack>
 800858a:	4602      	mov	r2, r0
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8008590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800859c:	bf00      	nop
 800859e:	3720      	adds	r7, #32
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80085a4:	b5b0      	push	{r4, r5, r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af02      	add	r7, sp, #8
 80085aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80085ac:	f001 fafe 	bl	8009bac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80085b0:	4b3b      	ldr	r3, [pc, #236]	@ (80086a0 <prvAddNewTaskToReadyList+0xfc>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3301      	adds	r3, #1
 80085b6:	4a3a      	ldr	r2, [pc, #232]	@ (80086a0 <prvAddNewTaskToReadyList+0xfc>)
 80085b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80085ba:	4b3a      	ldr	r3, [pc, #232]	@ (80086a4 <prvAddNewTaskToReadyList+0x100>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d109      	bne.n	80085d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80085c2:	4a38      	ldr	r2, [pc, #224]	@ (80086a4 <prvAddNewTaskToReadyList+0x100>)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085c8:	4b35      	ldr	r3, [pc, #212]	@ (80086a0 <prvAddNewTaskToReadyList+0xfc>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d110      	bne.n	80085f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80085d0:	f000 fc6a 	bl	8008ea8 <prvInitialiseTaskLists>
 80085d4:	e00d      	b.n	80085f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80085d6:	4b34      	ldr	r3, [pc, #208]	@ (80086a8 <prvAddNewTaskToReadyList+0x104>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d109      	bne.n	80085f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085de:	4b31      	ldr	r3, [pc, #196]	@ (80086a4 <prvAddNewTaskToReadyList+0x100>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d802      	bhi.n	80085f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80085ec:	4a2d      	ldr	r2, [pc, #180]	@ (80086a4 <prvAddNewTaskToReadyList+0x100>)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80085f2:	4b2e      	ldr	r3, [pc, #184]	@ (80086ac <prvAddNewTaskToReadyList+0x108>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3301      	adds	r3, #1
 80085f8:	4a2c      	ldr	r2, [pc, #176]	@ (80086ac <prvAddNewTaskToReadyList+0x108>)
 80085fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085fc:	4b2b      	ldr	r3, [pc, #172]	@ (80086ac <prvAddNewTaskToReadyList+0x108>)
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d016      	beq.n	8008638 <prvAddNewTaskToReadyList+0x94>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4618      	mov	r0, r3
 800860e:	f003 f9db 	bl	800b9c8 <SEGGER_SYSVIEW_OnTaskCreate>
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008622:	461d      	mov	r5, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461c      	mov	r4, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862e:	1ae3      	subs	r3, r4, r3
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	462b      	mov	r3, r5
 8008634:	f001 fe9e 	bl	800a374 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4618      	mov	r0, r3
 800863c:	f003 fa48 	bl	800bad0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008644:	2201      	movs	r2, #1
 8008646:	409a      	lsls	r2, r3
 8008648:	4b19      	ldr	r3, [pc, #100]	@ (80086b0 <prvAddNewTaskToReadyList+0x10c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4313      	orrs	r3, r2
 800864e:	4a18      	ldr	r2, [pc, #96]	@ (80086b0 <prvAddNewTaskToReadyList+0x10c>)
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4a15      	ldr	r2, [pc, #84]	@ (80086b4 <prvAddNewTaskToReadyList+0x110>)
 8008660:	441a      	add	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3304      	adds	r3, #4
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f7ff f8d0 	bl	800780e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800866e:	f001 facf 	bl	8009c10 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8008672:	4b0d      	ldr	r3, [pc, #52]	@ (80086a8 <prvAddNewTaskToReadyList+0x104>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00e      	beq.n	8008698 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800867a:	4b0a      	ldr	r3, [pc, #40]	@ (80086a4 <prvAddNewTaskToReadyList+0x100>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008684:	429a      	cmp	r2, r3
 8008686:	d207      	bcs.n	8008698 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8008688:	4b0b      	ldr	r3, [pc, #44]	@ (80086b8 <prvAddNewTaskToReadyList+0x114>)
 800868a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008698:	bf00      	nop
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bdb0      	pop	{r4, r5, r7, pc}
 80086a0:	200006a0 	.word	0x200006a0
 80086a4:	200005c8 	.word	0x200005c8
 80086a8:	200006ac 	.word	0x200006ac
 80086ac:	200006bc 	.word	0x200006bc
 80086b0:	200006a8 	.word	0x200006a8
 80086b4:	200005cc 	.word	0x200005cc
 80086b8:	e000ed04 	.word	0xe000ed04

080086bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80086c4:	2300      	movs	r3, #0
 80086c6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d01c      	beq.n	8008708 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80086ce:	4b16      	ldr	r3, [pc, #88]	@ (8008728 <vTaskDelay+0x6c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <vTaskDelay+0x32>
        __asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	60bb      	str	r3, [r7, #8]
    }
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80086ee:	f000 f881 	bl	80087f4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	2023      	movs	r0, #35	@ 0x23
 80086f6:	f002 fc6b 	bl	800afd0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086fa:	2100      	movs	r1, #0
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fd0d 	bl	800911c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8008702:	f000 f885 	bl	8008810 <xTaskResumeAll>
 8008706:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d107      	bne.n	800871e <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 800870e:	4b07      	ldr	r3, [pc, #28]	@ (800872c <vTaskDelay+0x70>)
 8008710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800871e:	bf00      	nop
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	200006c8 	.word	0x200006c8
 800872c:	e000ed04 	.word	0xe000ed04

08008730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8008736:	4b27      	ldr	r3, [pc, #156]	@ (80087d4 <vTaskStartScheduler+0xa4>)
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	2300      	movs	r3, #0
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	2300      	movs	r3, #0
 8008740:	2282      	movs	r2, #130	@ 0x82
 8008742:	4925      	ldr	r1, [pc, #148]	@ (80087d8 <vTaskStartScheduler+0xa8>)
 8008744:	4825      	ldr	r0, [pc, #148]	@ (80087dc <vTaskStartScheduler+0xac>)
 8008746:	f7ff fe55 	bl	80083f4 <xTaskCreate>
 800874a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d102      	bne.n	8008758 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8008752:	f000 fd5b 	bl	800920c <xTimerCreateTimerTask>
 8008756:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d124      	bne.n	80087a8 <vTaskStartScheduler+0x78>
        __asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	60bb      	str	r3, [r7, #8]
    }
 8008770:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8008772:	4b1b      	ldr	r3, [pc, #108]	@ (80087e0 <vTaskStartScheduler+0xb0>)
 8008774:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008778:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800877a:	4b1a      	ldr	r3, [pc, #104]	@ (80087e4 <vTaskStartScheduler+0xb4>)
 800877c:	2201      	movs	r2, #1
 800877e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008780:	4b19      	ldr	r3, [pc, #100]	@ (80087e8 <vTaskStartScheduler+0xb8>)
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8008786:	4b19      	ldr	r3, [pc, #100]	@ (80087ec <vTaskStartScheduler+0xbc>)
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	4b12      	ldr	r3, [pc, #72]	@ (80087d4 <vTaskStartScheduler+0xa4>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	429a      	cmp	r2, r3
 8008790:	d102      	bne.n	8008798 <vTaskStartScheduler+0x68>
 8008792:	f003 f8fd 	bl	800b990 <SEGGER_SYSVIEW_OnIdle>
 8008796:	e004      	b.n	80087a2 <vTaskStartScheduler+0x72>
 8008798:	4b14      	ldr	r3, [pc, #80]	@ (80087ec <vTaskStartScheduler+0xbc>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4618      	mov	r0, r3
 800879e:	f003 f955 	bl	800ba4c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80087a2:	f001 f8df 	bl	8009964 <xPortStartScheduler>
 80087a6:	e00f      	b.n	80087c8 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087ae:	d10b      	bne.n	80087c8 <vTaskStartScheduler+0x98>
        __asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	607b      	str	r3, [r7, #4]
    }
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	e7fd      	b.n	80087c4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80087c8:	4b09      	ldr	r3, [pc, #36]	@ (80087f0 <vTaskStartScheduler+0xc0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
}
 80087cc:	bf00      	nop
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	200006c4 	.word	0x200006c4
 80087d8:	0800d614 	.word	0x0800d614
 80087dc:	08008e79 	.word	0x08008e79
 80087e0:	200006c0 	.word	0x200006c0
 80087e4:	200006ac 	.word	0x200006ac
 80087e8:	200006a4 	.word	0x200006a4
 80087ec:	200005c8 	.word	0x200005c8
 80087f0:	200000d4 	.word	0x200000d4

080087f4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80087f8:	4b04      	ldr	r3, [pc, #16]	@ (800880c <vTaskSuspendAll+0x18>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3301      	adds	r3, #1
 80087fe:	4a03      	ldr	r2, [pc, #12]	@ (800880c <vTaskSuspendAll+0x18>)
 8008800:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8008802:	bf00      	nop
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	200006c8 	.word	0x200006c8

08008810 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800881a:	2300      	movs	r3, #0
 800881c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800881e:	4b44      	ldr	r3, [pc, #272]	@ (8008930 <xTaskResumeAll+0x120>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10b      	bne.n	800883e <xTaskResumeAll+0x2e>
        __asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	603b      	str	r3, [r7, #0]
    }
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	e7fd      	b.n	800883a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800883e:	f001 f9b5 	bl	8009bac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8008842:	4b3b      	ldr	r3, [pc, #236]	@ (8008930 <xTaskResumeAll+0x120>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3b01      	subs	r3, #1
 8008848:	4a39      	ldr	r2, [pc, #228]	@ (8008930 <xTaskResumeAll+0x120>)
 800884a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800884c:	4b38      	ldr	r3, [pc, #224]	@ (8008930 <xTaskResumeAll+0x120>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d165      	bne.n	8008920 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008854:	4b37      	ldr	r3, [pc, #220]	@ (8008934 <xTaskResumeAll+0x124>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d061      	beq.n	8008920 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800885c:	e032      	b.n	80088c4 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800885e:	4b36      	ldr	r3, [pc, #216]	@ (8008938 <xTaskResumeAll+0x128>)
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3318      	adds	r3, #24
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff f82c 	bl	80078c8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3304      	adds	r3, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff f827 	bl	80078c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4618      	mov	r0, r3
 800887e:	f003 f927 	bl	800bad0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008886:	2201      	movs	r2, #1
 8008888:	409a      	lsls	r2, r3
 800888a:	4b2c      	ldr	r3, [pc, #176]	@ (800893c <xTaskResumeAll+0x12c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4313      	orrs	r3, r2
 8008890:	4a2a      	ldr	r2, [pc, #168]	@ (800893c <xTaskResumeAll+0x12c>)
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4a27      	ldr	r2, [pc, #156]	@ (8008940 <xTaskResumeAll+0x130>)
 80088a2:	441a      	add	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f7fe ffaf 	bl	800780e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b4:	4b23      	ldr	r3, [pc, #140]	@ (8008944 <xTaskResumeAll+0x134>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d302      	bcc.n	80088c4 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 80088be:	4b22      	ldr	r3, [pc, #136]	@ (8008948 <xTaskResumeAll+0x138>)
 80088c0:	2201      	movs	r2, #1
 80088c2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008938 <xTaskResumeAll+0x128>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1c8      	bne.n	800885e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80088d2:	f000 fb67 	bl	8008fa4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80088d6:	4b1d      	ldr	r3, [pc, #116]	@ (800894c <xTaskResumeAll+0x13c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d010      	beq.n	8008904 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80088e2:	f000 f859 	bl	8008998 <xTaskIncrementTick>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 80088ec:	4b16      	ldr	r3, [pc, #88]	@ (8008948 <xTaskResumeAll+0x138>)
 80088ee:	2201      	movs	r2, #1
 80088f0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1f1      	bne.n	80088e2 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80088fe:	4b13      	ldr	r3, [pc, #76]	@ (800894c <xTaskResumeAll+0x13c>)
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8008904:	4b10      	ldr	r3, [pc, #64]	@ (8008948 <xTaskResumeAll+0x138>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d009      	beq.n	8008920 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800890c:	2301      	movs	r3, #1
 800890e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8008910:	4b0f      	ldr	r3, [pc, #60]	@ (8008950 <xTaskResumeAll+0x140>)
 8008912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008916:	601a      	str	r2, [r3, #0]
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8008920:	f001 f976 	bl	8009c10 <vPortExitCritical>

    return xAlreadyYielded;
 8008924:	68bb      	ldr	r3, [r7, #8]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	200006c8 	.word	0x200006c8
 8008934:	200006a0 	.word	0x200006a0
 8008938:	20000660 	.word	0x20000660
 800893c:	200006a8 	.word	0x200006a8
 8008940:	200005cc 	.word	0x200005cc
 8008944:	200005c8 	.word	0x200005c8
 8008948:	200006b4 	.word	0x200006b4
 800894c:	200006b0 	.word	0x200006b0
 8008950:	e000ed04 	.word	0xe000ed04

08008954 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800895a:	4b05      	ldr	r3, [pc, #20]	@ (8008970 <xTaskGetTickCount+0x1c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8008960:	687b      	ldr	r3, [r7, #4]
}
 8008962:	4618      	mov	r0, r3
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	200006a4 	.word	0x200006a4

08008974 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800897a:	f001 fa07 	bl	8009d8c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800897e:	2300      	movs	r3, #0
 8008980:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8008982:	4b04      	ldr	r3, [pc, #16]	@ (8008994 <xTaskGetTickCountFromISR+0x20>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8008988:	683b      	ldr	r3, [r7, #0]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	200006a4 	.word	0x200006a4

08008998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800899e:	2300      	movs	r3, #0
 80089a0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a2:	4b51      	ldr	r3, [pc, #324]	@ (8008ae8 <xTaskIncrementTick+0x150>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 8093 	bne.w	8008ad2 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089ac:	4b4f      	ldr	r3, [pc, #316]	@ (8008aec <xTaskIncrementTick+0x154>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3301      	adds	r3, #1
 80089b2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80089b4:	4a4d      	ldr	r2, [pc, #308]	@ (8008aec <xTaskIncrementTick+0x154>)
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d121      	bne.n	8008a04 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80089c0:	4b4b      	ldr	r3, [pc, #300]	@ (8008af0 <xTaskIncrementTick+0x158>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00b      	beq.n	80089e2 <xTaskIncrementTick+0x4a>
        __asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	603b      	str	r3, [r7, #0]
    }
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	e7fd      	b.n	80089de <xTaskIncrementTick+0x46>
 80089e2:	4b43      	ldr	r3, [pc, #268]	@ (8008af0 <xTaskIncrementTick+0x158>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	4b42      	ldr	r3, [pc, #264]	@ (8008af4 <xTaskIncrementTick+0x15c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a40      	ldr	r2, [pc, #256]	@ (8008af0 <xTaskIncrementTick+0x158>)
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	4a40      	ldr	r2, [pc, #256]	@ (8008af4 <xTaskIncrementTick+0x15c>)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	4b40      	ldr	r3, [pc, #256]	@ (8008af8 <xTaskIncrementTick+0x160>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3301      	adds	r3, #1
 80089fc:	4a3e      	ldr	r2, [pc, #248]	@ (8008af8 <xTaskIncrementTick+0x160>)
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	f000 fad0 	bl	8008fa4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008a04:	4b3d      	ldr	r3, [pc, #244]	@ (8008afc <xTaskIncrementTick+0x164>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d34c      	bcc.n	8008aa8 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a0e:	4b38      	ldr	r3, [pc, #224]	@ (8008af0 <xTaskIncrementTick+0x158>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d104      	bne.n	8008a22 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a18:	4b38      	ldr	r3, [pc, #224]	@ (8008afc <xTaskIncrementTick+0x164>)
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a1e:	601a      	str	r2, [r3, #0]
                    break;
 8008a20:	e042      	b.n	8008aa8 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a22:	4b33      	ldr	r3, [pc, #204]	@ (8008af0 <xTaskIncrementTick+0x158>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d203      	bcs.n	8008a42 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8008a3a:	4a30      	ldr	r2, [pc, #192]	@ (8008afc <xTaskIncrementTick+0x164>)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a40:	e032      	b.n	8008aa8 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	3304      	adds	r3, #4
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe ff3e 	bl	80078c8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d004      	beq.n	8008a5e <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	3318      	adds	r3, #24
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fe ff35 	bl	80078c8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f003 f835 	bl	800bad0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	409a      	lsls	r2, r3
 8008a6e:	4b24      	ldr	r3, [pc, #144]	@ (8008b00 <xTaskIncrementTick+0x168>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	4a22      	ldr	r2, [pc, #136]	@ (8008b00 <xTaskIncrementTick+0x168>)
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4a1f      	ldr	r2, [pc, #124]	@ (8008b04 <xTaskIncrementTick+0x16c>)
 8008a86:	441a      	add	r2, r3
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4610      	mov	r0, r2
 8008a90:	f7fe febd 	bl	800780e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a98:	4b1b      	ldr	r3, [pc, #108]	@ (8008b08 <xTaskIncrementTick+0x170>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d3b5      	bcc.n	8008a0e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aa6:	e7b2      	b.n	8008a0e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008aa8:	4b17      	ldr	r3, [pc, #92]	@ (8008b08 <xTaskIncrementTick+0x170>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aae:	4915      	ldr	r1, [pc, #84]	@ (8008b04 <xTaskIncrementTick+0x16c>)
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	440b      	add	r3, r1
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d901      	bls.n	8008ac4 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8008ac4:	4b11      	ldr	r3, [pc, #68]	@ (8008b0c <xTaskIncrementTick+0x174>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d007      	beq.n	8008adc <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8008acc:	2301      	movs	r3, #1
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	e004      	b.n	8008adc <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8008b10 <xTaskIncrementTick+0x178>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8008b10 <xTaskIncrementTick+0x178>)
 8008ada:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8008adc:	697b      	ldr	r3, [r7, #20]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200006c8 	.word	0x200006c8
 8008aec:	200006a4 	.word	0x200006a4
 8008af0:	20000658 	.word	0x20000658
 8008af4:	2000065c 	.word	0x2000065c
 8008af8:	200006b8 	.word	0x200006b8
 8008afc:	200006c0 	.word	0x200006c0
 8008b00:	200006a8 	.word	0x200006a8
 8008b04:	200005cc 	.word	0x200005cc
 8008b08:	200005c8 	.word	0x200005c8
 8008b0c:	200006b4 	.word	0x200006b4
 8008b10:	200006b0 	.word	0x200006b0

08008b14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8008bd0 <vTaskSwitchContext+0xbc>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008b22:	4b2c      	ldr	r3, [pc, #176]	@ (8008bd4 <vTaskSwitchContext+0xc0>)
 8008b24:	2201      	movs	r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8008b28:	e04e      	b.n	8008bc8 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8008b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8008bd4 <vTaskSwitchContext+0xc0>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b30:	4b29      	ldr	r3, [pc, #164]	@ (8008bd8 <vTaskSwitchContext+0xc4>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	fab3 f383 	clz	r3, r3
 8008b3c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8008b3e:	7afb      	ldrb	r3, [r7, #11]
 8008b40:	f1c3 031f 	rsb	r3, r3, #31
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	4925      	ldr	r1, [pc, #148]	@ (8008bdc <vTaskSwitchContext+0xc8>)
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	440b      	add	r3, r1
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10b      	bne.n	8008b72 <vTaskSwitchContext+0x5e>
        __asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	607b      	str	r3, [r7, #4]
    }
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	e7fd      	b.n	8008b6e <vTaskSwitchContext+0x5a>
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4a17      	ldr	r2, [pc, #92]	@ (8008bdc <vTaskSwitchContext+0xc8>)
 8008b7e:	4413      	add	r3, r2
 8008b80:	613b      	str	r3, [r7, #16]
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	605a      	str	r2, [r3, #4]
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	3308      	adds	r3, #8
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d104      	bne.n	8008ba2 <vTaskSwitchContext+0x8e>
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	605a      	str	r2, [r3, #4]
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8008be0 <vTaskSwitchContext+0xcc>)
 8008baa:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8008bac:	4b0c      	ldr	r3, [pc, #48]	@ (8008be0 <vTaskSwitchContext+0xcc>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008be4 <vTaskSwitchContext+0xd0>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d102      	bne.n	8008bbe <vTaskSwitchContext+0xaa>
 8008bb8:	f002 feea 	bl	800b990 <SEGGER_SYSVIEW_OnIdle>
}
 8008bbc:	e004      	b.n	8008bc8 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8008bbe:	4b08      	ldr	r3, [pc, #32]	@ (8008be0 <vTaskSwitchContext+0xcc>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f002 ff42 	bl	800ba4c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8008bc8:	bf00      	nop
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	200006c8 	.word	0x200006c8
 8008bd4:	200006b4 	.word	0x200006b4
 8008bd8:	200006a8 	.word	0x200006a8
 8008bdc:	200005cc 	.word	0x200005cc
 8008be0:	200005c8 	.word	0x200005c8
 8008be4:	200006c4 	.word	0x200006c4

08008be8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10b      	bne.n	8008c10 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	60fb      	str	r3, [r7, #12]
    }
 8008c0a:	bf00      	nop
 8008c0c:	bf00      	nop
 8008c0e:	e7fd      	b.n	8008c0c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c10:	4b07      	ldr	r3, [pc, #28]	@ (8008c30 <vTaskPlaceOnEventList+0x48>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3318      	adds	r3, #24
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7fe fe1c 	bl	8007856 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c1e:	2101      	movs	r1, #1
 8008c20:	6838      	ldr	r0, [r7, #0]
 8008c22:	f000 fa7b 	bl	800911c <prvAddCurrentTaskToDelayedList>
}
 8008c26:	bf00      	nop
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	200005c8 	.word	0x200005c8

08008c34 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10b      	bne.n	8008c5e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	617b      	str	r3, [r7, #20]
    }
 8008c58:	bf00      	nop
 8008c5a:	bf00      	nop
 8008c5c:	e7fd      	b.n	8008c5a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c90 <vTaskPlaceOnEventListRestricted+0x5c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3318      	adds	r3, #24
 8008c64:	4619      	mov	r1, r3
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f7fe fdd1 	bl	800780e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8008c72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c76:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8008c78:	2024      	movs	r0, #36	@ 0x24
 8008c7a:	f002 f98b 	bl	800af94 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	68b8      	ldr	r0, [r7, #8]
 8008c82:	f000 fa4b 	bl	800911c <prvAddCurrentTaskToDelayedList>
    }
 8008c86:	bf00      	nop
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	200005c8 	.word	0x200005c8

08008c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10b      	bne.n	8008cc2 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	60fb      	str	r3, [r7, #12]
    }
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	e7fd      	b.n	8008cbe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	3318      	adds	r3, #24
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe fdfe 	bl	80078c8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8008d4c <xTaskRemoveFromEventList+0xb8>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d120      	bne.n	8008d16 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fe fdf5 	bl	80078c8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f002 fef5 	bl	800bad0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cea:	2201      	movs	r2, #1
 8008cec:	409a      	lsls	r2, r3
 8008cee:	4b18      	ldr	r3, [pc, #96]	@ (8008d50 <xTaskRemoveFromEventList+0xbc>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	4a16      	ldr	r2, [pc, #88]	@ (8008d50 <xTaskRemoveFromEventList+0xbc>)
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4a13      	ldr	r2, [pc, #76]	@ (8008d54 <xTaskRemoveFromEventList+0xc0>)
 8008d06:	441a      	add	r2, r3
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f7fe fd7d 	bl	800780e <vListInsertEnd>
 8008d14:	e005      	b.n	8008d22 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	3318      	adds	r3, #24
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	480e      	ldr	r0, [pc, #56]	@ (8008d58 <xTaskRemoveFromEventList+0xc4>)
 8008d1e:	f7fe fd76 	bl	800780e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d26:	4b0d      	ldr	r3, [pc, #52]	@ (8008d5c <xTaskRemoveFromEventList+0xc8>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d905      	bls.n	8008d3c <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008d30:	2301      	movs	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008d34:	4b0a      	ldr	r3, [pc, #40]	@ (8008d60 <xTaskRemoveFromEventList+0xcc>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	e001      	b.n	8008d40 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8008d40:	697b      	ldr	r3, [r7, #20]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	200006c8 	.word	0x200006c8
 8008d50:	200006a8 	.word	0x200006a8
 8008d54:	200005cc 	.word	0x200005cc
 8008d58:	20000660 	.word	0x20000660
 8008d5c:	200005c8 	.word	0x200005c8
 8008d60:	200006b4 	.word	0x200006b4

08008d64 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d6c:	4b06      	ldr	r3, [pc, #24]	@ (8008d88 <vTaskInternalSetTimeOutState+0x24>)
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008d74:	4b05      	ldr	r3, [pc, #20]	@ (8008d8c <vTaskInternalSetTimeOutState+0x28>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	605a      	str	r2, [r3, #4]
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	200006b8 	.word	0x200006b8
 8008d8c:	200006a4 	.word	0x200006a4

08008d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10b      	bne.n	8008db8 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	613b      	str	r3, [r7, #16]
    }
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	e7fd      	b.n	8008db4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10b      	bne.n	8008dd6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	60fb      	str	r3, [r7, #12]
    }
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	e7fd      	b.n	8008dd2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8008dd6:	f000 fee9 	bl	8009bac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008dda:	4b1f      	ldr	r3, [pc, #124]	@ (8008e58 <xTaskCheckForTimeOut+0xc8>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008df2:	d102      	bne.n	8008dfa <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61fb      	str	r3, [r7, #28]
 8008df8:	e026      	b.n	8008e48 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	4b17      	ldr	r3, [pc, #92]	@ (8008e5c <xTaskCheckForTimeOut+0xcc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d00a      	beq.n	8008e1c <xTaskCheckForTimeOut+0x8c>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d305      	bcc.n	8008e1c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008e10:	2301      	movs	r3, #1
 8008e12:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	e015      	b.n	8008e48 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d20b      	bcs.n	8008e3e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	1ad2      	subs	r2, r2, r3
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff ff96 	bl	8008d64 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61fb      	str	r3, [r7, #28]
 8008e3c:	e004      	b.n	8008e48 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2200      	movs	r2, #0
 8008e42:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008e44:	2301      	movs	r3, #1
 8008e46:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8008e48:	f000 fee2 	bl	8009c10 <vPortExitCritical>

    return xReturn;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3720      	adds	r7, #32
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	200006a4 	.word	0x200006a4
 8008e5c:	200006b8 	.word	0x200006b8

08008e60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e60:	b480      	push	{r7}
 8008e62:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008e64:	4b03      	ldr	r3, [pc, #12]	@ (8008e74 <vTaskMissedYield+0x14>)
 8008e66:	2201      	movs	r2, #1
 8008e68:	601a      	str	r2, [r3, #0]
}
 8008e6a:	bf00      	nop
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	200006b4 	.word	0x200006b4

08008e78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008e80:	f000 f852 	bl	8008f28 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e84:	4b06      	ldr	r3, [pc, #24]	@ (8008ea0 <prvIdleTask+0x28>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d9f9      	bls.n	8008e80 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8008e8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ea4 <prvIdleTask+0x2c>)
 8008e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8008e9c:	e7f0      	b.n	8008e80 <prvIdleTask+0x8>
 8008e9e:	bf00      	nop
 8008ea0:	200005cc 	.word	0x200005cc
 8008ea4:	e000ed04 	.word	0xe000ed04

08008ea8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eae:	2300      	movs	r3, #0
 8008eb0:	607b      	str	r3, [r7, #4]
 8008eb2:	e00c      	b.n	8008ece <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4a12      	ldr	r2, [pc, #72]	@ (8008f08 <prvInitialiseTaskLists+0x60>)
 8008ec0:	4413      	add	r3, r2
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fc76 	bl	80077b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	607b      	str	r3, [r7, #4]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d9ef      	bls.n	8008eb4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008ed4:	480d      	ldr	r0, [pc, #52]	@ (8008f0c <prvInitialiseTaskLists+0x64>)
 8008ed6:	f7fe fc6d 	bl	80077b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008eda:	480d      	ldr	r0, [pc, #52]	@ (8008f10 <prvInitialiseTaskLists+0x68>)
 8008edc:	f7fe fc6a 	bl	80077b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008ee0:	480c      	ldr	r0, [pc, #48]	@ (8008f14 <prvInitialiseTaskLists+0x6c>)
 8008ee2:	f7fe fc67 	bl	80077b4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8008ee6:	480c      	ldr	r0, [pc, #48]	@ (8008f18 <prvInitialiseTaskLists+0x70>)
 8008ee8:	f7fe fc64 	bl	80077b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8008eec:	480b      	ldr	r0, [pc, #44]	@ (8008f1c <prvInitialiseTaskLists+0x74>)
 8008eee:	f7fe fc61 	bl	80077b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f20 <prvInitialiseTaskLists+0x78>)
 8008ef4:	4a05      	ldr	r2, [pc, #20]	@ (8008f0c <prvInitialiseTaskLists+0x64>)
 8008ef6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8008f24 <prvInitialiseTaskLists+0x7c>)
 8008efa:	4a05      	ldr	r2, [pc, #20]	@ (8008f10 <prvInitialiseTaskLists+0x68>)
 8008efc:	601a      	str	r2, [r3, #0]
}
 8008efe:	bf00      	nop
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	200005cc 	.word	0x200005cc
 8008f0c:	20000630 	.word	0x20000630
 8008f10:	20000644 	.word	0x20000644
 8008f14:	20000660 	.word	0x20000660
 8008f18:	20000674 	.word	0x20000674
 8008f1c:	2000068c 	.word	0x2000068c
 8008f20:	20000658 	.word	0x20000658
 8008f24:	2000065c 	.word	0x2000065c

08008f28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f2e:	e019      	b.n	8008f64 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8008f30:	f000 fe3c 	bl	8009bac <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f34:	4b10      	ldr	r3, [pc, #64]	@ (8008f78 <prvCheckTasksWaitingTermination+0x50>)
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fe fcc1 	bl	80078c8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8008f46:	4b0d      	ldr	r3, [pc, #52]	@ (8008f7c <prvCheckTasksWaitingTermination+0x54>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8008f7c <prvCheckTasksWaitingTermination+0x54>)
 8008f4e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8008f50:	4b0b      	ldr	r3, [pc, #44]	@ (8008f80 <prvCheckTasksWaitingTermination+0x58>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	4a0a      	ldr	r2, [pc, #40]	@ (8008f80 <prvCheckTasksWaitingTermination+0x58>)
 8008f58:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8008f5a:	f000 fe59 	bl	8009c10 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f810 	bl	8008f84 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f64:	4b06      	ldr	r3, [pc, #24]	@ (8008f80 <prvCheckTasksWaitingTermination+0x58>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1e1      	bne.n	8008f30 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20000674 	.word	0x20000674
 8008f7c:	200006a0 	.word	0x200006a0
 8008f80:	20000688 	.word	0x20000688

08008f84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f90:	4618      	mov	r0, r3
 8008f92:	f001 f81f 	bl	8009fd4 <vPortFree>
                vPortFree( pxTCB );
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f001 f81c 	bl	8009fd4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd4 <prvResetNextTaskUnblockTime+0x30>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d104      	bne.n	8008fbc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008fb2:	4b09      	ldr	r3, [pc, #36]	@ (8008fd8 <prvResetNextTaskUnblockTime+0x34>)
 8008fb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fb8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008fba:	e005      	b.n	8008fc8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fbc:	4b05      	ldr	r3, [pc, #20]	@ (8008fd4 <prvResetNextTaskUnblockTime+0x30>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a04      	ldr	r2, [pc, #16]	@ (8008fd8 <prvResetNextTaskUnblockTime+0x34>)
 8008fc6:	6013      	str	r3, [r2, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	20000658 	.word	0x20000658
 8008fd8:	200006c0 	.word	0x200006c0

08008fdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8008fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8009010 <xTaskGetSchedulerState+0x34>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d102      	bne.n	8008ff0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008fea:	2301      	movs	r3, #1
 8008fec:	607b      	str	r3, [r7, #4]
 8008fee:	e008      	b.n	8009002 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ff0:	4b08      	ldr	r3, [pc, #32]	@ (8009014 <xTaskGetSchedulerState+0x38>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d102      	bne.n	8008ffe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	607b      	str	r3, [r7, #4]
 8008ffc:	e001      	b.n	8009002 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8008ffe:	2300      	movs	r3, #0
 8009000:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009002:	687b      	ldr	r3, [r7, #4]
    }
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	200006ac 	.word	0x200006ac
 8009014:	200006c8 	.word	0x200006c8

08009018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8009024:	2300      	movs	r3, #0
 8009026:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d06a      	beq.n	8009104 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800902e:	4b38      	ldr	r3, [pc, #224]	@ (8009110 <xTaskPriorityDisinherit+0xf8>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	429a      	cmp	r2, r3
 8009036:	d00b      	beq.n	8009050 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	60fb      	str	r3, [r7, #12]
    }
 800904a:	bf00      	nop
 800904c:	bf00      	nop
 800904e:	e7fd      	b.n	800904c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10b      	bne.n	8009070 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	60bb      	str	r3, [r7, #8]
    }
 800906a:	bf00      	nop
 800906c:	bf00      	nop
 800906e:	e7fd      	b.n	800906c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009074:	1e5a      	subs	r2, r3, #1
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009082:	429a      	cmp	r2, r3
 8009084:	d03e      	beq.n	8009104 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800908a:	2b00      	cmp	r3, #0
 800908c:	d13a      	bne.n	8009104 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	3304      	adds	r3, #4
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe fc18 	bl	80078c8 <uxListRemove>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10a      	bne.n	80090b4 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a2:	2201      	movs	r2, #1
 80090a4:	fa02 f303 	lsl.w	r3, r2, r3
 80090a8:	43da      	mvns	r2, r3
 80090aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009114 <xTaskPriorityDisinherit+0xfc>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4013      	ands	r3, r2
 80090b0:	4a18      	ldr	r2, [pc, #96]	@ (8009114 <xTaskPriorityDisinherit+0xfc>)
 80090b2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4619      	mov	r1, r3
 80090b8:	204a      	movs	r0, #74	@ 0x4a
 80090ba:	f001 ff89 	bl	800afd0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ca:	f1c3 0205 	rsb	r2, r3, #5
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d6:	2201      	movs	r2, #1
 80090d8:	409a      	lsls	r2, r3
 80090da:	4b0e      	ldr	r3, [pc, #56]	@ (8009114 <xTaskPriorityDisinherit+0xfc>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4313      	orrs	r3, r2
 80090e0:	4a0c      	ldr	r2, [pc, #48]	@ (8009114 <xTaskPriorityDisinherit+0xfc>)
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090e8:	4613      	mov	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4a09      	ldr	r2, [pc, #36]	@ (8009118 <xTaskPriorityDisinherit+0x100>)
 80090f2:	441a      	add	r2, r3
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	3304      	adds	r3, #4
 80090f8:	4619      	mov	r1, r3
 80090fa:	4610      	mov	r0, r2
 80090fc:	f7fe fb87 	bl	800780e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009100:	2301      	movs	r3, #1
 8009102:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009104:	697b      	ldr	r3, [r7, #20]
    }
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	200005c8 	.word	0x200005c8
 8009114:	200006a8 	.word	0x200006a8
 8009118:	200005cc 	.word	0x200005cc

0800911c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009126:	4b32      	ldr	r3, [pc, #200]	@ (80091f0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800912c:	4b31      	ldr	r3, [pc, #196]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3304      	adds	r3, #4
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fbc8 	bl	80078c8 <uxListRemove>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10b      	bne.n	8009156 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800913e:	4b2d      	ldr	r3, [pc, #180]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	2201      	movs	r2, #1
 8009146:	fa02 f303 	lsl.w	r3, r2, r3
 800914a:	43da      	mvns	r2, r3
 800914c:	4b2a      	ldr	r3, [pc, #168]	@ (80091f8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4013      	ands	r3, r2
 8009152:	4a29      	ldr	r2, [pc, #164]	@ (80091f8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8009154:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800915c:	d110      	bne.n	8009180 <prvAddCurrentTaskToDelayedList+0x64>
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00d      	beq.n	8009180 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8009164:	4b23      	ldr	r3, [pc, #140]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	211b      	movs	r1, #27
 800916a:	4618      	mov	r0, r3
 800916c:	f002 fcf2 	bl	800bb54 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009170:	4b20      	ldr	r3, [pc, #128]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3304      	adds	r3, #4
 8009176:	4619      	mov	r1, r3
 8009178:	4820      	ldr	r0, [pc, #128]	@ (80091fc <prvAddCurrentTaskToDelayedList+0xe0>)
 800917a:	f7fe fb48 	bl	800780e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800917e:	e032      	b.n	80091e6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4413      	add	r3, r2
 8009186:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009188:	4b1a      	ldr	r3, [pc, #104]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	429a      	cmp	r2, r3
 8009196:	d20f      	bcs.n	80091b8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8009198:	4b16      	ldr	r3, [pc, #88]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2104      	movs	r1, #4
 800919e:	4618      	mov	r0, r3
 80091a0:	f002 fcd8 	bl	800bb54 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091a4:	4b16      	ldr	r3, [pc, #88]	@ (8009200 <prvAddCurrentTaskToDelayedList+0xe4>)
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	4b12      	ldr	r3, [pc, #72]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3304      	adds	r3, #4
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f7fe fb50 	bl	8007856 <vListInsert>
}
 80091b6:	e016      	b.n	80091e6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80091b8:	4b0e      	ldr	r3, [pc, #56]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2104      	movs	r1, #4
 80091be:	4618      	mov	r0, r3
 80091c0:	f002 fcc8 	bl	800bb54 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009204 <prvAddCurrentTaskToDelayedList+0xe8>)
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	4b0a      	ldr	r3, [pc, #40]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3304      	adds	r3, #4
 80091ce:	4619      	mov	r1, r3
 80091d0:	4610      	mov	r0, r2
 80091d2:	f7fe fb40 	bl	8007856 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80091d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009208 <prvAddCurrentTaskToDelayedList+0xec>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d202      	bcs.n	80091e6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80091e0:	4a09      	ldr	r2, [pc, #36]	@ (8009208 <prvAddCurrentTaskToDelayedList+0xec>)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	6013      	str	r3, [r2, #0]
}
 80091e6:	bf00      	nop
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	200006a4 	.word	0x200006a4
 80091f4:	200005c8 	.word	0x200005c8
 80091f8:	200006a8 	.word	0x200006a8
 80091fc:	2000068c 	.word	0x2000068c
 8009200:	2000065c 	.word	0x2000065c
 8009204:	20000658 	.word	0x20000658
 8009208:	200006c0 	.word	0x200006c0

0800920c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8009212:	2300      	movs	r3, #0
 8009214:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8009216:	f000 fae1 	bl	80097dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800921a:	4b12      	ldr	r3, [pc, #72]	@ (8009264 <xTimerCreateTimerTask+0x58>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8009222:	4b11      	ldr	r3, [pc, #68]	@ (8009268 <xTimerCreateTimerTask+0x5c>)
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	2302      	movs	r3, #2
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	2300      	movs	r3, #0
 800922c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009230:	490e      	ldr	r1, [pc, #56]	@ (800926c <xTimerCreateTimerTask+0x60>)
 8009232:	480f      	ldr	r0, [pc, #60]	@ (8009270 <xTimerCreateTimerTask+0x64>)
 8009234:	f7ff f8de 	bl	80083f4 <xTaskCreate>
 8009238:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10b      	bne.n	8009258 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	603b      	str	r3, [r7, #0]
    }
 8009252:	bf00      	nop
 8009254:	bf00      	nop
 8009256:	e7fd      	b.n	8009254 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8009258:	687b      	ldr	r3, [r7, #4]
    }
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200006fc 	.word	0x200006fc
 8009268:	20000700 	.word	0x20000700
 800926c:	0800d61c 	.word	0x0800d61c
 8009270:	080093ad 	.word	0x080093ad

08009274 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	@ 0x28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
 8009280:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8009282:	2300      	movs	r3, #0
 8009284:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10b      	bne.n	80092a4 <xTimerGenericCommand+0x30>
        __asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	623b      	str	r3, [r7, #32]
    }
 800929e:	bf00      	nop
 80092a0:	bf00      	nop
 80092a2:	e7fd      	b.n	80092a0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80092a4:	4b19      	ldr	r3, [pc, #100]	@ (800930c <xTimerGenericCommand+0x98>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d02a      	beq.n	8009302 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2b05      	cmp	r3, #5
 80092bc:	dc18      	bgt.n	80092f0 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092be:	f7ff fe8d 	bl	8008fdc <xTaskGetSchedulerState>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d109      	bne.n	80092dc <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092c8:	4b10      	ldr	r3, [pc, #64]	@ (800930c <xTimerGenericCommand+0x98>)
 80092ca:	6818      	ldr	r0, [r3, #0]
 80092cc:	f107 0114 	add.w	r1, r7, #20
 80092d0:	2300      	movs	r3, #0
 80092d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092d4:	f7fe fc18 	bl	8007b08 <xQueueGenericSend>
 80092d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80092da:	e012      	b.n	8009302 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092dc:	4b0b      	ldr	r3, [pc, #44]	@ (800930c <xTimerGenericCommand+0x98>)
 80092de:	6818      	ldr	r0, [r3, #0]
 80092e0:	f107 0114 	add.w	r1, r7, #20
 80092e4:	2300      	movs	r3, #0
 80092e6:	2200      	movs	r2, #0
 80092e8:	f7fe fc0e 	bl	8007b08 <xQueueGenericSend>
 80092ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80092ee:	e008      	b.n	8009302 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092f0:	4b06      	ldr	r3, [pc, #24]	@ (800930c <xTimerGenericCommand+0x98>)
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	f107 0114 	add.w	r1, r7, #20
 80092f8:	2300      	movs	r3, #0
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	f7fe fd2e 	bl	8007d5c <xQueueGenericSendFromISR>
 8009300:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8009304:	4618      	mov	r0, r3
 8009306:	3728      	adds	r7, #40	@ 0x28
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	200006fc 	.word	0x200006fc

08009310 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8009310:	b580      	push	{r7, lr}
 8009312:	b088      	sub	sp, #32
 8009314:	af02      	add	r7, sp, #8
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931a:	4b23      	ldr	r3, [pc, #140]	@ (80093a8 <prvProcessExpiredTimer+0x98>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	3304      	adds	r3, #4
 8009328:	4618      	mov	r0, r3
 800932a:	f7fe facd 	bl	80078c8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d023      	beq.n	8009384 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	699a      	ldr	r2, [r3, #24]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	18d1      	adds	r1, r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	6978      	ldr	r0, [r7, #20]
 800934a:	f000 f8d5 	bl	80094f8 <prvInsertTimerInActiveList>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d020      	beq.n	8009396 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009354:	2300      	movs	r3, #0
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	2300      	movs	r3, #0
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	2100      	movs	r1, #0
 800935e:	6978      	ldr	r0, [r7, #20]
 8009360:	f7ff ff88 	bl	8009274 <xTimerGenericCommand>
 8009364:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d114      	bne.n	8009396 <prvProcessExpiredTimer+0x86>
        __asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	60fb      	str	r3, [r7, #12]
    }
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	e7fd      	b.n	8009380 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	b2da      	uxtb	r2, r3
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	6978      	ldr	r0, [r7, #20]
 800939c:	4798      	blx	r3
    }
 800939e:	bf00      	nop
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	200006f4 	.word	0x200006f4

080093ac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093b4:	f107 0308 	add.w	r3, r7, #8
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 f859 	bl	8009470 <prvGetNextExpireTime>
 80093be:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	4619      	mov	r1, r3
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f805 	bl	80093d4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80093ca:	f000 f8d7 	bl	800957c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093ce:	bf00      	nop
 80093d0:	e7f0      	b.n	80093b4 <prvTimerTask+0x8>
	...

080093d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80093de:	f7ff fa09 	bl	80087f4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093e2:	f107 0308 	add.w	r3, r7, #8
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f866 	bl	80094b8 <prvSampleTimeNow>
 80093ec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d130      	bne.n	8009456 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10a      	bne.n	8009410 <prvProcessTimerOrBlockTask+0x3c>
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d806      	bhi.n	8009410 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8009402:	f7ff fa05 	bl	8008810 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7ff ff81 	bl	8009310 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800940e:	e024      	b.n	800945a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d008      	beq.n	8009428 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009416:	4b13      	ldr	r3, [pc, #76]	@ (8009464 <prvProcessTimerOrBlockTask+0x90>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d101      	bne.n	8009424 <prvProcessTimerOrBlockTask+0x50>
 8009420:	2301      	movs	r3, #1
 8009422:	e000      	b.n	8009426 <prvProcessTimerOrBlockTask+0x52>
 8009424:	2300      	movs	r3, #0
 8009426:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009428:	4b0f      	ldr	r3, [pc, #60]	@ (8009468 <prvProcessTimerOrBlockTask+0x94>)
 800942a:	6818      	ldr	r0, [r3, #0]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	4619      	mov	r1, r3
 8009436:	f7fe ffa9 	bl	800838c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800943a:	f7ff f9e9 	bl	8008810 <xTaskResumeAll>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10a      	bne.n	800945a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8009444:	4b09      	ldr	r3, [pc, #36]	@ (800946c <prvProcessTimerOrBlockTask+0x98>)
 8009446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	f3bf 8f6f 	isb	sy
    }
 8009454:	e001      	b.n	800945a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8009456:	f7ff f9db 	bl	8008810 <xTaskResumeAll>
    }
 800945a:	bf00      	nop
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	200006f8 	.word	0x200006f8
 8009468:	200006fc 	.word	0x200006fc
 800946c:	e000ed04 	.word	0xe000ed04

08009470 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009478:	4b0e      	ldr	r3, [pc, #56]	@ (80094b4 <prvGetNextExpireTime+0x44>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <prvGetNextExpireTime+0x16>
 8009482:	2201      	movs	r2, #1
 8009484:	e000      	b.n	8009488 <prvGetNextExpireTime+0x18>
 8009486:	2200      	movs	r2, #0
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d105      	bne.n	80094a0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009494:	4b07      	ldr	r3, [pc, #28]	@ (80094b4 <prvGetNextExpireTime+0x44>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	60fb      	str	r3, [r7, #12]
 800949e:	e001      	b.n	80094a4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80094a4:	68fb      	ldr	r3, [r7, #12]
    }
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	200006f4 	.word	0x200006f4

080094b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80094c0:	f7ff fa48 	bl	8008954 <xTaskGetTickCount>
 80094c4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80094c6:	4b0b      	ldr	r3, [pc, #44]	@ (80094f4 <prvSampleTimeNow+0x3c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d205      	bcs.n	80094dc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80094d0:	f000 f91e 	bl	8009710 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	e002      	b.n	80094e2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80094e2:	4a04      	ldr	r2, [pc, #16]	@ (80094f4 <prvSampleTimeNow+0x3c>)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80094e8:	68fb      	ldr	r3, [r7, #12]
    }
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20000704 	.word	0x20000704

080094f8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8009506:	2300      	movs	r3, #0
 8009508:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	429a      	cmp	r2, r3
 800951c:	d812      	bhi.n	8009544 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	1ad2      	subs	r2, r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	429a      	cmp	r2, r3
 800952a:	d302      	bcc.n	8009532 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800952c:	2301      	movs	r3, #1
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	e01b      	b.n	800956a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009532:	4b10      	ldr	r3, [pc, #64]	@ (8009574 <prvInsertTimerInActiveList+0x7c>)
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3304      	adds	r3, #4
 800953a:	4619      	mov	r1, r3
 800953c:	4610      	mov	r0, r2
 800953e:	f7fe f98a 	bl	8007856 <vListInsert>
 8009542:	e012      	b.n	800956a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	429a      	cmp	r2, r3
 800954a:	d206      	bcs.n	800955a <prvInsertTimerInActiveList+0x62>
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	429a      	cmp	r2, r3
 8009552:	d302      	bcc.n	800955a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	617b      	str	r3, [r7, #20]
 8009558:	e007      	b.n	800956a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800955a:	4b07      	ldr	r3, [pc, #28]	@ (8009578 <prvInsertTimerInActiveList+0x80>)
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3304      	adds	r3, #4
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f7fe f976 	bl	8007856 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800956a:	697b      	ldr	r3, [r7, #20]
    }
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	200006f8 	.word	0x200006f8
 8009578:	200006f4 	.word	0x200006f4

0800957c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800957c:	b580      	push	{r7, lr}
 800957e:	b08c      	sub	sp, #48	@ 0x30
 8009580:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009582:	e0b2      	b.n	80096ea <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f2c0 80af 	blt.w	80096ea <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d004      	beq.n	80095a2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959a:	3304      	adds	r3, #4
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe f993 	bl	80078c8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095a2:	1d3b      	adds	r3, r7, #4
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff ff87 	bl	80094b8 <prvSampleTimeNow>
 80095aa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2b09      	cmp	r3, #9
 80095b0:	f200 8098 	bhi.w	80096e4 <prvProcessReceivedCommands+0x168>
 80095b4:	a201      	add	r2, pc, #4	@ (adr r2, 80095bc <prvProcessReceivedCommands+0x40>)
 80095b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ba:	bf00      	nop
 80095bc:	080095e5 	.word	0x080095e5
 80095c0:	080095e5 	.word	0x080095e5
 80095c4:	080095e5 	.word	0x080095e5
 80095c8:	0800965b 	.word	0x0800965b
 80095cc:	0800966f 	.word	0x0800966f
 80095d0:	080096bb 	.word	0x080096bb
 80095d4:	080095e5 	.word	0x080095e5
 80095d8:	080095e5 	.word	0x080095e5
 80095dc:	0800965b 	.word	0x0800965b
 80095e0:	0800966f 	.word	0x0800966f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095ea:	f043 0301 	orr.w	r3, r3, #1
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	18d1      	adds	r1, r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6a3a      	ldr	r2, [r7, #32]
 8009602:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009604:	f7ff ff78 	bl	80094f8 <prvInsertTimerInActiveList>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d06c      	beq.n	80096e8 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800960e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009614:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d061      	beq.n	80096e8 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	441a      	add	r2, r3
 800962c:	2300      	movs	r3, #0
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	2300      	movs	r3, #0
 8009632:	2100      	movs	r1, #0
 8009634:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009636:	f7ff fe1d 	bl	8009274 <xTimerGenericCommand>
 800963a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d152      	bne.n	80096e8 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	61bb      	str	r3, [r7, #24]
    }
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	e7fd      	b.n	8009656 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800965a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009660:	f023 0301 	bic.w	r3, r3, #1
 8009664:	b2da      	uxtb	r2, r3
 8009666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009668:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800966c:	e03d      	b.n	80096ea <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800966e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009674:	f043 0301 	orr.w	r3, r3, #1
 8009678:	b2da      	uxtb	r2, r3
 800967a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009684:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10b      	bne.n	80096a6 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	617b      	str	r3, [r7, #20]
    }
 80096a0:	bf00      	nop
 80096a2:	bf00      	nop
 80096a4:	e7fd      	b.n	80096a2 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	699a      	ldr	r2, [r3, #24]
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	18d1      	adds	r1, r2, r3
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	6a3a      	ldr	r2, [r7, #32]
 80096b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80096b4:	f7ff ff20 	bl	80094f8 <prvInsertTimerInActiveList>
                        break;
 80096b8:	e017      	b.n	80096ea <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096c0:	f003 0302 	and.w	r3, r3, #2
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d103      	bne.n	80096d0 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80096c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80096ca:	f000 fc83 	bl	8009fd4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80096ce:	e00c      	b.n	80096ea <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096d6:	f023 0301 	bic.w	r3, r3, #1
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80096e2:	e002      	b.n	80096ea <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80096e4:	bf00      	nop
 80096e6:	e000      	b.n	80096ea <prvProcessReceivedCommands+0x16e>
                        break;
 80096e8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096ea:	4b08      	ldr	r3, [pc, #32]	@ (800970c <prvProcessReceivedCommands+0x190>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f107 0108 	add.w	r1, r7, #8
 80096f2:	2200      	movs	r2, #0
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe fbf3 	bl	8007ee0 <xQueueReceive>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f47f af41 	bne.w	8009584 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	3728      	adds	r7, #40	@ 0x28
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	200006fc 	.word	0x200006fc

08009710 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009716:	e049      	b.n	80097ac <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009718:	4b2e      	ldr	r3, [pc, #184]	@ (80097d4 <prvSwitchTimerLists+0xc4>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009722:	4b2c      	ldr	r3, [pc, #176]	@ (80097d4 <prvSwitchTimerLists+0xc4>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3304      	adds	r3, #4
 8009730:	4618      	mov	r0, r3
 8009732:	f7fe f8c9 	bl	80078c8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009744:	f003 0304 	and.w	r3, r3, #4
 8009748:	2b00      	cmp	r3, #0
 800974a:	d02f      	beq.n	80097ac <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	4413      	add	r3, r2
 8009754:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	429a      	cmp	r2, r3
 800975c:	d90e      	bls.n	800977c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800976a:	4b1a      	ldr	r3, [pc, #104]	@ (80097d4 <prvSwitchTimerLists+0xc4>)
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3304      	adds	r3, #4
 8009772:	4619      	mov	r1, r3
 8009774:	4610      	mov	r0, r2
 8009776:	f7fe f86e 	bl	8007856 <vListInsert>
 800977a:	e017      	b.n	80097ac <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800977c:	2300      	movs	r3, #0
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	2300      	movs	r3, #0
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	2100      	movs	r1, #0
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f7ff fd74 	bl	8009274 <xTimerGenericCommand>
 800978c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10b      	bne.n	80097ac <prvSwitchTimerLists+0x9c>
        __asm volatile
 8009794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009798:	f383 8811 	msr	BASEPRI, r3
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f3bf 8f4f 	dsb	sy
 80097a4:	603b      	str	r3, [r7, #0]
    }
 80097a6:	bf00      	nop
 80097a8:	bf00      	nop
 80097aa:	e7fd      	b.n	80097a8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097ac:	4b09      	ldr	r3, [pc, #36]	@ (80097d4 <prvSwitchTimerLists+0xc4>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1b0      	bne.n	8009718 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80097b6:	4b07      	ldr	r3, [pc, #28]	@ (80097d4 <prvSwitchTimerLists+0xc4>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80097bc:	4b06      	ldr	r3, [pc, #24]	@ (80097d8 <prvSwitchTimerLists+0xc8>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a04      	ldr	r2, [pc, #16]	@ (80097d4 <prvSwitchTimerLists+0xc4>)
 80097c2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80097c4:	4a04      	ldr	r2, [pc, #16]	@ (80097d8 <prvSwitchTimerLists+0xc8>)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	6013      	str	r3, [r2, #0]
    }
 80097ca:	bf00      	nop
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	200006f4 	.word	0x200006f4
 80097d8:	200006f8 	.word	0x200006f8

080097dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80097e0:	f000 f9e4 	bl	8009bac <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80097e4:	4b12      	ldr	r3, [pc, #72]	@ (8009830 <prvCheckForValidListAndQueue+0x54>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d11d      	bne.n	8009828 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80097ec:	4811      	ldr	r0, [pc, #68]	@ (8009834 <prvCheckForValidListAndQueue+0x58>)
 80097ee:	f7fd ffe1 	bl	80077b4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80097f2:	4811      	ldr	r0, [pc, #68]	@ (8009838 <prvCheckForValidListAndQueue+0x5c>)
 80097f4:	f7fd ffde 	bl	80077b4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80097f8:	4b10      	ldr	r3, [pc, #64]	@ (800983c <prvCheckForValidListAndQueue+0x60>)
 80097fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009834 <prvCheckForValidListAndQueue+0x58>)
 80097fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80097fe:	4b10      	ldr	r3, [pc, #64]	@ (8009840 <prvCheckForValidListAndQueue+0x64>)
 8009800:	4a0d      	ldr	r2, [pc, #52]	@ (8009838 <prvCheckForValidListAndQueue+0x5c>)
 8009802:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8009804:	2200      	movs	r2, #0
 8009806:	210c      	movs	r1, #12
 8009808:	200a      	movs	r0, #10
 800980a:	f7fe f8f1 	bl	80079f0 <xQueueGenericCreate>
 800980e:	4603      	mov	r3, r0
 8009810:	4a07      	ldr	r2, [pc, #28]	@ (8009830 <prvCheckForValidListAndQueue+0x54>)
 8009812:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8009814:	4b06      	ldr	r3, [pc, #24]	@ (8009830 <prvCheckForValidListAndQueue+0x54>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d005      	beq.n	8009828 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800981c:	4b04      	ldr	r3, [pc, #16]	@ (8009830 <prvCheckForValidListAndQueue+0x54>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4908      	ldr	r1, [pc, #32]	@ (8009844 <prvCheckForValidListAndQueue+0x68>)
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe fd80 	bl	8008328 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009828:	f000 f9f2 	bl	8009c10 <vPortExitCritical>
    }
 800982c:	bf00      	nop
 800982e:	bd80      	pop	{r7, pc}
 8009830:	200006fc 	.word	0x200006fc
 8009834:	200006cc 	.word	0x200006cc
 8009838:	200006e0 	.word	0x200006e0
 800983c:	200006f4 	.word	0x200006f4
 8009840:	200006f8 	.word	0x200006f8
 8009844:	0800d624 	.word	0x0800d624

08009848 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3b04      	subs	r3, #4
 8009858:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009860:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3b04      	subs	r3, #4
 8009866:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	f023 0201 	bic.w	r2, r3, #1
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3b04      	subs	r3, #4
 8009876:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8009878:	4a0c      	ldr	r2, [pc, #48]	@ (80098ac <pxPortInitialiseStack+0x64>)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3b14      	subs	r3, #20
 8009882:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3b04      	subs	r3, #4
 800988e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f06f 0202 	mvn.w	r2, #2
 8009896:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3b20      	subs	r3, #32
 800989c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800989e:	68fb      	ldr	r3, [r7, #12]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	080098b1 	.word	0x080098b1

080098b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80098ba:	4b13      	ldr	r3, [pc, #76]	@ (8009908 <prvTaskExitError+0x58>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098c2:	d00b      	beq.n	80098dc <prvTaskExitError+0x2c>
        __asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	60fb      	str	r3, [r7, #12]
    }
 80098d6:	bf00      	nop
 80098d8:	bf00      	nop
 80098da:	e7fd      	b.n	80098d8 <prvTaskExitError+0x28>
        __asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	60bb      	str	r3, [r7, #8]
    }
 80098ee:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80098f0:	bf00      	nop
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d0fc      	beq.n	80098f2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80098f8:	bf00      	nop
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	200000d8 	.word	0x200000d8
 800990c:	00000000 	.word	0x00000000

08009910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8009910:	4b07      	ldr	r3, [pc, #28]	@ (8009930 <pxCurrentTCBConst2>)
 8009912:	6819      	ldr	r1, [r3, #0]
 8009914:	6808      	ldr	r0, [r1, #0]
 8009916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991a:	f380 8809 	msr	PSP, r0
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f04f 0000 	mov.w	r0, #0
 8009926:	f380 8811 	msr	BASEPRI, r0
 800992a:	4770      	bx	lr
 800992c:	f3af 8000 	nop.w

08009930 <pxCurrentTCBConst2>:
 8009930:	200005c8 	.word	0x200005c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop

08009938 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8009938:	4808      	ldr	r0, [pc, #32]	@ (800995c <prvPortStartFirstTask+0x24>)
 800993a:	6800      	ldr	r0, [r0, #0]
 800993c:	6800      	ldr	r0, [r0, #0]
 800993e:	f380 8808 	msr	MSP, r0
 8009942:	f04f 0000 	mov.w	r0, #0
 8009946:	f380 8814 	msr	CONTROL, r0
 800994a:	b662      	cpsie	i
 800994c:	b661      	cpsie	f
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	df00      	svc	0
 8009958:	bf00      	nop
 800995a:	0000      	.short	0x0000
 800995c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop

08009964 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800996a:	4b47      	ldr	r3, [pc, #284]	@ (8009a88 <xPortStartScheduler+0x124>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a47      	ldr	r2, [pc, #284]	@ (8009a8c <xPortStartScheduler+0x128>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d10b      	bne.n	800998c <xPortStartScheduler+0x28>
        __asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	613b      	str	r3, [r7, #16]
    }
 8009986:	bf00      	nop
 8009988:	bf00      	nop
 800998a:	e7fd      	b.n	8009988 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800998c:	4b3e      	ldr	r3, [pc, #248]	@ (8009a88 <xPortStartScheduler+0x124>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a3f      	ldr	r2, [pc, #252]	@ (8009a90 <xPortStartScheduler+0x12c>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d10b      	bne.n	80099ae <xPortStartScheduler+0x4a>
        __asm volatile
 8009996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	60fb      	str	r3, [r7, #12]
    }
 80099a8:	bf00      	nop
 80099aa:	bf00      	nop
 80099ac:	e7fd      	b.n	80099aa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099ae:	4b39      	ldr	r3, [pc, #228]	@ (8009a94 <xPortStartScheduler+0x130>)
 80099b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	22ff      	movs	r2, #255	@ 0xff
 80099be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099c8:	78fb      	ldrb	r3, [r7, #3]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	4b31      	ldr	r3, [pc, #196]	@ (8009a98 <xPortStartScheduler+0x134>)
 80099d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099d6:	4b31      	ldr	r3, [pc, #196]	@ (8009a9c <xPortStartScheduler+0x138>)
 80099d8:	2207      	movs	r2, #7
 80099da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099dc:	e009      	b.n	80099f2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80099de:	4b2f      	ldr	r3, [pc, #188]	@ (8009a9c <xPortStartScheduler+0x138>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	4a2d      	ldr	r2, [pc, #180]	@ (8009a9c <xPortStartScheduler+0x138>)
 80099e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099e8:	78fb      	ldrb	r3, [r7, #3]
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099f2:	78fb      	ldrb	r3, [r7, #3]
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099fa:	2b80      	cmp	r3, #128	@ 0x80
 80099fc:	d0ef      	beq.n	80099de <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099fe:	4b27      	ldr	r3, [pc, #156]	@ (8009a9c <xPortStartScheduler+0x138>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f1c3 0307 	rsb	r3, r3, #7
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d00b      	beq.n	8009a22 <xPortStartScheduler+0xbe>
        __asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	60bb      	str	r3, [r7, #8]
    }
 8009a1c:	bf00      	nop
 8009a1e:	bf00      	nop
 8009a20:	e7fd      	b.n	8009a1e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a22:	4b1e      	ldr	r3, [pc, #120]	@ (8009a9c <xPortStartScheduler+0x138>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	021b      	lsls	r3, r3, #8
 8009a28:	4a1c      	ldr	r2, [pc, #112]	@ (8009a9c <xPortStartScheduler+0x138>)
 8009a2a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8009a9c <xPortStartScheduler+0x138>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a34:	4a19      	ldr	r2, [pc, #100]	@ (8009a9c <xPortStartScheduler+0x138>)
 8009a36:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009a40:	4b17      	ldr	r3, [pc, #92]	@ (8009aa0 <xPortStartScheduler+0x13c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a16      	ldr	r2, [pc, #88]	@ (8009aa0 <xPortStartScheduler+0x13c>)
 8009a46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a4a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009a4c:	4b14      	ldr	r3, [pc, #80]	@ (8009aa0 <xPortStartScheduler+0x13c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a13      	ldr	r2, [pc, #76]	@ (8009aa0 <xPortStartScheduler+0x13c>)
 8009a52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a56:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009a58:	f000 f968 	bl	8009d2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8009a5c:	4b11      	ldr	r3, [pc, #68]	@ (8009aa4 <xPortStartScheduler+0x140>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8009a62:	f000 f987 	bl	8009d74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a66:	4b10      	ldr	r3, [pc, #64]	@ (8009aa8 <xPortStartScheduler+0x144>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8009aa8 <xPortStartScheduler+0x144>)
 8009a6c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a70:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8009a72:	f7ff ff61 	bl	8009938 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009a76:	f7ff f84d 	bl	8008b14 <vTaskSwitchContext>
    prvTaskExitError();
 8009a7a:	f7ff ff19 	bl	80098b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	e000ed00 	.word	0xe000ed00
 8009a8c:	410fc271 	.word	0x410fc271
 8009a90:	410fc270 	.word	0x410fc270
 8009a94:	e000e400 	.word	0xe000e400
 8009a98:	20000708 	.word	0x20000708
 8009a9c:	2000070c 	.word	0x2000070c
 8009aa0:	e000ed20 	.word	0xe000ed20
 8009aa4:	200000d8 	.word	0x200000d8
 8009aa8:	e000ef34 	.word	0xe000ef34

08009aac <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b087      	sub	sp, #28
 8009ab0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ab2:	4b38      	ldr	r3, [pc, #224]	@ (8009b94 <vInitPrioGroupValue+0xe8>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a38      	ldr	r2, [pc, #224]	@ (8009b98 <vInitPrioGroupValue+0xec>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d10b      	bne.n	8009ad4 <vInitPrioGroupValue+0x28>
        __asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	613b      	str	r3, [r7, #16]
    }
 8009ace:	bf00      	nop
 8009ad0:	bf00      	nop
 8009ad2:	e7fd      	b.n	8009ad0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8009b94 <vInitPrioGroupValue+0xe8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a30      	ldr	r2, [pc, #192]	@ (8009b9c <vInitPrioGroupValue+0xf0>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d10b      	bne.n	8009af6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	60fb      	str	r3, [r7, #12]
    }
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	e7fd      	b.n	8009af2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009af6:	4b2a      	ldr	r3, [pc, #168]	@ (8009ba0 <vInitPrioGroupValue+0xf4>)
 8009af8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	22ff      	movs	r2, #255	@ 0xff
 8009b06:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	4b22      	ldr	r3, [pc, #136]	@ (8009ba4 <vInitPrioGroupValue+0xf8>)
 8009b1c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b1e:	4b22      	ldr	r3, [pc, #136]	@ (8009ba8 <vInitPrioGroupValue+0xfc>)
 8009b20:	2207      	movs	r2, #7
 8009b22:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b24:	e009      	b.n	8009b3a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8009b26:	4b20      	ldr	r3, [pc, #128]	@ (8009ba8 <vInitPrioGroupValue+0xfc>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8009ba8 <vInitPrioGroupValue+0xfc>)
 8009b2e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b42:	2b80      	cmp	r3, #128	@ 0x80
 8009b44:	d0ef      	beq.n	8009b26 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b46:	4b18      	ldr	r3, [pc, #96]	@ (8009ba8 <vInitPrioGroupValue+0xfc>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f1c3 0307 	rsb	r3, r3, #7
 8009b4e:	2b04      	cmp	r3, #4
 8009b50:	d00b      	beq.n	8009b6a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	60bb      	str	r3, [r7, #8]
    }
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop
 8009b68:	e7fd      	b.n	8009b66 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ba8 <vInitPrioGroupValue+0xfc>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	021b      	lsls	r3, r3, #8
 8009b70:	4a0d      	ldr	r2, [pc, #52]	@ (8009ba8 <vInitPrioGroupValue+0xfc>)
 8009b72:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b74:	4b0c      	ldr	r3, [pc, #48]	@ (8009ba8 <vInitPrioGroupValue+0xfc>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8009ba8 <vInitPrioGroupValue+0xfc>)
 8009b7e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8009b88:	bf00      	nop
 8009b8a:	371c      	adds	r7, #28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	e000ed00 	.word	0xe000ed00
 8009b98:	410fc271 	.word	0x410fc271
 8009b9c:	410fc270 	.word	0x410fc270
 8009ba0:	e000e400 	.word	0xe000e400
 8009ba4:	20000708 	.word	0x20000708
 8009ba8:	2000070c 	.word	0x2000070c

08009bac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
        __asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	607b      	str	r3, [r7, #4]
    }
 8009bc4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009bc6:	4b10      	ldr	r3, [pc, #64]	@ (8009c08 <vPortEnterCritical+0x5c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8009c08 <vPortEnterCritical+0x5c>)
 8009bce:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8009bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8009c08 <vPortEnterCritical+0x5c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d110      	bne.n	8009bfa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8009c0c <vPortEnterCritical+0x60>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00b      	beq.n	8009bfa <vPortEnterCritical+0x4e>
        __asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	603b      	str	r3, [r7, #0]
    }
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop
 8009bf8:	e7fd      	b.n	8009bf6 <vPortEnterCritical+0x4a>
    }
}
 8009bfa:	bf00      	nop
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	200000d8 	.word	0x200000d8
 8009c0c:	e000ed04 	.word	0xe000ed04

08009c10 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8009c16:	4b12      	ldr	r3, [pc, #72]	@ (8009c60 <vPortExitCritical+0x50>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10b      	bne.n	8009c36 <vPortExitCritical+0x26>
        __asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	607b      	str	r3, [r7, #4]
    }
 8009c30:	bf00      	nop
 8009c32:	bf00      	nop
 8009c34:	e7fd      	b.n	8009c32 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8009c36:	4b0a      	ldr	r3, [pc, #40]	@ (8009c60 <vPortExitCritical+0x50>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	4a08      	ldr	r2, [pc, #32]	@ (8009c60 <vPortExitCritical+0x50>)
 8009c3e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009c40:	4b07      	ldr	r3, [pc, #28]	@ (8009c60 <vPortExitCritical+0x50>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d105      	bne.n	8009c54 <vPortExitCritical+0x44>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	f383 8811 	msr	BASEPRI, r3
    }
 8009c52:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	200000d8 	.word	0x200000d8
	...

08009c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009c70:	f3ef 8009 	mrs	r0, PSP
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	4b15      	ldr	r3, [pc, #84]	@ (8009cd0 <pxCurrentTCBConst>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	f01e 0f10 	tst.w	lr, #16
 8009c80:	bf08      	it	eq
 8009c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8a:	6010      	str	r0, [r2, #0]
 8009c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009c94:	f380 8811 	msr	BASEPRI, r0
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f7fe ff38 	bl	8008b14 <vTaskSwitchContext>
 8009ca4:	f04f 0000 	mov.w	r0, #0
 8009ca8:	f380 8811 	msr	BASEPRI, r0
 8009cac:	bc09      	pop	{r0, r3}
 8009cae:	6819      	ldr	r1, [r3, #0]
 8009cb0:	6808      	ldr	r0, [r1, #0]
 8009cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb6:	f01e 0f10 	tst.w	lr, #16
 8009cba:	bf08      	it	eq
 8009cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cc0:	f380 8809 	msr	PSP, r0
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	f3af 8000 	nop.w

08009cd0 <pxCurrentTCBConst>:
 8009cd0:	200005c8 	.word	0x200005c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop

08009cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
        __asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
    }
 8009cf0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8009cf2:	f001 fdd3 	bl	800b89c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009cf6:	f7fe fe4f 	bl	8008998 <xTaskIncrementTick>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d006      	beq.n	8009d0e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8009d00:	f001 fe2a 	bl	800b958 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d04:	4b08      	ldr	r3, [pc, #32]	@ (8009d28 <SysTick_Handler+0x50>)
 8009d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	e001      	b.n	8009d12 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8009d0e:	f001 fe07 	bl	800b920 <SEGGER_SYSVIEW_RecordExitISR>
 8009d12:	2300      	movs	r3, #0
 8009d14:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	f383 8811 	msr	BASEPRI, r3
    }
 8009d1c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8009d1e:	bf00      	nop
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	e000ed04 	.word	0xe000ed04

08009d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d30:	4b0b      	ldr	r3, [pc, #44]	@ (8009d60 <vPortSetupTimerInterrupt+0x34>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d36:	4b0b      	ldr	r3, [pc, #44]	@ (8009d64 <vPortSetupTimerInterrupt+0x38>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d68 <vPortSetupTimerInterrupt+0x3c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a0a      	ldr	r2, [pc, #40]	@ (8009d6c <vPortSetupTimerInterrupt+0x40>)
 8009d42:	fba2 2303 	umull	r2, r3, r2, r3
 8009d46:	099b      	lsrs	r3, r3, #6
 8009d48:	4a09      	ldr	r2, [pc, #36]	@ (8009d70 <vPortSetupTimerInterrupt+0x44>)
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d4e:	4b04      	ldr	r3, [pc, #16]	@ (8009d60 <vPortSetupTimerInterrupt+0x34>)
 8009d50:	2207      	movs	r2, #7
 8009d52:	601a      	str	r2, [r3, #0]
}
 8009d54:	bf00      	nop
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	e000e010 	.word	0xe000e010
 8009d64:	e000e018 	.word	0xe000e018
 8009d68:	20000098 	.word	0x20000098
 8009d6c:	10624dd3 	.word	0x10624dd3
 8009d70:	e000e014 	.word	0xe000e014

08009d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009d74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009d84 <vPortEnableVFP+0x10>
 8009d78:	6801      	ldr	r1, [r0, #0]
 8009d7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d7e:	6001      	str	r1, [r0, #0]
 8009d80:	4770      	bx	lr
 8009d82:	0000      	.short	0x0000
 8009d84:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop

08009d8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009d92:	f3ef 8305 	mrs	r3, IPSR
 8009d96:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b0f      	cmp	r3, #15
 8009d9c:	d915      	bls.n	8009dca <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d9e:	4a18      	ldr	r2, [pc, #96]	@ (8009e00 <vPortValidateInterruptPriority+0x74>)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009da8:	4b16      	ldr	r3, [pc, #88]	@ (8009e04 <vPortValidateInterruptPriority+0x78>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	7afa      	ldrb	r2, [r7, #11]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d20b      	bcs.n	8009dca <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	607b      	str	r3, [r7, #4]
    }
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	e7fd      	b.n	8009dc6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009dca:	4b0f      	ldr	r3, [pc, #60]	@ (8009e08 <vPortValidateInterruptPriority+0x7c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8009e0c <vPortValidateInterruptPriority+0x80>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d90b      	bls.n	8009df2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	603b      	str	r3, [r7, #0]
    }
 8009dec:	bf00      	nop
 8009dee:	bf00      	nop
 8009df0:	e7fd      	b.n	8009dee <vPortValidateInterruptPriority+0x62>
    }
 8009df2:	bf00      	nop
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	e000e3f0 	.word	0xe000e3f0
 8009e04:	20000708 	.word	0x20000708
 8009e08:	e000ed0c 	.word	0xe000ed0c
 8009e0c:	2000070c 	.word	0x2000070c

08009e10 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08a      	sub	sp, #40	@ 0x28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8009e1c:	f7fe fcea 	bl	80087f4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009e20:	4b66      	ldr	r3, [pc, #408]	@ (8009fbc <pvPortMalloc+0x1ac>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009e28:	f000 f938 	bl	800a09c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e2c:	4b64      	ldr	r3, [pc, #400]	@ (8009fc0 <pvPortMalloc+0x1b0>)
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4013      	ands	r3, r2
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f040 80a9 	bne.w	8009f8c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d02e      	beq.n	8009e9e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8009e40:	2208      	movs	r2, #8
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d228      	bcs.n	8009e9e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8009e4c:	2208      	movs	r2, #8
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4413      	add	r3, r2
 8009e52:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f003 0307 	and.w	r3, r3, #7
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d022      	beq.n	8009ea4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f023 0307 	bic.w	r3, r3, #7
 8009e64:	3308      	adds	r3, #8
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d215      	bcs.n	8009e98 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f023 0307 	bic.w	r3, r3, #7
 8009e72:	3308      	adds	r3, #8
 8009e74:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f003 0307 	and.w	r3, r3, #7
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d011      	beq.n	8009ea4 <pvPortMalloc+0x94>
        __asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	617b      	str	r3, [r7, #20]
    }
 8009e92:	bf00      	nop
 8009e94:	bf00      	nop
 8009e96:	e7fd      	b.n	8009e94 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e9c:	e002      	b.n	8009ea4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	607b      	str	r3, [r7, #4]
 8009ea2:	e000      	b.n	8009ea6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ea4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d06f      	beq.n	8009f8c <pvPortMalloc+0x17c>
 8009eac:	4b45      	ldr	r3, [pc, #276]	@ (8009fc4 <pvPortMalloc+0x1b4>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d86a      	bhi.n	8009f8c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009eb6:	4b44      	ldr	r3, [pc, #272]	@ (8009fc8 <pvPortMalloc+0x1b8>)
 8009eb8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8009eba:	4b43      	ldr	r3, [pc, #268]	@ (8009fc8 <pvPortMalloc+0x1b8>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ec0:	e004      	b.n	8009ecc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d903      	bls.n	8009ede <pvPortMalloc+0xce>
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1f1      	bne.n	8009ec2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8009ede:	4b37      	ldr	r3, [pc, #220]	@ (8009fbc <pvPortMalloc+0x1ac>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d051      	beq.n	8009f8c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2208      	movs	r2, #8
 8009eee:	4413      	add	r3, r2
 8009ef0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	1ad2      	subs	r2, r2, r3
 8009f02:	2308      	movs	r3, #8
 8009f04:	005b      	lsls	r3, r3, #1
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d920      	bls.n	8009f4c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4413      	add	r3, r2
 8009f10:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	f003 0307 	and.w	r3, r3, #7
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00b      	beq.n	8009f34 <pvPortMalloc+0x124>
        __asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	613b      	str	r3, [r7, #16]
    }
 8009f2e:	bf00      	nop
 8009f30:	bf00      	nop
 8009f32:	e7fd      	b.n	8009f30 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	1ad2      	subs	r2, r2, r3
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f46:	69b8      	ldr	r0, [r7, #24]
 8009f48:	f000 f90a 	bl	800a160 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8009fc4 <pvPortMalloc+0x1b4>)
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	4a1b      	ldr	r2, [pc, #108]	@ (8009fc4 <pvPortMalloc+0x1b4>)
 8009f58:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8009fc4 <pvPortMalloc+0x1b4>)
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009fcc <pvPortMalloc+0x1bc>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d203      	bcs.n	8009f6e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f66:	4b17      	ldr	r3, [pc, #92]	@ (8009fc4 <pvPortMalloc+0x1b4>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a18      	ldr	r2, [pc, #96]	@ (8009fcc <pvPortMalloc+0x1bc>)
 8009f6c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	4b13      	ldr	r3, [pc, #76]	@ (8009fc0 <pvPortMalloc+0x1b0>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	431a      	orrs	r2, r3
 8009f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7e:	2200      	movs	r2, #0
 8009f80:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009f82:	4b13      	ldr	r3, [pc, #76]	@ (8009fd0 <pvPortMalloc+0x1c0>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3301      	adds	r3, #1
 8009f88:	4a11      	ldr	r2, [pc, #68]	@ (8009fd0 <pvPortMalloc+0x1c0>)
 8009f8a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009f8c:	f7fe fc40 	bl	8008810 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	f003 0307 	and.w	r3, r3, #7
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00b      	beq.n	8009fb2 <pvPortMalloc+0x1a2>
        __asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	60fb      	str	r3, [r7, #12]
    }
 8009fac:	bf00      	nop
 8009fae:	bf00      	nop
 8009fb0:	e7fd      	b.n	8009fae <pvPortMalloc+0x19e>
    return pvReturn;
 8009fb2:	69fb      	ldr	r3, [r7, #28]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3728      	adds	r7, #40	@ 0x28
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	20013318 	.word	0x20013318
 8009fc0:	2001332c 	.word	0x2001332c
 8009fc4:	2001331c 	.word	0x2001331c
 8009fc8:	20013310 	.word	0x20013310
 8009fcc:	20013320 	.word	0x20013320
 8009fd0:	20013324 	.word	0x20013324

08009fd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d04f      	beq.n	800a086 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8009fe6:	2308      	movs	r3, #8
 8009fe8:	425b      	negs	r3, r3
 8009fea:	697a      	ldr	r2, [r7, #20]
 8009fec:	4413      	add	r3, r2
 8009fee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	4b25      	ldr	r3, [pc, #148]	@ (800a090 <vPortFree+0xbc>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10b      	bne.n	800a01a <vPortFree+0x46>
        __asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	60fb      	str	r3, [r7, #12]
    }
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	e7fd      	b.n	800a016 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00b      	beq.n	800a03a <vPortFree+0x66>
        __asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	60bb      	str	r3, [r7, #8]
    }
 800a034:	bf00      	nop
 800a036:	bf00      	nop
 800a038:	e7fd      	b.n	800a036 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	4b14      	ldr	r3, [pc, #80]	@ (800a090 <vPortFree+0xbc>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4013      	ands	r3, r2
 800a044:	2b00      	cmp	r3, #0
 800a046:	d01e      	beq.n	800a086 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d11a      	bne.n	800a086 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	685a      	ldr	r2, [r3, #4]
 800a054:	4b0e      	ldr	r3, [pc, #56]	@ (800a090 <vPortFree+0xbc>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	43db      	mvns	r3, r3
 800a05a:	401a      	ands	r2, r3
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800a060:	f7fe fbc8 	bl	80087f4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	685a      	ldr	r2, [r3, #4]
 800a068:	4b0a      	ldr	r3, [pc, #40]	@ (800a094 <vPortFree+0xc0>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4413      	add	r3, r2
 800a06e:	4a09      	ldr	r2, [pc, #36]	@ (800a094 <vPortFree+0xc0>)
 800a070:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a072:	6938      	ldr	r0, [r7, #16]
 800a074:	f000 f874 	bl	800a160 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800a078:	4b07      	ldr	r3, [pc, #28]	@ (800a098 <vPortFree+0xc4>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3301      	adds	r3, #1
 800a07e:	4a06      	ldr	r2, [pc, #24]	@ (800a098 <vPortFree+0xc4>)
 800a080:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800a082:	f7fe fbc5 	bl	8008810 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800a086:	bf00      	nop
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	2001332c 	.word	0x2001332c
 800a094:	2001331c 	.word	0x2001331c
 800a098:	20013328 	.word	0x20013328

0800a09c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a0a2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800a0a6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800a0a8:	4b27      	ldr	r3, [pc, #156]	@ (800a148 <prvHeapInit+0xac>)
 800a0aa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f003 0307 	and.w	r3, r3, #7
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00c      	beq.n	800a0d0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3307      	adds	r3, #7
 800a0ba:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f023 0307 	bic.w	r3, r3, #7
 800a0c2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	4a1f      	ldr	r2, [pc, #124]	@ (800a148 <prvHeapInit+0xac>)
 800a0cc:	4413      	add	r3, r2
 800a0ce:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a14c <prvHeapInit+0xb0>)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800a0da:	4b1c      	ldr	r3, [pc, #112]	@ (800a14c <prvHeapInit+0xb0>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800a0e8:	2208      	movs	r2, #8
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	1a9b      	subs	r3, r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f023 0307 	bic.w	r3, r3, #7
 800a0f6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	4a15      	ldr	r2, [pc, #84]	@ (800a150 <prvHeapInit+0xb4>)
 800a0fc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800a0fe:	4b14      	ldr	r3, [pc, #80]	@ (800a150 <prvHeapInit+0xb4>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2200      	movs	r2, #0
 800a104:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800a106:	4b12      	ldr	r3, [pc, #72]	@ (800a150 <prvHeapInit+0xb4>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2200      	movs	r2, #0
 800a10c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	1ad2      	subs	r2, r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a11c:	4b0c      	ldr	r3, [pc, #48]	@ (800a150 <prvHeapInit+0xb4>)
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	4a0a      	ldr	r2, [pc, #40]	@ (800a154 <prvHeapInit+0xb8>)
 800a12a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	4a09      	ldr	r2, [pc, #36]	@ (800a158 <prvHeapInit+0xbc>)
 800a132:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a134:	4b09      	ldr	r3, [pc, #36]	@ (800a15c <prvHeapInit+0xc0>)
 800a136:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a13a:	601a      	str	r2, [r3, #0]
}
 800a13c:	bf00      	nop
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	20000710 	.word	0x20000710
 800a14c:	20013310 	.word	0x20013310
 800a150:	20013318 	.word	0x20013318
 800a154:	20013320 	.word	0x20013320
 800a158:	2001331c 	.word	0x2001331c
 800a15c:	2001332c 	.word	0x2001332c

0800a160 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a168:	4b28      	ldr	r3, [pc, #160]	@ (800a20c <prvInsertBlockIntoFreeList+0xac>)
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	e002      	b.n	800a174 <prvInsertBlockIntoFreeList+0x14>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d8f7      	bhi.n	800a16e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	4413      	add	r3, r2
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d108      	bne.n	800a1a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	441a      	add	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	441a      	add	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d118      	bne.n	800a1e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	4b15      	ldr	r3, [pc, #84]	@ (800a210 <prvInsertBlockIntoFreeList+0xb0>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d00d      	beq.n	800a1de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	441a      	add	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	e008      	b.n	800a1f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1de:	4b0c      	ldr	r3, [pc, #48]	@ (800a210 <prvInsertBlockIntoFreeList+0xb0>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	e003      	b.n	800a1f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d002      	beq.n	800a1fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a1fe:	bf00      	nop
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	20013310 	.word	0x20013310
 800a210:	20013318 	.word	0x20013318

0800a214 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800a218:	4803      	ldr	r0, [pc, #12]	@ (800a228 <_cbSendSystemDesc+0x14>)
 800a21a:	f001 fae9 	bl	800b7f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800a21e:	4803      	ldr	r0, [pc, #12]	@ (800a22c <_cbSendSystemDesc+0x18>)
 800a220:	f001 fae6 	bl	800b7f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 800a224:	bf00      	nop
 800a226:	bd80      	pop	{r7, pc}
 800a228:	0800d62c 	.word	0x0800d62c
 800a22c:	0800d654 	.word	0x0800d654

0800a230 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800a234:	4b06      	ldr	r3, [pc, #24]	@ (800a250 <SEGGER_SYSVIEW_Conf+0x20>)
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	4b05      	ldr	r3, [pc, #20]	@ (800a250 <SEGGER_SYSVIEW_Conf+0x20>)
 800a23a:	6819      	ldr	r1, [r3, #0]
 800a23c:	4b05      	ldr	r3, [pc, #20]	@ (800a254 <SEGGER_SYSVIEW_Conf+0x24>)
 800a23e:	4a06      	ldr	r2, [pc, #24]	@ (800a258 <SEGGER_SYSVIEW_Conf+0x28>)
 800a240:	f000 fe54 	bl	800aeec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800a244:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800a248:	f000 fe94 	bl	800af74 <SEGGER_SYSVIEW_SetRAMBase>
}
 800a24c:	bf00      	nop
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	20000098 	.word	0x20000098
 800a254:	0800a215 	.word	0x0800a215
 800a258:	0800d6fc 	.word	0x0800d6fc

0800a25c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800a25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a25e:	b085      	sub	sp, #20
 800a260:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800a262:	2300      	movs	r3, #0
 800a264:	607b      	str	r3, [r7, #4]
 800a266:	e033      	b.n	800a2d0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800a268:	491e      	ldr	r1, [pc, #120]	@ (800a2e4 <_cbSendTaskList+0x88>)
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	4613      	mov	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4413      	add	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	440b      	add	r3, r1
 800a276:	6818      	ldr	r0, [r3, #0]
 800a278:	491a      	ldr	r1, [pc, #104]	@ (800a2e4 <_cbSendTaskList+0x88>)
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	4613      	mov	r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4413      	add	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	440b      	add	r3, r1
 800a286:	3304      	adds	r3, #4
 800a288:	6819      	ldr	r1, [r3, #0]
 800a28a:	4c16      	ldr	r4, [pc, #88]	@ (800a2e4 <_cbSendTaskList+0x88>)
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	4613      	mov	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4423      	add	r3, r4
 800a298:	3308      	adds	r3, #8
 800a29a:	681c      	ldr	r4, [r3, #0]
 800a29c:	4d11      	ldr	r5, [pc, #68]	@ (800a2e4 <_cbSendTaskList+0x88>)
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4413      	add	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	442b      	add	r3, r5
 800a2aa:	330c      	adds	r3, #12
 800a2ac:	681d      	ldr	r5, [r3, #0]
 800a2ae:	4e0d      	ldr	r6, [pc, #52]	@ (800a2e4 <_cbSendTaskList+0x88>)
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4433      	add	r3, r6
 800a2bc:	3310      	adds	r3, #16
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	462b      	mov	r3, r5
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	f000 f8bd 	bl	800a444 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	607b      	str	r3, [r7, #4]
 800a2d0:	4b05      	ldr	r3, [pc, #20]	@ (800a2e8 <_cbSendTaskList+0x8c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d3c6      	bcc.n	800a268 <_cbSendTaskList+0xc>
  }
}
 800a2da:	bf00      	nop
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2e4:	20013330 	.word	0x20013330
 800a2e8:	200133d0 	.word	0x200133d0

0800a2ec <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800a2ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800a2f4:	f7fe fb3e 	bl	8008974 <xTaskGetTickCountFromISR>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	469a      	mov	sl, r3
 800a2fe:	4693      	mov	fp, r2
 800a300:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800a304:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	f04f 0a00 	mov.w	sl, #0
 800a310:	f04f 0b00 	mov.w	fp, #0
 800a314:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800a318:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800a31c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800a320:	4652      	mov	r2, sl
 800a322:	465b      	mov	r3, fp
 800a324:	1a14      	subs	r4, r2, r0
 800a326:	eb63 0501 	sbc.w	r5, r3, r1
 800a32a:	f04f 0200 	mov.w	r2, #0
 800a32e:	f04f 0300 	mov.w	r3, #0
 800a332:	00ab      	lsls	r3, r5, #2
 800a334:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a338:	00a2      	lsls	r2, r4, #2
 800a33a:	4614      	mov	r4, r2
 800a33c:	461d      	mov	r5, r3
 800a33e:	eb14 0800 	adds.w	r8, r4, r0
 800a342:	eb45 0901 	adc.w	r9, r5, r1
 800a346:	f04f 0200 	mov.w	r2, #0
 800a34a:	f04f 0300 	mov.w	r3, #0
 800a34e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a35a:	4690      	mov	r8, r2
 800a35c:	4699      	mov	r9, r3
 800a35e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800a362:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800a366:	4610      	mov	r0, r2
 800a368:	4619      	mov	r1, r3
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800a374 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af02      	add	r7, sp, #8
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800a382:	2205      	movs	r2, #5
 800a384:	492b      	ldr	r1, [pc, #172]	@ (800a434 <SYSVIEW_AddTask+0xc0>)
 800a386:	68b8      	ldr	r0, [r7, #8]
 800a388:	f001 ffc8 	bl	800c31c <memcmp>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d04b      	beq.n	800a42a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800a392:	4b29      	ldr	r3, [pc, #164]	@ (800a438 <SYSVIEW_AddTask+0xc4>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b07      	cmp	r3, #7
 800a398:	d903      	bls.n	800a3a2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800a39a:	4828      	ldr	r0, [pc, #160]	@ (800a43c <SYSVIEW_AddTask+0xc8>)
 800a39c:	f001 fd26 	bl	800bdec <SEGGER_SYSVIEW_Warn>
    return;
 800a3a0:	e044      	b.n	800a42c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800a3a2:	4b25      	ldr	r3, [pc, #148]	@ (800a438 <SYSVIEW_AddTask+0xc4>)
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	4926      	ldr	r1, [pc, #152]	@ (800a440 <SYSVIEW_AddTask+0xcc>)
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	440b      	add	r3, r1
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800a3b6:	4b20      	ldr	r3, [pc, #128]	@ (800a438 <SYSVIEW_AddTask+0xc4>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	4921      	ldr	r1, [pc, #132]	@ (800a440 <SYSVIEW_AddTask+0xcc>)
 800a3bc:	4613      	mov	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	440b      	add	r3, r1
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800a3cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a438 <SYSVIEW_AddTask+0xc4>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	491b      	ldr	r1, [pc, #108]	@ (800a440 <SYSVIEW_AddTask+0xcc>)
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	440b      	add	r3, r1
 800a3dc:	3308      	adds	r3, #8
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800a3e2:	4b15      	ldr	r3, [pc, #84]	@ (800a438 <SYSVIEW_AddTask+0xc4>)
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	4916      	ldr	r1, [pc, #88]	@ (800a440 <SYSVIEW_AddTask+0xcc>)
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	440b      	add	r3, r1
 800a3f2:	330c      	adds	r3, #12
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800a3f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a438 <SYSVIEW_AddTask+0xc4>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	4910      	ldr	r1, [pc, #64]	@ (800a440 <SYSVIEW_AddTask+0xcc>)
 800a3fe:	4613      	mov	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	4413      	add	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	440b      	add	r3, r1
 800a408:	3310      	adds	r3, #16
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800a40e:	4b0a      	ldr	r3, [pc, #40]	@ (800a438 <SYSVIEW_AddTask+0xc4>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	3301      	adds	r3, #1
 800a414:	4a08      	ldr	r2, [pc, #32]	@ (800a438 <SYSVIEW_AddTask+0xc4>)
 800a416:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 f80e 	bl	800a444 <SYSVIEW_SendTaskInfo>
 800a428:	e000      	b.n	800a42c <SYSVIEW_AddTask+0xb8>
    return;
 800a42a:	bf00      	nop

}
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	0800d664 	.word	0x0800d664
 800a438:	200133d0 	.word	0x200133d0
 800a43c:	0800d66c 	.word	0x0800d66c
 800a440:	20013330 	.word	0x20013330

0800a444 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800a444:	b580      	push	{r7, lr}
 800a446:	b08a      	sub	sp, #40	@ 0x28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
 800a450:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800a452:	f107 0314 	add.w	r3, r7, #20
 800a456:	2214      	movs	r2, #20
 800a458:	2100      	movs	r1, #0
 800a45a:	4618      	mov	r0, r3
 800a45c:	f001 ff6e 	bl	800c33c <memset>
  TaskInfo.TaskID     = TaskID;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a472:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800a474:	f107 0314 	add.w	r3, r7, #20
 800a478:	4618      	mov	r0, r3
 800a47a:	f001 f8c1 	bl	800b600 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800a47e:	bf00      	nop
 800a480:	3728      	adds	r7, #40	@ 0x28
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
	...

0800a488 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800a48e:	4b24      	ldr	r3, [pc, #144]	@ (800a520 <_DoInit+0x98>)
 800a490:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2203      	movs	r2, #3
 800a496:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2203      	movs	r2, #3
 800a49c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a20      	ldr	r2, [pc, #128]	@ (800a524 <_DoInit+0x9c>)
 800a4a2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a20      	ldr	r2, [pc, #128]	@ (800a528 <_DoInit+0xa0>)
 800a4a8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a4b0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a17      	ldr	r2, [pc, #92]	@ (800a524 <_DoInit+0x9c>)
 800a4c8:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a17      	ldr	r2, [pc, #92]	@ (800a52c <_DoInit+0xa4>)
 800a4ce:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2210      	movs	r2, #16
 800a4d4:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3307      	adds	r3, #7
 800a4ec:	4a10      	ldr	r2, [pc, #64]	@ (800a530 <_DoInit+0xa8>)
 800a4ee:	6810      	ldr	r0, [r2, #0]
 800a4f0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800a4f2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a0e      	ldr	r2, [pc, #56]	@ (800a534 <_DoInit+0xac>)
 800a4fa:	6810      	ldr	r0, [r2, #0]
 800a4fc:	6018      	str	r0, [r3, #0]
 800a4fe:	8891      	ldrh	r1, [r2, #4]
 800a500:	7992      	ldrb	r2, [r2, #6]
 800a502:	8099      	strh	r1, [r3, #4]
 800a504:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800a506:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2220      	movs	r2, #32
 800a50e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800a510:	f3bf 8f5f 	dmb	sy
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	200133d4 	.word	0x200133d4
 800a524:	0800d6bc 	.word	0x0800d6bc
 800a528:	2001347c 	.word	0x2001347c
 800a52c:	2001387c 	.word	0x2001387c
 800a530:	0800d6c8 	.word	0x0800d6c8
 800a534:	0800d6cc 	.word	0x0800d6cc

0800a538 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08a      	sub	sp, #40	@ 0x28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800a544:	2300      	movs	r3, #0
 800a546:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800a554:	69ba      	ldr	r2, [r7, #24]
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d905      	bls.n	800a568 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800a55c:	69ba      	ldr	r2, [r7, #24]
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	3b01      	subs	r3, #1
 800a564:	627b      	str	r3, [r7, #36]	@ 0x24
 800a566:	e007      	b.n	800a578 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	69b9      	ldr	r1, [r7, #24]
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	1acb      	subs	r3, r1, r3
 800a572:	4413      	add	r3, r2
 800a574:	3b01      	subs	r3, #1
 800a576:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	689a      	ldr	r2, [r3, #8]
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a582:	4293      	cmp	r3, r2
 800a584:	bf28      	it	cs
 800a586:	4613      	movcs	r3, r2
 800a588:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800a58a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4293      	cmp	r3, r2
 800a590:	bf28      	it	cs
 800a592:	4613      	movcs	r3, r2
 800a594:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	4413      	add	r3, r2
 800a59e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800a5a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5a2:	68b9      	ldr	r1, [r7, #8]
 800a5a4:	6978      	ldr	r0, [r7, #20]
 800a5a6:	f001 ff2c 	bl	800c402 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800a5aa:	6a3a      	ldr	r2, [r7, #32]
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ae:	4413      	add	r3, r2
 800a5b0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b6:	4413      	add	r3, r2
 800a5b8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c6:	4413      	add	r3, r2
 800a5c8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	69fa      	ldr	r2, [r7, #28]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d101      	bne.n	800a5d8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a5d8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	69fa      	ldr	r2, [r7, #28]
 800a5e0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1b2      	bne.n	800a54e <_WriteBlocking+0x16>
  return NumBytesWritten;
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3728      	adds	r7, #40	@ 0x28
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b088      	sub	sp, #32
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	60f8      	str	r0, [r7, #12]
 800a5fa:	60b9      	str	r1, [r7, #8]
 800a5fc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800a60e:	69ba      	ldr	r2, [r7, #24]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	429a      	cmp	r2, r3
 800a614:	d911      	bls.n	800a63a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	4413      	add	r3, r2
 800a61e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	68b9      	ldr	r1, [r7, #8]
 800a624:	6938      	ldr	r0, [r7, #16]
 800a626:	f001 feec 	bl	800c402 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a62a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800a62e:	69fa      	ldr	r2, [r7, #28]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	441a      	add	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800a638:	e01f      	b.n	800a67a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	4413      	add	r3, r2
 800a646:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	68b9      	ldr	r1, [r7, #8]
 800a64c:	6938      	ldr	r0, [r7, #16]
 800a64e:	f001 fed8 	bl	800c402 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	4413      	add	r3, r2
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	4619      	mov	r1, r3
 800a66a:	6938      	ldr	r0, [r7, #16]
 800a66c:	f001 fec9 	bl	800c402 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a670:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	60da      	str	r2, [r3, #12]
}
 800a67a:	bf00      	nop
 800a67c:	3720      	adds	r7, #32
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800a682:	b480      	push	{r7}
 800a684:	b087      	sub	sp, #28
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d808      	bhi.n	800a6b0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	689a      	ldr	r2, [r3, #8]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	1ad2      	subs	r2, r2, r3
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	617b      	str	r3, [r7, #20]
 800a6ae:	e004      	b.n	800a6ba <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	617b      	str	r3, [r7, #20]
  }
  return r;
 800a6ba:	697b      	ldr	r3, [r7, #20]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	371c      	adds	r7, #28
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08c      	sub	sp, #48	@ 0x30
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800a6d4:	4b3e      	ldr	r3, [pc, #248]	@ (800a7d0 <SEGGER_RTT_ReadNoLock+0x108>)
 800a6d6:	623b      	str	r3, [r7, #32]
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d101      	bne.n	800a6e6 <SEGGER_RTT_ReadNoLock+0x1e>
 800a6e2:	f7ff fed1 	bl	800a488 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	005b      	lsls	r3, r3, #1
 800a6ec:	4413      	add	r3, r2
 800a6ee:	00db      	lsls	r3, r3, #3
 800a6f0:	3360      	adds	r3, #96	@ 0x60
 800a6f2:	4a37      	ldr	r2, [pc, #220]	@ (800a7d0 <SEGGER_RTT_ReadNoLock+0x108>)
 800a6f4:	4413      	add	r3, r2
 800a6f6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800a708:	2300      	movs	r3, #0
 800a70a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800a70c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	429a      	cmp	r2, r3
 800a712:	d92b      	bls.n	800a76c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4293      	cmp	r3, r2
 800a724:	bf28      	it	cs
 800a726:	4613      	movcs	r3, r2
 800a728:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a730:	4413      	add	r3, r2
 800a732:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	6939      	ldr	r1, [r7, #16]
 800a738:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a73a:	f001 fe62 	bl	800c402 <memcpy>
    NumBytesRead += NumBytesRem;
 800a73e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	4413      	add	r3, r2
 800a744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800a746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	4413      	add	r3, r2
 800a74c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	1ad3      	subs	r3, r2, r3
 800a754:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	4413      	add	r3, r2
 800a75c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a764:	429a      	cmp	r2, r3
 800a766:	d101      	bne.n	800a76c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800a768:	2300      	movs	r3, #0
 800a76a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800a76c:	69ba      	ldr	r2, [r7, #24]
 800a76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4293      	cmp	r3, r2
 800a77a:	bf28      	it	cs
 800a77c:	4613      	movcs	r3, r2
 800a77e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d019      	beq.n	800a7ba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78c:	4413      	add	r3, r2
 800a78e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	6939      	ldr	r1, [r7, #16]
 800a794:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a796:	f001 fe34 	bl	800c402 <memcpy>
    NumBytesRead += NumBytesRem;
 800a79a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	4413      	add	r3, r2
 800a7a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800a7a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a7b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800a7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7c4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800a7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3730      	adds	r7, #48	@ 0x30
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	200133d4 	.word	0x200133d4

0800a7d4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	1c5a      	adds	r2, r3, #1
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	005b      	lsls	r3, r3, #1
 800a7ec:	4413      	add	r3, r2
 800a7ee:	00db      	lsls	r3, r3, #3
 800a7f0:	4a1f      	ldr	r2, [pc, #124]	@ (800a870 <SEGGER_RTT_WriteNoLock+0x9c>)
 800a7f2:	4413      	add	r3, r2
 800a7f4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d029      	beq.n	800a852 <SEGGER_RTT_WriteNoLock+0x7e>
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d82e      	bhi.n	800a860 <SEGGER_RTT_WriteNoLock+0x8c>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d002      	beq.n	800a80c <SEGGER_RTT_WriteNoLock+0x38>
 800a806:	2b01      	cmp	r3, #1
 800a808:	d013      	beq.n	800a832 <SEGGER_RTT_WriteNoLock+0x5e>
 800a80a:	e029      	b.n	800a860 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800a80c:	6978      	ldr	r0, [r7, #20]
 800a80e:	f7ff ff38 	bl	800a682 <_GetAvailWriteSpace>
 800a812:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d202      	bcs.n	800a822 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800a81c:	2300      	movs	r3, #0
 800a81e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800a820:	e021      	b.n	800a866 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	69b9      	ldr	r1, [r7, #24]
 800a82a:	6978      	ldr	r0, [r7, #20]
 800a82c:	f7ff fee1 	bl	800a5f2 <_WriteNoCheck>
    break;
 800a830:	e019      	b.n	800a866 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800a832:	6978      	ldr	r0, [r7, #20]
 800a834:	f7ff ff25 	bl	800a682 <_GetAvailWriteSpace>
 800a838:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	4293      	cmp	r3, r2
 800a840:	bf28      	it	cs
 800a842:	4613      	movcs	r3, r2
 800a844:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800a846:	69fa      	ldr	r2, [r7, #28]
 800a848:	69b9      	ldr	r1, [r7, #24]
 800a84a:	6978      	ldr	r0, [r7, #20]
 800a84c:	f7ff fed1 	bl	800a5f2 <_WriteNoCheck>
    break;
 800a850:	e009      	b.n	800a866 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	69b9      	ldr	r1, [r7, #24]
 800a856:	6978      	ldr	r0, [r7, #20]
 800a858:	f7ff fe6e 	bl	800a538 <_WriteBlocking>
 800a85c:	61f8      	str	r0, [r7, #28]
    break;
 800a85e:	e002      	b.n	800a866 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800a860:	2300      	movs	r3, #0
 800a862:	61fb      	str	r3, [r7, #28]
    break;
 800a864:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800a866:	69fb      	ldr	r3, [r7, #28]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3720      	adds	r7, #32
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	200133d4 	.word	0x200133d4

0800a874 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800a880:	4b0e      	ldr	r3, [pc, #56]	@ (800a8bc <SEGGER_RTT_Write+0x48>)
 800a882:	61fb      	str	r3, [r7, #28]
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <SEGGER_RTT_Write+0x1e>
 800a88e:	f7ff fdfb 	bl	800a488 <_DoInit>
  SEGGER_RTT_LOCK();
 800a892:	f3ef 8311 	mrs	r3, BASEPRI
 800a896:	f04f 0120 	mov.w	r1, #32
 800a89a:	f381 8811 	msr	BASEPRI, r1
 800a89e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	68b9      	ldr	r1, [r7, #8]
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7ff ff95 	bl	800a7d4 <SEGGER_RTT_WriteNoLock>
 800a8aa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800a8b2:	697b      	ldr	r3, [r7, #20]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3720      	adds	r7, #32
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	200133d4 	.word	0x200133d4

0800a8c0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b088      	sub	sp, #32
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800a8ce:	4b3d      	ldr	r3, [pc, #244]	@ (800a9c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800a8d0:	61bb      	str	r3, [r7, #24]
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <SEGGER_RTT_AllocUpBuffer+0x20>
 800a8dc:	f7ff fdd4 	bl	800a488 <_DoInit>
  SEGGER_RTT_LOCK();
 800a8e0:	f3ef 8311 	mrs	r3, BASEPRI
 800a8e4:	f04f 0120 	mov.w	r1, #32
 800a8e8:	f381 8811 	msr	BASEPRI, r1
 800a8ec:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a8ee:	4b35      	ldr	r3, [pc, #212]	@ (800a9c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800a8f0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800a8f6:	6939      	ldr	r1, [r7, #16]
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	1c5a      	adds	r2, r3, #1
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	4413      	add	r3, r2
 800a902:	00db      	lsls	r3, r3, #3
 800a904:	440b      	add	r3, r1
 800a906:	3304      	adds	r3, #4
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d008      	beq.n	800a920 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	3301      	adds	r3, #1
 800a912:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	69fa      	ldr	r2, [r7, #28]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	dbeb      	blt.n	800a8f6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800a91e:	e000      	b.n	800a922 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800a920:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	69fa      	ldr	r2, [r7, #28]
 800a928:	429a      	cmp	r2, r3
 800a92a:	da3f      	bge.n	800a9ac <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800a92c:	6939      	ldr	r1, [r7, #16]
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	4613      	mov	r3, r2
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	4413      	add	r3, r2
 800a938:	00db      	lsls	r3, r3, #3
 800a93a:	440b      	add	r3, r1
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800a940:	6939      	ldr	r1, [r7, #16]
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	4613      	mov	r3, r2
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	4413      	add	r3, r2
 800a94c:	00db      	lsls	r3, r3, #3
 800a94e:	440b      	add	r3, r1
 800a950:	3304      	adds	r3, #4
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800a956:	6939      	ldr	r1, [r7, #16]
 800a958:	69fa      	ldr	r2, [r7, #28]
 800a95a:	4613      	mov	r3, r2
 800a95c:	005b      	lsls	r3, r3, #1
 800a95e:	4413      	add	r3, r2
 800a960:	00db      	lsls	r3, r3, #3
 800a962:	440b      	add	r3, r1
 800a964:	3320      	adds	r3, #32
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800a96a:	6939      	ldr	r1, [r7, #16]
 800a96c:	69fa      	ldr	r2, [r7, #28]
 800a96e:	4613      	mov	r3, r2
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	4413      	add	r3, r2
 800a974:	00db      	lsls	r3, r3, #3
 800a976:	440b      	add	r3, r1
 800a978:	3328      	adds	r3, #40	@ 0x28
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800a97e:	6939      	ldr	r1, [r7, #16]
 800a980:	69fa      	ldr	r2, [r7, #28]
 800a982:	4613      	mov	r3, r2
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	4413      	add	r3, r2
 800a988:	00db      	lsls	r3, r3, #3
 800a98a:	440b      	add	r3, r1
 800a98c:	3324      	adds	r3, #36	@ 0x24
 800a98e:	2200      	movs	r2, #0
 800a990:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800a992:	6939      	ldr	r1, [r7, #16]
 800a994:	69fa      	ldr	r2, [r7, #28]
 800a996:	4613      	mov	r3, r2
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	4413      	add	r3, r2
 800a99c:	00db      	lsls	r3, r3, #3
 800a99e:	440b      	add	r3, r1
 800a9a0:	332c      	adds	r3, #44	@ 0x2c
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a9a6:	f3bf 8f5f 	dmb	sy
 800a9aa:	e002      	b.n	800a9b2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800a9ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9b0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800a9b8:	69fb      	ldr	r3, [r7, #28]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3720      	adds	r7, #32
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	200133d4 	.word	0x200133d4

0800a9c8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800a9d6:	4b33      	ldr	r3, [pc, #204]	@ (800aaa4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800a9d8:	61bb      	str	r3, [r7, #24]
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800a9e4:	f7ff fd50 	bl	800a488 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a9e8:	4b2e      	ldr	r3, [pc, #184]	@ (800aaa4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800a9ea:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d24d      	bcs.n	800aa94 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800a9f8:	f3ef 8311 	mrs	r3, BASEPRI
 800a9fc:	f04f 0120 	mov.w	r1, #32
 800aa00:	f381 8811 	msr	BASEPRI, r1
 800aa04:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d031      	beq.n	800aa70 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800aa0c:	6979      	ldr	r1, [r7, #20]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	4613      	mov	r3, r2
 800aa12:	005b      	lsls	r3, r3, #1
 800aa14:	4413      	add	r3, r2
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	440b      	add	r3, r1
 800aa1a:	3360      	adds	r3, #96	@ 0x60
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800aa20:	6979      	ldr	r1, [r7, #20]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	4613      	mov	r3, r2
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	4413      	add	r3, r2
 800aa2a:	00db      	lsls	r3, r3, #3
 800aa2c:	440b      	add	r3, r1
 800aa2e:	3364      	adds	r3, #100	@ 0x64
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800aa34:	6979      	ldr	r1, [r7, #20]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	4413      	add	r3, r2
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	440b      	add	r3, r1
 800aa42:	3368      	adds	r3, #104	@ 0x68
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800aa48:	6979      	ldr	r1, [r7, #20]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	005b      	lsls	r3, r3, #1
 800aa50:	4413      	add	r3, r2
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	440b      	add	r3, r1
 800aa56:	3370      	adds	r3, #112	@ 0x70
 800aa58:	2200      	movs	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800aa5c:	6979      	ldr	r1, [r7, #20]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	4613      	mov	r3, r2
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	4413      	add	r3, r2
 800aa66:	00db      	lsls	r3, r3, #3
 800aa68:	440b      	add	r3, r1
 800aa6a:	336c      	adds	r3, #108	@ 0x6c
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800aa70:	6979      	ldr	r1, [r7, #20]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	4613      	mov	r3, r2
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	4413      	add	r3, r2
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	440b      	add	r3, r1
 800aa7e:	3374      	adds	r3, #116	@ 0x74
 800aa80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa82:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800aa84:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	61fb      	str	r3, [r7, #28]
 800aa92:	e002      	b.n	800aa9a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800aa94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa98:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800aa9a:	69fb      	ldr	r3, [r7, #28]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3720      	adds	r7, #32
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	200133d4 	.word	0x200133d4

0800aaa8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800aab4:	2300      	movs	r3, #0
 800aab6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800aab8:	e002      	b.n	800aac0 <_EncodeStr+0x18>
    Len++;
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	3301      	adds	r3, #1
 800aabe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	4413      	add	r3, r2
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1f6      	bne.n	800aaba <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d901      	bls.n	800aad8 <_EncodeStr+0x30>
    Len = Limit;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	2bfe      	cmp	r3, #254	@ 0xfe
 800aadc:	d806      	bhi.n	800aaec <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	1c5a      	adds	r2, r3, #1
 800aae2:	60fa      	str	r2, [r7, #12]
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	b2d2      	uxtb	r2, r2
 800aae8:	701a      	strb	r2, [r3, #0]
 800aaea:	e011      	b.n	800ab10 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	1c5a      	adds	r2, r3, #1
 800aaf0:	60fa      	str	r2, [r7, #12]
 800aaf2:	22ff      	movs	r2, #255	@ 0xff
 800aaf4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	1c5a      	adds	r2, r3, #1
 800aafa:	60fa      	str	r2, [r7, #12]
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	b2d2      	uxtb	r2, r2
 800ab00:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	0a19      	lsrs	r1, r3, #8
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	1c5a      	adds	r2, r3, #1
 800ab0a:	60fa      	str	r2, [r7, #12]
 800ab0c:	b2ca      	uxtb	r2, r1
 800ab0e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ab14:	e00a      	b.n	800ab2c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	1c53      	adds	r3, r2, #1
 800ab1a:	60bb      	str	r3, [r7, #8]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	1c59      	adds	r1, r3, #1
 800ab20:	60f9      	str	r1, [r7, #12]
 800ab22:	7812      	ldrb	r2, [r2, #0]
 800ab24:	701a      	strb	r2, [r3, #0]
    n++;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d3f0      	bcc.n	800ab16 <_EncodeStr+0x6e>
  }
  return pPayload;
 800ab34:	68fb      	ldr	r3, [r7, #12]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	371c      	adds	r7, #28
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	3304      	adds	r3, #4
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
	...

0800ab5c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ab62:	4b35      	ldr	r3, [pc, #212]	@ (800ac38 <_HandleIncomingPacket+0xdc>)
 800ab64:	7e1b      	ldrb	r3, [r3, #24]
 800ab66:	4618      	mov	r0, r3
 800ab68:	1cfb      	adds	r3, r7, #3
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	f7ff fdab 	bl	800a6c8 <SEGGER_RTT_ReadNoLock>
 800ab72:	4603      	mov	r3, r0
 800ab74:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	dd59      	ble.n	800ac30 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800ab7c:	78fb      	ldrb	r3, [r7, #3]
 800ab7e:	2b80      	cmp	r3, #128	@ 0x80
 800ab80:	d032      	beq.n	800abe8 <_HandleIncomingPacket+0x8c>
 800ab82:	2b80      	cmp	r3, #128	@ 0x80
 800ab84:	dc42      	bgt.n	800ac0c <_HandleIncomingPacket+0xb0>
 800ab86:	2b07      	cmp	r3, #7
 800ab88:	dc16      	bgt.n	800abb8 <_HandleIncomingPacket+0x5c>
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	dd3e      	ble.n	800ac0c <_HandleIncomingPacket+0xb0>
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	2b06      	cmp	r3, #6
 800ab92:	d83b      	bhi.n	800ac0c <_HandleIncomingPacket+0xb0>
 800ab94:	a201      	add	r2, pc, #4	@ (adr r2, 800ab9c <_HandleIncomingPacket+0x40>)
 800ab96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9a:	bf00      	nop
 800ab9c:	0800abbf 	.word	0x0800abbf
 800aba0:	0800abc5 	.word	0x0800abc5
 800aba4:	0800abcb 	.word	0x0800abcb
 800aba8:	0800abd1 	.word	0x0800abd1
 800abac:	0800abd7 	.word	0x0800abd7
 800abb0:	0800abdd 	.word	0x0800abdd
 800abb4:	0800abe3 	.word	0x0800abe3
 800abb8:	2b7f      	cmp	r3, #127	@ 0x7f
 800abba:	d034      	beq.n	800ac26 <_HandleIncomingPacket+0xca>
 800abbc:	e026      	b.n	800ac0c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800abbe:	f000 fba5 	bl	800b30c <SEGGER_SYSVIEW_Start>
      break;
 800abc2:	e035      	b.n	800ac30 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800abc4:	f000 fc5c 	bl	800b480 <SEGGER_SYSVIEW_Stop>
      break;
 800abc8:	e032      	b.n	800ac30 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800abca:	f000 fe35 	bl	800b838 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800abce:	e02f      	b.n	800ac30 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800abd0:	f000 fdfa 	bl	800b7c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800abd4:	e02c      	b.n	800ac30 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800abd6:	f000 fc79 	bl	800b4cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800abda:	e029      	b.n	800ac30 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800abdc:	f001 f8c8 	bl	800bd70 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800abe0:	e026      	b.n	800ac30 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800abe2:	f001 f8a7 	bl	800bd34 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800abe6:	e023      	b.n	800ac30 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800abe8:	4b13      	ldr	r3, [pc, #76]	@ (800ac38 <_HandleIncomingPacket+0xdc>)
 800abea:	7e1b      	ldrb	r3, [r3, #24]
 800abec:	4618      	mov	r0, r3
 800abee:	1cfb      	adds	r3, r7, #3
 800abf0:	2201      	movs	r2, #1
 800abf2:	4619      	mov	r1, r3
 800abf4:	f7ff fd68 	bl	800a6c8 <SEGGER_RTT_ReadNoLock>
 800abf8:	4603      	mov	r3, r0
 800abfa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	dd13      	ble.n	800ac2a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800ac02:	78fb      	ldrb	r3, [r7, #3]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f001 f815 	bl	800bc34 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800ac0a:	e00e      	b.n	800ac2a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	b25b      	sxtb	r3, r3
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	da0c      	bge.n	800ac2e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ac14:	4b08      	ldr	r3, [pc, #32]	@ (800ac38 <_HandleIncomingPacket+0xdc>)
 800ac16:	7e1b      	ldrb	r3, [r3, #24]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	1cfb      	adds	r3, r7, #3
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	4619      	mov	r1, r3
 800ac20:	f7ff fd52 	bl	800a6c8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800ac24:	e003      	b.n	800ac2e <_HandleIncomingPacket+0xd2>
      break;
 800ac26:	bf00      	nop
 800ac28:	e002      	b.n	800ac30 <_HandleIncomingPacket+0xd4>
      break;
 800ac2a:	bf00      	nop
 800ac2c:	e000      	b.n	800ac30 <_HandleIncomingPacket+0xd4>
      break;
 800ac2e:	bf00      	nop
    }
  }
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	20014894 	.word	0x20014894

0800ac3c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08c      	sub	sp, #48	@ 0x30
 800ac40:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800ac42:	2301      	movs	r3, #1
 800ac44:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800ac46:	1d3b      	adds	r3, r7, #4
 800ac48:	3301      	adds	r3, #1
 800ac4a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac50:	4b31      	ldr	r3, [pc, #196]	@ (800ad18 <_TrySendOverflowPacket+0xdc>)
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac56:	e00b      	b.n	800ac70 <_TrySendOverflowPacket+0x34>
 800ac58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5a:	b2da      	uxtb	r2, r3
 800ac5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5e:	1c59      	adds	r1, r3, #1
 800ac60:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ac62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ac66:	b2d2      	uxtb	r2, r2
 800ac68:	701a      	strb	r2, [r3, #0]
 800ac6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6c:	09db      	lsrs	r3, r3, #7
 800ac6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac72:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac74:	d8f0      	bhi.n	800ac58 <_TrySendOverflowPacket+0x1c>
 800ac76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac78:	1c5a      	adds	r2, r3, #1
 800ac7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac7e:	b2d2      	uxtb	r2, r2
 800ac80:	701a      	strb	r2, [r3, #0]
 800ac82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac84:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ac86:	4b25      	ldr	r3, [pc, #148]	@ (800ad1c <_TrySendOverflowPacket+0xe0>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800ac8c:	4b22      	ldr	r3, [pc, #136]	@ (800ad18 <_TrySendOverflowPacket+0xdc>)
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	69ba      	ldr	r2, [r7, #24]
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	623b      	str	r3, [r7, #32]
 800ac9e:	e00b      	b.n	800acb8 <_TrySendOverflowPacket+0x7c>
 800aca0:	6a3b      	ldr	r3, [r7, #32]
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca6:	1c59      	adds	r1, r3, #1
 800aca8:	6279      	str	r1, [r7, #36]	@ 0x24
 800acaa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800acae:	b2d2      	uxtb	r2, r2
 800acb0:	701a      	strb	r2, [r3, #0]
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	09db      	lsrs	r3, r3, #7
 800acb6:	623b      	str	r3, [r7, #32]
 800acb8:	6a3b      	ldr	r3, [r7, #32]
 800acba:	2b7f      	cmp	r3, #127	@ 0x7f
 800acbc:	d8f0      	bhi.n	800aca0 <_TrySendOverflowPacket+0x64>
 800acbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	627a      	str	r2, [r7, #36]	@ 0x24
 800acc4:	6a3a      	ldr	r2, [r7, #32]
 800acc6:	b2d2      	uxtb	r2, r2
 800acc8:	701a      	strb	r2, [r3, #0]
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800acce:	4b12      	ldr	r3, [pc, #72]	@ (800ad18 <_TrySendOverflowPacket+0xdc>)
 800acd0:	785b      	ldrb	r3, [r3, #1]
 800acd2:	4618      	mov	r0, r3
 800acd4:	1d3b      	adds	r3, r7, #4
 800acd6:	69fa      	ldr	r2, [r7, #28]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	461a      	mov	r2, r3
 800acdc:	1d3b      	adds	r3, r7, #4
 800acde:	4619      	mov	r1, r3
 800ace0:	f7f5 fa96 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800ace4:	4603      	mov	r3, r0
 800ace6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d009      	beq.n	800ad02 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800acee:	4a0a      	ldr	r2, [pc, #40]	@ (800ad18 <_TrySendOverflowPacket+0xdc>)
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800acf4:	4b08      	ldr	r3, [pc, #32]	@ (800ad18 <_TrySendOverflowPacket+0xdc>)
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	3b01      	subs	r3, #1
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	4b06      	ldr	r3, [pc, #24]	@ (800ad18 <_TrySendOverflowPacket+0xdc>)
 800acfe:	701a      	strb	r2, [r3, #0]
 800ad00:	e004      	b.n	800ad0c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800ad02:	4b05      	ldr	r3, [pc, #20]	@ (800ad18 <_TrySendOverflowPacket+0xdc>)
 800ad04:	695b      	ldr	r3, [r3, #20]
 800ad06:	3301      	adds	r3, #1
 800ad08:	4a03      	ldr	r2, [pc, #12]	@ (800ad18 <_TrySendOverflowPacket+0xdc>)
 800ad0a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800ad0c:	693b      	ldr	r3, [r7, #16]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3730      	adds	r7, #48	@ 0x30
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20014894 	.word	0x20014894
 800ad1c:	e0001004 	.word	0xe0001004

0800ad20 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b08a      	sub	sp, #40	@ 0x28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800ad2c:	4b6c      	ldr	r3, [pc, #432]	@ (800aee0 <_SendPacket+0x1c0>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d010      	beq.n	800ad56 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800ad34:	4b6a      	ldr	r3, [pc, #424]	@ (800aee0 <_SendPacket+0x1c0>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 80a3 	beq.w	800ae84 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800ad3e:	4b68      	ldr	r3, [pc, #416]	@ (800aee0 <_SendPacket+0x1c0>)
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d109      	bne.n	800ad5a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800ad46:	f7ff ff79 	bl	800ac3c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800ad4a:	4b65      	ldr	r3, [pc, #404]	@ (800aee0 <_SendPacket+0x1c0>)
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	f040 809a 	bne.w	800ae88 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800ad54:	e001      	b.n	800ad5a <_SendPacket+0x3a>
    goto Send;
 800ad56:	bf00      	nop
 800ad58:	e000      	b.n	800ad5c <_SendPacket+0x3c>
Send:
 800ad5a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b1f      	cmp	r3, #31
 800ad60:	d809      	bhi.n	800ad76 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800ad62:	4b5f      	ldr	r3, [pc, #380]	@ (800aee0 <_SendPacket+0x1c0>)
 800ad64:	69da      	ldr	r2, [r3, #28]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	fa22 f303 	lsr.w	r3, r2, r3
 800ad6c:	f003 0301 	and.w	r3, r3, #1
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f040 808b 	bne.w	800ae8c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2b17      	cmp	r3, #23
 800ad7a:	d807      	bhi.n	800ad8c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	60fb      	str	r3, [r7, #12]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	e03d      	b.n	800ae08 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad98:	d912      	bls.n	800adc0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	09da      	lsrs	r2, r3, #7
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	b2d2      	uxtb	r2, r2
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	b2db      	uxtb	r3, r3
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	3a01      	subs	r2, #1
 800adb2:	60fa      	str	r2, [r7, #12]
 800adb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	e006      	b.n	800adce <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	3b01      	subs	r3, #1
 800adc4:	60fb      	str	r3, [r7, #12]
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2b7f      	cmp	r3, #127	@ 0x7f
 800add2:	d912      	bls.n	800adfa <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	09da      	lsrs	r2, r3, #7
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3b01      	subs	r3, #1
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	b2d2      	uxtb	r2, r2
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	3a01      	subs	r2, #1
 800adec:	60fa      	str	r2, [r7, #12]
 800adee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	701a      	strb	r2, [r3, #0]
 800adf8:	e006      	b.n	800ae08 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	3b01      	subs	r3, #1
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ae08:	4b36      	ldr	r3, [pc, #216]	@ (800aee4 <_SendPacket+0x1c4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800ae0e:	4b34      	ldr	r3, [pc, #208]	@ (800aee0 <_SendPacket+0x1c0>)
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	69ba      	ldr	r2, [r7, #24]
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	623b      	str	r3, [r7, #32]
 800ae20:	e00b      	b.n	800ae3a <_SendPacket+0x11a>
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae28:	1c59      	adds	r1, r3, #1
 800ae2a:	6279      	str	r1, [r7, #36]	@ 0x24
 800ae2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ae30:	b2d2      	uxtb	r2, r2
 800ae32:	701a      	strb	r2, [r3, #0]
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	09db      	lsrs	r3, r3, #7
 800ae38:	623b      	str	r3, [r7, #32]
 800ae3a:	6a3b      	ldr	r3, [r7, #32]
 800ae3c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae3e:	d8f0      	bhi.n	800ae22 <_SendPacket+0x102>
 800ae40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae46:	6a3a      	ldr	r2, [r7, #32]
 800ae48:	b2d2      	uxtb	r2, r2
 800ae4a:	701a      	strb	r2, [r3, #0]
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800ae50:	4b23      	ldr	r3, [pc, #140]	@ (800aee0 <_SendPacket+0x1c0>)
 800ae52:	785b      	ldrb	r3, [r3, #1]
 800ae54:	4618      	mov	r0, r3
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	1ad3      	subs	r3, r2, r3
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	68f9      	ldr	r1, [r7, #12]
 800ae60:	f7f5 f9d6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800ae64:	4603      	mov	r3, r0
 800ae66:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d003      	beq.n	800ae76 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800ae6e:	4a1c      	ldr	r2, [pc, #112]	@ (800aee0 <_SendPacket+0x1c0>)
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	60d3      	str	r3, [r2, #12]
 800ae74:	e00b      	b.n	800ae8e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800ae76:	4b1a      	ldr	r3, [pc, #104]	@ (800aee0 <_SendPacket+0x1c0>)
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	4b18      	ldr	r3, [pc, #96]	@ (800aee0 <_SendPacket+0x1c0>)
 800ae80:	701a      	strb	r2, [r3, #0]
 800ae82:	e004      	b.n	800ae8e <_SendPacket+0x16e>
    goto SendDone;
 800ae84:	bf00      	nop
 800ae86:	e002      	b.n	800ae8e <_SendPacket+0x16e>
      goto SendDone;
 800ae88:	bf00      	nop
 800ae8a:	e000      	b.n	800ae8e <_SendPacket+0x16e>
      goto SendDone;
 800ae8c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800ae8e:	4b14      	ldr	r3, [pc, #80]	@ (800aee0 <_SendPacket+0x1c0>)
 800ae90:	7e1b      	ldrb	r3, [r3, #24]
 800ae92:	4619      	mov	r1, r3
 800ae94:	4a14      	ldr	r2, [pc, #80]	@ (800aee8 <_SendPacket+0x1c8>)
 800ae96:	460b      	mov	r3, r1
 800ae98:	005b      	lsls	r3, r3, #1
 800ae9a:	440b      	add	r3, r1
 800ae9c:	00db      	lsls	r3, r3, #3
 800ae9e:	4413      	add	r3, r2
 800aea0:	336c      	adds	r3, #108	@ 0x6c
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	4b0e      	ldr	r3, [pc, #56]	@ (800aee0 <_SendPacket+0x1c0>)
 800aea6:	7e1b      	ldrb	r3, [r3, #24]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	490f      	ldr	r1, [pc, #60]	@ (800aee8 <_SendPacket+0x1c8>)
 800aeac:	4603      	mov	r3, r0
 800aeae:	005b      	lsls	r3, r3, #1
 800aeb0:	4403      	add	r3, r0
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	440b      	add	r3, r1
 800aeb6:	3370      	adds	r3, #112	@ 0x70
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d00b      	beq.n	800aed6 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800aebe:	4b08      	ldr	r3, [pc, #32]	@ (800aee0 <_SendPacket+0x1c0>)
 800aec0:	789b      	ldrb	r3, [r3, #2]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d107      	bne.n	800aed6 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800aec6:	4b06      	ldr	r3, [pc, #24]	@ (800aee0 <_SendPacket+0x1c0>)
 800aec8:	2201      	movs	r2, #1
 800aeca:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800aecc:	f7ff fe46 	bl	800ab5c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800aed0:	4b03      	ldr	r3, [pc, #12]	@ (800aee0 <_SendPacket+0x1c0>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800aed6:	bf00      	nop
 800aed8:	3728      	adds	r7, #40	@ 0x28
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20014894 	.word	0x20014894
 800aee4:	e0001004 	.word	0xe0001004
 800aee8:	200133d4 	.word	0x200133d4

0800aeec <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af02      	add	r7, sp, #8
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
 800aef8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800aefa:	2300      	movs	r3, #0
 800aefc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800af00:	4917      	ldr	r1, [pc, #92]	@ (800af60 <SEGGER_SYSVIEW_Init+0x74>)
 800af02:	4818      	ldr	r0, [pc, #96]	@ (800af64 <SEGGER_SYSVIEW_Init+0x78>)
 800af04:	f7ff fcdc 	bl	800a8c0 <SEGGER_RTT_AllocUpBuffer>
 800af08:	4603      	mov	r3, r0
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	4b16      	ldr	r3, [pc, #88]	@ (800af68 <SEGGER_SYSVIEW_Init+0x7c>)
 800af0e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800af10:	4b15      	ldr	r3, [pc, #84]	@ (800af68 <SEGGER_SYSVIEW_Init+0x7c>)
 800af12:	785a      	ldrb	r2, [r3, #1]
 800af14:	4b14      	ldr	r3, [pc, #80]	@ (800af68 <SEGGER_SYSVIEW_Init+0x7c>)
 800af16:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800af18:	4b13      	ldr	r3, [pc, #76]	@ (800af68 <SEGGER_SYSVIEW_Init+0x7c>)
 800af1a:	7e1b      	ldrb	r3, [r3, #24]
 800af1c:	4618      	mov	r0, r3
 800af1e:	2300      	movs	r3, #0
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	2308      	movs	r3, #8
 800af24:	4a11      	ldr	r2, [pc, #68]	@ (800af6c <SEGGER_SYSVIEW_Init+0x80>)
 800af26:	490f      	ldr	r1, [pc, #60]	@ (800af64 <SEGGER_SYSVIEW_Init+0x78>)
 800af28:	f7ff fd4e 	bl	800a9c8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800af2c:	4b0e      	ldr	r3, [pc, #56]	@ (800af68 <SEGGER_SYSVIEW_Init+0x7c>)
 800af2e:	2200      	movs	r2, #0
 800af30:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800af32:	4b0f      	ldr	r3, [pc, #60]	@ (800af70 <SEGGER_SYSVIEW_Init+0x84>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a0c      	ldr	r2, [pc, #48]	@ (800af68 <SEGGER_SYSVIEW_Init+0x7c>)
 800af38:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800af3a:	4a0b      	ldr	r2, [pc, #44]	@ (800af68 <SEGGER_SYSVIEW_Init+0x7c>)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800af40:	4a09      	ldr	r2, [pc, #36]	@ (800af68 <SEGGER_SYSVIEW_Init+0x7c>)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800af46:	4a08      	ldr	r2, [pc, #32]	@ (800af68 <SEGGER_SYSVIEW_Init+0x7c>)
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800af4c:	4a06      	ldr	r2, [pc, #24]	@ (800af68 <SEGGER_SYSVIEW_Init+0x7c>)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800af52:	4b05      	ldr	r3, [pc, #20]	@ (800af68 <SEGGER_SYSVIEW_Init+0x7c>)
 800af54:	2200      	movs	r2, #0
 800af56:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800af58:	bf00      	nop
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	2001388c 	.word	0x2001388c
 800af64:	0800d6d4 	.word	0x0800d6d4
 800af68:	20014894 	.word	0x20014894
 800af6c:	2001488c 	.word	0x2001488c
 800af70:	e0001004 	.word	0xe0001004

0800af74 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800af7c:	4a04      	ldr	r2, [pc, #16]	@ (800af90 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6113      	str	r3, [r2, #16]
}
 800af82:	bf00      	nop
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	20014894 	.word	0x20014894

0800af94 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800af9c:	f3ef 8311 	mrs	r3, BASEPRI
 800afa0:	f04f 0120 	mov.w	r1, #32
 800afa4:	f381 8811 	msr	BASEPRI, r1
 800afa8:	60fb      	str	r3, [r7, #12]
 800afaa:	4808      	ldr	r0, [pc, #32]	@ (800afcc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800afac:	f7ff fdc9 	bl	800ab42 <_PreparePacket>
 800afb0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	68b9      	ldr	r1, [r7, #8]
 800afb6:	68b8      	ldr	r0, [r7, #8]
 800afb8:	f7ff feb2 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f383 8811 	msr	BASEPRI, r3
}
 800afc2:	bf00      	nop
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	200148c4 	.word	0x200148c4

0800afd0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b088      	sub	sp, #32
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800afda:	f3ef 8311 	mrs	r3, BASEPRI
 800afde:	f04f 0120 	mov.w	r1, #32
 800afe2:	f381 8811 	msr	BASEPRI, r1
 800afe6:	617b      	str	r3, [r7, #20]
 800afe8:	4816      	ldr	r0, [pc, #88]	@ (800b044 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800afea:	f7ff fdaa 	bl	800ab42 <_PreparePacket>
 800afee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	61fb      	str	r3, [r7, #28]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	61bb      	str	r3, [r7, #24]
 800affc:	e00b      	b.n	800b016 <SEGGER_SYSVIEW_RecordU32+0x46>
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	b2da      	uxtb	r2, r3
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	1c59      	adds	r1, r3, #1
 800b006:	61f9      	str	r1, [r7, #28]
 800b008:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b00c:	b2d2      	uxtb	r2, r2
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	09db      	lsrs	r3, r3, #7
 800b014:	61bb      	str	r3, [r7, #24]
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	2b7f      	cmp	r3, #127	@ 0x7f
 800b01a:	d8f0      	bhi.n	800affe <SEGGER_SYSVIEW_RecordU32+0x2e>
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	1c5a      	adds	r2, r3, #1
 800b020:	61fa      	str	r2, [r7, #28]
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	b2d2      	uxtb	r2, r2
 800b026:	701a      	strb	r2, [r3, #0]
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	68f9      	ldr	r1, [r7, #12]
 800b030:	6938      	ldr	r0, [r7, #16]
 800b032:	f7ff fe75 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f383 8811 	msr	BASEPRI, r3
}
 800b03c:	bf00      	nop
 800b03e:	3720      	adds	r7, #32
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	200148c4 	.word	0x200148c4

0800b048 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08c      	sub	sp, #48	@ 0x30
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b054:	f3ef 8311 	mrs	r3, BASEPRI
 800b058:	f04f 0120 	mov.w	r1, #32
 800b05c:	f381 8811 	msr	BASEPRI, r1
 800b060:	61fb      	str	r3, [r7, #28]
 800b062:	4825      	ldr	r0, [pc, #148]	@ (800b0f8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800b064:	f7ff fd6d 	bl	800ab42 <_PreparePacket>
 800b068:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b076:	e00b      	b.n	800b090 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800b078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07e:	1c59      	adds	r1, r3, #1
 800b080:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b082:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b086:	b2d2      	uxtb	r2, r2
 800b088:	701a      	strb	r2, [r3, #0]
 800b08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08c:	09db      	lsrs	r3, r3, #7
 800b08e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b092:	2b7f      	cmp	r3, #127	@ 0x7f
 800b094:	d8f0      	bhi.n	800b078 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800b096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b098:	1c5a      	adds	r2, r3, #1
 800b09a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b09c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b09e:	b2d2      	uxtb	r2, r2
 800b0a0:	701a      	strb	r2, [r3, #0]
 800b0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	623b      	str	r3, [r7, #32]
 800b0ae:	e00b      	b.n	800b0c8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	b2da      	uxtb	r2, r3
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b6:	1c59      	adds	r1, r3, #1
 800b0b8:	6279      	str	r1, [r7, #36]	@ 0x24
 800b0ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b0be:	b2d2      	uxtb	r2, r2
 800b0c0:	701a      	strb	r2, [r3, #0]
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	09db      	lsrs	r3, r3, #7
 800b0c6:	623b      	str	r3, [r7, #32]
 800b0c8:	6a3b      	ldr	r3, [r7, #32]
 800b0ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800b0cc:	d8f0      	bhi.n	800b0b0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d0:	1c5a      	adds	r2, r3, #1
 800b0d2:	627a      	str	r2, [r7, #36]	@ 0x24
 800b0d4:	6a3a      	ldr	r2, [r7, #32]
 800b0d6:	b2d2      	uxtb	r2, r2
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0dc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	6979      	ldr	r1, [r7, #20]
 800b0e2:	69b8      	ldr	r0, [r7, #24]
 800b0e4:	f7ff fe1c 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	f383 8811 	msr	BASEPRI, r3
}
 800b0ee:	bf00      	nop
 800b0f0:	3730      	adds	r7, #48	@ 0x30
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	200148c4 	.word	0x200148c4

0800b0fc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b08e      	sub	sp, #56	@ 0x38
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
 800b108:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800b10a:	f3ef 8311 	mrs	r3, BASEPRI
 800b10e:	f04f 0120 	mov.w	r1, #32
 800b112:	f381 8811 	msr	BASEPRI, r1
 800b116:	61fb      	str	r3, [r7, #28]
 800b118:	4832      	ldr	r0, [pc, #200]	@ (800b1e4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800b11a:	f7ff fd12 	bl	800ab42 <_PreparePacket>
 800b11e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	637b      	str	r3, [r7, #52]	@ 0x34
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b12c:	e00b      	b.n	800b146 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	b2da      	uxtb	r2, r3
 800b132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b134:	1c59      	adds	r1, r3, #1
 800b136:	6379      	str	r1, [r7, #52]	@ 0x34
 800b138:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b13c:	b2d2      	uxtb	r2, r2
 800b13e:	701a      	strb	r2, [r3, #0]
 800b140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b142:	09db      	lsrs	r3, r3, #7
 800b144:	633b      	str	r3, [r7, #48]	@ 0x30
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	2b7f      	cmp	r3, #127	@ 0x7f
 800b14a:	d8f0      	bhi.n	800b12e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800b14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	637a      	str	r2, [r7, #52]	@ 0x34
 800b152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b154:	b2d2      	uxtb	r2, r2
 800b156:	701a      	strb	r2, [r3, #0]
 800b158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b15a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b164:	e00b      	b.n	800b17e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800b166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16c:	1c59      	adds	r1, r3, #1
 800b16e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b170:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b174:	b2d2      	uxtb	r2, r2
 800b176:	701a      	strb	r2, [r3, #0]
 800b178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17a:	09db      	lsrs	r3, r3, #7
 800b17c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b180:	2b7f      	cmp	r3, #127	@ 0x7f
 800b182:	d8f0      	bhi.n	800b166 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800b184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b186:	1c5a      	adds	r2, r3, #1
 800b188:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b18a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b18c:	b2d2      	uxtb	r2, r2
 800b18e:	701a      	strb	r2, [r3, #0]
 800b190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b192:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	627b      	str	r3, [r7, #36]	@ 0x24
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	623b      	str	r3, [r7, #32]
 800b19c:	e00b      	b.n	800b1b6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800b19e:	6a3b      	ldr	r3, [r7, #32]
 800b1a0:	b2da      	uxtb	r2, r3
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a4:	1c59      	adds	r1, r3, #1
 800b1a6:	6279      	str	r1, [r7, #36]	@ 0x24
 800b1a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b1ac:	b2d2      	uxtb	r2, r2
 800b1ae:	701a      	strb	r2, [r3, #0]
 800b1b0:	6a3b      	ldr	r3, [r7, #32]
 800b1b2:	09db      	lsrs	r3, r3, #7
 800b1b4:	623b      	str	r3, [r7, #32]
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	2b7f      	cmp	r3, #127	@ 0x7f
 800b1ba:	d8f0      	bhi.n	800b19e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1be:	1c5a      	adds	r2, r3, #1
 800b1c0:	627a      	str	r2, [r7, #36]	@ 0x24
 800b1c2:	6a3a      	ldr	r2, [r7, #32]
 800b1c4:	b2d2      	uxtb	r2, r2
 800b1c6:	701a      	strb	r2, [r3, #0]
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	6979      	ldr	r1, [r7, #20]
 800b1d0:	69b8      	ldr	r0, [r7, #24]
 800b1d2:	f7ff fda5 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	f383 8811 	msr	BASEPRI, r3
}
 800b1dc:	bf00      	nop
 800b1de:	3738      	adds	r7, #56	@ 0x38
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	200148c4 	.word	0x200148c4

0800b1e8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b090      	sub	sp, #64	@ 0x40
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
 800b1f4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b1f6:	f3ef 8311 	mrs	r3, BASEPRI
 800b1fa:	f04f 0120 	mov.w	r1, #32
 800b1fe:	f381 8811 	msr	BASEPRI, r1
 800b202:	61fb      	str	r3, [r7, #28]
 800b204:	4840      	ldr	r0, [pc, #256]	@ (800b308 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800b206:	f7ff fc9c 	bl	800ab42 <_PreparePacket>
 800b20a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b218:	e00b      	b.n	800b232 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800b21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b220:	1c59      	adds	r1, r3, #1
 800b222:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800b224:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b228:	b2d2      	uxtb	r2, r2
 800b22a:	701a      	strb	r2, [r3, #0]
 800b22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22e:	09db      	lsrs	r3, r3, #7
 800b230:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b234:	2b7f      	cmp	r3, #127	@ 0x7f
 800b236:	d8f0      	bhi.n	800b21a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800b238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b23e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b240:	b2d2      	uxtb	r2, r2
 800b242:	701a      	strb	r2, [r3, #0]
 800b244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b246:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b250:	e00b      	b.n	800b26a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	b2da      	uxtb	r2, r3
 800b256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b258:	1c59      	adds	r1, r3, #1
 800b25a:	6379      	str	r1, [r7, #52]	@ 0x34
 800b25c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b260:	b2d2      	uxtb	r2, r2
 800b262:	701a      	strb	r2, [r3, #0]
 800b264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b266:	09db      	lsrs	r3, r3, #7
 800b268:	633b      	str	r3, [r7, #48]	@ 0x30
 800b26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b26e:	d8f0      	bhi.n	800b252 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800b270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b272:	1c5a      	adds	r2, r3, #1
 800b274:	637a      	str	r2, [r7, #52]	@ 0x34
 800b276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b278:	b2d2      	uxtb	r2, r2
 800b27a:	701a      	strb	r2, [r3, #0]
 800b27c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b27e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b288:	e00b      	b.n	800b2a2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800b28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b290:	1c59      	adds	r1, r3, #1
 800b292:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b294:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b298:	b2d2      	uxtb	r2, r2
 800b29a:	701a      	strb	r2, [r3, #0]
 800b29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29e:	09db      	lsrs	r3, r3, #7
 800b2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a4:	2b7f      	cmp	r3, #127	@ 0x7f
 800b2a6:	d8f0      	bhi.n	800b28a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800b2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b2ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2b0:	b2d2      	uxtb	r2, r2
 800b2b2:	701a      	strb	r2, [r3, #0]
 800b2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2be:	623b      	str	r3, [r7, #32]
 800b2c0:	e00b      	b.n	800b2da <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800b2c2:	6a3b      	ldr	r3, [r7, #32]
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c8:	1c59      	adds	r1, r3, #1
 800b2ca:	6279      	str	r1, [r7, #36]	@ 0x24
 800b2cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b2d0:	b2d2      	uxtb	r2, r2
 800b2d2:	701a      	strb	r2, [r3, #0]
 800b2d4:	6a3b      	ldr	r3, [r7, #32]
 800b2d6:	09db      	lsrs	r3, r3, #7
 800b2d8:	623b      	str	r3, [r7, #32]
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800b2de:	d8f0      	bhi.n	800b2c2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	627a      	str	r2, [r7, #36]	@ 0x24
 800b2e6:	6a3a      	ldr	r2, [r7, #32]
 800b2e8:	b2d2      	uxtb	r2, r2
 800b2ea:	701a      	strb	r2, [r3, #0]
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	6979      	ldr	r1, [r7, #20]
 800b2f4:	69b8      	ldr	r0, [r7, #24]
 800b2f6:	f7ff fd13 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	f383 8811 	msr	BASEPRI, r3
}
 800b300:	bf00      	nop
 800b302:	3740      	adds	r7, #64	@ 0x40
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	200148c4 	.word	0x200148c4

0800b30c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08c      	sub	sp, #48	@ 0x30
 800b310:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800b312:	4b58      	ldr	r3, [pc, #352]	@ (800b474 <SEGGER_SYSVIEW_Start+0x168>)
 800b314:	2201      	movs	r2, #1
 800b316:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800b318:	f3ef 8311 	mrs	r3, BASEPRI
 800b31c:	f04f 0120 	mov.w	r1, #32
 800b320:	f381 8811 	msr	BASEPRI, r1
 800b324:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800b326:	4b53      	ldr	r3, [pc, #332]	@ (800b474 <SEGGER_SYSVIEW_Start+0x168>)
 800b328:	785b      	ldrb	r3, [r3, #1]
 800b32a:	220a      	movs	r2, #10
 800b32c:	4952      	ldr	r1, [pc, #328]	@ (800b478 <SEGGER_SYSVIEW_Start+0x16c>)
 800b32e:	4618      	mov	r0, r3
 800b330:	f7f4 ff6e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800b33a:	200a      	movs	r0, #10
 800b33c:	f7ff fe2a 	bl	800af94 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b340:	f3ef 8311 	mrs	r3, BASEPRI
 800b344:	f04f 0120 	mov.w	r1, #32
 800b348:	f381 8811 	msr	BASEPRI, r1
 800b34c:	60bb      	str	r3, [r7, #8]
 800b34e:	484b      	ldr	r0, [pc, #300]	@ (800b47c <SEGGER_SYSVIEW_Start+0x170>)
 800b350:	f7ff fbf7 	bl	800ab42 <_PreparePacket>
 800b354:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b35e:	4b45      	ldr	r3, [pc, #276]	@ (800b474 <SEGGER_SYSVIEW_Start+0x168>)
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b364:	e00b      	b.n	800b37e <SEGGER_SYSVIEW_Start+0x72>
 800b366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36c:	1c59      	adds	r1, r3, #1
 800b36e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b370:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b374:	b2d2      	uxtb	r2, r2
 800b376:	701a      	strb	r2, [r3, #0]
 800b378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37a:	09db      	lsrs	r3, r3, #7
 800b37c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b380:	2b7f      	cmp	r3, #127	@ 0x7f
 800b382:	d8f0      	bhi.n	800b366 <SEGGER_SYSVIEW_Start+0x5a>
 800b384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b38a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b38c:	b2d2      	uxtb	r2, r2
 800b38e:	701a      	strb	r2, [r3, #0]
 800b390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b392:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	627b      	str	r3, [r7, #36]	@ 0x24
 800b398:	4b36      	ldr	r3, [pc, #216]	@ (800b474 <SEGGER_SYSVIEW_Start+0x168>)
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	623b      	str	r3, [r7, #32]
 800b39e:	e00b      	b.n	800b3b8 <SEGGER_SYSVIEW_Start+0xac>
 800b3a0:	6a3b      	ldr	r3, [r7, #32]
 800b3a2:	b2da      	uxtb	r2, r3
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a6:	1c59      	adds	r1, r3, #1
 800b3a8:	6279      	str	r1, [r7, #36]	@ 0x24
 800b3aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b3ae:	b2d2      	uxtb	r2, r2
 800b3b0:	701a      	strb	r2, [r3, #0]
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	09db      	lsrs	r3, r3, #7
 800b3b6:	623b      	str	r3, [r7, #32]
 800b3b8:	6a3b      	ldr	r3, [r7, #32]
 800b3ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3bc:	d8f0      	bhi.n	800b3a0 <SEGGER_SYSVIEW_Start+0x94>
 800b3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c0:	1c5a      	adds	r2, r3, #1
 800b3c2:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3c4:	6a3a      	ldr	r2, [r7, #32]
 800b3c6:	b2d2      	uxtb	r2, r2
 800b3c8:	701a      	strb	r2, [r3, #0]
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	61fb      	str	r3, [r7, #28]
 800b3d2:	4b28      	ldr	r3, [pc, #160]	@ (800b474 <SEGGER_SYSVIEW_Start+0x168>)
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	61bb      	str	r3, [r7, #24]
 800b3d8:	e00b      	b.n	800b3f2 <SEGGER_SYSVIEW_Start+0xe6>
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	b2da      	uxtb	r2, r3
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	1c59      	adds	r1, r3, #1
 800b3e2:	61f9      	str	r1, [r7, #28]
 800b3e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b3e8:	b2d2      	uxtb	r2, r2
 800b3ea:	701a      	strb	r2, [r3, #0]
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	09db      	lsrs	r3, r3, #7
 800b3f0:	61bb      	str	r3, [r7, #24]
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3f6:	d8f0      	bhi.n	800b3da <SEGGER_SYSVIEW_Start+0xce>
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	1c5a      	adds	r2, r3, #1
 800b3fc:	61fa      	str	r2, [r7, #28]
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	b2d2      	uxtb	r2, r2
 800b402:	701a      	strb	r2, [r3, #0]
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	2300      	movs	r3, #0
 800b40e:	613b      	str	r3, [r7, #16]
 800b410:	e00b      	b.n	800b42a <SEGGER_SYSVIEW_Start+0x11e>
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	b2da      	uxtb	r2, r3
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	1c59      	adds	r1, r3, #1
 800b41a:	6179      	str	r1, [r7, #20]
 800b41c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b420:	b2d2      	uxtb	r2, r2
 800b422:	701a      	strb	r2, [r3, #0]
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	09db      	lsrs	r3, r3, #7
 800b428:	613b      	str	r3, [r7, #16]
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b42e:	d8f0      	bhi.n	800b412 <SEGGER_SYSVIEW_Start+0x106>
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	1c5a      	adds	r2, r3, #1
 800b434:	617a      	str	r2, [r7, #20]
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	b2d2      	uxtb	r2, r2
 800b43a:	701a      	strb	r2, [r3, #0]
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b440:	2218      	movs	r2, #24
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7ff fc6b 	bl	800ad20 <_SendPacket>
      RECORD_END();
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b450:	4b08      	ldr	r3, [pc, #32]	@ (800b474 <SEGGER_SYSVIEW_Start+0x168>)
 800b452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800b458:	4b06      	ldr	r3, [pc, #24]	@ (800b474 <SEGGER_SYSVIEW_Start+0x168>)
 800b45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b45c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800b45e:	f000 f9eb 	bl	800b838 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800b462:	f000 f9b1 	bl	800b7c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800b466:	f000 fc83 	bl	800bd70 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800b46a:	bf00      	nop
 800b46c:	3730      	adds	r7, #48	@ 0x30
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20014894 	.word	0x20014894
 800b478:	0800d704 	.word	0x0800d704
 800b47c:	200148c4 	.word	0x200148c4

0800b480 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b486:	f3ef 8311 	mrs	r3, BASEPRI
 800b48a:	f04f 0120 	mov.w	r1, #32
 800b48e:	f381 8811 	msr	BASEPRI, r1
 800b492:	607b      	str	r3, [r7, #4]
 800b494:	480b      	ldr	r0, [pc, #44]	@ (800b4c4 <SEGGER_SYSVIEW_Stop+0x44>)
 800b496:	f7ff fb54 	bl	800ab42 <_PreparePacket>
 800b49a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800b49c:	4b0a      	ldr	r3, [pc, #40]	@ (800b4c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d007      	beq.n	800b4b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800b4a4:	220b      	movs	r2, #11
 800b4a6:	6839      	ldr	r1, [r7, #0]
 800b4a8:	6838      	ldr	r0, [r7, #0]
 800b4aa:	f7ff fc39 	bl	800ad20 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800b4ae:	4b06      	ldr	r3, [pc, #24]	@ (800b4c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f383 8811 	msr	BASEPRI, r3
}
 800b4ba:	bf00      	nop
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	200148c4 	.word	0x200148c4
 800b4c8:	20014894 	.word	0x20014894

0800b4cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08c      	sub	sp, #48	@ 0x30
 800b4d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b4d2:	f3ef 8311 	mrs	r3, BASEPRI
 800b4d6:	f04f 0120 	mov.w	r1, #32
 800b4da:	f381 8811 	msr	BASEPRI, r1
 800b4de:	60fb      	str	r3, [r7, #12]
 800b4e0:	4845      	ldr	r0, [pc, #276]	@ (800b5f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800b4e2:	f7ff fb2e 	bl	800ab42 <_PreparePacket>
 800b4e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4f0:	4b42      	ldr	r3, [pc, #264]	@ (800b5fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4f6:	e00b      	b.n	800b510 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800b4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fe:	1c59      	adds	r1, r3, #1
 800b500:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b502:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b506:	b2d2      	uxtb	r2, r2
 800b508:	701a      	strb	r2, [r3, #0]
 800b50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50c:	09db      	lsrs	r3, r3, #7
 800b50e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b512:	2b7f      	cmp	r3, #127	@ 0x7f
 800b514:	d8f0      	bhi.n	800b4f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800b516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b51c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b51e:	b2d2      	uxtb	r2, r2
 800b520:	701a      	strb	r2, [r3, #0]
 800b522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b524:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	627b      	str	r3, [r7, #36]	@ 0x24
 800b52a:	4b34      	ldr	r3, [pc, #208]	@ (800b5fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	623b      	str	r3, [r7, #32]
 800b530:	e00b      	b.n	800b54a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800b532:	6a3b      	ldr	r3, [r7, #32]
 800b534:	b2da      	uxtb	r2, r3
 800b536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b538:	1c59      	adds	r1, r3, #1
 800b53a:	6279      	str	r1, [r7, #36]	@ 0x24
 800b53c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b540:	b2d2      	uxtb	r2, r2
 800b542:	701a      	strb	r2, [r3, #0]
 800b544:	6a3b      	ldr	r3, [r7, #32]
 800b546:	09db      	lsrs	r3, r3, #7
 800b548:	623b      	str	r3, [r7, #32]
 800b54a:	6a3b      	ldr	r3, [r7, #32]
 800b54c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b54e:	d8f0      	bhi.n	800b532 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800b550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b552:	1c5a      	adds	r2, r3, #1
 800b554:	627a      	str	r2, [r7, #36]	@ 0x24
 800b556:	6a3a      	ldr	r2, [r7, #32]
 800b558:	b2d2      	uxtb	r2, r2
 800b55a:	701a      	strb	r2, [r3, #0]
 800b55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	61fb      	str	r3, [r7, #28]
 800b564:	4b25      	ldr	r3, [pc, #148]	@ (800b5fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	61bb      	str	r3, [r7, #24]
 800b56a:	e00b      	b.n	800b584 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	b2da      	uxtb	r2, r3
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	1c59      	adds	r1, r3, #1
 800b574:	61f9      	str	r1, [r7, #28]
 800b576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b57a:	b2d2      	uxtb	r2, r2
 800b57c:	701a      	strb	r2, [r3, #0]
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	09db      	lsrs	r3, r3, #7
 800b582:	61bb      	str	r3, [r7, #24]
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	2b7f      	cmp	r3, #127	@ 0x7f
 800b588:	d8f0      	bhi.n	800b56c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	1c5a      	adds	r2, r3, #1
 800b58e:	61fa      	str	r2, [r7, #28]
 800b590:	69ba      	ldr	r2, [r7, #24]
 800b592:	b2d2      	uxtb	r2, r2
 800b594:	701a      	strb	r2, [r3, #0]
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	617b      	str	r3, [r7, #20]
 800b59e:	2300      	movs	r3, #0
 800b5a0:	613b      	str	r3, [r7, #16]
 800b5a2:	e00b      	b.n	800b5bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	1c59      	adds	r1, r3, #1
 800b5ac:	6179      	str	r1, [r7, #20]
 800b5ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b5b2:	b2d2      	uxtb	r2, r2
 800b5b4:	701a      	strb	r2, [r3, #0]
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	09db      	lsrs	r3, r3, #7
 800b5ba:	613b      	str	r3, [r7, #16]
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	2b7f      	cmp	r3, #127	@ 0x7f
 800b5c0:	d8f0      	bhi.n	800b5a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	617a      	str	r2, [r7, #20]
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	b2d2      	uxtb	r2, r2
 800b5cc:	701a      	strb	r2, [r3, #0]
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b5d2:	2218      	movs	r2, #24
 800b5d4:	6879      	ldr	r1, [r7, #4]
 800b5d6:	68b8      	ldr	r0, [r7, #8]
 800b5d8:	f7ff fba2 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b5e2:	4b06      	ldr	r3, [pc, #24]	@ (800b5fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d002      	beq.n	800b5f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800b5ea:	4b04      	ldr	r3, [pc, #16]	@ (800b5fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ee:	4798      	blx	r3
  }
}
 800b5f0:	bf00      	nop
 800b5f2:	3730      	adds	r7, #48	@ 0x30
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	200148c4 	.word	0x200148c4
 800b5fc:	20014894 	.word	0x20014894

0800b600 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800b600:	b580      	push	{r7, lr}
 800b602:	b092      	sub	sp, #72	@ 0x48
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800b608:	f3ef 8311 	mrs	r3, BASEPRI
 800b60c:	f04f 0120 	mov.w	r1, #32
 800b610:	f381 8811 	msr	BASEPRI, r1
 800b614:	617b      	str	r3, [r7, #20]
 800b616:	486a      	ldr	r0, [pc, #424]	@ (800b7c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800b618:	f7ff fa93 	bl	800ab42 <_PreparePacket>
 800b61c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	647b      	str	r3, [r7, #68]	@ 0x44
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	4b66      	ldr	r3, [pc, #408]	@ (800b7c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	1ad3      	subs	r3, r2, r3
 800b630:	643b      	str	r3, [r7, #64]	@ 0x40
 800b632:	e00b      	b.n	800b64c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800b634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b636:	b2da      	uxtb	r2, r3
 800b638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b63a:	1c59      	adds	r1, r3, #1
 800b63c:	6479      	str	r1, [r7, #68]	@ 0x44
 800b63e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b642:	b2d2      	uxtb	r2, r2
 800b644:	701a      	strb	r2, [r3, #0]
 800b646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b648:	09db      	lsrs	r3, r3, #7
 800b64a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b64c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b64e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b650:	d8f0      	bhi.n	800b634 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800b652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	647a      	str	r2, [r7, #68]	@ 0x44
 800b658:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b65a:	b2d2      	uxtb	r2, r2
 800b65c:	701a      	strb	r2, [r3, #0]
 800b65e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b660:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b66c:	e00b      	b.n	800b686 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800b66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b670:	b2da      	uxtb	r2, r3
 800b672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b674:	1c59      	adds	r1, r3, #1
 800b676:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800b678:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b67c:	b2d2      	uxtb	r2, r2
 800b67e:	701a      	strb	r2, [r3, #0]
 800b680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b682:	09db      	lsrs	r3, r3, #7
 800b684:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b688:	2b7f      	cmp	r3, #127	@ 0x7f
 800b68a:	d8f0      	bhi.n	800b66e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800b68c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b68e:	1c5a      	adds	r2, r3, #1
 800b690:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b692:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b694:	b2d2      	uxtb	r2, r2
 800b696:	701a      	strb	r2, [r3, #0]
 800b698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b69a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f7ff f9ff 	bl	800aaa8 <_EncodeStr>
 800b6aa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800b6ac:	2209      	movs	r2, #9
 800b6ae:	68f9      	ldr	r1, [r7, #12]
 800b6b0:	6938      	ldr	r0, [r7, #16]
 800b6b2:	f7ff fb35 	bl	800ad20 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	4b40      	ldr	r3, [pc, #256]	@ (800b7c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6ca:	e00b      	b.n	800b6e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6d2:	1c59      	adds	r1, r3, #1
 800b6d4:	6379      	str	r1, [r7, #52]	@ 0x34
 800b6d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b6da:	b2d2      	uxtb	r2, r2
 800b6dc:	701a      	strb	r2, [r3, #0]
 800b6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e0:	09db      	lsrs	r3, r3, #7
 800b6e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b6e8:	d8f0      	bhi.n	800b6cc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800b6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ec:	1c5a      	adds	r2, r3, #1
 800b6ee:	637a      	str	r2, [r7, #52]	@ 0x34
 800b6f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f2:	b2d2      	uxtb	r2, r2
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b704:	e00b      	b.n	800b71e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800b706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b708:	b2da      	uxtb	r2, r3
 800b70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b70c:	1c59      	adds	r1, r3, #1
 800b70e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b710:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b714:	b2d2      	uxtb	r2, r2
 800b716:	701a      	strb	r2, [r3, #0]
 800b718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71a:	09db      	lsrs	r3, r3, #7
 800b71c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b720:	2b7f      	cmp	r3, #127	@ 0x7f
 800b722:	d8f0      	bhi.n	800b706 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800b724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b726:	1c5a      	adds	r2, r3, #1
 800b728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b72a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b72c:	b2d2      	uxtb	r2, r2
 800b72e:	701a      	strb	r2, [r3, #0]
 800b730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b732:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	627b      	str	r3, [r7, #36]	@ 0x24
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	623b      	str	r3, [r7, #32]
 800b73e:	e00b      	b.n	800b758 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	b2da      	uxtb	r2, r3
 800b744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b746:	1c59      	adds	r1, r3, #1
 800b748:	6279      	str	r1, [r7, #36]	@ 0x24
 800b74a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b74e:	b2d2      	uxtb	r2, r2
 800b750:	701a      	strb	r2, [r3, #0]
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	09db      	lsrs	r3, r3, #7
 800b756:	623b      	str	r3, [r7, #32]
 800b758:	6a3b      	ldr	r3, [r7, #32]
 800b75a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b75c:	d8f0      	bhi.n	800b740 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800b75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b760:	1c5a      	adds	r2, r3, #1
 800b762:	627a      	str	r2, [r7, #36]	@ 0x24
 800b764:	6a3a      	ldr	r2, [r7, #32]
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	701a      	strb	r2, [r3, #0]
 800b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	61fb      	str	r3, [r7, #28]
 800b772:	2300      	movs	r3, #0
 800b774:	61bb      	str	r3, [r7, #24]
 800b776:	e00b      	b.n	800b790 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	b2da      	uxtb	r2, r3
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	1c59      	adds	r1, r3, #1
 800b780:	61f9      	str	r1, [r7, #28]
 800b782:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b786:	b2d2      	uxtb	r2, r2
 800b788:	701a      	strb	r2, [r3, #0]
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	09db      	lsrs	r3, r3, #7
 800b78e:	61bb      	str	r3, [r7, #24]
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	2b7f      	cmp	r3, #127	@ 0x7f
 800b794:	d8f0      	bhi.n	800b778 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	1c5a      	adds	r2, r3, #1
 800b79a:	61fa      	str	r2, [r7, #28]
 800b79c:	69ba      	ldr	r2, [r7, #24]
 800b79e:	b2d2      	uxtb	r2, r2
 800b7a0:	701a      	strb	r2, [r3, #0]
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800b7a6:	2215      	movs	r2, #21
 800b7a8:	68f9      	ldr	r1, [r7, #12]
 800b7aa:	6938      	ldr	r0, [r7, #16]
 800b7ac:	f7ff fab8 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	f383 8811 	msr	BASEPRI, r3
}
 800b7b6:	bf00      	nop
 800b7b8:	3748      	adds	r7, #72	@ 0x48
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	200148c4 	.word	0x200148c4
 800b7c4:	20014894 	.word	0x20014894

0800b7c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800b7cc:	4b07      	ldr	r3, [pc, #28]	@ (800b7ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b7ce:	6a1b      	ldr	r3, [r3, #32]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d008      	beq.n	800b7e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800b7d4:	4b05      	ldr	r3, [pc, #20]	@ (800b7ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b7d6:	6a1b      	ldr	r3, [r3, #32]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800b7de:	4b03      	ldr	r3, [pc, #12]	@ (800b7ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b7e0:	6a1b      	ldr	r3, [r3, #32]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	4798      	blx	r3
  }
}
 800b7e6:	bf00      	nop
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20014894 	.word	0x20014894

0800b7f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b7f8:	f3ef 8311 	mrs	r3, BASEPRI
 800b7fc:	f04f 0120 	mov.w	r1, #32
 800b800:	f381 8811 	msr	BASEPRI, r1
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	480b      	ldr	r0, [pc, #44]	@ (800b834 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800b808:	f7ff f99b 	bl	800ab42 <_PreparePacket>
 800b80c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b80e:	2280      	movs	r2, #128	@ 0x80
 800b810:	6879      	ldr	r1, [r7, #4]
 800b812:	6938      	ldr	r0, [r7, #16]
 800b814:	f7ff f948 	bl	800aaa8 <_EncodeStr>
 800b818:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800b81a:	220e      	movs	r2, #14
 800b81c:	68f9      	ldr	r1, [r7, #12]
 800b81e:	6938      	ldr	r0, [r7, #16]
 800b820:	f7ff fa7e 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	f383 8811 	msr	BASEPRI, r3
}
 800b82a:	bf00      	nop
 800b82c:	3718      	adds	r7, #24
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	200148c4 	.word	0x200148c4

0800b838 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800b838:	b590      	push	{r4, r7, lr}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800b83e:	4b15      	ldr	r3, [pc, #84]	@ (800b894 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b840:	6a1b      	ldr	r3, [r3, #32]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d01a      	beq.n	800b87c <SEGGER_SYSVIEW_RecordSystime+0x44>
 800b846:	4b13      	ldr	r3, [pc, #76]	@ (800b894 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b848:	6a1b      	ldr	r3, [r3, #32]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d015      	beq.n	800b87c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800b850:	4b10      	ldr	r3, [pc, #64]	@ (800b894 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b852:	6a1b      	ldr	r3, [r3, #32]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4798      	blx	r3
 800b858:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b85c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800b85e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b862:	f04f 0200 	mov.w	r2, #0
 800b866:	f04f 0300 	mov.w	r3, #0
 800b86a:	000a      	movs	r2, r1
 800b86c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b86e:	4613      	mov	r3, r2
 800b870:	461a      	mov	r2, r3
 800b872:	4621      	mov	r1, r4
 800b874:	200d      	movs	r0, #13
 800b876:	f7ff fbe7 	bl	800b048 <SEGGER_SYSVIEW_RecordU32x2>
 800b87a:	e006      	b.n	800b88a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800b87c:	4b06      	ldr	r3, [pc, #24]	@ (800b898 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4619      	mov	r1, r3
 800b882:	200c      	movs	r0, #12
 800b884:	f7ff fba4 	bl	800afd0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800b888:	bf00      	nop
 800b88a:	bf00      	nop
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd90      	pop	{r4, r7, pc}
 800b892:	bf00      	nop
 800b894:	20014894 	.word	0x20014894
 800b898:	e0001004 	.word	0xe0001004

0800b89c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b8a2:	f3ef 8311 	mrs	r3, BASEPRI
 800b8a6:	f04f 0120 	mov.w	r1, #32
 800b8aa:	f381 8811 	msr	BASEPRI, r1
 800b8ae:	60fb      	str	r3, [r7, #12]
 800b8b0:	4819      	ldr	r0, [pc, #100]	@ (800b918 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800b8b2:	f7ff f946 	bl	800ab42 <_PreparePacket>
 800b8b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800b8bc:	4b17      	ldr	r3, [pc, #92]	@ (800b91c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	617b      	str	r3, [r7, #20]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	613b      	str	r3, [r7, #16]
 800b8ce:	e00b      	b.n	800b8e8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	1c59      	adds	r1, r3, #1
 800b8d8:	6179      	str	r1, [r7, #20]
 800b8da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b8de:	b2d2      	uxtb	r2, r2
 800b8e0:	701a      	strb	r2, [r3, #0]
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	09db      	lsrs	r3, r3, #7
 800b8e6:	613b      	str	r3, [r7, #16]
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	2b7f      	cmp	r3, #127	@ 0x7f
 800b8ec:	d8f0      	bhi.n	800b8d0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	617a      	str	r2, [r7, #20]
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	b2d2      	uxtb	r2, r2
 800b8f8:	701a      	strb	r2, [r3, #0]
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800b8fe:	2202      	movs	r2, #2
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	68b8      	ldr	r0, [r7, #8]
 800b904:	f7ff fa0c 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f383 8811 	msr	BASEPRI, r3
}
 800b90e:	bf00      	nop
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	200148c4 	.word	0x200148c4
 800b91c:	e000ed04 	.word	0xe000ed04

0800b920 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b926:	f3ef 8311 	mrs	r3, BASEPRI
 800b92a:	f04f 0120 	mov.w	r1, #32
 800b92e:	f381 8811 	msr	BASEPRI, r1
 800b932:	607b      	str	r3, [r7, #4]
 800b934:	4807      	ldr	r0, [pc, #28]	@ (800b954 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800b936:	f7ff f904 	bl	800ab42 <_PreparePacket>
 800b93a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800b93c:	2203      	movs	r2, #3
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6838      	ldr	r0, [r7, #0]
 800b942:	f7ff f9ed 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f383 8811 	msr	BASEPRI, r3
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	200148c4 	.word	0x200148c4

0800b958 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b95e:	f3ef 8311 	mrs	r3, BASEPRI
 800b962:	f04f 0120 	mov.w	r1, #32
 800b966:	f381 8811 	msr	BASEPRI, r1
 800b96a:	607b      	str	r3, [r7, #4]
 800b96c:	4807      	ldr	r0, [pc, #28]	@ (800b98c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800b96e:	f7ff f8e8 	bl	800ab42 <_PreparePacket>
 800b972:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800b974:	2212      	movs	r2, #18
 800b976:	6839      	ldr	r1, [r7, #0]
 800b978:	6838      	ldr	r0, [r7, #0]
 800b97a:	f7ff f9d1 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f383 8811 	msr	BASEPRI, r3
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	200148c4 	.word	0x200148c4

0800b990 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b996:	f3ef 8311 	mrs	r3, BASEPRI
 800b99a:	f04f 0120 	mov.w	r1, #32
 800b99e:	f381 8811 	msr	BASEPRI, r1
 800b9a2:	607b      	str	r3, [r7, #4]
 800b9a4:	4807      	ldr	r0, [pc, #28]	@ (800b9c4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800b9a6:	f7ff f8cc 	bl	800ab42 <_PreparePacket>
 800b9aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800b9ac:	2211      	movs	r2, #17
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6838      	ldr	r0, [r7, #0]
 800b9b2:	f7ff f9b5 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f383 8811 	msr	BASEPRI, r3
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	200148c4 	.word	0x200148c4

0800b9c8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b088      	sub	sp, #32
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b9d0:	f3ef 8311 	mrs	r3, BASEPRI
 800b9d4:	f04f 0120 	mov.w	r1, #32
 800b9d8:	f381 8811 	msr	BASEPRI, r1
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	4819      	ldr	r0, [pc, #100]	@ (800ba44 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800b9e0:	f7ff f8af 	bl	800ab42 <_PreparePacket>
 800b9e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b9ea:	4b17      	ldr	r3, [pc, #92]	@ (800ba48 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	61fb      	str	r3, [r7, #28]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	61bb      	str	r3, [r7, #24]
 800b9fc:	e00b      	b.n	800ba16 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	1c59      	adds	r1, r3, #1
 800ba06:	61f9      	str	r1, [r7, #28]
 800ba08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ba0c:	b2d2      	uxtb	r2, r2
 800ba0e:	701a      	strb	r2, [r3, #0]
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	09db      	lsrs	r3, r3, #7
 800ba14:	61bb      	str	r3, [r7, #24]
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba1a:	d8f0      	bhi.n	800b9fe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	61fa      	str	r2, [r7, #28]
 800ba22:	69ba      	ldr	r2, [r7, #24]
 800ba24:	b2d2      	uxtb	r2, r2
 800ba26:	701a      	strb	r2, [r3, #0]
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800ba2c:	2208      	movs	r2, #8
 800ba2e:	68f9      	ldr	r1, [r7, #12]
 800ba30:	6938      	ldr	r0, [r7, #16]
 800ba32:	f7ff f975 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f383 8811 	msr	BASEPRI, r3
}
 800ba3c:	bf00      	nop
 800ba3e:	3720      	adds	r7, #32
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	200148c4 	.word	0x200148c4
 800ba48:	20014894 	.word	0x20014894

0800ba4c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b088      	sub	sp, #32
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ba54:	f3ef 8311 	mrs	r3, BASEPRI
 800ba58:	f04f 0120 	mov.w	r1, #32
 800ba5c:	f381 8811 	msr	BASEPRI, r1
 800ba60:	617b      	str	r3, [r7, #20]
 800ba62:	4819      	ldr	r0, [pc, #100]	@ (800bac8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800ba64:	f7ff f86d 	bl	800ab42 <_PreparePacket>
 800ba68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ba6e:	4b17      	ldr	r3, [pc, #92]	@ (800bacc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	61fb      	str	r3, [r7, #28]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	61bb      	str	r3, [r7, #24]
 800ba80:	e00b      	b.n	800ba9a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	1c59      	adds	r1, r3, #1
 800ba8a:	61f9      	str	r1, [r7, #28]
 800ba8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ba90:	b2d2      	uxtb	r2, r2
 800ba92:	701a      	strb	r2, [r3, #0]
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	09db      	lsrs	r3, r3, #7
 800ba98:	61bb      	str	r3, [r7, #24]
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba9e:	d8f0      	bhi.n	800ba82 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	61fa      	str	r2, [r7, #28]
 800baa6:	69ba      	ldr	r2, [r7, #24]
 800baa8:	b2d2      	uxtb	r2, r2
 800baaa:	701a      	strb	r2, [r3, #0]
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800bab0:	2204      	movs	r2, #4
 800bab2:	68f9      	ldr	r1, [r7, #12]
 800bab4:	6938      	ldr	r0, [r7, #16]
 800bab6:	f7ff f933 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f383 8811 	msr	BASEPRI, r3
}
 800bac0:	bf00      	nop
 800bac2:	3720      	adds	r7, #32
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	200148c4 	.word	0x200148c4
 800bacc:	20014894 	.word	0x20014894

0800bad0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bad8:	f3ef 8311 	mrs	r3, BASEPRI
 800badc:	f04f 0120 	mov.w	r1, #32
 800bae0:	f381 8811 	msr	BASEPRI, r1
 800bae4:	617b      	str	r3, [r7, #20]
 800bae6:	4819      	ldr	r0, [pc, #100]	@ (800bb4c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800bae8:	f7ff f82b 	bl	800ab42 <_PreparePacket>
 800baec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800baf2:	4b17      	ldr	r3, [pc, #92]	@ (800bb50 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	61fb      	str	r3, [r7, #28]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	61bb      	str	r3, [r7, #24]
 800bb04:	e00b      	b.n	800bb1e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	1c59      	adds	r1, r3, #1
 800bb0e:	61f9      	str	r1, [r7, #28]
 800bb10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bb14:	b2d2      	uxtb	r2, r2
 800bb16:	701a      	strb	r2, [r3, #0]
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	09db      	lsrs	r3, r3, #7
 800bb1c:	61bb      	str	r3, [r7, #24]
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb22:	d8f0      	bhi.n	800bb06 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	61fa      	str	r2, [r7, #28]
 800bb2a:	69ba      	ldr	r2, [r7, #24]
 800bb2c:	b2d2      	uxtb	r2, r2
 800bb2e:	701a      	strb	r2, [r3, #0]
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800bb34:	2206      	movs	r2, #6
 800bb36:	68f9      	ldr	r1, [r7, #12]
 800bb38:	6938      	ldr	r0, [r7, #16]
 800bb3a:	f7ff f8f1 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f383 8811 	msr	BASEPRI, r3
}
 800bb44:	bf00      	nop
 800bb46:	3720      	adds	r7, #32
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	200148c4 	.word	0x200148c4
 800bb50:	20014894 	.word	0x20014894

0800bb54 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b08a      	sub	sp, #40	@ 0x28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800bb5e:	f3ef 8311 	mrs	r3, BASEPRI
 800bb62:	f04f 0120 	mov.w	r1, #32
 800bb66:	f381 8811 	msr	BASEPRI, r1
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	4827      	ldr	r0, [pc, #156]	@ (800bc0c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800bb6e:	f7fe ffe8 	bl	800ab42 <_PreparePacket>
 800bb72:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800bb78:	4b25      	ldr	r3, [pc, #148]	@ (800bc10 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	1ad3      	subs	r3, r2, r3
 800bb80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	623b      	str	r3, [r7, #32]
 800bb8a:	e00b      	b.n	800bba4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800bb8c:	6a3b      	ldr	r3, [r7, #32]
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb92:	1c59      	adds	r1, r3, #1
 800bb94:	6279      	str	r1, [r7, #36]	@ 0x24
 800bb96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bb9a:	b2d2      	uxtb	r2, r2
 800bb9c:	701a      	strb	r2, [r3, #0]
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	09db      	lsrs	r3, r3, #7
 800bba2:	623b      	str	r3, [r7, #32]
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bba8:	d8f0      	bhi.n	800bb8c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800bbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbac:	1c5a      	adds	r2, r3, #1
 800bbae:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbb0:	6a3a      	ldr	r2, [r7, #32]
 800bbb2:	b2d2      	uxtb	r2, r2
 800bbb4:	701a      	strb	r2, [r3, #0]
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	61fb      	str	r3, [r7, #28]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	61bb      	str	r3, [r7, #24]
 800bbc2:	e00b      	b.n	800bbdc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	b2da      	uxtb	r2, r3
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	1c59      	adds	r1, r3, #1
 800bbcc:	61f9      	str	r1, [r7, #28]
 800bbce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bbd2:	b2d2      	uxtb	r2, r2
 800bbd4:	701a      	strb	r2, [r3, #0]
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	09db      	lsrs	r3, r3, #7
 800bbda:	61bb      	str	r3, [r7, #24]
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbe0:	d8f0      	bhi.n	800bbc4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	1c5a      	adds	r2, r3, #1
 800bbe6:	61fa      	str	r2, [r7, #28]
 800bbe8:	69ba      	ldr	r2, [r7, #24]
 800bbea:	b2d2      	uxtb	r2, r2
 800bbec:	701a      	strb	r2, [r3, #0]
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800bbf2:	2207      	movs	r2, #7
 800bbf4:	68f9      	ldr	r1, [r7, #12]
 800bbf6:	6938      	ldr	r0, [r7, #16]
 800bbf8:	f7ff f892 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	f383 8811 	msr	BASEPRI, r3
}
 800bc02:	bf00      	nop
 800bc04:	3728      	adds	r7, #40	@ 0x28
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	200148c4 	.word	0x200148c4
 800bc10:	20014894 	.word	0x20014894

0800bc14 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800bc1c:	4b04      	ldr	r3, [pc, #16]	@ (800bc30 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	1ad3      	subs	r3, r2, r3
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	20014894 	.word	0x20014894

0800bc34 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08c      	sub	sp, #48	@ 0x30
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800bc3e:	4b3b      	ldr	r3, [pc, #236]	@ (800bd2c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d06d      	beq.n	800bd22 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800bc46:	4b39      	ldr	r3, [pc, #228]	@ (800bd2c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc50:	e008      	b.n	800bc64 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800bc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800bc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d007      	beq.n	800bc6e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800bc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc60:	3301      	adds	r3, #1
 800bc62:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc64:	79fb      	ldrb	r3, [r7, #7]
 800bc66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d3f2      	bcc.n	800bc52 <SEGGER_SYSVIEW_SendModule+0x1e>
 800bc6c:	e000      	b.n	800bc70 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800bc6e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800bc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d055      	beq.n	800bd22 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bc76:	f3ef 8311 	mrs	r3, BASEPRI
 800bc7a:	f04f 0120 	mov.w	r1, #32
 800bc7e:	f381 8811 	msr	BASEPRI, r1
 800bc82:	617b      	str	r3, [r7, #20]
 800bc84:	482a      	ldr	r0, [pc, #168]	@ (800bd30 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800bc86:	f7fe ff5c 	bl	800ab42 <_PreparePacket>
 800bc8a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc94:	79fb      	ldrb	r3, [r7, #7]
 800bc96:	623b      	str	r3, [r7, #32]
 800bc98:	e00b      	b.n	800bcb2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	b2da      	uxtb	r2, r3
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca0:	1c59      	adds	r1, r3, #1
 800bca2:	6279      	str	r1, [r7, #36]	@ 0x24
 800bca4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bca8:	b2d2      	uxtb	r2, r2
 800bcaa:	701a      	strb	r2, [r3, #0]
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	09db      	lsrs	r3, r3, #7
 800bcb0:	623b      	str	r3, [r7, #32]
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	2b7f      	cmp	r3, #127	@ 0x7f
 800bcb6:	d8f0      	bhi.n	800bc9a <SEGGER_SYSVIEW_SendModule+0x66>
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcbe:	6a3a      	ldr	r2, [r7, #32]
 800bcc0:	b2d2      	uxtb	r2, r2
 800bcc2:	701a      	strb	r2, [r3, #0]
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	61fb      	str	r3, [r7, #28]
 800bccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	61bb      	str	r3, [r7, #24]
 800bcd2:	e00b      	b.n	800bcec <SEGGER_SYSVIEW_SendModule+0xb8>
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	b2da      	uxtb	r2, r3
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	1c59      	adds	r1, r3, #1
 800bcdc:	61f9      	str	r1, [r7, #28]
 800bcde:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bce2:	b2d2      	uxtb	r2, r2
 800bce4:	701a      	strb	r2, [r3, #0]
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	09db      	lsrs	r3, r3, #7
 800bcea:	61bb      	str	r3, [r7, #24]
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	2b7f      	cmp	r3, #127	@ 0x7f
 800bcf0:	d8f0      	bhi.n	800bcd4 <SEGGER_SYSVIEW_SendModule+0xa0>
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	1c5a      	adds	r2, r3, #1
 800bcf6:	61fa      	str	r2, [r7, #28]
 800bcf8:	69ba      	ldr	r2, [r7, #24]
 800bcfa:	b2d2      	uxtb	r2, r2
 800bcfc:	701a      	strb	r2, [r3, #0]
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2280      	movs	r2, #128	@ 0x80
 800bd08:	4619      	mov	r1, r3
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f7fe fecc 	bl	800aaa8 <_EncodeStr>
 800bd10:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800bd12:	2216      	movs	r2, #22
 800bd14:	68f9      	ldr	r1, [r7, #12]
 800bd16:	6938      	ldr	r0, [r7, #16]
 800bd18:	f7ff f802 	bl	800ad20 <_SendPacket>
      RECORD_END();
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800bd22:	bf00      	nop
 800bd24:	3730      	adds	r7, #48	@ 0x30
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	200148bc 	.word	0x200148bc
 800bd30:	200148c4 	.word	0x200148c4

0800bd34 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800bd3a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd6c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00f      	beq.n	800bd62 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800bd42:	4b0a      	ldr	r3, [pc, #40]	@ (800bd6c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1f2      	bne.n	800bd48 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800bd62:	bf00      	nop
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	200148bc 	.word	0x200148bc

0800bd70 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800bd76:	f3ef 8311 	mrs	r3, BASEPRI
 800bd7a:	f04f 0120 	mov.w	r1, #32
 800bd7e:	f381 8811 	msr	BASEPRI, r1
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	4817      	ldr	r0, [pc, #92]	@ (800bde4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800bd86:	f7fe fedc 	bl	800ab42 <_PreparePacket>
 800bd8a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	617b      	str	r3, [r7, #20]
 800bd94:	4b14      	ldr	r3, [pc, #80]	@ (800bde8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	613b      	str	r3, [r7, #16]
 800bd9a:	e00b      	b.n	800bdb4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	1c59      	adds	r1, r3, #1
 800bda4:	6179      	str	r1, [r7, #20]
 800bda6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bdaa:	b2d2      	uxtb	r2, r2
 800bdac:	701a      	strb	r2, [r3, #0]
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	09db      	lsrs	r3, r3, #7
 800bdb2:	613b      	str	r3, [r7, #16]
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bdb8:	d8f0      	bhi.n	800bd9c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	617a      	str	r2, [r7, #20]
 800bdc0:	693a      	ldr	r2, [r7, #16]
 800bdc2:	b2d2      	uxtb	r2, r2
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800bdca:	221b      	movs	r2, #27
 800bdcc:	6879      	ldr	r1, [r7, #4]
 800bdce:	68b8      	ldr	r0, [r7, #8]
 800bdd0:	f7fe ffa6 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f383 8811 	msr	BASEPRI, r3
}
 800bdda:	bf00      	nop
 800bddc:	3718      	adds	r7, #24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	200148c4 	.word	0x200148c4
 800bde8:	200148c0 	.word	0x200148c0

0800bdec <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b08a      	sub	sp, #40	@ 0x28
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bdf4:	f3ef 8311 	mrs	r3, BASEPRI
 800bdf8:	f04f 0120 	mov.w	r1, #32
 800bdfc:	f381 8811 	msr	BASEPRI, r1
 800be00:	617b      	str	r3, [r7, #20]
 800be02:	4827      	ldr	r0, [pc, #156]	@ (800bea0 <SEGGER_SYSVIEW_Warn+0xb4>)
 800be04:	f7fe fe9d 	bl	800ab42 <_PreparePacket>
 800be08:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800be0a:	2280      	movs	r2, #128	@ 0x80
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	6938      	ldr	r0, [r7, #16]
 800be10:	f7fe fe4a 	bl	800aaa8 <_EncodeStr>
 800be14:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	627b      	str	r3, [r7, #36]	@ 0x24
 800be1a:	2301      	movs	r3, #1
 800be1c:	623b      	str	r3, [r7, #32]
 800be1e:	e00b      	b.n	800be38 <SEGGER_SYSVIEW_Warn+0x4c>
 800be20:	6a3b      	ldr	r3, [r7, #32]
 800be22:	b2da      	uxtb	r2, r3
 800be24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be26:	1c59      	adds	r1, r3, #1
 800be28:	6279      	str	r1, [r7, #36]	@ 0x24
 800be2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800be2e:	b2d2      	uxtb	r2, r2
 800be30:	701a      	strb	r2, [r3, #0]
 800be32:	6a3b      	ldr	r3, [r7, #32]
 800be34:	09db      	lsrs	r3, r3, #7
 800be36:	623b      	str	r3, [r7, #32]
 800be38:	6a3b      	ldr	r3, [r7, #32]
 800be3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800be3c:	d8f0      	bhi.n	800be20 <SEGGER_SYSVIEW_Warn+0x34>
 800be3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be40:	1c5a      	adds	r2, r3, #1
 800be42:	627a      	str	r2, [r7, #36]	@ 0x24
 800be44:	6a3a      	ldr	r2, [r7, #32]
 800be46:	b2d2      	uxtb	r2, r2
 800be48:	701a      	strb	r2, [r3, #0]
 800be4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	61fb      	str	r3, [r7, #28]
 800be52:	2300      	movs	r3, #0
 800be54:	61bb      	str	r3, [r7, #24]
 800be56:	e00b      	b.n	800be70 <SEGGER_SYSVIEW_Warn+0x84>
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	b2da      	uxtb	r2, r3
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	1c59      	adds	r1, r3, #1
 800be60:	61f9      	str	r1, [r7, #28]
 800be62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800be66:	b2d2      	uxtb	r2, r2
 800be68:	701a      	strb	r2, [r3, #0]
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	09db      	lsrs	r3, r3, #7
 800be6e:	61bb      	str	r3, [r7, #24]
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	2b7f      	cmp	r3, #127	@ 0x7f
 800be74:	d8f0      	bhi.n	800be58 <SEGGER_SYSVIEW_Warn+0x6c>
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	1c5a      	adds	r2, r3, #1
 800be7a:	61fa      	str	r2, [r7, #28]
 800be7c:	69ba      	ldr	r2, [r7, #24]
 800be7e:	b2d2      	uxtb	r2, r2
 800be80:	701a      	strb	r2, [r3, #0]
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800be86:	221a      	movs	r2, #26
 800be88:	68f9      	ldr	r1, [r7, #12]
 800be8a:	6938      	ldr	r0, [r7, #16]
 800be8c:	f7fe ff48 	bl	800ad20 <_SendPacket>
  RECORD_END();
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f383 8811 	msr	BASEPRI, r3
}
 800be96:	bf00      	nop
 800be98:	3728      	adds	r7, #40	@ 0x28
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	200148c4 	.word	0x200148c4

0800bea4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
 800beb0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	2000      	movs	r0, #0
 800beb8:	f7fe fcdc 	bl	800a874 <SEGGER_RTT_Write>
  return len;
 800bebc:	683b      	ldr	r3, [r7, #0]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
	...

0800bec8 <std>:
 800bec8:	2300      	movs	r3, #0
 800beca:	b510      	push	{r4, lr}
 800becc:	4604      	mov	r4, r0
 800bece:	e9c0 3300 	strd	r3, r3, [r0]
 800bed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bed6:	6083      	str	r3, [r0, #8]
 800bed8:	8181      	strh	r1, [r0, #12]
 800beda:	6643      	str	r3, [r0, #100]	@ 0x64
 800bedc:	81c2      	strh	r2, [r0, #14]
 800bede:	6183      	str	r3, [r0, #24]
 800bee0:	4619      	mov	r1, r3
 800bee2:	2208      	movs	r2, #8
 800bee4:	305c      	adds	r0, #92	@ 0x5c
 800bee6:	f000 fa29 	bl	800c33c <memset>
 800beea:	4b0d      	ldr	r3, [pc, #52]	@ (800bf20 <std+0x58>)
 800beec:	6263      	str	r3, [r4, #36]	@ 0x24
 800beee:	4b0d      	ldr	r3, [pc, #52]	@ (800bf24 <std+0x5c>)
 800bef0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bef2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf28 <std+0x60>)
 800bef4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bef6:	4b0d      	ldr	r3, [pc, #52]	@ (800bf2c <std+0x64>)
 800bef8:	6323      	str	r3, [r4, #48]	@ 0x30
 800befa:	4b0d      	ldr	r3, [pc, #52]	@ (800bf30 <std+0x68>)
 800befc:	6224      	str	r4, [r4, #32]
 800befe:	429c      	cmp	r4, r3
 800bf00:	d006      	beq.n	800bf10 <std+0x48>
 800bf02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf06:	4294      	cmp	r4, r2
 800bf08:	d002      	beq.n	800bf10 <std+0x48>
 800bf0a:	33d0      	adds	r3, #208	@ 0xd0
 800bf0c:	429c      	cmp	r4, r3
 800bf0e:	d105      	bne.n	800bf1c <std+0x54>
 800bf10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf18:	f000 ba70 	b.w	800c3fc <__retarget_lock_init_recursive>
 800bf1c:	bd10      	pop	{r4, pc}
 800bf1e:	bf00      	nop
 800bf20:	0800c16d 	.word	0x0800c16d
 800bf24:	0800c18f 	.word	0x0800c18f
 800bf28:	0800c1c7 	.word	0x0800c1c7
 800bf2c:	0800c1eb 	.word	0x0800c1eb
 800bf30:	200149a8 	.word	0x200149a8

0800bf34 <stdio_exit_handler>:
 800bf34:	4a02      	ldr	r2, [pc, #8]	@ (800bf40 <stdio_exit_handler+0xc>)
 800bf36:	4903      	ldr	r1, [pc, #12]	@ (800bf44 <stdio_exit_handler+0x10>)
 800bf38:	4803      	ldr	r0, [pc, #12]	@ (800bf48 <stdio_exit_handler+0x14>)
 800bf3a:	f000 b869 	b.w	800c010 <_fwalk_sglue>
 800bf3e:	bf00      	nop
 800bf40:	200000dc 	.word	0x200000dc
 800bf44:	0800cf69 	.word	0x0800cf69
 800bf48:	200000ec 	.word	0x200000ec

0800bf4c <cleanup_stdio>:
 800bf4c:	6841      	ldr	r1, [r0, #4]
 800bf4e:	4b0c      	ldr	r3, [pc, #48]	@ (800bf80 <cleanup_stdio+0x34>)
 800bf50:	4299      	cmp	r1, r3
 800bf52:	b510      	push	{r4, lr}
 800bf54:	4604      	mov	r4, r0
 800bf56:	d001      	beq.n	800bf5c <cleanup_stdio+0x10>
 800bf58:	f001 f806 	bl	800cf68 <_fflush_r>
 800bf5c:	68a1      	ldr	r1, [r4, #8]
 800bf5e:	4b09      	ldr	r3, [pc, #36]	@ (800bf84 <cleanup_stdio+0x38>)
 800bf60:	4299      	cmp	r1, r3
 800bf62:	d002      	beq.n	800bf6a <cleanup_stdio+0x1e>
 800bf64:	4620      	mov	r0, r4
 800bf66:	f000 ffff 	bl	800cf68 <_fflush_r>
 800bf6a:	68e1      	ldr	r1, [r4, #12]
 800bf6c:	4b06      	ldr	r3, [pc, #24]	@ (800bf88 <cleanup_stdio+0x3c>)
 800bf6e:	4299      	cmp	r1, r3
 800bf70:	d004      	beq.n	800bf7c <cleanup_stdio+0x30>
 800bf72:	4620      	mov	r0, r4
 800bf74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf78:	f000 bff6 	b.w	800cf68 <_fflush_r>
 800bf7c:	bd10      	pop	{r4, pc}
 800bf7e:	bf00      	nop
 800bf80:	200149a8 	.word	0x200149a8
 800bf84:	20014a10 	.word	0x20014a10
 800bf88:	20014a78 	.word	0x20014a78

0800bf8c <global_stdio_init.part.0>:
 800bf8c:	b510      	push	{r4, lr}
 800bf8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bfbc <global_stdio_init.part.0+0x30>)
 800bf90:	4c0b      	ldr	r4, [pc, #44]	@ (800bfc0 <global_stdio_init.part.0+0x34>)
 800bf92:	4a0c      	ldr	r2, [pc, #48]	@ (800bfc4 <global_stdio_init.part.0+0x38>)
 800bf94:	601a      	str	r2, [r3, #0]
 800bf96:	4620      	mov	r0, r4
 800bf98:	2200      	movs	r2, #0
 800bf9a:	2104      	movs	r1, #4
 800bf9c:	f7ff ff94 	bl	800bec8 <std>
 800bfa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	2109      	movs	r1, #9
 800bfa8:	f7ff ff8e 	bl	800bec8 <std>
 800bfac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bfb0:	2202      	movs	r2, #2
 800bfb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfb6:	2112      	movs	r1, #18
 800bfb8:	f7ff bf86 	b.w	800bec8 <std>
 800bfbc:	20014ae0 	.word	0x20014ae0
 800bfc0:	200149a8 	.word	0x200149a8
 800bfc4:	0800bf35 	.word	0x0800bf35

0800bfc8 <__sfp_lock_acquire>:
 800bfc8:	4801      	ldr	r0, [pc, #4]	@ (800bfd0 <__sfp_lock_acquire+0x8>)
 800bfca:	f000 ba18 	b.w	800c3fe <__retarget_lock_acquire_recursive>
 800bfce:	bf00      	nop
 800bfd0:	20014ae9 	.word	0x20014ae9

0800bfd4 <__sfp_lock_release>:
 800bfd4:	4801      	ldr	r0, [pc, #4]	@ (800bfdc <__sfp_lock_release+0x8>)
 800bfd6:	f000 ba13 	b.w	800c400 <__retarget_lock_release_recursive>
 800bfda:	bf00      	nop
 800bfdc:	20014ae9 	.word	0x20014ae9

0800bfe0 <__sinit>:
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	f7ff fff0 	bl	800bfc8 <__sfp_lock_acquire>
 800bfe8:	6a23      	ldr	r3, [r4, #32]
 800bfea:	b11b      	cbz	r3, 800bff4 <__sinit+0x14>
 800bfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bff0:	f7ff bff0 	b.w	800bfd4 <__sfp_lock_release>
 800bff4:	4b04      	ldr	r3, [pc, #16]	@ (800c008 <__sinit+0x28>)
 800bff6:	6223      	str	r3, [r4, #32]
 800bff8:	4b04      	ldr	r3, [pc, #16]	@ (800c00c <__sinit+0x2c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1f5      	bne.n	800bfec <__sinit+0xc>
 800c000:	f7ff ffc4 	bl	800bf8c <global_stdio_init.part.0>
 800c004:	e7f2      	b.n	800bfec <__sinit+0xc>
 800c006:	bf00      	nop
 800c008:	0800bf4d 	.word	0x0800bf4d
 800c00c:	20014ae0 	.word	0x20014ae0

0800c010 <_fwalk_sglue>:
 800c010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c014:	4607      	mov	r7, r0
 800c016:	4688      	mov	r8, r1
 800c018:	4614      	mov	r4, r2
 800c01a:	2600      	movs	r6, #0
 800c01c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c020:	f1b9 0901 	subs.w	r9, r9, #1
 800c024:	d505      	bpl.n	800c032 <_fwalk_sglue+0x22>
 800c026:	6824      	ldr	r4, [r4, #0]
 800c028:	2c00      	cmp	r4, #0
 800c02a:	d1f7      	bne.n	800c01c <_fwalk_sglue+0xc>
 800c02c:	4630      	mov	r0, r6
 800c02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c032:	89ab      	ldrh	r3, [r5, #12]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d907      	bls.n	800c048 <_fwalk_sglue+0x38>
 800c038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c03c:	3301      	adds	r3, #1
 800c03e:	d003      	beq.n	800c048 <_fwalk_sglue+0x38>
 800c040:	4629      	mov	r1, r5
 800c042:	4638      	mov	r0, r7
 800c044:	47c0      	blx	r8
 800c046:	4306      	orrs	r6, r0
 800c048:	3568      	adds	r5, #104	@ 0x68
 800c04a:	e7e9      	b.n	800c020 <_fwalk_sglue+0x10>

0800c04c <iprintf>:
 800c04c:	b40f      	push	{r0, r1, r2, r3}
 800c04e:	b507      	push	{r0, r1, r2, lr}
 800c050:	4906      	ldr	r1, [pc, #24]	@ (800c06c <iprintf+0x20>)
 800c052:	ab04      	add	r3, sp, #16
 800c054:	6808      	ldr	r0, [r1, #0]
 800c056:	f853 2b04 	ldr.w	r2, [r3], #4
 800c05a:	6881      	ldr	r1, [r0, #8]
 800c05c:	9301      	str	r3, [sp, #4]
 800c05e:	f000 fc59 	bl	800c914 <_vfiprintf_r>
 800c062:	b003      	add	sp, #12
 800c064:	f85d eb04 	ldr.w	lr, [sp], #4
 800c068:	b004      	add	sp, #16
 800c06a:	4770      	bx	lr
 800c06c:	200000e8 	.word	0x200000e8

0800c070 <_puts_r>:
 800c070:	6a03      	ldr	r3, [r0, #32]
 800c072:	b570      	push	{r4, r5, r6, lr}
 800c074:	6884      	ldr	r4, [r0, #8]
 800c076:	4605      	mov	r5, r0
 800c078:	460e      	mov	r6, r1
 800c07a:	b90b      	cbnz	r3, 800c080 <_puts_r+0x10>
 800c07c:	f7ff ffb0 	bl	800bfe0 <__sinit>
 800c080:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c082:	07db      	lsls	r3, r3, #31
 800c084:	d405      	bmi.n	800c092 <_puts_r+0x22>
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	0598      	lsls	r0, r3, #22
 800c08a:	d402      	bmi.n	800c092 <_puts_r+0x22>
 800c08c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c08e:	f000 f9b6 	bl	800c3fe <__retarget_lock_acquire_recursive>
 800c092:	89a3      	ldrh	r3, [r4, #12]
 800c094:	0719      	lsls	r1, r3, #28
 800c096:	d502      	bpl.n	800c09e <_puts_r+0x2e>
 800c098:	6923      	ldr	r3, [r4, #16]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d135      	bne.n	800c10a <_puts_r+0x9a>
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f000 f8e5 	bl	800c270 <__swsetup_r>
 800c0a6:	b380      	cbz	r0, 800c10a <_puts_r+0x9a>
 800c0a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c0ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0ae:	07da      	lsls	r2, r3, #31
 800c0b0:	d405      	bmi.n	800c0be <_puts_r+0x4e>
 800c0b2:	89a3      	ldrh	r3, [r4, #12]
 800c0b4:	059b      	lsls	r3, r3, #22
 800c0b6:	d402      	bmi.n	800c0be <_puts_r+0x4e>
 800c0b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0ba:	f000 f9a1 	bl	800c400 <__retarget_lock_release_recursive>
 800c0be:	4628      	mov	r0, r5
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	da04      	bge.n	800c0d0 <_puts_r+0x60>
 800c0c6:	69a2      	ldr	r2, [r4, #24]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	dc17      	bgt.n	800c0fc <_puts_r+0x8c>
 800c0cc:	290a      	cmp	r1, #10
 800c0ce:	d015      	beq.n	800c0fc <_puts_r+0x8c>
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	1c5a      	adds	r2, r3, #1
 800c0d4:	6022      	str	r2, [r4, #0]
 800c0d6:	7019      	strb	r1, [r3, #0]
 800c0d8:	68a3      	ldr	r3, [r4, #8]
 800c0da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	60a3      	str	r3, [r4, #8]
 800c0e2:	2900      	cmp	r1, #0
 800c0e4:	d1ed      	bne.n	800c0c2 <_puts_r+0x52>
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	da11      	bge.n	800c10e <_puts_r+0x9e>
 800c0ea:	4622      	mov	r2, r4
 800c0ec:	210a      	movs	r1, #10
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	f000 f87f 	bl	800c1f2 <__swbuf_r>
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	d0d7      	beq.n	800c0a8 <_puts_r+0x38>
 800c0f8:	250a      	movs	r5, #10
 800c0fa:	e7d7      	b.n	800c0ac <_puts_r+0x3c>
 800c0fc:	4622      	mov	r2, r4
 800c0fe:	4628      	mov	r0, r5
 800c100:	f000 f877 	bl	800c1f2 <__swbuf_r>
 800c104:	3001      	adds	r0, #1
 800c106:	d1e7      	bne.n	800c0d8 <_puts_r+0x68>
 800c108:	e7ce      	b.n	800c0a8 <_puts_r+0x38>
 800c10a:	3e01      	subs	r6, #1
 800c10c:	e7e4      	b.n	800c0d8 <_puts_r+0x68>
 800c10e:	6823      	ldr	r3, [r4, #0]
 800c110:	1c5a      	adds	r2, r3, #1
 800c112:	6022      	str	r2, [r4, #0]
 800c114:	220a      	movs	r2, #10
 800c116:	701a      	strb	r2, [r3, #0]
 800c118:	e7ee      	b.n	800c0f8 <_puts_r+0x88>
	...

0800c11c <puts>:
 800c11c:	4b02      	ldr	r3, [pc, #8]	@ (800c128 <puts+0xc>)
 800c11e:	4601      	mov	r1, r0
 800c120:	6818      	ldr	r0, [r3, #0]
 800c122:	f7ff bfa5 	b.w	800c070 <_puts_r>
 800c126:	bf00      	nop
 800c128:	200000e8 	.word	0x200000e8

0800c12c <siprintf>:
 800c12c:	b40e      	push	{r1, r2, r3}
 800c12e:	b500      	push	{lr}
 800c130:	b09c      	sub	sp, #112	@ 0x70
 800c132:	ab1d      	add	r3, sp, #116	@ 0x74
 800c134:	9002      	str	r0, [sp, #8]
 800c136:	9006      	str	r0, [sp, #24]
 800c138:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c13c:	4809      	ldr	r0, [pc, #36]	@ (800c164 <siprintf+0x38>)
 800c13e:	9107      	str	r1, [sp, #28]
 800c140:	9104      	str	r1, [sp, #16]
 800c142:	4909      	ldr	r1, [pc, #36]	@ (800c168 <siprintf+0x3c>)
 800c144:	f853 2b04 	ldr.w	r2, [r3], #4
 800c148:	9105      	str	r1, [sp, #20]
 800c14a:	6800      	ldr	r0, [r0, #0]
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	a902      	add	r1, sp, #8
 800c150:	f000 faba 	bl	800c6c8 <_svfiprintf_r>
 800c154:	9b02      	ldr	r3, [sp, #8]
 800c156:	2200      	movs	r2, #0
 800c158:	701a      	strb	r2, [r3, #0]
 800c15a:	b01c      	add	sp, #112	@ 0x70
 800c15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c160:	b003      	add	sp, #12
 800c162:	4770      	bx	lr
 800c164:	200000e8 	.word	0x200000e8
 800c168:	ffff0208 	.word	0xffff0208

0800c16c <__sread>:
 800c16c:	b510      	push	{r4, lr}
 800c16e:	460c      	mov	r4, r1
 800c170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c174:	f000 f90c 	bl	800c390 <_read_r>
 800c178:	2800      	cmp	r0, #0
 800c17a:	bfab      	itete	ge
 800c17c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c17e:	89a3      	ldrhlt	r3, [r4, #12]
 800c180:	181b      	addge	r3, r3, r0
 800c182:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c186:	bfac      	ite	ge
 800c188:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c18a:	81a3      	strhlt	r3, [r4, #12]
 800c18c:	bd10      	pop	{r4, pc}

0800c18e <__swrite>:
 800c18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c192:	461f      	mov	r7, r3
 800c194:	898b      	ldrh	r3, [r1, #12]
 800c196:	05db      	lsls	r3, r3, #23
 800c198:	4605      	mov	r5, r0
 800c19a:	460c      	mov	r4, r1
 800c19c:	4616      	mov	r6, r2
 800c19e:	d505      	bpl.n	800c1ac <__swrite+0x1e>
 800c1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f000 f8e0 	bl	800c36c <_lseek_r>
 800c1ac:	89a3      	ldrh	r3, [r4, #12]
 800c1ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1b6:	81a3      	strh	r3, [r4, #12]
 800c1b8:	4632      	mov	r2, r6
 800c1ba:	463b      	mov	r3, r7
 800c1bc:	4628      	mov	r0, r5
 800c1be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c2:	f7ff be6f 	b.w	800bea4 <_write_r>

0800c1c6 <__sseek>:
 800c1c6:	b510      	push	{r4, lr}
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ce:	f000 f8cd 	bl	800c36c <_lseek_r>
 800c1d2:	1c43      	adds	r3, r0, #1
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	bf15      	itete	ne
 800c1d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c1da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c1de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c1e2:	81a3      	strheq	r3, [r4, #12]
 800c1e4:	bf18      	it	ne
 800c1e6:	81a3      	strhne	r3, [r4, #12]
 800c1e8:	bd10      	pop	{r4, pc}

0800c1ea <__sclose>:
 800c1ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ee:	f000 b8ad 	b.w	800c34c <_close_r>

0800c1f2 <__swbuf_r>:
 800c1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f4:	460e      	mov	r6, r1
 800c1f6:	4614      	mov	r4, r2
 800c1f8:	4605      	mov	r5, r0
 800c1fa:	b118      	cbz	r0, 800c204 <__swbuf_r+0x12>
 800c1fc:	6a03      	ldr	r3, [r0, #32]
 800c1fe:	b90b      	cbnz	r3, 800c204 <__swbuf_r+0x12>
 800c200:	f7ff feee 	bl	800bfe0 <__sinit>
 800c204:	69a3      	ldr	r3, [r4, #24]
 800c206:	60a3      	str	r3, [r4, #8]
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	071a      	lsls	r2, r3, #28
 800c20c:	d501      	bpl.n	800c212 <__swbuf_r+0x20>
 800c20e:	6923      	ldr	r3, [r4, #16]
 800c210:	b943      	cbnz	r3, 800c224 <__swbuf_r+0x32>
 800c212:	4621      	mov	r1, r4
 800c214:	4628      	mov	r0, r5
 800c216:	f000 f82b 	bl	800c270 <__swsetup_r>
 800c21a:	b118      	cbz	r0, 800c224 <__swbuf_r+0x32>
 800c21c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c220:	4638      	mov	r0, r7
 800c222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c224:	6823      	ldr	r3, [r4, #0]
 800c226:	6922      	ldr	r2, [r4, #16]
 800c228:	1a98      	subs	r0, r3, r2
 800c22a:	6963      	ldr	r3, [r4, #20]
 800c22c:	b2f6      	uxtb	r6, r6
 800c22e:	4283      	cmp	r3, r0
 800c230:	4637      	mov	r7, r6
 800c232:	dc05      	bgt.n	800c240 <__swbuf_r+0x4e>
 800c234:	4621      	mov	r1, r4
 800c236:	4628      	mov	r0, r5
 800c238:	f000 fe96 	bl	800cf68 <_fflush_r>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d1ed      	bne.n	800c21c <__swbuf_r+0x2a>
 800c240:	68a3      	ldr	r3, [r4, #8]
 800c242:	3b01      	subs	r3, #1
 800c244:	60a3      	str	r3, [r4, #8]
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	1c5a      	adds	r2, r3, #1
 800c24a:	6022      	str	r2, [r4, #0]
 800c24c:	701e      	strb	r6, [r3, #0]
 800c24e:	6962      	ldr	r2, [r4, #20]
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	429a      	cmp	r2, r3
 800c254:	d004      	beq.n	800c260 <__swbuf_r+0x6e>
 800c256:	89a3      	ldrh	r3, [r4, #12]
 800c258:	07db      	lsls	r3, r3, #31
 800c25a:	d5e1      	bpl.n	800c220 <__swbuf_r+0x2e>
 800c25c:	2e0a      	cmp	r6, #10
 800c25e:	d1df      	bne.n	800c220 <__swbuf_r+0x2e>
 800c260:	4621      	mov	r1, r4
 800c262:	4628      	mov	r0, r5
 800c264:	f000 fe80 	bl	800cf68 <_fflush_r>
 800c268:	2800      	cmp	r0, #0
 800c26a:	d0d9      	beq.n	800c220 <__swbuf_r+0x2e>
 800c26c:	e7d6      	b.n	800c21c <__swbuf_r+0x2a>
	...

0800c270 <__swsetup_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4b29      	ldr	r3, [pc, #164]	@ (800c318 <__swsetup_r+0xa8>)
 800c274:	4605      	mov	r5, r0
 800c276:	6818      	ldr	r0, [r3, #0]
 800c278:	460c      	mov	r4, r1
 800c27a:	b118      	cbz	r0, 800c284 <__swsetup_r+0x14>
 800c27c:	6a03      	ldr	r3, [r0, #32]
 800c27e:	b90b      	cbnz	r3, 800c284 <__swsetup_r+0x14>
 800c280:	f7ff feae 	bl	800bfe0 <__sinit>
 800c284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c288:	0719      	lsls	r1, r3, #28
 800c28a:	d422      	bmi.n	800c2d2 <__swsetup_r+0x62>
 800c28c:	06da      	lsls	r2, r3, #27
 800c28e:	d407      	bmi.n	800c2a0 <__swsetup_r+0x30>
 800c290:	2209      	movs	r2, #9
 800c292:	602a      	str	r2, [r5, #0]
 800c294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c29e:	e033      	b.n	800c308 <__swsetup_r+0x98>
 800c2a0:	0758      	lsls	r0, r3, #29
 800c2a2:	d512      	bpl.n	800c2ca <__swsetup_r+0x5a>
 800c2a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2a6:	b141      	cbz	r1, 800c2ba <__swsetup_r+0x4a>
 800c2a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2ac:	4299      	cmp	r1, r3
 800c2ae:	d002      	beq.n	800c2b6 <__swsetup_r+0x46>
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	f000 f8b5 	bl	800c420 <_free_r>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2c0:	81a3      	strh	r3, [r4, #12]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	6063      	str	r3, [r4, #4]
 800c2c6:	6923      	ldr	r3, [r4, #16]
 800c2c8:	6023      	str	r3, [r4, #0]
 800c2ca:	89a3      	ldrh	r3, [r4, #12]
 800c2cc:	f043 0308 	orr.w	r3, r3, #8
 800c2d0:	81a3      	strh	r3, [r4, #12]
 800c2d2:	6923      	ldr	r3, [r4, #16]
 800c2d4:	b94b      	cbnz	r3, 800c2ea <__swsetup_r+0x7a>
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2e0:	d003      	beq.n	800c2ea <__swsetup_r+0x7a>
 800c2e2:	4621      	mov	r1, r4
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	f000 fe8d 	bl	800d004 <__smakebuf_r>
 800c2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ee:	f013 0201 	ands.w	r2, r3, #1
 800c2f2:	d00a      	beq.n	800c30a <__swsetup_r+0x9a>
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	60a2      	str	r2, [r4, #8]
 800c2f8:	6962      	ldr	r2, [r4, #20]
 800c2fa:	4252      	negs	r2, r2
 800c2fc:	61a2      	str	r2, [r4, #24]
 800c2fe:	6922      	ldr	r2, [r4, #16]
 800c300:	b942      	cbnz	r2, 800c314 <__swsetup_r+0xa4>
 800c302:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c306:	d1c5      	bne.n	800c294 <__swsetup_r+0x24>
 800c308:	bd38      	pop	{r3, r4, r5, pc}
 800c30a:	0799      	lsls	r1, r3, #30
 800c30c:	bf58      	it	pl
 800c30e:	6962      	ldrpl	r2, [r4, #20]
 800c310:	60a2      	str	r2, [r4, #8]
 800c312:	e7f4      	b.n	800c2fe <__swsetup_r+0x8e>
 800c314:	2000      	movs	r0, #0
 800c316:	e7f7      	b.n	800c308 <__swsetup_r+0x98>
 800c318:	200000e8 	.word	0x200000e8

0800c31c <memcmp>:
 800c31c:	b510      	push	{r4, lr}
 800c31e:	3901      	subs	r1, #1
 800c320:	4402      	add	r2, r0
 800c322:	4290      	cmp	r0, r2
 800c324:	d101      	bne.n	800c32a <memcmp+0xe>
 800c326:	2000      	movs	r0, #0
 800c328:	e005      	b.n	800c336 <memcmp+0x1a>
 800c32a:	7803      	ldrb	r3, [r0, #0]
 800c32c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c330:	42a3      	cmp	r3, r4
 800c332:	d001      	beq.n	800c338 <memcmp+0x1c>
 800c334:	1b18      	subs	r0, r3, r4
 800c336:	bd10      	pop	{r4, pc}
 800c338:	3001      	adds	r0, #1
 800c33a:	e7f2      	b.n	800c322 <memcmp+0x6>

0800c33c <memset>:
 800c33c:	4402      	add	r2, r0
 800c33e:	4603      	mov	r3, r0
 800c340:	4293      	cmp	r3, r2
 800c342:	d100      	bne.n	800c346 <memset+0xa>
 800c344:	4770      	bx	lr
 800c346:	f803 1b01 	strb.w	r1, [r3], #1
 800c34a:	e7f9      	b.n	800c340 <memset+0x4>

0800c34c <_close_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4d06      	ldr	r5, [pc, #24]	@ (800c368 <_close_r+0x1c>)
 800c350:	2300      	movs	r3, #0
 800c352:	4604      	mov	r4, r0
 800c354:	4608      	mov	r0, r1
 800c356:	602b      	str	r3, [r5, #0]
 800c358:	f7f5 fe31 	bl	8001fbe <_close>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d102      	bne.n	800c366 <_close_r+0x1a>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	b103      	cbz	r3, 800c366 <_close_r+0x1a>
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	20014ae4 	.word	0x20014ae4

0800c36c <_lseek_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4d07      	ldr	r5, [pc, #28]	@ (800c38c <_lseek_r+0x20>)
 800c370:	4604      	mov	r4, r0
 800c372:	4608      	mov	r0, r1
 800c374:	4611      	mov	r1, r2
 800c376:	2200      	movs	r2, #0
 800c378:	602a      	str	r2, [r5, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	f7f5 fe46 	bl	800200c <_lseek>
 800c380:	1c43      	adds	r3, r0, #1
 800c382:	d102      	bne.n	800c38a <_lseek_r+0x1e>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	b103      	cbz	r3, 800c38a <_lseek_r+0x1e>
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	bd38      	pop	{r3, r4, r5, pc}
 800c38c:	20014ae4 	.word	0x20014ae4

0800c390 <_read_r>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4d07      	ldr	r5, [pc, #28]	@ (800c3b0 <_read_r+0x20>)
 800c394:	4604      	mov	r4, r0
 800c396:	4608      	mov	r0, r1
 800c398:	4611      	mov	r1, r2
 800c39a:	2200      	movs	r2, #0
 800c39c:	602a      	str	r2, [r5, #0]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	f7f5 fdf0 	bl	8001f84 <_read>
 800c3a4:	1c43      	adds	r3, r0, #1
 800c3a6:	d102      	bne.n	800c3ae <_read_r+0x1e>
 800c3a8:	682b      	ldr	r3, [r5, #0]
 800c3aa:	b103      	cbz	r3, 800c3ae <_read_r+0x1e>
 800c3ac:	6023      	str	r3, [r4, #0]
 800c3ae:	bd38      	pop	{r3, r4, r5, pc}
 800c3b0:	20014ae4 	.word	0x20014ae4

0800c3b4 <__libc_init_array>:
 800c3b4:	b570      	push	{r4, r5, r6, lr}
 800c3b6:	4d0d      	ldr	r5, [pc, #52]	@ (800c3ec <__libc_init_array+0x38>)
 800c3b8:	4c0d      	ldr	r4, [pc, #52]	@ (800c3f0 <__libc_init_array+0x3c>)
 800c3ba:	1b64      	subs	r4, r4, r5
 800c3bc:	10a4      	asrs	r4, r4, #2
 800c3be:	2600      	movs	r6, #0
 800c3c0:	42a6      	cmp	r6, r4
 800c3c2:	d109      	bne.n	800c3d8 <__libc_init_array+0x24>
 800c3c4:	4d0b      	ldr	r5, [pc, #44]	@ (800c3f4 <__libc_init_array+0x40>)
 800c3c6:	4c0c      	ldr	r4, [pc, #48]	@ (800c3f8 <__libc_init_array+0x44>)
 800c3c8:	f000 fee8 	bl	800d19c <_init>
 800c3cc:	1b64      	subs	r4, r4, r5
 800c3ce:	10a4      	asrs	r4, r4, #2
 800c3d0:	2600      	movs	r6, #0
 800c3d2:	42a6      	cmp	r6, r4
 800c3d4:	d105      	bne.n	800c3e2 <__libc_init_array+0x2e>
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}
 800c3d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3dc:	4798      	blx	r3
 800c3de:	3601      	adds	r6, #1
 800c3e0:	e7ee      	b.n	800c3c0 <__libc_init_array+0xc>
 800c3e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3e6:	4798      	blx	r3
 800c3e8:	3601      	adds	r6, #1
 800c3ea:	e7f2      	b.n	800c3d2 <__libc_init_array+0x1e>
 800c3ec:	0800d74c 	.word	0x0800d74c
 800c3f0:	0800d74c 	.word	0x0800d74c
 800c3f4:	0800d74c 	.word	0x0800d74c
 800c3f8:	0800d750 	.word	0x0800d750

0800c3fc <__retarget_lock_init_recursive>:
 800c3fc:	4770      	bx	lr

0800c3fe <__retarget_lock_acquire_recursive>:
 800c3fe:	4770      	bx	lr

0800c400 <__retarget_lock_release_recursive>:
 800c400:	4770      	bx	lr

0800c402 <memcpy>:
 800c402:	440a      	add	r2, r1
 800c404:	4291      	cmp	r1, r2
 800c406:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c40a:	d100      	bne.n	800c40e <memcpy+0xc>
 800c40c:	4770      	bx	lr
 800c40e:	b510      	push	{r4, lr}
 800c410:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c414:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c418:	4291      	cmp	r1, r2
 800c41a:	d1f9      	bne.n	800c410 <memcpy+0xe>
 800c41c:	bd10      	pop	{r4, pc}
	...

0800c420 <_free_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	4605      	mov	r5, r0
 800c424:	2900      	cmp	r1, #0
 800c426:	d041      	beq.n	800c4ac <_free_r+0x8c>
 800c428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c42c:	1f0c      	subs	r4, r1, #4
 800c42e:	2b00      	cmp	r3, #0
 800c430:	bfb8      	it	lt
 800c432:	18e4      	addlt	r4, r4, r3
 800c434:	f000 f8e0 	bl	800c5f8 <__malloc_lock>
 800c438:	4a1d      	ldr	r2, [pc, #116]	@ (800c4b0 <_free_r+0x90>)
 800c43a:	6813      	ldr	r3, [r2, #0]
 800c43c:	b933      	cbnz	r3, 800c44c <_free_r+0x2c>
 800c43e:	6063      	str	r3, [r4, #4]
 800c440:	6014      	str	r4, [r2, #0]
 800c442:	4628      	mov	r0, r5
 800c444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c448:	f000 b8dc 	b.w	800c604 <__malloc_unlock>
 800c44c:	42a3      	cmp	r3, r4
 800c44e:	d908      	bls.n	800c462 <_free_r+0x42>
 800c450:	6820      	ldr	r0, [r4, #0]
 800c452:	1821      	adds	r1, r4, r0
 800c454:	428b      	cmp	r3, r1
 800c456:	bf01      	itttt	eq
 800c458:	6819      	ldreq	r1, [r3, #0]
 800c45a:	685b      	ldreq	r3, [r3, #4]
 800c45c:	1809      	addeq	r1, r1, r0
 800c45e:	6021      	streq	r1, [r4, #0]
 800c460:	e7ed      	b.n	800c43e <_free_r+0x1e>
 800c462:	461a      	mov	r2, r3
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	b10b      	cbz	r3, 800c46c <_free_r+0x4c>
 800c468:	42a3      	cmp	r3, r4
 800c46a:	d9fa      	bls.n	800c462 <_free_r+0x42>
 800c46c:	6811      	ldr	r1, [r2, #0]
 800c46e:	1850      	adds	r0, r2, r1
 800c470:	42a0      	cmp	r0, r4
 800c472:	d10b      	bne.n	800c48c <_free_r+0x6c>
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	4401      	add	r1, r0
 800c478:	1850      	adds	r0, r2, r1
 800c47a:	4283      	cmp	r3, r0
 800c47c:	6011      	str	r1, [r2, #0]
 800c47e:	d1e0      	bne.n	800c442 <_free_r+0x22>
 800c480:	6818      	ldr	r0, [r3, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	6053      	str	r3, [r2, #4]
 800c486:	4408      	add	r0, r1
 800c488:	6010      	str	r0, [r2, #0]
 800c48a:	e7da      	b.n	800c442 <_free_r+0x22>
 800c48c:	d902      	bls.n	800c494 <_free_r+0x74>
 800c48e:	230c      	movs	r3, #12
 800c490:	602b      	str	r3, [r5, #0]
 800c492:	e7d6      	b.n	800c442 <_free_r+0x22>
 800c494:	6820      	ldr	r0, [r4, #0]
 800c496:	1821      	adds	r1, r4, r0
 800c498:	428b      	cmp	r3, r1
 800c49a:	bf04      	itt	eq
 800c49c:	6819      	ldreq	r1, [r3, #0]
 800c49e:	685b      	ldreq	r3, [r3, #4]
 800c4a0:	6063      	str	r3, [r4, #4]
 800c4a2:	bf04      	itt	eq
 800c4a4:	1809      	addeq	r1, r1, r0
 800c4a6:	6021      	streq	r1, [r4, #0]
 800c4a8:	6054      	str	r4, [r2, #4]
 800c4aa:	e7ca      	b.n	800c442 <_free_r+0x22>
 800c4ac:	bd38      	pop	{r3, r4, r5, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20014af0 	.word	0x20014af0

0800c4b4 <sbrk_aligned>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	4e0f      	ldr	r6, [pc, #60]	@ (800c4f4 <sbrk_aligned+0x40>)
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	6831      	ldr	r1, [r6, #0]
 800c4bc:	4605      	mov	r5, r0
 800c4be:	b911      	cbnz	r1, 800c4c6 <sbrk_aligned+0x12>
 800c4c0:	f000 fe18 	bl	800d0f4 <_sbrk_r>
 800c4c4:	6030      	str	r0, [r6, #0]
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f000 fe13 	bl	800d0f4 <_sbrk_r>
 800c4ce:	1c43      	adds	r3, r0, #1
 800c4d0:	d103      	bne.n	800c4da <sbrk_aligned+0x26>
 800c4d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	bd70      	pop	{r4, r5, r6, pc}
 800c4da:	1cc4      	adds	r4, r0, #3
 800c4dc:	f024 0403 	bic.w	r4, r4, #3
 800c4e0:	42a0      	cmp	r0, r4
 800c4e2:	d0f8      	beq.n	800c4d6 <sbrk_aligned+0x22>
 800c4e4:	1a21      	subs	r1, r4, r0
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	f000 fe04 	bl	800d0f4 <_sbrk_r>
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	d1f2      	bne.n	800c4d6 <sbrk_aligned+0x22>
 800c4f0:	e7ef      	b.n	800c4d2 <sbrk_aligned+0x1e>
 800c4f2:	bf00      	nop
 800c4f4:	20014aec 	.word	0x20014aec

0800c4f8 <_malloc_r>:
 800c4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4fc:	1ccd      	adds	r5, r1, #3
 800c4fe:	f025 0503 	bic.w	r5, r5, #3
 800c502:	3508      	adds	r5, #8
 800c504:	2d0c      	cmp	r5, #12
 800c506:	bf38      	it	cc
 800c508:	250c      	movcc	r5, #12
 800c50a:	2d00      	cmp	r5, #0
 800c50c:	4606      	mov	r6, r0
 800c50e:	db01      	blt.n	800c514 <_malloc_r+0x1c>
 800c510:	42a9      	cmp	r1, r5
 800c512:	d904      	bls.n	800c51e <_malloc_r+0x26>
 800c514:	230c      	movs	r3, #12
 800c516:	6033      	str	r3, [r6, #0]
 800c518:	2000      	movs	r0, #0
 800c51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c51e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5f4 <_malloc_r+0xfc>
 800c522:	f000 f869 	bl	800c5f8 <__malloc_lock>
 800c526:	f8d8 3000 	ldr.w	r3, [r8]
 800c52a:	461c      	mov	r4, r3
 800c52c:	bb44      	cbnz	r4, 800c580 <_malloc_r+0x88>
 800c52e:	4629      	mov	r1, r5
 800c530:	4630      	mov	r0, r6
 800c532:	f7ff ffbf 	bl	800c4b4 <sbrk_aligned>
 800c536:	1c43      	adds	r3, r0, #1
 800c538:	4604      	mov	r4, r0
 800c53a:	d158      	bne.n	800c5ee <_malloc_r+0xf6>
 800c53c:	f8d8 4000 	ldr.w	r4, [r8]
 800c540:	4627      	mov	r7, r4
 800c542:	2f00      	cmp	r7, #0
 800c544:	d143      	bne.n	800c5ce <_malloc_r+0xd6>
 800c546:	2c00      	cmp	r4, #0
 800c548:	d04b      	beq.n	800c5e2 <_malloc_r+0xea>
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	4639      	mov	r1, r7
 800c54e:	4630      	mov	r0, r6
 800c550:	eb04 0903 	add.w	r9, r4, r3
 800c554:	f000 fdce 	bl	800d0f4 <_sbrk_r>
 800c558:	4581      	cmp	r9, r0
 800c55a:	d142      	bne.n	800c5e2 <_malloc_r+0xea>
 800c55c:	6821      	ldr	r1, [r4, #0]
 800c55e:	1a6d      	subs	r5, r5, r1
 800c560:	4629      	mov	r1, r5
 800c562:	4630      	mov	r0, r6
 800c564:	f7ff ffa6 	bl	800c4b4 <sbrk_aligned>
 800c568:	3001      	adds	r0, #1
 800c56a:	d03a      	beq.n	800c5e2 <_malloc_r+0xea>
 800c56c:	6823      	ldr	r3, [r4, #0]
 800c56e:	442b      	add	r3, r5
 800c570:	6023      	str	r3, [r4, #0]
 800c572:	f8d8 3000 	ldr.w	r3, [r8]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	bb62      	cbnz	r2, 800c5d4 <_malloc_r+0xdc>
 800c57a:	f8c8 7000 	str.w	r7, [r8]
 800c57e:	e00f      	b.n	800c5a0 <_malloc_r+0xa8>
 800c580:	6822      	ldr	r2, [r4, #0]
 800c582:	1b52      	subs	r2, r2, r5
 800c584:	d420      	bmi.n	800c5c8 <_malloc_r+0xd0>
 800c586:	2a0b      	cmp	r2, #11
 800c588:	d917      	bls.n	800c5ba <_malloc_r+0xc2>
 800c58a:	1961      	adds	r1, r4, r5
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	6025      	str	r5, [r4, #0]
 800c590:	bf18      	it	ne
 800c592:	6059      	strne	r1, [r3, #4]
 800c594:	6863      	ldr	r3, [r4, #4]
 800c596:	bf08      	it	eq
 800c598:	f8c8 1000 	streq.w	r1, [r8]
 800c59c:	5162      	str	r2, [r4, r5]
 800c59e:	604b      	str	r3, [r1, #4]
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f000 f82f 	bl	800c604 <__malloc_unlock>
 800c5a6:	f104 000b 	add.w	r0, r4, #11
 800c5aa:	1d23      	adds	r3, r4, #4
 800c5ac:	f020 0007 	bic.w	r0, r0, #7
 800c5b0:	1ac2      	subs	r2, r0, r3
 800c5b2:	bf1c      	itt	ne
 800c5b4:	1a1b      	subne	r3, r3, r0
 800c5b6:	50a3      	strne	r3, [r4, r2]
 800c5b8:	e7af      	b.n	800c51a <_malloc_r+0x22>
 800c5ba:	6862      	ldr	r2, [r4, #4]
 800c5bc:	42a3      	cmp	r3, r4
 800c5be:	bf0c      	ite	eq
 800c5c0:	f8c8 2000 	streq.w	r2, [r8]
 800c5c4:	605a      	strne	r2, [r3, #4]
 800c5c6:	e7eb      	b.n	800c5a0 <_malloc_r+0xa8>
 800c5c8:	4623      	mov	r3, r4
 800c5ca:	6864      	ldr	r4, [r4, #4]
 800c5cc:	e7ae      	b.n	800c52c <_malloc_r+0x34>
 800c5ce:	463c      	mov	r4, r7
 800c5d0:	687f      	ldr	r7, [r7, #4]
 800c5d2:	e7b6      	b.n	800c542 <_malloc_r+0x4a>
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	42a3      	cmp	r3, r4
 800c5da:	d1fb      	bne.n	800c5d4 <_malloc_r+0xdc>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	6053      	str	r3, [r2, #4]
 800c5e0:	e7de      	b.n	800c5a0 <_malloc_r+0xa8>
 800c5e2:	230c      	movs	r3, #12
 800c5e4:	6033      	str	r3, [r6, #0]
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f000 f80c 	bl	800c604 <__malloc_unlock>
 800c5ec:	e794      	b.n	800c518 <_malloc_r+0x20>
 800c5ee:	6005      	str	r5, [r0, #0]
 800c5f0:	e7d6      	b.n	800c5a0 <_malloc_r+0xa8>
 800c5f2:	bf00      	nop
 800c5f4:	20014af0 	.word	0x20014af0

0800c5f8 <__malloc_lock>:
 800c5f8:	4801      	ldr	r0, [pc, #4]	@ (800c600 <__malloc_lock+0x8>)
 800c5fa:	f7ff bf00 	b.w	800c3fe <__retarget_lock_acquire_recursive>
 800c5fe:	bf00      	nop
 800c600:	20014ae8 	.word	0x20014ae8

0800c604 <__malloc_unlock>:
 800c604:	4801      	ldr	r0, [pc, #4]	@ (800c60c <__malloc_unlock+0x8>)
 800c606:	f7ff befb 	b.w	800c400 <__retarget_lock_release_recursive>
 800c60a:	bf00      	nop
 800c60c:	20014ae8 	.word	0x20014ae8

0800c610 <__ssputs_r>:
 800c610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c614:	688e      	ldr	r6, [r1, #8]
 800c616:	461f      	mov	r7, r3
 800c618:	42be      	cmp	r6, r7
 800c61a:	680b      	ldr	r3, [r1, #0]
 800c61c:	4682      	mov	sl, r0
 800c61e:	460c      	mov	r4, r1
 800c620:	4690      	mov	r8, r2
 800c622:	d82d      	bhi.n	800c680 <__ssputs_r+0x70>
 800c624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c628:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c62c:	d026      	beq.n	800c67c <__ssputs_r+0x6c>
 800c62e:	6965      	ldr	r5, [r4, #20]
 800c630:	6909      	ldr	r1, [r1, #16]
 800c632:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c636:	eba3 0901 	sub.w	r9, r3, r1
 800c63a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c63e:	1c7b      	adds	r3, r7, #1
 800c640:	444b      	add	r3, r9
 800c642:	106d      	asrs	r5, r5, #1
 800c644:	429d      	cmp	r5, r3
 800c646:	bf38      	it	cc
 800c648:	461d      	movcc	r5, r3
 800c64a:	0553      	lsls	r3, r2, #21
 800c64c:	d527      	bpl.n	800c69e <__ssputs_r+0x8e>
 800c64e:	4629      	mov	r1, r5
 800c650:	f7ff ff52 	bl	800c4f8 <_malloc_r>
 800c654:	4606      	mov	r6, r0
 800c656:	b360      	cbz	r0, 800c6b2 <__ssputs_r+0xa2>
 800c658:	6921      	ldr	r1, [r4, #16]
 800c65a:	464a      	mov	r2, r9
 800c65c:	f7ff fed1 	bl	800c402 <memcpy>
 800c660:	89a3      	ldrh	r3, [r4, #12]
 800c662:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c66a:	81a3      	strh	r3, [r4, #12]
 800c66c:	6126      	str	r6, [r4, #16]
 800c66e:	6165      	str	r5, [r4, #20]
 800c670:	444e      	add	r6, r9
 800c672:	eba5 0509 	sub.w	r5, r5, r9
 800c676:	6026      	str	r6, [r4, #0]
 800c678:	60a5      	str	r5, [r4, #8]
 800c67a:	463e      	mov	r6, r7
 800c67c:	42be      	cmp	r6, r7
 800c67e:	d900      	bls.n	800c682 <__ssputs_r+0x72>
 800c680:	463e      	mov	r6, r7
 800c682:	6820      	ldr	r0, [r4, #0]
 800c684:	4632      	mov	r2, r6
 800c686:	4641      	mov	r1, r8
 800c688:	f000 fcf8 	bl	800d07c <memmove>
 800c68c:	68a3      	ldr	r3, [r4, #8]
 800c68e:	1b9b      	subs	r3, r3, r6
 800c690:	60a3      	str	r3, [r4, #8]
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	4433      	add	r3, r6
 800c696:	6023      	str	r3, [r4, #0]
 800c698:	2000      	movs	r0, #0
 800c69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c69e:	462a      	mov	r2, r5
 800c6a0:	f000 fd38 	bl	800d114 <_realloc_r>
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d1e0      	bne.n	800c66c <__ssputs_r+0x5c>
 800c6aa:	6921      	ldr	r1, [r4, #16]
 800c6ac:	4650      	mov	r0, sl
 800c6ae:	f7ff feb7 	bl	800c420 <_free_r>
 800c6b2:	230c      	movs	r3, #12
 800c6b4:	f8ca 3000 	str.w	r3, [sl]
 800c6b8:	89a3      	ldrh	r3, [r4, #12]
 800c6ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6be:	81a3      	strh	r3, [r4, #12]
 800c6c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6c4:	e7e9      	b.n	800c69a <__ssputs_r+0x8a>
	...

0800c6c8 <_svfiprintf_r>:
 800c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6cc:	4698      	mov	r8, r3
 800c6ce:	898b      	ldrh	r3, [r1, #12]
 800c6d0:	061b      	lsls	r3, r3, #24
 800c6d2:	b09d      	sub	sp, #116	@ 0x74
 800c6d4:	4607      	mov	r7, r0
 800c6d6:	460d      	mov	r5, r1
 800c6d8:	4614      	mov	r4, r2
 800c6da:	d510      	bpl.n	800c6fe <_svfiprintf_r+0x36>
 800c6dc:	690b      	ldr	r3, [r1, #16]
 800c6de:	b973      	cbnz	r3, 800c6fe <_svfiprintf_r+0x36>
 800c6e0:	2140      	movs	r1, #64	@ 0x40
 800c6e2:	f7ff ff09 	bl	800c4f8 <_malloc_r>
 800c6e6:	6028      	str	r0, [r5, #0]
 800c6e8:	6128      	str	r0, [r5, #16]
 800c6ea:	b930      	cbnz	r0, 800c6fa <_svfiprintf_r+0x32>
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6f4:	b01d      	add	sp, #116	@ 0x74
 800c6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fa:	2340      	movs	r3, #64	@ 0x40
 800c6fc:	616b      	str	r3, [r5, #20]
 800c6fe:	2300      	movs	r3, #0
 800c700:	9309      	str	r3, [sp, #36]	@ 0x24
 800c702:	2320      	movs	r3, #32
 800c704:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c708:	f8cd 800c 	str.w	r8, [sp, #12]
 800c70c:	2330      	movs	r3, #48	@ 0x30
 800c70e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c8ac <_svfiprintf_r+0x1e4>
 800c712:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c716:	f04f 0901 	mov.w	r9, #1
 800c71a:	4623      	mov	r3, r4
 800c71c:	469a      	mov	sl, r3
 800c71e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c722:	b10a      	cbz	r2, 800c728 <_svfiprintf_r+0x60>
 800c724:	2a25      	cmp	r2, #37	@ 0x25
 800c726:	d1f9      	bne.n	800c71c <_svfiprintf_r+0x54>
 800c728:	ebba 0b04 	subs.w	fp, sl, r4
 800c72c:	d00b      	beq.n	800c746 <_svfiprintf_r+0x7e>
 800c72e:	465b      	mov	r3, fp
 800c730:	4622      	mov	r2, r4
 800c732:	4629      	mov	r1, r5
 800c734:	4638      	mov	r0, r7
 800c736:	f7ff ff6b 	bl	800c610 <__ssputs_r>
 800c73a:	3001      	adds	r0, #1
 800c73c:	f000 80a7 	beq.w	800c88e <_svfiprintf_r+0x1c6>
 800c740:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c742:	445a      	add	r2, fp
 800c744:	9209      	str	r2, [sp, #36]	@ 0x24
 800c746:	f89a 3000 	ldrb.w	r3, [sl]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f000 809f 	beq.w	800c88e <_svfiprintf_r+0x1c6>
 800c750:	2300      	movs	r3, #0
 800c752:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c75a:	f10a 0a01 	add.w	sl, sl, #1
 800c75e:	9304      	str	r3, [sp, #16]
 800c760:	9307      	str	r3, [sp, #28]
 800c762:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c766:	931a      	str	r3, [sp, #104]	@ 0x68
 800c768:	4654      	mov	r4, sl
 800c76a:	2205      	movs	r2, #5
 800c76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c770:	484e      	ldr	r0, [pc, #312]	@ (800c8ac <_svfiprintf_r+0x1e4>)
 800c772:	f7f3 fdad 	bl	80002d0 <memchr>
 800c776:	9a04      	ldr	r2, [sp, #16]
 800c778:	b9d8      	cbnz	r0, 800c7b2 <_svfiprintf_r+0xea>
 800c77a:	06d0      	lsls	r0, r2, #27
 800c77c:	bf44      	itt	mi
 800c77e:	2320      	movmi	r3, #32
 800c780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c784:	0711      	lsls	r1, r2, #28
 800c786:	bf44      	itt	mi
 800c788:	232b      	movmi	r3, #43	@ 0x2b
 800c78a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c78e:	f89a 3000 	ldrb.w	r3, [sl]
 800c792:	2b2a      	cmp	r3, #42	@ 0x2a
 800c794:	d015      	beq.n	800c7c2 <_svfiprintf_r+0xfa>
 800c796:	9a07      	ldr	r2, [sp, #28]
 800c798:	4654      	mov	r4, sl
 800c79a:	2000      	movs	r0, #0
 800c79c:	f04f 0c0a 	mov.w	ip, #10
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7a6:	3b30      	subs	r3, #48	@ 0x30
 800c7a8:	2b09      	cmp	r3, #9
 800c7aa:	d94b      	bls.n	800c844 <_svfiprintf_r+0x17c>
 800c7ac:	b1b0      	cbz	r0, 800c7dc <_svfiprintf_r+0x114>
 800c7ae:	9207      	str	r2, [sp, #28]
 800c7b0:	e014      	b.n	800c7dc <_svfiprintf_r+0x114>
 800c7b2:	eba0 0308 	sub.w	r3, r0, r8
 800c7b6:	fa09 f303 	lsl.w	r3, r9, r3
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	46a2      	mov	sl, r4
 800c7c0:	e7d2      	b.n	800c768 <_svfiprintf_r+0xa0>
 800c7c2:	9b03      	ldr	r3, [sp, #12]
 800c7c4:	1d19      	adds	r1, r3, #4
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	9103      	str	r1, [sp, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	bfbb      	ittet	lt
 800c7ce:	425b      	neglt	r3, r3
 800c7d0:	f042 0202 	orrlt.w	r2, r2, #2
 800c7d4:	9307      	strge	r3, [sp, #28]
 800c7d6:	9307      	strlt	r3, [sp, #28]
 800c7d8:	bfb8      	it	lt
 800c7da:	9204      	strlt	r2, [sp, #16]
 800c7dc:	7823      	ldrb	r3, [r4, #0]
 800c7de:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7e0:	d10a      	bne.n	800c7f8 <_svfiprintf_r+0x130>
 800c7e2:	7863      	ldrb	r3, [r4, #1]
 800c7e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7e6:	d132      	bne.n	800c84e <_svfiprintf_r+0x186>
 800c7e8:	9b03      	ldr	r3, [sp, #12]
 800c7ea:	1d1a      	adds	r2, r3, #4
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	9203      	str	r2, [sp, #12]
 800c7f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7f4:	3402      	adds	r4, #2
 800c7f6:	9305      	str	r3, [sp, #20]
 800c7f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c8bc <_svfiprintf_r+0x1f4>
 800c7fc:	7821      	ldrb	r1, [r4, #0]
 800c7fe:	2203      	movs	r2, #3
 800c800:	4650      	mov	r0, sl
 800c802:	f7f3 fd65 	bl	80002d0 <memchr>
 800c806:	b138      	cbz	r0, 800c818 <_svfiprintf_r+0x150>
 800c808:	9b04      	ldr	r3, [sp, #16]
 800c80a:	eba0 000a 	sub.w	r0, r0, sl
 800c80e:	2240      	movs	r2, #64	@ 0x40
 800c810:	4082      	lsls	r2, r0
 800c812:	4313      	orrs	r3, r2
 800c814:	3401      	adds	r4, #1
 800c816:	9304      	str	r3, [sp, #16]
 800c818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81c:	4824      	ldr	r0, [pc, #144]	@ (800c8b0 <_svfiprintf_r+0x1e8>)
 800c81e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c822:	2206      	movs	r2, #6
 800c824:	f7f3 fd54 	bl	80002d0 <memchr>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d036      	beq.n	800c89a <_svfiprintf_r+0x1d2>
 800c82c:	4b21      	ldr	r3, [pc, #132]	@ (800c8b4 <_svfiprintf_r+0x1ec>)
 800c82e:	bb1b      	cbnz	r3, 800c878 <_svfiprintf_r+0x1b0>
 800c830:	9b03      	ldr	r3, [sp, #12]
 800c832:	3307      	adds	r3, #7
 800c834:	f023 0307 	bic.w	r3, r3, #7
 800c838:	3308      	adds	r3, #8
 800c83a:	9303      	str	r3, [sp, #12]
 800c83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c83e:	4433      	add	r3, r6
 800c840:	9309      	str	r3, [sp, #36]	@ 0x24
 800c842:	e76a      	b.n	800c71a <_svfiprintf_r+0x52>
 800c844:	fb0c 3202 	mla	r2, ip, r2, r3
 800c848:	460c      	mov	r4, r1
 800c84a:	2001      	movs	r0, #1
 800c84c:	e7a8      	b.n	800c7a0 <_svfiprintf_r+0xd8>
 800c84e:	2300      	movs	r3, #0
 800c850:	3401      	adds	r4, #1
 800c852:	9305      	str	r3, [sp, #20]
 800c854:	4619      	mov	r1, r3
 800c856:	f04f 0c0a 	mov.w	ip, #10
 800c85a:	4620      	mov	r0, r4
 800c85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c860:	3a30      	subs	r2, #48	@ 0x30
 800c862:	2a09      	cmp	r2, #9
 800c864:	d903      	bls.n	800c86e <_svfiprintf_r+0x1a6>
 800c866:	2b00      	cmp	r3, #0
 800c868:	d0c6      	beq.n	800c7f8 <_svfiprintf_r+0x130>
 800c86a:	9105      	str	r1, [sp, #20]
 800c86c:	e7c4      	b.n	800c7f8 <_svfiprintf_r+0x130>
 800c86e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c872:	4604      	mov	r4, r0
 800c874:	2301      	movs	r3, #1
 800c876:	e7f0      	b.n	800c85a <_svfiprintf_r+0x192>
 800c878:	ab03      	add	r3, sp, #12
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	462a      	mov	r2, r5
 800c87e:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b8 <_svfiprintf_r+0x1f0>)
 800c880:	a904      	add	r1, sp, #16
 800c882:	4638      	mov	r0, r7
 800c884:	f3af 8000 	nop.w
 800c888:	1c42      	adds	r2, r0, #1
 800c88a:	4606      	mov	r6, r0
 800c88c:	d1d6      	bne.n	800c83c <_svfiprintf_r+0x174>
 800c88e:	89ab      	ldrh	r3, [r5, #12]
 800c890:	065b      	lsls	r3, r3, #25
 800c892:	f53f af2d 	bmi.w	800c6f0 <_svfiprintf_r+0x28>
 800c896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c898:	e72c      	b.n	800c6f4 <_svfiprintf_r+0x2c>
 800c89a:	ab03      	add	r3, sp, #12
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	462a      	mov	r2, r5
 800c8a0:	4b05      	ldr	r3, [pc, #20]	@ (800c8b8 <_svfiprintf_r+0x1f0>)
 800c8a2:	a904      	add	r1, sp, #16
 800c8a4:	4638      	mov	r0, r7
 800c8a6:	f000 f9bb 	bl	800cc20 <_printf_i>
 800c8aa:	e7ed      	b.n	800c888 <_svfiprintf_r+0x1c0>
 800c8ac:	0800d70e 	.word	0x0800d70e
 800c8b0:	0800d718 	.word	0x0800d718
 800c8b4:	00000000 	.word	0x00000000
 800c8b8:	0800c611 	.word	0x0800c611
 800c8bc:	0800d714 	.word	0x0800d714

0800c8c0 <__sfputc_r>:
 800c8c0:	6893      	ldr	r3, [r2, #8]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	b410      	push	{r4}
 800c8c8:	6093      	str	r3, [r2, #8]
 800c8ca:	da08      	bge.n	800c8de <__sfputc_r+0x1e>
 800c8cc:	6994      	ldr	r4, [r2, #24]
 800c8ce:	42a3      	cmp	r3, r4
 800c8d0:	db01      	blt.n	800c8d6 <__sfputc_r+0x16>
 800c8d2:	290a      	cmp	r1, #10
 800c8d4:	d103      	bne.n	800c8de <__sfputc_r+0x1e>
 800c8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8da:	f7ff bc8a 	b.w	800c1f2 <__swbuf_r>
 800c8de:	6813      	ldr	r3, [r2, #0]
 800c8e0:	1c58      	adds	r0, r3, #1
 800c8e2:	6010      	str	r0, [r2, #0]
 800c8e4:	7019      	strb	r1, [r3, #0]
 800c8e6:	4608      	mov	r0, r1
 800c8e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ec:	4770      	bx	lr

0800c8ee <__sfputs_r>:
 800c8ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f0:	4606      	mov	r6, r0
 800c8f2:	460f      	mov	r7, r1
 800c8f4:	4614      	mov	r4, r2
 800c8f6:	18d5      	adds	r5, r2, r3
 800c8f8:	42ac      	cmp	r4, r5
 800c8fa:	d101      	bne.n	800c900 <__sfputs_r+0x12>
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	e007      	b.n	800c910 <__sfputs_r+0x22>
 800c900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c904:	463a      	mov	r2, r7
 800c906:	4630      	mov	r0, r6
 800c908:	f7ff ffda 	bl	800c8c0 <__sfputc_r>
 800c90c:	1c43      	adds	r3, r0, #1
 800c90e:	d1f3      	bne.n	800c8f8 <__sfputs_r+0xa>
 800c910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c914 <_vfiprintf_r>:
 800c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c918:	460d      	mov	r5, r1
 800c91a:	b09d      	sub	sp, #116	@ 0x74
 800c91c:	4614      	mov	r4, r2
 800c91e:	4698      	mov	r8, r3
 800c920:	4606      	mov	r6, r0
 800c922:	b118      	cbz	r0, 800c92c <_vfiprintf_r+0x18>
 800c924:	6a03      	ldr	r3, [r0, #32]
 800c926:	b90b      	cbnz	r3, 800c92c <_vfiprintf_r+0x18>
 800c928:	f7ff fb5a 	bl	800bfe0 <__sinit>
 800c92c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c92e:	07d9      	lsls	r1, r3, #31
 800c930:	d405      	bmi.n	800c93e <_vfiprintf_r+0x2a>
 800c932:	89ab      	ldrh	r3, [r5, #12]
 800c934:	059a      	lsls	r2, r3, #22
 800c936:	d402      	bmi.n	800c93e <_vfiprintf_r+0x2a>
 800c938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c93a:	f7ff fd60 	bl	800c3fe <__retarget_lock_acquire_recursive>
 800c93e:	89ab      	ldrh	r3, [r5, #12]
 800c940:	071b      	lsls	r3, r3, #28
 800c942:	d501      	bpl.n	800c948 <_vfiprintf_r+0x34>
 800c944:	692b      	ldr	r3, [r5, #16]
 800c946:	b99b      	cbnz	r3, 800c970 <_vfiprintf_r+0x5c>
 800c948:	4629      	mov	r1, r5
 800c94a:	4630      	mov	r0, r6
 800c94c:	f7ff fc90 	bl	800c270 <__swsetup_r>
 800c950:	b170      	cbz	r0, 800c970 <_vfiprintf_r+0x5c>
 800c952:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c954:	07dc      	lsls	r4, r3, #31
 800c956:	d504      	bpl.n	800c962 <_vfiprintf_r+0x4e>
 800c958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c95c:	b01d      	add	sp, #116	@ 0x74
 800c95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c962:	89ab      	ldrh	r3, [r5, #12]
 800c964:	0598      	lsls	r0, r3, #22
 800c966:	d4f7      	bmi.n	800c958 <_vfiprintf_r+0x44>
 800c968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c96a:	f7ff fd49 	bl	800c400 <__retarget_lock_release_recursive>
 800c96e:	e7f3      	b.n	800c958 <_vfiprintf_r+0x44>
 800c970:	2300      	movs	r3, #0
 800c972:	9309      	str	r3, [sp, #36]	@ 0x24
 800c974:	2320      	movs	r3, #32
 800c976:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c97a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c97e:	2330      	movs	r3, #48	@ 0x30
 800c980:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb30 <_vfiprintf_r+0x21c>
 800c984:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c988:	f04f 0901 	mov.w	r9, #1
 800c98c:	4623      	mov	r3, r4
 800c98e:	469a      	mov	sl, r3
 800c990:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c994:	b10a      	cbz	r2, 800c99a <_vfiprintf_r+0x86>
 800c996:	2a25      	cmp	r2, #37	@ 0x25
 800c998:	d1f9      	bne.n	800c98e <_vfiprintf_r+0x7a>
 800c99a:	ebba 0b04 	subs.w	fp, sl, r4
 800c99e:	d00b      	beq.n	800c9b8 <_vfiprintf_r+0xa4>
 800c9a0:	465b      	mov	r3, fp
 800c9a2:	4622      	mov	r2, r4
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	f7ff ffa1 	bl	800c8ee <__sfputs_r>
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	f000 80a7 	beq.w	800cb00 <_vfiprintf_r+0x1ec>
 800c9b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9b4:	445a      	add	r2, fp
 800c9b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f000 809f 	beq.w	800cb00 <_vfiprintf_r+0x1ec>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c9c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9cc:	f10a 0a01 	add.w	sl, sl, #1
 800c9d0:	9304      	str	r3, [sp, #16]
 800c9d2:	9307      	str	r3, [sp, #28]
 800c9d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9da:	4654      	mov	r4, sl
 800c9dc:	2205      	movs	r2, #5
 800c9de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e2:	4853      	ldr	r0, [pc, #332]	@ (800cb30 <_vfiprintf_r+0x21c>)
 800c9e4:	f7f3 fc74 	bl	80002d0 <memchr>
 800c9e8:	9a04      	ldr	r2, [sp, #16]
 800c9ea:	b9d8      	cbnz	r0, 800ca24 <_vfiprintf_r+0x110>
 800c9ec:	06d1      	lsls	r1, r2, #27
 800c9ee:	bf44      	itt	mi
 800c9f0:	2320      	movmi	r3, #32
 800c9f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9f6:	0713      	lsls	r3, r2, #28
 800c9f8:	bf44      	itt	mi
 800c9fa:	232b      	movmi	r3, #43	@ 0x2b
 800c9fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca00:	f89a 3000 	ldrb.w	r3, [sl]
 800ca04:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca06:	d015      	beq.n	800ca34 <_vfiprintf_r+0x120>
 800ca08:	9a07      	ldr	r2, [sp, #28]
 800ca0a:	4654      	mov	r4, sl
 800ca0c:	2000      	movs	r0, #0
 800ca0e:	f04f 0c0a 	mov.w	ip, #10
 800ca12:	4621      	mov	r1, r4
 800ca14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca18:	3b30      	subs	r3, #48	@ 0x30
 800ca1a:	2b09      	cmp	r3, #9
 800ca1c:	d94b      	bls.n	800cab6 <_vfiprintf_r+0x1a2>
 800ca1e:	b1b0      	cbz	r0, 800ca4e <_vfiprintf_r+0x13a>
 800ca20:	9207      	str	r2, [sp, #28]
 800ca22:	e014      	b.n	800ca4e <_vfiprintf_r+0x13a>
 800ca24:	eba0 0308 	sub.w	r3, r0, r8
 800ca28:	fa09 f303 	lsl.w	r3, r9, r3
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	9304      	str	r3, [sp, #16]
 800ca30:	46a2      	mov	sl, r4
 800ca32:	e7d2      	b.n	800c9da <_vfiprintf_r+0xc6>
 800ca34:	9b03      	ldr	r3, [sp, #12]
 800ca36:	1d19      	adds	r1, r3, #4
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	9103      	str	r1, [sp, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	bfbb      	ittet	lt
 800ca40:	425b      	neglt	r3, r3
 800ca42:	f042 0202 	orrlt.w	r2, r2, #2
 800ca46:	9307      	strge	r3, [sp, #28]
 800ca48:	9307      	strlt	r3, [sp, #28]
 800ca4a:	bfb8      	it	lt
 800ca4c:	9204      	strlt	r2, [sp, #16]
 800ca4e:	7823      	ldrb	r3, [r4, #0]
 800ca50:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca52:	d10a      	bne.n	800ca6a <_vfiprintf_r+0x156>
 800ca54:	7863      	ldrb	r3, [r4, #1]
 800ca56:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca58:	d132      	bne.n	800cac0 <_vfiprintf_r+0x1ac>
 800ca5a:	9b03      	ldr	r3, [sp, #12]
 800ca5c:	1d1a      	adds	r2, r3, #4
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	9203      	str	r2, [sp, #12]
 800ca62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca66:	3402      	adds	r4, #2
 800ca68:	9305      	str	r3, [sp, #20]
 800ca6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb40 <_vfiprintf_r+0x22c>
 800ca6e:	7821      	ldrb	r1, [r4, #0]
 800ca70:	2203      	movs	r2, #3
 800ca72:	4650      	mov	r0, sl
 800ca74:	f7f3 fc2c 	bl	80002d0 <memchr>
 800ca78:	b138      	cbz	r0, 800ca8a <_vfiprintf_r+0x176>
 800ca7a:	9b04      	ldr	r3, [sp, #16]
 800ca7c:	eba0 000a 	sub.w	r0, r0, sl
 800ca80:	2240      	movs	r2, #64	@ 0x40
 800ca82:	4082      	lsls	r2, r0
 800ca84:	4313      	orrs	r3, r2
 800ca86:	3401      	adds	r4, #1
 800ca88:	9304      	str	r3, [sp, #16]
 800ca8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca8e:	4829      	ldr	r0, [pc, #164]	@ (800cb34 <_vfiprintf_r+0x220>)
 800ca90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca94:	2206      	movs	r2, #6
 800ca96:	f7f3 fc1b 	bl	80002d0 <memchr>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d03f      	beq.n	800cb1e <_vfiprintf_r+0x20a>
 800ca9e:	4b26      	ldr	r3, [pc, #152]	@ (800cb38 <_vfiprintf_r+0x224>)
 800caa0:	bb1b      	cbnz	r3, 800caea <_vfiprintf_r+0x1d6>
 800caa2:	9b03      	ldr	r3, [sp, #12]
 800caa4:	3307      	adds	r3, #7
 800caa6:	f023 0307 	bic.w	r3, r3, #7
 800caaa:	3308      	adds	r3, #8
 800caac:	9303      	str	r3, [sp, #12]
 800caae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab0:	443b      	add	r3, r7
 800cab2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cab4:	e76a      	b.n	800c98c <_vfiprintf_r+0x78>
 800cab6:	fb0c 3202 	mla	r2, ip, r2, r3
 800caba:	460c      	mov	r4, r1
 800cabc:	2001      	movs	r0, #1
 800cabe:	e7a8      	b.n	800ca12 <_vfiprintf_r+0xfe>
 800cac0:	2300      	movs	r3, #0
 800cac2:	3401      	adds	r4, #1
 800cac4:	9305      	str	r3, [sp, #20]
 800cac6:	4619      	mov	r1, r3
 800cac8:	f04f 0c0a 	mov.w	ip, #10
 800cacc:	4620      	mov	r0, r4
 800cace:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cad2:	3a30      	subs	r2, #48	@ 0x30
 800cad4:	2a09      	cmp	r2, #9
 800cad6:	d903      	bls.n	800cae0 <_vfiprintf_r+0x1cc>
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d0c6      	beq.n	800ca6a <_vfiprintf_r+0x156>
 800cadc:	9105      	str	r1, [sp, #20]
 800cade:	e7c4      	b.n	800ca6a <_vfiprintf_r+0x156>
 800cae0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cae4:	4604      	mov	r4, r0
 800cae6:	2301      	movs	r3, #1
 800cae8:	e7f0      	b.n	800cacc <_vfiprintf_r+0x1b8>
 800caea:	ab03      	add	r3, sp, #12
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	462a      	mov	r2, r5
 800caf0:	4b12      	ldr	r3, [pc, #72]	@ (800cb3c <_vfiprintf_r+0x228>)
 800caf2:	a904      	add	r1, sp, #16
 800caf4:	4630      	mov	r0, r6
 800caf6:	f3af 8000 	nop.w
 800cafa:	4607      	mov	r7, r0
 800cafc:	1c78      	adds	r0, r7, #1
 800cafe:	d1d6      	bne.n	800caae <_vfiprintf_r+0x19a>
 800cb00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb02:	07d9      	lsls	r1, r3, #31
 800cb04:	d405      	bmi.n	800cb12 <_vfiprintf_r+0x1fe>
 800cb06:	89ab      	ldrh	r3, [r5, #12]
 800cb08:	059a      	lsls	r2, r3, #22
 800cb0a:	d402      	bmi.n	800cb12 <_vfiprintf_r+0x1fe>
 800cb0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb0e:	f7ff fc77 	bl	800c400 <__retarget_lock_release_recursive>
 800cb12:	89ab      	ldrh	r3, [r5, #12]
 800cb14:	065b      	lsls	r3, r3, #25
 800cb16:	f53f af1f 	bmi.w	800c958 <_vfiprintf_r+0x44>
 800cb1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb1c:	e71e      	b.n	800c95c <_vfiprintf_r+0x48>
 800cb1e:	ab03      	add	r3, sp, #12
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	462a      	mov	r2, r5
 800cb24:	4b05      	ldr	r3, [pc, #20]	@ (800cb3c <_vfiprintf_r+0x228>)
 800cb26:	a904      	add	r1, sp, #16
 800cb28:	4630      	mov	r0, r6
 800cb2a:	f000 f879 	bl	800cc20 <_printf_i>
 800cb2e:	e7e4      	b.n	800cafa <_vfiprintf_r+0x1e6>
 800cb30:	0800d70e 	.word	0x0800d70e
 800cb34:	0800d718 	.word	0x0800d718
 800cb38:	00000000 	.word	0x00000000
 800cb3c:	0800c8ef 	.word	0x0800c8ef
 800cb40:	0800d714 	.word	0x0800d714

0800cb44 <_printf_common>:
 800cb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb48:	4616      	mov	r6, r2
 800cb4a:	4698      	mov	r8, r3
 800cb4c:	688a      	ldr	r2, [r1, #8]
 800cb4e:	690b      	ldr	r3, [r1, #16]
 800cb50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb54:	4293      	cmp	r3, r2
 800cb56:	bfb8      	it	lt
 800cb58:	4613      	movlt	r3, r2
 800cb5a:	6033      	str	r3, [r6, #0]
 800cb5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb60:	4607      	mov	r7, r0
 800cb62:	460c      	mov	r4, r1
 800cb64:	b10a      	cbz	r2, 800cb6a <_printf_common+0x26>
 800cb66:	3301      	adds	r3, #1
 800cb68:	6033      	str	r3, [r6, #0]
 800cb6a:	6823      	ldr	r3, [r4, #0]
 800cb6c:	0699      	lsls	r1, r3, #26
 800cb6e:	bf42      	ittt	mi
 800cb70:	6833      	ldrmi	r3, [r6, #0]
 800cb72:	3302      	addmi	r3, #2
 800cb74:	6033      	strmi	r3, [r6, #0]
 800cb76:	6825      	ldr	r5, [r4, #0]
 800cb78:	f015 0506 	ands.w	r5, r5, #6
 800cb7c:	d106      	bne.n	800cb8c <_printf_common+0x48>
 800cb7e:	f104 0a19 	add.w	sl, r4, #25
 800cb82:	68e3      	ldr	r3, [r4, #12]
 800cb84:	6832      	ldr	r2, [r6, #0]
 800cb86:	1a9b      	subs	r3, r3, r2
 800cb88:	42ab      	cmp	r3, r5
 800cb8a:	dc26      	bgt.n	800cbda <_printf_common+0x96>
 800cb8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb90:	6822      	ldr	r2, [r4, #0]
 800cb92:	3b00      	subs	r3, #0
 800cb94:	bf18      	it	ne
 800cb96:	2301      	movne	r3, #1
 800cb98:	0692      	lsls	r2, r2, #26
 800cb9a:	d42b      	bmi.n	800cbf4 <_printf_common+0xb0>
 800cb9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cba0:	4641      	mov	r1, r8
 800cba2:	4638      	mov	r0, r7
 800cba4:	47c8      	blx	r9
 800cba6:	3001      	adds	r0, #1
 800cba8:	d01e      	beq.n	800cbe8 <_printf_common+0xa4>
 800cbaa:	6823      	ldr	r3, [r4, #0]
 800cbac:	6922      	ldr	r2, [r4, #16]
 800cbae:	f003 0306 	and.w	r3, r3, #6
 800cbb2:	2b04      	cmp	r3, #4
 800cbb4:	bf02      	ittt	eq
 800cbb6:	68e5      	ldreq	r5, [r4, #12]
 800cbb8:	6833      	ldreq	r3, [r6, #0]
 800cbba:	1aed      	subeq	r5, r5, r3
 800cbbc:	68a3      	ldr	r3, [r4, #8]
 800cbbe:	bf0c      	ite	eq
 800cbc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbc4:	2500      	movne	r5, #0
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	bfc4      	itt	gt
 800cbca:	1a9b      	subgt	r3, r3, r2
 800cbcc:	18ed      	addgt	r5, r5, r3
 800cbce:	2600      	movs	r6, #0
 800cbd0:	341a      	adds	r4, #26
 800cbd2:	42b5      	cmp	r5, r6
 800cbd4:	d11a      	bne.n	800cc0c <_printf_common+0xc8>
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	e008      	b.n	800cbec <_printf_common+0xa8>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	4652      	mov	r2, sl
 800cbde:	4641      	mov	r1, r8
 800cbe0:	4638      	mov	r0, r7
 800cbe2:	47c8      	blx	r9
 800cbe4:	3001      	adds	r0, #1
 800cbe6:	d103      	bne.n	800cbf0 <_printf_common+0xac>
 800cbe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf0:	3501      	adds	r5, #1
 800cbf2:	e7c6      	b.n	800cb82 <_printf_common+0x3e>
 800cbf4:	18e1      	adds	r1, r4, r3
 800cbf6:	1c5a      	adds	r2, r3, #1
 800cbf8:	2030      	movs	r0, #48	@ 0x30
 800cbfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbfe:	4422      	add	r2, r4
 800cc00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc08:	3302      	adds	r3, #2
 800cc0a:	e7c7      	b.n	800cb9c <_printf_common+0x58>
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	4622      	mov	r2, r4
 800cc10:	4641      	mov	r1, r8
 800cc12:	4638      	mov	r0, r7
 800cc14:	47c8      	blx	r9
 800cc16:	3001      	adds	r0, #1
 800cc18:	d0e6      	beq.n	800cbe8 <_printf_common+0xa4>
 800cc1a:	3601      	adds	r6, #1
 800cc1c:	e7d9      	b.n	800cbd2 <_printf_common+0x8e>
	...

0800cc20 <_printf_i>:
 800cc20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc24:	7e0f      	ldrb	r7, [r1, #24]
 800cc26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc28:	2f78      	cmp	r7, #120	@ 0x78
 800cc2a:	4691      	mov	r9, r2
 800cc2c:	4680      	mov	r8, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	469a      	mov	sl, r3
 800cc32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc36:	d807      	bhi.n	800cc48 <_printf_i+0x28>
 800cc38:	2f62      	cmp	r7, #98	@ 0x62
 800cc3a:	d80a      	bhi.n	800cc52 <_printf_i+0x32>
 800cc3c:	2f00      	cmp	r7, #0
 800cc3e:	f000 80d2 	beq.w	800cde6 <_printf_i+0x1c6>
 800cc42:	2f58      	cmp	r7, #88	@ 0x58
 800cc44:	f000 80b9 	beq.w	800cdba <_printf_i+0x19a>
 800cc48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc50:	e03a      	b.n	800ccc8 <_printf_i+0xa8>
 800cc52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc56:	2b15      	cmp	r3, #21
 800cc58:	d8f6      	bhi.n	800cc48 <_printf_i+0x28>
 800cc5a:	a101      	add	r1, pc, #4	@ (adr r1, 800cc60 <_printf_i+0x40>)
 800cc5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc60:	0800ccb9 	.word	0x0800ccb9
 800cc64:	0800cccd 	.word	0x0800cccd
 800cc68:	0800cc49 	.word	0x0800cc49
 800cc6c:	0800cc49 	.word	0x0800cc49
 800cc70:	0800cc49 	.word	0x0800cc49
 800cc74:	0800cc49 	.word	0x0800cc49
 800cc78:	0800cccd 	.word	0x0800cccd
 800cc7c:	0800cc49 	.word	0x0800cc49
 800cc80:	0800cc49 	.word	0x0800cc49
 800cc84:	0800cc49 	.word	0x0800cc49
 800cc88:	0800cc49 	.word	0x0800cc49
 800cc8c:	0800cdcd 	.word	0x0800cdcd
 800cc90:	0800ccf7 	.word	0x0800ccf7
 800cc94:	0800cd87 	.word	0x0800cd87
 800cc98:	0800cc49 	.word	0x0800cc49
 800cc9c:	0800cc49 	.word	0x0800cc49
 800cca0:	0800cdef 	.word	0x0800cdef
 800cca4:	0800cc49 	.word	0x0800cc49
 800cca8:	0800ccf7 	.word	0x0800ccf7
 800ccac:	0800cc49 	.word	0x0800cc49
 800ccb0:	0800cc49 	.word	0x0800cc49
 800ccb4:	0800cd8f 	.word	0x0800cd8f
 800ccb8:	6833      	ldr	r3, [r6, #0]
 800ccba:	1d1a      	adds	r2, r3, #4
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	6032      	str	r2, [r6, #0]
 800ccc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e09d      	b.n	800ce08 <_printf_i+0x1e8>
 800cccc:	6833      	ldr	r3, [r6, #0]
 800ccce:	6820      	ldr	r0, [r4, #0]
 800ccd0:	1d19      	adds	r1, r3, #4
 800ccd2:	6031      	str	r1, [r6, #0]
 800ccd4:	0606      	lsls	r6, r0, #24
 800ccd6:	d501      	bpl.n	800ccdc <_printf_i+0xbc>
 800ccd8:	681d      	ldr	r5, [r3, #0]
 800ccda:	e003      	b.n	800cce4 <_printf_i+0xc4>
 800ccdc:	0645      	lsls	r5, r0, #25
 800ccde:	d5fb      	bpl.n	800ccd8 <_printf_i+0xb8>
 800cce0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cce4:	2d00      	cmp	r5, #0
 800cce6:	da03      	bge.n	800ccf0 <_printf_i+0xd0>
 800cce8:	232d      	movs	r3, #45	@ 0x2d
 800ccea:	426d      	negs	r5, r5
 800ccec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccf0:	4859      	ldr	r0, [pc, #356]	@ (800ce58 <_printf_i+0x238>)
 800ccf2:	230a      	movs	r3, #10
 800ccf4:	e011      	b.n	800cd1a <_printf_i+0xfa>
 800ccf6:	6821      	ldr	r1, [r4, #0]
 800ccf8:	6833      	ldr	r3, [r6, #0]
 800ccfa:	0608      	lsls	r0, r1, #24
 800ccfc:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd00:	d402      	bmi.n	800cd08 <_printf_i+0xe8>
 800cd02:	0649      	lsls	r1, r1, #25
 800cd04:	bf48      	it	mi
 800cd06:	b2ad      	uxthmi	r5, r5
 800cd08:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd0a:	4853      	ldr	r0, [pc, #332]	@ (800ce58 <_printf_i+0x238>)
 800cd0c:	6033      	str	r3, [r6, #0]
 800cd0e:	bf14      	ite	ne
 800cd10:	230a      	movne	r3, #10
 800cd12:	2308      	moveq	r3, #8
 800cd14:	2100      	movs	r1, #0
 800cd16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd1a:	6866      	ldr	r6, [r4, #4]
 800cd1c:	60a6      	str	r6, [r4, #8]
 800cd1e:	2e00      	cmp	r6, #0
 800cd20:	bfa2      	ittt	ge
 800cd22:	6821      	ldrge	r1, [r4, #0]
 800cd24:	f021 0104 	bicge.w	r1, r1, #4
 800cd28:	6021      	strge	r1, [r4, #0]
 800cd2a:	b90d      	cbnz	r5, 800cd30 <_printf_i+0x110>
 800cd2c:	2e00      	cmp	r6, #0
 800cd2e:	d04b      	beq.n	800cdc8 <_printf_i+0x1a8>
 800cd30:	4616      	mov	r6, r2
 800cd32:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd36:	fb03 5711 	mls	r7, r3, r1, r5
 800cd3a:	5dc7      	ldrb	r7, [r0, r7]
 800cd3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd40:	462f      	mov	r7, r5
 800cd42:	42bb      	cmp	r3, r7
 800cd44:	460d      	mov	r5, r1
 800cd46:	d9f4      	bls.n	800cd32 <_printf_i+0x112>
 800cd48:	2b08      	cmp	r3, #8
 800cd4a:	d10b      	bne.n	800cd64 <_printf_i+0x144>
 800cd4c:	6823      	ldr	r3, [r4, #0]
 800cd4e:	07df      	lsls	r7, r3, #31
 800cd50:	d508      	bpl.n	800cd64 <_printf_i+0x144>
 800cd52:	6923      	ldr	r3, [r4, #16]
 800cd54:	6861      	ldr	r1, [r4, #4]
 800cd56:	4299      	cmp	r1, r3
 800cd58:	bfde      	ittt	le
 800cd5a:	2330      	movle	r3, #48	@ 0x30
 800cd5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd60:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cd64:	1b92      	subs	r2, r2, r6
 800cd66:	6122      	str	r2, [r4, #16]
 800cd68:	f8cd a000 	str.w	sl, [sp]
 800cd6c:	464b      	mov	r3, r9
 800cd6e:	aa03      	add	r2, sp, #12
 800cd70:	4621      	mov	r1, r4
 800cd72:	4640      	mov	r0, r8
 800cd74:	f7ff fee6 	bl	800cb44 <_printf_common>
 800cd78:	3001      	adds	r0, #1
 800cd7a:	d14a      	bne.n	800ce12 <_printf_i+0x1f2>
 800cd7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd80:	b004      	add	sp, #16
 800cd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	f043 0320 	orr.w	r3, r3, #32
 800cd8c:	6023      	str	r3, [r4, #0]
 800cd8e:	4833      	ldr	r0, [pc, #204]	@ (800ce5c <_printf_i+0x23c>)
 800cd90:	2778      	movs	r7, #120	@ 0x78
 800cd92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	6831      	ldr	r1, [r6, #0]
 800cd9a:	061f      	lsls	r7, r3, #24
 800cd9c:	f851 5b04 	ldr.w	r5, [r1], #4
 800cda0:	d402      	bmi.n	800cda8 <_printf_i+0x188>
 800cda2:	065f      	lsls	r7, r3, #25
 800cda4:	bf48      	it	mi
 800cda6:	b2ad      	uxthmi	r5, r5
 800cda8:	6031      	str	r1, [r6, #0]
 800cdaa:	07d9      	lsls	r1, r3, #31
 800cdac:	bf44      	itt	mi
 800cdae:	f043 0320 	orrmi.w	r3, r3, #32
 800cdb2:	6023      	strmi	r3, [r4, #0]
 800cdb4:	b11d      	cbz	r5, 800cdbe <_printf_i+0x19e>
 800cdb6:	2310      	movs	r3, #16
 800cdb8:	e7ac      	b.n	800cd14 <_printf_i+0xf4>
 800cdba:	4827      	ldr	r0, [pc, #156]	@ (800ce58 <_printf_i+0x238>)
 800cdbc:	e7e9      	b.n	800cd92 <_printf_i+0x172>
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	f023 0320 	bic.w	r3, r3, #32
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	e7f6      	b.n	800cdb6 <_printf_i+0x196>
 800cdc8:	4616      	mov	r6, r2
 800cdca:	e7bd      	b.n	800cd48 <_printf_i+0x128>
 800cdcc:	6833      	ldr	r3, [r6, #0]
 800cdce:	6825      	ldr	r5, [r4, #0]
 800cdd0:	6961      	ldr	r1, [r4, #20]
 800cdd2:	1d18      	adds	r0, r3, #4
 800cdd4:	6030      	str	r0, [r6, #0]
 800cdd6:	062e      	lsls	r6, r5, #24
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	d501      	bpl.n	800cde0 <_printf_i+0x1c0>
 800cddc:	6019      	str	r1, [r3, #0]
 800cdde:	e002      	b.n	800cde6 <_printf_i+0x1c6>
 800cde0:	0668      	lsls	r0, r5, #25
 800cde2:	d5fb      	bpl.n	800cddc <_printf_i+0x1bc>
 800cde4:	8019      	strh	r1, [r3, #0]
 800cde6:	2300      	movs	r3, #0
 800cde8:	6123      	str	r3, [r4, #16]
 800cdea:	4616      	mov	r6, r2
 800cdec:	e7bc      	b.n	800cd68 <_printf_i+0x148>
 800cdee:	6833      	ldr	r3, [r6, #0]
 800cdf0:	1d1a      	adds	r2, r3, #4
 800cdf2:	6032      	str	r2, [r6, #0]
 800cdf4:	681e      	ldr	r6, [r3, #0]
 800cdf6:	6862      	ldr	r2, [r4, #4]
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f7f3 fa68 	bl	80002d0 <memchr>
 800ce00:	b108      	cbz	r0, 800ce06 <_printf_i+0x1e6>
 800ce02:	1b80      	subs	r0, r0, r6
 800ce04:	6060      	str	r0, [r4, #4]
 800ce06:	6863      	ldr	r3, [r4, #4]
 800ce08:	6123      	str	r3, [r4, #16]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce10:	e7aa      	b.n	800cd68 <_printf_i+0x148>
 800ce12:	6923      	ldr	r3, [r4, #16]
 800ce14:	4632      	mov	r2, r6
 800ce16:	4649      	mov	r1, r9
 800ce18:	4640      	mov	r0, r8
 800ce1a:	47d0      	blx	sl
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	d0ad      	beq.n	800cd7c <_printf_i+0x15c>
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	079b      	lsls	r3, r3, #30
 800ce24:	d413      	bmi.n	800ce4e <_printf_i+0x22e>
 800ce26:	68e0      	ldr	r0, [r4, #12]
 800ce28:	9b03      	ldr	r3, [sp, #12]
 800ce2a:	4298      	cmp	r0, r3
 800ce2c:	bfb8      	it	lt
 800ce2e:	4618      	movlt	r0, r3
 800ce30:	e7a6      	b.n	800cd80 <_printf_i+0x160>
 800ce32:	2301      	movs	r3, #1
 800ce34:	4632      	mov	r2, r6
 800ce36:	4649      	mov	r1, r9
 800ce38:	4640      	mov	r0, r8
 800ce3a:	47d0      	blx	sl
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	d09d      	beq.n	800cd7c <_printf_i+0x15c>
 800ce40:	3501      	adds	r5, #1
 800ce42:	68e3      	ldr	r3, [r4, #12]
 800ce44:	9903      	ldr	r1, [sp, #12]
 800ce46:	1a5b      	subs	r3, r3, r1
 800ce48:	42ab      	cmp	r3, r5
 800ce4a:	dcf2      	bgt.n	800ce32 <_printf_i+0x212>
 800ce4c:	e7eb      	b.n	800ce26 <_printf_i+0x206>
 800ce4e:	2500      	movs	r5, #0
 800ce50:	f104 0619 	add.w	r6, r4, #25
 800ce54:	e7f5      	b.n	800ce42 <_printf_i+0x222>
 800ce56:	bf00      	nop
 800ce58:	0800d71f 	.word	0x0800d71f
 800ce5c:	0800d730 	.word	0x0800d730

0800ce60 <__sflush_r>:
 800ce60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce68:	0716      	lsls	r6, r2, #28
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	d454      	bmi.n	800cf1a <__sflush_r+0xba>
 800ce70:	684b      	ldr	r3, [r1, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	dc02      	bgt.n	800ce7c <__sflush_r+0x1c>
 800ce76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	dd48      	ble.n	800cf0e <__sflush_r+0xae>
 800ce7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce7e:	2e00      	cmp	r6, #0
 800ce80:	d045      	beq.n	800cf0e <__sflush_r+0xae>
 800ce82:	2300      	movs	r3, #0
 800ce84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce88:	682f      	ldr	r7, [r5, #0]
 800ce8a:	6a21      	ldr	r1, [r4, #32]
 800ce8c:	602b      	str	r3, [r5, #0]
 800ce8e:	d030      	beq.n	800cef2 <__sflush_r+0x92>
 800ce90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce92:	89a3      	ldrh	r3, [r4, #12]
 800ce94:	0759      	lsls	r1, r3, #29
 800ce96:	d505      	bpl.n	800cea4 <__sflush_r+0x44>
 800ce98:	6863      	ldr	r3, [r4, #4]
 800ce9a:	1ad2      	subs	r2, r2, r3
 800ce9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce9e:	b10b      	cbz	r3, 800cea4 <__sflush_r+0x44>
 800cea0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cea2:	1ad2      	subs	r2, r2, r3
 800cea4:	2300      	movs	r3, #0
 800cea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cea8:	6a21      	ldr	r1, [r4, #32]
 800ceaa:	4628      	mov	r0, r5
 800ceac:	47b0      	blx	r6
 800ceae:	1c43      	adds	r3, r0, #1
 800ceb0:	89a3      	ldrh	r3, [r4, #12]
 800ceb2:	d106      	bne.n	800cec2 <__sflush_r+0x62>
 800ceb4:	6829      	ldr	r1, [r5, #0]
 800ceb6:	291d      	cmp	r1, #29
 800ceb8:	d82b      	bhi.n	800cf12 <__sflush_r+0xb2>
 800ceba:	4a2a      	ldr	r2, [pc, #168]	@ (800cf64 <__sflush_r+0x104>)
 800cebc:	410a      	asrs	r2, r1
 800cebe:	07d6      	lsls	r6, r2, #31
 800cec0:	d427      	bmi.n	800cf12 <__sflush_r+0xb2>
 800cec2:	2200      	movs	r2, #0
 800cec4:	6062      	str	r2, [r4, #4]
 800cec6:	04d9      	lsls	r1, r3, #19
 800cec8:	6922      	ldr	r2, [r4, #16]
 800ceca:	6022      	str	r2, [r4, #0]
 800cecc:	d504      	bpl.n	800ced8 <__sflush_r+0x78>
 800cece:	1c42      	adds	r2, r0, #1
 800ced0:	d101      	bne.n	800ced6 <__sflush_r+0x76>
 800ced2:	682b      	ldr	r3, [r5, #0]
 800ced4:	b903      	cbnz	r3, 800ced8 <__sflush_r+0x78>
 800ced6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ced8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ceda:	602f      	str	r7, [r5, #0]
 800cedc:	b1b9      	cbz	r1, 800cf0e <__sflush_r+0xae>
 800cede:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cee2:	4299      	cmp	r1, r3
 800cee4:	d002      	beq.n	800ceec <__sflush_r+0x8c>
 800cee6:	4628      	mov	r0, r5
 800cee8:	f7ff fa9a 	bl	800c420 <_free_r>
 800ceec:	2300      	movs	r3, #0
 800ceee:	6363      	str	r3, [r4, #52]	@ 0x34
 800cef0:	e00d      	b.n	800cf0e <__sflush_r+0xae>
 800cef2:	2301      	movs	r3, #1
 800cef4:	4628      	mov	r0, r5
 800cef6:	47b0      	blx	r6
 800cef8:	4602      	mov	r2, r0
 800cefa:	1c50      	adds	r0, r2, #1
 800cefc:	d1c9      	bne.n	800ce92 <__sflush_r+0x32>
 800cefe:	682b      	ldr	r3, [r5, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d0c6      	beq.n	800ce92 <__sflush_r+0x32>
 800cf04:	2b1d      	cmp	r3, #29
 800cf06:	d001      	beq.n	800cf0c <__sflush_r+0xac>
 800cf08:	2b16      	cmp	r3, #22
 800cf0a:	d11e      	bne.n	800cf4a <__sflush_r+0xea>
 800cf0c:	602f      	str	r7, [r5, #0]
 800cf0e:	2000      	movs	r0, #0
 800cf10:	e022      	b.n	800cf58 <__sflush_r+0xf8>
 800cf12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf16:	b21b      	sxth	r3, r3
 800cf18:	e01b      	b.n	800cf52 <__sflush_r+0xf2>
 800cf1a:	690f      	ldr	r7, [r1, #16]
 800cf1c:	2f00      	cmp	r7, #0
 800cf1e:	d0f6      	beq.n	800cf0e <__sflush_r+0xae>
 800cf20:	0793      	lsls	r3, r2, #30
 800cf22:	680e      	ldr	r6, [r1, #0]
 800cf24:	bf08      	it	eq
 800cf26:	694b      	ldreq	r3, [r1, #20]
 800cf28:	600f      	str	r7, [r1, #0]
 800cf2a:	bf18      	it	ne
 800cf2c:	2300      	movne	r3, #0
 800cf2e:	eba6 0807 	sub.w	r8, r6, r7
 800cf32:	608b      	str	r3, [r1, #8]
 800cf34:	f1b8 0f00 	cmp.w	r8, #0
 800cf38:	dde9      	ble.n	800cf0e <__sflush_r+0xae>
 800cf3a:	6a21      	ldr	r1, [r4, #32]
 800cf3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf3e:	4643      	mov	r3, r8
 800cf40:	463a      	mov	r2, r7
 800cf42:	4628      	mov	r0, r5
 800cf44:	47b0      	blx	r6
 800cf46:	2800      	cmp	r0, #0
 800cf48:	dc08      	bgt.n	800cf5c <__sflush_r+0xfc>
 800cf4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf52:	81a3      	strh	r3, [r4, #12]
 800cf54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf5c:	4407      	add	r7, r0
 800cf5e:	eba8 0800 	sub.w	r8, r8, r0
 800cf62:	e7e7      	b.n	800cf34 <__sflush_r+0xd4>
 800cf64:	dfbffffe 	.word	0xdfbffffe

0800cf68 <_fflush_r>:
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	690b      	ldr	r3, [r1, #16]
 800cf6c:	4605      	mov	r5, r0
 800cf6e:	460c      	mov	r4, r1
 800cf70:	b913      	cbnz	r3, 800cf78 <_fflush_r+0x10>
 800cf72:	2500      	movs	r5, #0
 800cf74:	4628      	mov	r0, r5
 800cf76:	bd38      	pop	{r3, r4, r5, pc}
 800cf78:	b118      	cbz	r0, 800cf82 <_fflush_r+0x1a>
 800cf7a:	6a03      	ldr	r3, [r0, #32]
 800cf7c:	b90b      	cbnz	r3, 800cf82 <_fflush_r+0x1a>
 800cf7e:	f7ff f82f 	bl	800bfe0 <__sinit>
 800cf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d0f3      	beq.n	800cf72 <_fflush_r+0xa>
 800cf8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf8c:	07d0      	lsls	r0, r2, #31
 800cf8e:	d404      	bmi.n	800cf9a <_fflush_r+0x32>
 800cf90:	0599      	lsls	r1, r3, #22
 800cf92:	d402      	bmi.n	800cf9a <_fflush_r+0x32>
 800cf94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf96:	f7ff fa32 	bl	800c3fe <__retarget_lock_acquire_recursive>
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	4621      	mov	r1, r4
 800cf9e:	f7ff ff5f 	bl	800ce60 <__sflush_r>
 800cfa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfa4:	07da      	lsls	r2, r3, #31
 800cfa6:	4605      	mov	r5, r0
 800cfa8:	d4e4      	bmi.n	800cf74 <_fflush_r+0xc>
 800cfaa:	89a3      	ldrh	r3, [r4, #12]
 800cfac:	059b      	lsls	r3, r3, #22
 800cfae:	d4e1      	bmi.n	800cf74 <_fflush_r+0xc>
 800cfb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfb2:	f7ff fa25 	bl	800c400 <__retarget_lock_release_recursive>
 800cfb6:	e7dd      	b.n	800cf74 <_fflush_r+0xc>

0800cfb8 <__swhatbuf_r>:
 800cfb8:	b570      	push	{r4, r5, r6, lr}
 800cfba:	460c      	mov	r4, r1
 800cfbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfc0:	2900      	cmp	r1, #0
 800cfc2:	b096      	sub	sp, #88	@ 0x58
 800cfc4:	4615      	mov	r5, r2
 800cfc6:	461e      	mov	r6, r3
 800cfc8:	da0d      	bge.n	800cfe6 <__swhatbuf_r+0x2e>
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfd0:	f04f 0100 	mov.w	r1, #0
 800cfd4:	bf14      	ite	ne
 800cfd6:	2340      	movne	r3, #64	@ 0x40
 800cfd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cfdc:	2000      	movs	r0, #0
 800cfde:	6031      	str	r1, [r6, #0]
 800cfe0:	602b      	str	r3, [r5, #0]
 800cfe2:	b016      	add	sp, #88	@ 0x58
 800cfe4:	bd70      	pop	{r4, r5, r6, pc}
 800cfe6:	466a      	mov	r2, sp
 800cfe8:	f000 f862 	bl	800d0b0 <_fstat_r>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	dbec      	blt.n	800cfca <__swhatbuf_r+0x12>
 800cff0:	9901      	ldr	r1, [sp, #4]
 800cff2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cff6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cffa:	4259      	negs	r1, r3
 800cffc:	4159      	adcs	r1, r3
 800cffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d002:	e7eb      	b.n	800cfdc <__swhatbuf_r+0x24>

0800d004 <__smakebuf_r>:
 800d004:	898b      	ldrh	r3, [r1, #12]
 800d006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d008:	079d      	lsls	r5, r3, #30
 800d00a:	4606      	mov	r6, r0
 800d00c:	460c      	mov	r4, r1
 800d00e:	d507      	bpl.n	800d020 <__smakebuf_r+0x1c>
 800d010:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	6123      	str	r3, [r4, #16]
 800d018:	2301      	movs	r3, #1
 800d01a:	6163      	str	r3, [r4, #20]
 800d01c:	b003      	add	sp, #12
 800d01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d020:	ab01      	add	r3, sp, #4
 800d022:	466a      	mov	r2, sp
 800d024:	f7ff ffc8 	bl	800cfb8 <__swhatbuf_r>
 800d028:	9f00      	ldr	r7, [sp, #0]
 800d02a:	4605      	mov	r5, r0
 800d02c:	4639      	mov	r1, r7
 800d02e:	4630      	mov	r0, r6
 800d030:	f7ff fa62 	bl	800c4f8 <_malloc_r>
 800d034:	b948      	cbnz	r0, 800d04a <__smakebuf_r+0x46>
 800d036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d03a:	059a      	lsls	r2, r3, #22
 800d03c:	d4ee      	bmi.n	800d01c <__smakebuf_r+0x18>
 800d03e:	f023 0303 	bic.w	r3, r3, #3
 800d042:	f043 0302 	orr.w	r3, r3, #2
 800d046:	81a3      	strh	r3, [r4, #12]
 800d048:	e7e2      	b.n	800d010 <__smakebuf_r+0xc>
 800d04a:	89a3      	ldrh	r3, [r4, #12]
 800d04c:	6020      	str	r0, [r4, #0]
 800d04e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d052:	81a3      	strh	r3, [r4, #12]
 800d054:	9b01      	ldr	r3, [sp, #4]
 800d056:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d05a:	b15b      	cbz	r3, 800d074 <__smakebuf_r+0x70>
 800d05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d060:	4630      	mov	r0, r6
 800d062:	f000 f837 	bl	800d0d4 <_isatty_r>
 800d066:	b128      	cbz	r0, 800d074 <__smakebuf_r+0x70>
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	f023 0303 	bic.w	r3, r3, #3
 800d06e:	f043 0301 	orr.w	r3, r3, #1
 800d072:	81a3      	strh	r3, [r4, #12]
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	431d      	orrs	r5, r3
 800d078:	81a5      	strh	r5, [r4, #12]
 800d07a:	e7cf      	b.n	800d01c <__smakebuf_r+0x18>

0800d07c <memmove>:
 800d07c:	4288      	cmp	r0, r1
 800d07e:	b510      	push	{r4, lr}
 800d080:	eb01 0402 	add.w	r4, r1, r2
 800d084:	d902      	bls.n	800d08c <memmove+0x10>
 800d086:	4284      	cmp	r4, r0
 800d088:	4623      	mov	r3, r4
 800d08a:	d807      	bhi.n	800d09c <memmove+0x20>
 800d08c:	1e43      	subs	r3, r0, #1
 800d08e:	42a1      	cmp	r1, r4
 800d090:	d008      	beq.n	800d0a4 <memmove+0x28>
 800d092:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d09a:	e7f8      	b.n	800d08e <memmove+0x12>
 800d09c:	4402      	add	r2, r0
 800d09e:	4601      	mov	r1, r0
 800d0a0:	428a      	cmp	r2, r1
 800d0a2:	d100      	bne.n	800d0a6 <memmove+0x2a>
 800d0a4:	bd10      	pop	{r4, pc}
 800d0a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0ae:	e7f7      	b.n	800d0a0 <memmove+0x24>

0800d0b0 <_fstat_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	4d07      	ldr	r5, [pc, #28]	@ (800d0d0 <_fstat_r+0x20>)
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	4608      	mov	r0, r1
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	602b      	str	r3, [r5, #0]
 800d0be:	f7f4 ff8a 	bl	8001fd6 <_fstat>
 800d0c2:	1c43      	adds	r3, r0, #1
 800d0c4:	d102      	bne.n	800d0cc <_fstat_r+0x1c>
 800d0c6:	682b      	ldr	r3, [r5, #0]
 800d0c8:	b103      	cbz	r3, 800d0cc <_fstat_r+0x1c>
 800d0ca:	6023      	str	r3, [r4, #0]
 800d0cc:	bd38      	pop	{r3, r4, r5, pc}
 800d0ce:	bf00      	nop
 800d0d0:	20014ae4 	.word	0x20014ae4

0800d0d4 <_isatty_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4d06      	ldr	r5, [pc, #24]	@ (800d0f0 <_isatty_r+0x1c>)
 800d0d8:	2300      	movs	r3, #0
 800d0da:	4604      	mov	r4, r0
 800d0dc:	4608      	mov	r0, r1
 800d0de:	602b      	str	r3, [r5, #0]
 800d0e0:	f7f4 ff89 	bl	8001ff6 <_isatty>
 800d0e4:	1c43      	adds	r3, r0, #1
 800d0e6:	d102      	bne.n	800d0ee <_isatty_r+0x1a>
 800d0e8:	682b      	ldr	r3, [r5, #0]
 800d0ea:	b103      	cbz	r3, 800d0ee <_isatty_r+0x1a>
 800d0ec:	6023      	str	r3, [r4, #0]
 800d0ee:	bd38      	pop	{r3, r4, r5, pc}
 800d0f0:	20014ae4 	.word	0x20014ae4

0800d0f4 <_sbrk_r>:
 800d0f4:	b538      	push	{r3, r4, r5, lr}
 800d0f6:	4d06      	ldr	r5, [pc, #24]	@ (800d110 <_sbrk_r+0x1c>)
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	4608      	mov	r0, r1
 800d0fe:	602b      	str	r3, [r5, #0]
 800d100:	f000 f83e 	bl	800d180 <_sbrk>
 800d104:	1c43      	adds	r3, r0, #1
 800d106:	d102      	bne.n	800d10e <_sbrk_r+0x1a>
 800d108:	682b      	ldr	r3, [r5, #0]
 800d10a:	b103      	cbz	r3, 800d10e <_sbrk_r+0x1a>
 800d10c:	6023      	str	r3, [r4, #0]
 800d10e:	bd38      	pop	{r3, r4, r5, pc}
 800d110:	20014ae4 	.word	0x20014ae4

0800d114 <_realloc_r>:
 800d114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d118:	4680      	mov	r8, r0
 800d11a:	4615      	mov	r5, r2
 800d11c:	460c      	mov	r4, r1
 800d11e:	b921      	cbnz	r1, 800d12a <_realloc_r+0x16>
 800d120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d124:	4611      	mov	r1, r2
 800d126:	f7ff b9e7 	b.w	800c4f8 <_malloc_r>
 800d12a:	b92a      	cbnz	r2, 800d138 <_realloc_r+0x24>
 800d12c:	f7ff f978 	bl	800c420 <_free_r>
 800d130:	2400      	movs	r4, #0
 800d132:	4620      	mov	r0, r4
 800d134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d138:	f000 f81a 	bl	800d170 <_malloc_usable_size_r>
 800d13c:	4285      	cmp	r5, r0
 800d13e:	4606      	mov	r6, r0
 800d140:	d802      	bhi.n	800d148 <_realloc_r+0x34>
 800d142:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d146:	d8f4      	bhi.n	800d132 <_realloc_r+0x1e>
 800d148:	4629      	mov	r1, r5
 800d14a:	4640      	mov	r0, r8
 800d14c:	f7ff f9d4 	bl	800c4f8 <_malloc_r>
 800d150:	4607      	mov	r7, r0
 800d152:	2800      	cmp	r0, #0
 800d154:	d0ec      	beq.n	800d130 <_realloc_r+0x1c>
 800d156:	42b5      	cmp	r5, r6
 800d158:	462a      	mov	r2, r5
 800d15a:	4621      	mov	r1, r4
 800d15c:	bf28      	it	cs
 800d15e:	4632      	movcs	r2, r6
 800d160:	f7ff f94f 	bl	800c402 <memcpy>
 800d164:	4621      	mov	r1, r4
 800d166:	4640      	mov	r0, r8
 800d168:	f7ff f95a 	bl	800c420 <_free_r>
 800d16c:	463c      	mov	r4, r7
 800d16e:	e7e0      	b.n	800d132 <_realloc_r+0x1e>

0800d170 <_malloc_usable_size_r>:
 800d170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d174:	1f18      	subs	r0, r3, #4
 800d176:	2b00      	cmp	r3, #0
 800d178:	bfbc      	itt	lt
 800d17a:	580b      	ldrlt	r3, [r1, r0]
 800d17c:	18c0      	addlt	r0, r0, r3
 800d17e:	4770      	bx	lr

0800d180 <_sbrk>:
 800d180:	4a04      	ldr	r2, [pc, #16]	@ (800d194 <_sbrk+0x14>)
 800d182:	6811      	ldr	r1, [r2, #0]
 800d184:	4603      	mov	r3, r0
 800d186:	b909      	cbnz	r1, 800d18c <_sbrk+0xc>
 800d188:	4903      	ldr	r1, [pc, #12]	@ (800d198 <_sbrk+0x18>)
 800d18a:	6011      	str	r1, [r2, #0]
 800d18c:	6810      	ldr	r0, [r2, #0]
 800d18e:	4403      	add	r3, r0
 800d190:	6013      	str	r3, [r2, #0]
 800d192:	4770      	bx	lr
 800d194:	20014af4 	.word	0x20014af4
 800d198:	20014af8 	.word	0x20014af8

0800d19c <_init>:
 800d19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19e:	bf00      	nop
 800d1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a2:	bc08      	pop	{r3}
 800d1a4:	469e      	mov	lr, r3
 800d1a6:	4770      	bx	lr

0800d1a8 <_fini>:
 800d1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1aa:	bf00      	nop
 800d1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ae:	bc08      	pop	{r3}
 800d1b0:	469e      	mov	lr, r3
 800d1b2:	4770      	bx	lr
